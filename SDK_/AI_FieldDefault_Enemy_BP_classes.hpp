#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AI_FieldDefault_Enemy_BP

#include "Basic.hpp"

#include "Mantle_Asset_structs.hpp"
#include "ALS_Base_CharacterBP_classes.hpp"
#include "Engine_structs.hpp"
#include "MantleType_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AI_FieldDefault_Enemy_BP.AI_FieldDefault_Enemy_BP_C
// 0x02A0 (0x0DF0 - 0x0B50)
class AAI_FieldDefault_Enemy_BP_C final : public AALS_Base_CharacterBP_C
{
public:
	uint8                                         Pad_3A88[0x6];                                     // 0x0B42(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_AI_FieldDefault_Enemy_BP_C;         // 0x0B48(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Hit_Coillsion;                                     // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Spear_SM;                                          // 0x0B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Foot_Block_SM;                                     // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BodyMesh;                                          // 0x0B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VisualMeshes;                                      // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HeldObjectRoot;                                    // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_2m_Default;                                 // 0x0B90(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_Default;                                 // 0x0BD0(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_RH;                                      // 0x0C10(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_LH;                                      // 0x0C50(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_2H;                                      // 0x0C90(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_Box;                                     // 0x0CD0(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandRoll_Default;                                  // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpFront_Default;                                // 0x0D18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandRoll_RH;                                       // 0x0D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandRoll_LH;                                       // 0x0D28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandRoll_2H;                                       // 0x0D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpFront_RH;                                     // 0x0D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpFront_LH;                                     // 0x0D40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpFront_2H;                                     // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpBack_Default;                                 // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpBack_RH;                                      // 0x0D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpBack_LH;                                      // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpBack_2H;                                      // 0x0D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit_;                                              // 0x0D70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dash_;                                             // 0x0D71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ImPlayer;                                          // 0x0D72(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          SeePlayer;                                         // 0x0D73(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AtkPossible_;                                      // 0x0D74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Random_Roam_;                                      // 0x0D75(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A89[0x2];                                     // 0x0D76(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ANPC_MoveTarget_BP_C*                   FirstLocation_MoveTarget;                          // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         AttackAnd_Delay;                                   // 0x0D80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A8A[0x4];                                     // 0x0D84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           PowerAttack_Montage;                               // 0x0D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PowerAttack_Play_Rate;                             // 0x0D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A8B[0x4];                                     // 0x0D94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PowerAttack_Distance;                              // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PowerAttack_Persentage;                            // 0x0DA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A8C[0x4];                                     // 0x0DA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Simple_Attack_Montage;                             // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SimpleAttack_Play_Rate;                            // 0x0DB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A8D[0x4];                                     // 0x0DB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SimpleAttack_Distance;                             // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimpleAtk_Active;                                  // 0x0DC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PowerAtk_Active;                                   // 0x0DC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Brigre_CamView;                                    // 0x0DC2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Tutorial_Enemy;                                    // 0x0DC3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Respawning_;                                       // 0x0DC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A8E[0x3];                                     // 0x0DC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ATutorial_Enemy_Respawn_BP_C*           TutorialEnemy_Respawner;                           // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADefaultAI_DetectPlayerZone_C*          Detect_Zone;                                       // 0x0DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         DetectZone_AI_Integer;                             // 0x0DD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A8F[0x4];                                     // 0x0DDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABase_EnemyRespawn_BP_C*                AI_Spawner;                                        // 0x0DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABase_EnemyRespawn_BP_C*                Base_EnemySpawner;                                 // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AI_SetSpawner_Event(class ABase_EnemyRespawn_BP_C* Param_AI_Spawner);
	void AI_Zone_InPlayer_Event(bool Param_SeePlayer);
	void ArrayInteger_Set(int32 Param_DetectZone_AI_Integer, class ADefaultAI_DetectPlayerZone_C* DetectZone);
	void AttachToHand(class UStaticMesh* NewStaticMesh, class USkeletalMesh* NewSkeletalMesh, class UClass* NewAnimClass, bool LeftHand, const struct FVector& Offset);
	void AttackPossibleOFF();
	void AttackPossibleON();
	void AttackReset();
	void BndEvt__AI_Enemy_RedKnight_BP_Foot_Block_SM_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__AI_FieldDefault_Enemy_BP_Box_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ClearHeldObject();
	void ExecuteUbergraph_AI_FieldDefault_Enemy_BP(int32 EntryPoint);
	void Hit_And_Reset();
	void Hit_Event(bool BombHit_);
	void OnFail_1DCA62CF4AF32D6CB5EB55B207F9BC9D(EPathFollowingResult MovementResult);
	void OnFail_1DCA62CF4AF32D6CB5EB55B26B2D3779(EPathFollowingResult MovementResult);
	void OnSuccess_1DCA62CF4AF32D6CB5EB55B207F9BC9D(EPathFollowingResult MovementResult);
	void OnSuccess_1DCA62CF4AF32D6CB5EB55B26B2D3779(EPathFollowingResult MovementResult);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SimpleAttack();
	void Tutorial_Enemy_Aim(bool bValue);
	void UpdateHeldObject();
	void UpdateHeldObjectAnimations();
	void UserConstructionScript();
	struct FTransform BPI_Get_3P_PivotTarget();
	void BPI_Get_3P_TraceParams(struct FVector* TraceOrigin, double* TraceRadius, ETraceTypeQuery* TraceChannel);
	void BPI_Get_CaptainKnight_Attack(bool* SimpleAttack_);
	struct FVector BPI_Get_FP_CameraTarget();
	class UAnimMontage* GetGetUpAnimation(bool Param_RagdollFaceUp);
	struct FMantle_Asset GetMantleAsset(EMantleType MantleType);
	class UAnimMontage* GetRollAnimation();
	void MantleEnd();
	void MantleStart(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType);
	void OnOverlayStateChanged(EALS_OverlayState NewOverlayState);
	void RagdollEnd();
	void RagdollStart();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AI_FieldDefault_Enemy_BP_C">();
	}
	static class AAI_FieldDefault_Enemy_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAI_FieldDefault_Enemy_BP_C>();
	}
};
static_assert(alignof(AAI_FieldDefault_Enemy_BP_C) == 0x000010, "Wrong alignment on AAI_FieldDefault_Enemy_BP_C");
static_assert(sizeof(AAI_FieldDefault_Enemy_BP_C) == 0x000DF0, "Wrong size on AAI_FieldDefault_Enemy_BP_C");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, UberGraphFrame_AI_FieldDefault_Enemy_BP_C) == 0x000B48, "Member 'AAI_FieldDefault_Enemy_BP_C::UberGraphFrame_AI_FieldDefault_Enemy_BP_C' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Hit_Coillsion) == 0x000B50, "Member 'AAI_FieldDefault_Enemy_BP_C::Hit_Coillsion' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Spear_SM) == 0x000B58, "Member 'AAI_FieldDefault_Enemy_BP_C::Spear_SM' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Foot_Block_SM) == 0x000B60, "Member 'AAI_FieldDefault_Enemy_BP_C::Foot_Block_SM' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, BodyMesh) == 0x000B68, "Member 'AAI_FieldDefault_Enemy_BP_C::BodyMesh' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, VisualMeshes) == 0x000B70, "Member 'AAI_FieldDefault_Enemy_BP_C::VisualMeshes' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, HeldObjectRoot) == 0x000B78, "Member 'AAI_FieldDefault_Enemy_BP_C::HeldObjectRoot' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, StaticMesh) == 0x000B80, "Member 'AAI_FieldDefault_Enemy_BP_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, SkeletalMesh) == 0x000B88, "Member 'AAI_FieldDefault_Enemy_BP_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Mantle_2m_Default) == 0x000B90, "Member 'AAI_FieldDefault_Enemy_BP_C::Mantle_2m_Default' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Mantle_1m_Default) == 0x000BD0, "Member 'AAI_FieldDefault_Enemy_BP_C::Mantle_1m_Default' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Mantle_1m_RH) == 0x000C10, "Member 'AAI_FieldDefault_Enemy_BP_C::Mantle_1m_RH' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Mantle_1m_LH) == 0x000C50, "Member 'AAI_FieldDefault_Enemy_BP_C::Mantle_1m_LH' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Mantle_1m_2H) == 0x000C90, "Member 'AAI_FieldDefault_Enemy_BP_C::Mantle_1m_2H' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Mantle_1m_Box) == 0x000CD0, "Member 'AAI_FieldDefault_Enemy_BP_C::Mantle_1m_Box' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, LandRoll_Default) == 0x000D10, "Member 'AAI_FieldDefault_Enemy_BP_C::LandRoll_Default' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, GetUpFront_Default) == 0x000D18, "Member 'AAI_FieldDefault_Enemy_BP_C::GetUpFront_Default' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, LandRoll_RH) == 0x000D20, "Member 'AAI_FieldDefault_Enemy_BP_C::LandRoll_RH' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, LandRoll_LH) == 0x000D28, "Member 'AAI_FieldDefault_Enemy_BP_C::LandRoll_LH' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, LandRoll_2H) == 0x000D30, "Member 'AAI_FieldDefault_Enemy_BP_C::LandRoll_2H' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, GetUpFront_RH) == 0x000D38, "Member 'AAI_FieldDefault_Enemy_BP_C::GetUpFront_RH' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, GetUpFront_LH) == 0x000D40, "Member 'AAI_FieldDefault_Enemy_BP_C::GetUpFront_LH' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, GetUpFront_2H) == 0x000D48, "Member 'AAI_FieldDefault_Enemy_BP_C::GetUpFront_2H' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, GetUpBack_Default) == 0x000D50, "Member 'AAI_FieldDefault_Enemy_BP_C::GetUpBack_Default' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, GetUpBack_RH) == 0x000D58, "Member 'AAI_FieldDefault_Enemy_BP_C::GetUpBack_RH' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, GetUpBack_LH) == 0x000D60, "Member 'AAI_FieldDefault_Enemy_BP_C::GetUpBack_LH' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, GetUpBack_2H) == 0x000D68, "Member 'AAI_FieldDefault_Enemy_BP_C::GetUpBack_2H' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Hit_) == 0x000D70, "Member 'AAI_FieldDefault_Enemy_BP_C::Hit_' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Dash_) == 0x000D71, "Member 'AAI_FieldDefault_Enemy_BP_C::Dash_' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, ImPlayer) == 0x000D72, "Member 'AAI_FieldDefault_Enemy_BP_C::ImPlayer' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, SeePlayer) == 0x000D73, "Member 'AAI_FieldDefault_Enemy_BP_C::SeePlayer' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, AtkPossible_) == 0x000D74, "Member 'AAI_FieldDefault_Enemy_BP_C::AtkPossible_' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Random_Roam_) == 0x000D75, "Member 'AAI_FieldDefault_Enemy_BP_C::Random_Roam_' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, FirstLocation_MoveTarget) == 0x000D78, "Member 'AAI_FieldDefault_Enemy_BP_C::FirstLocation_MoveTarget' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, AttackAnd_Delay) == 0x000D80, "Member 'AAI_FieldDefault_Enemy_BP_C::AttackAnd_Delay' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, PowerAttack_Montage) == 0x000D88, "Member 'AAI_FieldDefault_Enemy_BP_C::PowerAttack_Montage' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, PowerAttack_Play_Rate) == 0x000D90, "Member 'AAI_FieldDefault_Enemy_BP_C::PowerAttack_Play_Rate' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, PowerAttack_Distance) == 0x000D98, "Member 'AAI_FieldDefault_Enemy_BP_C::PowerAttack_Distance' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, PowerAttack_Persentage) == 0x000DA0, "Member 'AAI_FieldDefault_Enemy_BP_C::PowerAttack_Persentage' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Simple_Attack_Montage) == 0x000DA8, "Member 'AAI_FieldDefault_Enemy_BP_C::Simple_Attack_Montage' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, SimpleAttack_Play_Rate) == 0x000DB0, "Member 'AAI_FieldDefault_Enemy_BP_C::SimpleAttack_Play_Rate' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, SimpleAttack_Distance) == 0x000DB8, "Member 'AAI_FieldDefault_Enemy_BP_C::SimpleAttack_Distance' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, SimpleAtk_Active) == 0x000DC0, "Member 'AAI_FieldDefault_Enemy_BP_C::SimpleAtk_Active' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, PowerAtk_Active) == 0x000DC1, "Member 'AAI_FieldDefault_Enemy_BP_C::PowerAtk_Active' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Brigre_CamView) == 0x000DC2, "Member 'AAI_FieldDefault_Enemy_BP_C::Brigre_CamView' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Tutorial_Enemy) == 0x000DC3, "Member 'AAI_FieldDefault_Enemy_BP_C::Tutorial_Enemy' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Respawning_) == 0x000DC4, "Member 'AAI_FieldDefault_Enemy_BP_C::Respawning_' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, TutorialEnemy_Respawner) == 0x000DC8, "Member 'AAI_FieldDefault_Enemy_BP_C::TutorialEnemy_Respawner' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Detect_Zone) == 0x000DD0, "Member 'AAI_FieldDefault_Enemy_BP_C::Detect_Zone' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, DetectZone_AI_Integer) == 0x000DD8, "Member 'AAI_FieldDefault_Enemy_BP_C::DetectZone_AI_Integer' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, AI_Spawner) == 0x000DE0, "Member 'AAI_FieldDefault_Enemy_BP_C::AI_Spawner' has a wrong offset!");
static_assert(offsetof(AAI_FieldDefault_Enemy_BP_C, Base_EnemySpawner) == 0x000DE8, "Member 'AAI_FieldDefault_Enemy_BP_C::Base_EnemySpawner' has a wrong offset!");

}

