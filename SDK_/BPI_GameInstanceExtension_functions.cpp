#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GameInstanceExtension

#include "Basic.hpp"

#include "BPI_GameInstanceExtension_classes.hpp"
#include "BPI_GameInstanceExtension_parameters.hpp"


namespace SDK
{

// Function BPI_GameInstanceExtension.BPI_GameInstanceExtension_C.GetCurrentLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CurrentLevelName                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameInstanceExtension_C::GetCurrentLevel(class FName* CurrentLevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstanceExtension_C", "GetCurrentLevel");

	Params::BPI_GameInstanceExtension_C_GetCurrentLevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentLevelName != nullptr)
		*CurrentLevelName = Parms.CurrentLevelName;
}


// Function BPI_GameInstanceExtension.BPI_GameInstanceExtension_C.GetCurrentPlayTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PlayTimeInSeconds                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameInstanceExtension_C::GetCurrentPlayTime(double* PlayTimeInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstanceExtension_C", "GetCurrentPlayTime");

	Params::BPI_GameInstanceExtension_C_GetCurrentPlayTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayTimeInSeconds != nullptr)
		*PlayTimeInSeconds = Parms.PlayTimeInSeconds;
}


// Function BPI_GameInstanceExtension.BPI_GameInstanceExtension_C.GetSaveGameManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UBP_SaveGameManager_C>SaveGameManager                                        (Parm, OutParm, HasGetValueTypeHash)

void IBPI_GameInstanceExtension_C::GetSaveGameManager(TSoftObjectPtr<class UBP_SaveGameManager_C>* SaveGameManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstanceExtension_C", "GetSaveGameManager");

	Params::BPI_GameInstanceExtension_C_GetSaveGameManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SaveGameManager != nullptr)
		*SaveGameManager = Parms.SaveGameManager;
}


// Function BPI_GameInstanceExtension.BPI_GameInstanceExtension_C.GetSettingsManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UBP_SettingsManager_C>SettingsManager                                        (Parm, OutParm, HasGetValueTypeHash)

void IBPI_GameInstanceExtension_C::GetSettingsManager(TSoftObjectPtr<class UBP_SettingsManager_C>* SettingsManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstanceExtension_C", "GetSettingsManager");

	Params::BPI_GameInstanceExtension_C_GetSettingsManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SettingsManager != nullptr)
		*SettingsManager = Parms.SettingsManager;
}


// Function BPI_GameInstanceExtension.BPI_GameInstanceExtension_C.OnApplyCustomSettings
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameInstanceExtension_C::OnApplyCustomSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstanceExtension_C", "OnApplyCustomSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameInstanceExtension.BPI_GameInstanceExtension_C.OnLoadSettingsFromFile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFilePath                        FilePath                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_GameInstanceExtension_C::OnLoadSettingsFromFile(const struct FFilePath& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstanceExtension_C", "OnLoadSettingsFromFile");

	Params::BPI_GameInstanceExtension_C_OnLoadSettingsFromFile Parms{};

	Parms.FilePath = std::move(FilePath);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameInstanceExtension.BPI_GameInstanceExtension_C.OnOpenLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAbsolute                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Options                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_GameInstanceExtension_C::OnOpenLevel(class FName LevelName, bool bAbsolute, const class FString& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstanceExtension_C", "OnOpenLevel");

	Params::BPI_GameInstanceExtension_C_OnOpenLevel Parms{};

	Parms.LevelName = LevelName;
	Parms.bAbsolute = bAbsolute;
	Parms.Options = std::move(Options);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameInstanceExtension.BPI_GameInstanceExtension_C.OnSaveSettingsToFile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FJsonObjectWrapper               JsonObject                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FFilePath                        FilePath                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_GameInstanceExtension_C::OnSaveSettingsToFile(const struct FJsonObjectWrapper& JsonObject, const struct FFilePath& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstanceExtension_C", "OnSaveSettingsToFile");

	Params::BPI_GameInstanceExtension_C_OnSaveSettingsToFile Parms{};

	Parms.JsonObject = std::move(JsonObject);
	Parms.FilePath = std::move(FilePath);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameInstanceExtension.BPI_GameInstanceExtension_C.OnSetCurrentPlayTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PlayTimeInSeconds                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameInstanceExtension_C::OnSetCurrentPlayTime(double PlayTimeInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstanceExtension_C", "OnSetCurrentPlayTime");

	Params::BPI_GameInstanceExtension_C_OnSetCurrentPlayTime Parms{};

	Parms.PlayTimeInSeconds = PlayTimeInSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameInstanceExtension.BPI_GameInstanceExtension_C.OnSetSoundClassVolume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundClass*                      SoundClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Volume                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameInstanceExtension_C::OnSetSoundClassVolume(class USoundClass* SoundClass, double Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameInstanceExtension_C", "OnSetSoundClassVolume");

	Params::BPI_GameInstanceExtension_C_OnSetSoundClassVolume Parms{};

	Parms.SoundClass = SoundClass;
	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}

}

