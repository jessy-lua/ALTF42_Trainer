#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FuncLib_0

#include "Basic.hpp"

#include "BP_FuncLib_0_classes.hpp"
#include "BP_FuncLib_0_parameters.hpp"


namespace SDK
{

// Function BP_FuncLib.BP_FuncLib_C.RandomRotSeeded
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRandomStream                    Seed                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void BP_FuncLib_0::UBP_FuncLib_C::RandomRotSeeded(const struct FRotator& Min, const struct FRotator& Max, struct FRandomStream& Seed, class UObject* __WorldContext, struct FRotator* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FuncLib_C", "RandomRotSeeded");

	Params::BP_FuncLib_C_RandomRotSeeded Parms{};

	Parms.Min = std::move(Min);
	Parms.Max = std::move(Max);
	Parms.Seed = std::move(Seed);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Seed = std::move(Parms.Seed);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function BP_FuncLib.BP_FuncLib_C.RandomVectorSeeded
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Min                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Max                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRandomStream                    Seed                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void BP_FuncLib_0::UBP_FuncLib_C::RandomVectorSeeded(const struct FVector& Min, const struct FVector& Max, const struct FRandomStream& Seed, class UObject* __WorldContext, struct FVector* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BP_FuncLib_C", "RandomVectorSeeded");

	Params::BP_FuncLib_C_RandomVectorSeeded Parms{};

	Parms.Min = std::move(Min);
	Parms.Max = std::move(Max);
	Parms.Seed = std::move(Seed);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}

}

