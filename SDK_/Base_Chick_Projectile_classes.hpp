#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Base_Chick_Projectile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Base_Chick_Projectile.Base_Chick_Projectile_C
// 0x0030 (0x02C8 - 0x0298)
class ABase_Chick_Projectile_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       AI_Overlap_Check;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Chicken_Wings_Random_Cue;                          // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Chicken;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileMovementComponent*           ProjectileMovement;                                // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ChickProjectile_Sphere;                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Base_Chick_Projectile_AI_Overlap_Check_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Base_Chick_Projectile_ChickProjectile_Sphere_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ExecuteUbergraph_Base_Chick_Projectile(int32 EntryPoint);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Base_Chick_Projectile_C">();
	}
	static class ABase_Chick_Projectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABase_Chick_Projectile_C>();
	}
};
static_assert(alignof(ABase_Chick_Projectile_C) == 0x000008, "Wrong alignment on ABase_Chick_Projectile_C");
static_assert(sizeof(ABase_Chick_Projectile_C) == 0x0002C8, "Wrong size on ABase_Chick_Projectile_C");
static_assert(offsetof(ABase_Chick_Projectile_C, UberGraphFrame) == 0x000298, "Member 'ABase_Chick_Projectile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABase_Chick_Projectile_C, AI_Overlap_Check) == 0x0002A0, "Member 'ABase_Chick_Projectile_C::AI_Overlap_Check' has a wrong offset!");
static_assert(offsetof(ABase_Chick_Projectile_C, Chicken_Wings_Random_Cue) == 0x0002A8, "Member 'ABase_Chick_Projectile_C::Chicken_Wings_Random_Cue' has a wrong offset!");
static_assert(offsetof(ABase_Chick_Projectile_C, SK_Chicken) == 0x0002B0, "Member 'ABase_Chick_Projectile_C::SK_Chicken' has a wrong offset!");
static_assert(offsetof(ABase_Chick_Projectile_C, ProjectileMovement) == 0x0002B8, "Member 'ABase_Chick_Projectile_C::ProjectileMovement' has a wrong offset!");
static_assert(offsetof(ABase_Chick_Projectile_C, ChickProjectile_Sphere) == 0x0002C0, "Member 'ABase_Chick_Projectile_C::ChickProjectile_Sphere' has a wrong offset!");

}

