#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Tutorial_Tooltip_Widget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ALTF42_Tutorial_ListData_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Tutorial_Tooltip_Widget.Tutorial_Tooltip_Widget_C
// 0x00B8 (0x0378 - 0x02C0)
class UTutorial_Tooltip_Widget_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       SprintJUMP_Anim;                                   // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ItemUseAnim;                                       // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ItemSelectAnim;                                    // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SprintAnim;                                        // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       RagdollAnim;                                       // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       JumpAnim;                                          // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ShootAnim;                                         // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       MoveANim;                                          // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Aim_Image;                                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemSelect_Image;                                  // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemUse_Image;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Jump02_Image;                                      // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Jump_Image;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Move_Image;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Ragdoll_Image;                                     // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Shoot_Image;                                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Sprint02_Image;                                    // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Sprint_Image;                                      // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EALTF42_Tutorial_ListData                     TutorialLIst;                                      // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3450[0x7];                                     // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UALTF42_GameInstance_C*                 ALTF42_GI;                                         // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AALTF4_Loco_BP_C*                       ALTF42_Char;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          GamePad_Key_;                                      // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_Tutorial_Tooltip_Widget(int32 EntryPoint);
	void InpActEvt_AnyKey_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void SequenceEvent__ENTRYPOINTTutorial_Tooltip_Widget();
	void SequenceEvent__ENTRYPOINTTutorial_Tooltip_Widget_0();
	void SequenceEvent__ENTRYPOINTTutorial_Tooltip_Widget_1();
	void SequenceEvent__ENTRYPOINTTutorial_Tooltip_Widget_2();
	void SequenceEvent__ENTRYPOINTTutorial_Tooltip_Widget_3();
	void SequenceEvent__ENTRYPOINTTutorial_Tooltip_Widget_4();
	void SequenceEvent__ENTRYPOINTTutorial_Tooltip_Widget_5();
	void SequenceEvent__ENTRYPOINTTutorial_Tooltip_Widget_6();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Tooltip_End_Event();
	void Tutorial_List_UP_Event(EALTF42_Tutorial_ListData Param_TutorialLIst);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Tutorial_Tooltip_Widget_C">();
	}
	static class UTutorial_Tooltip_Widget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTutorial_Tooltip_Widget_C>();
	}
};
static_assert(alignof(UTutorial_Tooltip_Widget_C) == 0x000008, "Wrong alignment on UTutorial_Tooltip_Widget_C");
static_assert(sizeof(UTutorial_Tooltip_Widget_C) == 0x000378, "Wrong size on UTutorial_Tooltip_Widget_C");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, UberGraphFrame) == 0x0002C0, "Member 'UTutorial_Tooltip_Widget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, SprintJUMP_Anim) == 0x0002C8, "Member 'UTutorial_Tooltip_Widget_C::SprintJUMP_Anim' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, ItemUseAnim) == 0x0002D0, "Member 'UTutorial_Tooltip_Widget_C::ItemUseAnim' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, ItemSelectAnim) == 0x0002D8, "Member 'UTutorial_Tooltip_Widget_C::ItemSelectAnim' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, SprintAnim) == 0x0002E0, "Member 'UTutorial_Tooltip_Widget_C::SprintAnim' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, RagdollAnim) == 0x0002E8, "Member 'UTutorial_Tooltip_Widget_C::RagdollAnim' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, JumpAnim) == 0x0002F0, "Member 'UTutorial_Tooltip_Widget_C::JumpAnim' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, ShootAnim) == 0x0002F8, "Member 'UTutorial_Tooltip_Widget_C::ShootAnim' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, MoveANim) == 0x000300, "Member 'UTutorial_Tooltip_Widget_C::MoveANim' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, Aim_Image) == 0x000308, "Member 'UTutorial_Tooltip_Widget_C::Aim_Image' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, ItemSelect_Image) == 0x000310, "Member 'UTutorial_Tooltip_Widget_C::ItemSelect_Image' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, ItemUse_Image) == 0x000318, "Member 'UTutorial_Tooltip_Widget_C::ItemUse_Image' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, Jump02_Image) == 0x000320, "Member 'UTutorial_Tooltip_Widget_C::Jump02_Image' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, Jump_Image) == 0x000328, "Member 'UTutorial_Tooltip_Widget_C::Jump_Image' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, Move_Image) == 0x000330, "Member 'UTutorial_Tooltip_Widget_C::Move_Image' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, Ragdoll_Image) == 0x000338, "Member 'UTutorial_Tooltip_Widget_C::Ragdoll_Image' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, Shoot_Image) == 0x000340, "Member 'UTutorial_Tooltip_Widget_C::Shoot_Image' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, Sprint02_Image) == 0x000348, "Member 'UTutorial_Tooltip_Widget_C::Sprint02_Image' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, Sprint_Image) == 0x000350, "Member 'UTutorial_Tooltip_Widget_C::Sprint_Image' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, TutorialLIst) == 0x000358, "Member 'UTutorial_Tooltip_Widget_C::TutorialLIst' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, ALTF42_GI) == 0x000360, "Member 'UTutorial_Tooltip_Widget_C::ALTF42_GI' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, ALTF42_Char) == 0x000368, "Member 'UTutorial_Tooltip_Widget_C::ALTF42_Char' has a wrong offset!");
static_assert(offsetof(UTutorial_Tooltip_Widget_C, GamePad_Key_) == 0x000370, "Member 'UTutorial_Tooltip_Widget_C::GamePad_Key_' has a wrong offset!");

}

