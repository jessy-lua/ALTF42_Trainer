#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MenuSystemLib

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_classes.hpp"
#include "EFontPalette_structs.hpp"
#include "EMenuInputWhitelistPreset_structs.hpp"
#include "EMenuInputAction_structs.hpp"
#include "EColorPalette_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MenuSystemLib.BP_MenuSystemLib_C
// 0x0000 (0x0028 - 0x0028)
class UBP_MenuSystemLib_C final : public UBlueprintFunctionLibrary
{
public:
	static void CreateNewJson(const struct FFilePath& FilePath, class UObject* __WorldContext, bool* Success);
	static void GetActionMappingByKey(class UInputMappingContext* InputMappingContext, const struct FKey& Key, bool bIsGamepadButton, class UObject* __WorldContext, struct FEnhancedActionKeyMapping* ActionMapping);
	static void GetColorByName(class UPDA_MenuSystemConfig_C* MenuSystemConfig, EColorPalette ColorName, class UObject* __WorldContext, struct FLinearColor* Color);
	static void GetFontStyleByName(class UPDA_MenuSystemConfig_C* MenuSystemConfig, EFontPalette FontName, class UObject* __WorldContext, struct FFFontStyle* FontStyle);
	static void GetJsonConfigFilePath(class UObject* __WorldContext, struct FFilePath* FilePath);
	static void GetMenuSystemConfigFromLibrary(class UObject* __WorldContext, class UPDA_MenuSystemConfig_C** MenuSystemConfig);
	static class ABP_MenuSystemActor_C* GetMenuSystemProActorFromLibrary(class UObject* __WorldContext);
	static void GetResolutionFromString(const class FString& ResolutionString, class UObject* __WorldContext, struct FIntPoint* Resolution);
	static void GetSupportedScreenResolutions(class UObject* __WorldContext, TArray<class FString>* SupportedResolutions, int32* CurrentResolutionIndex);
	static void GetSupportedScreenResolutionsWithAspectRatio(const class FString& AspectRatio, class UObject* __WorldContext, TArray<class FString>* SupportedResolutions);
	static void GetUILayer(class UObject* __WorldContext, struct FFUILayer* UILayer);
	static void IsKeyPressed(const struct FKey& PressedKey, class UInputAction* InputAction, class UInputMappingContext* InputMappingContext, class UObject* __WorldContext, bool* bIsKeyPressed, struct FEnhancedActionKeyMapping* EnhancedActionKeyMapping);
	static void IsKeyPressedAndWhitelisted(const struct FKey& PressedKey, class UInputAction* InputAction, class UInputMappingContext* InputMappingContext, EMenuInputWhitelistPreset InputWhitelistPreset, class UObject* __WorldContext, bool* bIsKeyPressedAndWhitelisted, struct FEnhancedActionKeyMapping* EnhancedActionKeyMapping);
	static void KeyToMenuInputAction(const struct FKey& PressedKey, class UInputMappingContext* InputMappingContext, EMenuInputWhitelistPreset InputWhitelistPreset, class UObject* __WorldContext, EMenuInputAction* MenuInputAction, struct FEnhancedActionKeyMapping* EnhancedActionKeyMapping, bool* bIsKeyPressed);
	static void KeyToUINavigation(const struct FKey& PressedKey, class UInputMappingContext* InputMappingContext, EMenuInputWhitelistPreset InputWhitelistPreset, class UObject* __WorldContext, EUINavigation* UINavigation, struct FEnhancedActionKeyMapping* EnhancedActionKeyMapping, bool* bIsKeyPressed);
	static void LevelReferenceToName(const TSoftObjectPtr<class UWorld> Level, class UObject* __WorldContext, class FName* LevelName);
	static void LoadBooleanFromJsonConfig(const class FString& FieldName, class UObject* __WorldContext, bool* FieldValue, bool* bSuccess);
	static void LoadFloatFromJsonConfig(const class FString& FieldName, class UObject* __WorldContext, double* FieldValue, bool* bSuccess);
	static void LoadIntegerFromJsonConfig(const class FString& FieldName, class UObject* __WorldContext, int32* FieldValue, bool* bSuccess);
	static void LoadJsonFromFile(const struct FFilePath& File, class UObject* __WorldContext, struct FJsonObjectWrapper* JsonObject, bool* Success);
	static void PrintMenuSystemError(const class FString& InString, float Duration, bool bPrintToScreen, class UObject* __WorldContext);
	static void ResolutionToAspectRatio(const struct FIntPoint& Resolution, class UObject* __WorldContext, class FString* AspectRatio);
	static class FString ResolutionToString(const struct FIntPoint& Resolution, class UObject* __WorldContext);
	static void SaveJsonToFile(const struct FJsonObjectWrapper& JsonObject, const struct FFilePath& File, class UObject* __WorldContext, bool* Success);
	static class FText SecondsToHoursMinutesSecondsText(float Seconds, class UObject* __WorldContext);
	static void SetFieldOfViewHorizontal(double FieldOfView, class UObject* __WorldContext);
	static void SetSoundClassVolumeProperty(class USoundClass* SoundClass, double VolumeValue, class UObject* __WorldContext);

	void GetControlsValues(class UObject* __WorldContext, bool* bInvertSticks, bool* bInvertXAxis, bool* bInvertYAxis, double* XAxisSensitivity, double* YAxisSensitivity, bool* VibrationEnabled, double* FieldOfView);
	void GetInputActionData(const struct FKey& PressedKey, const class FString& Platform, class UObject* __WorldContext, struct FFInputActionDataElement* InputNameData);
	void GetModifiedAxisValue(double Value, double SpeedMultiplier, bool InvertAxis, class UObject* __WorldContext, double* ModifiedValue);
	void IsKeyWhitelisted(const struct FEnhancedActionKeyMapping& EnhancedActionKeyMapping, const struct FKey& PressedKey, EMenuInputWhitelistPreset InputWhitelist, class UObject* __WorldContext, bool* bIsWhitelisted);
	void RunHardwareBenchmark(class UObject* __WorldContext);
	void SetBackgroundBlurRadius(class UBackgroundBlur* BackgroundBlur, double Radius, class UObject* __WorldContext);
	void SetBorderBrushRadius(class UBorder* Border, double Radius, class UObject* __WorldContext);
	void SetProgressBarRadius(class UProgressBar* ProgessBar, double Radius, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MenuSystemLib_C">();
	}
	static class UBP_MenuSystemLib_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MenuSystemLib_C>();
	}
};
static_assert(alignof(UBP_MenuSystemLib_C) == 0x000008, "Wrong alignment on UBP_MenuSystemLib_C");
static_assert(sizeof(UBP_MenuSystemLib_C) == 0x000028, "Wrong size on UBP_MenuSystemLib_C");

}

