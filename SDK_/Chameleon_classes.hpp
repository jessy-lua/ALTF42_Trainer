#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Chameleon

#include "Basic.hpp"

#include "Vector3DN_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ColorChannels_structs.hpp"
#include "LOOKPresetsEnum_structs.hpp"
#include "DrawingNoiseModes_structs.hpp"
#include "AdvancedEffectFeatures_structs.hpp"
#include "AdvancedEffectFeaturesNoCustomDepth_structs.hpp"
#include "Vector2DN_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Chameleon.Chameleon_C
// 0x2998 (0x2C30 - 0x0298)
class AChameleon_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMaterialBillboardComponent*            MaterialBillboard;                                 // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  InternalPP;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Bounding_Box;                                      // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Blur_TL_Alpha_7903F8524414A3145BFE94AAB4B704BA;    // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Blur_TL__Direction_7903F8524414A3145BFE94AAB4B704BA; // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FEC[0x3];                                     // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Blur_TL;                                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Bleach_Bypass;                                     // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Distance_Fog;                                      // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Channel_Clamper;                                   // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FED[0x5];                                     // 0x02CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MChannelClamper;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IChannelClamper;                                   // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Channel_Swapper;                                   // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Screen_Drops;                                      // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Alcohol;                                           // 0x02E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Drug;                                              // 0x02E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Mosaic;                                            // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Pixel_Dissolve;                                    // 0x02E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Blur;                                              // 0x02E6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FEE[0x1];                                     // 0x02E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MBleachBypass;                                     // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              MDistanceFog;                                      // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              MChannelSwapper;                                   // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              MScreenDrops;                                      // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              MAlcohol;                                          // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              MDrug;                                             // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              MMosaic;                                           // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              MPixelDissolve;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              MBlur;                                             // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Channel_Clamper_Red_Intensity;                     // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Channel_Clamper_Green_Intensity;                   // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Channel_Clamper_Blue_Intensity;                    // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IBleachBypass;                                     // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IDistanceFog;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IChannelSwapper;                                   // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EColorChannels                                Channel_Swapper_Red;                               // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EColorChannels                                Channel_Swapper_Green;                             // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EColorChannels                                Channel_Swapper_Blue;                              // 0x0362(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FEF[0x5];                                     // 0x0363(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               IScreenDrops;                                      // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IAlcohol;                                          // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IDrug;                                             // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IMosaic;                                           // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IPixelDissolve;                                    // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IBlur;                                             // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Screen_Drops_Layer_1_Map;                          // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Layer_1_Intensity;                    // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Mosaic_Tiling_X;                                   // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Alcohol_Speed;                                     // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Drug_Speed;                                        // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Pixel_Dissolve_Intensity;                          // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Blur_Amount;                                       // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          ASCII;                                             // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FF0[0x7];                                     // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MAscii;                                            // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IAscii;                                            // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Colorize;                                          // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FF1[0x7];                                     // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MColorize;                                         // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IColorize;                                         // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Colorize_Detail;                                   // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Comic;                                             // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FF2[0x7];                                     // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MComic;                                            // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IComic;                                            // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Comic_Blend_Color;                                 // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Comic_Threshold;                                   // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Edge_Detect;                                       // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FF3[0x7];                                     // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MEdgeDetect;                                       // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IEdgeDetect;                                       // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Emboss;                                            // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FF4[0x7];                                     // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MEmboss;                                           // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IEmboss;                                           // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Glitch;                                            // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FF5[0x7];                                     // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MGlitch;                                           // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IGlitch;                                           // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Glitch_Speed;                                      // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Glitch_Lines;                                      // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Glitch_Blocking;                                   // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Monitor_Effects;                                   // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FF6[0x7];                                     // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MGrainNLines;                                      // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IGrainNLines;                                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Monitor_Effects_Line_Count;                        // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Monitor_Effects_Intensity_1;                       // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Monitor_Effects_Intensity_2;                       // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Hard_Emboss;                                       // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FF7[0x7];                                     // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MHardEmboss;                                       // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IHardEmboss;                                       // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Hue_Panner;                                        // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FF8[0x7];                                     // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MHuePanner;                                        // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IHuePanner;                                        // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Hue_Panner_Phase;                                  // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Hue_Panner_Animated;                               // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FF9[0x7];                                     // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Hue_Panner_Speed;                                  // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Monochrome;                                        // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FFA[0x7];                                     // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MMonochrome;                                       // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IMonochrome;                                       // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Monochrome_Color;                                  // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Radial_Blur;                                       // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FFB[0x7];                                     // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MRadialBlur;                                       // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IRadialBlur;                                       // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Radial_Blur_Width;                                 // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         Radial_Blur_Samples;                               // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Scratches;                                         // 0x055C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FFC[0x3];                                     // 0x055D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MScratches;                                        // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IScratches;                                        // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Screen_Waves;                                      // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FFD[0x7];                                     // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MScreenWaves;                                      // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IScreenWaves;                                      // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Waves_X_Tiling;                             // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Waves_Y_Tiling;                             // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Monitor_Effects_Distortion_1;                      // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Monitor_Effects_Distortion_2;                      // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Monitor_Effects_Picture_Scale;                     // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Distance_Fog_Near_Color;                           // 0x05B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Distance_Fog_Far_Color;                            // 0x05C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Fog_Distance;                             // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Scratches_Distortion_Map;                          // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Scratches_Distortion_Amount;                       // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Scratches_Color;                                   // 0x05E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Layer_1_Speed;                        // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Layer_1_Noise;                        // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Screen_Drops_Layer_2_Map;                          // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Layer_2_Intensity;                    // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Layer_2_Speed;                        // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Layer_2_Noise;                        // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Screen_Drops_Layer_3_Map;                          // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Layer_3_Intensity;                    // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Layer_3_Speed;                        // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert;                                            // 0x0640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FFE[0x7];                                     // 0x0641(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MInvert;                                           // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IInvert;                                           // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Iridescent;                                        // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FFF[0x7];                                     // 0x0659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MIridescent;                                       // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IIridescent;                                       // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Iridescent_Iridescence;                            // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Kuwahara;                                          // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3000[0x7];                                     // 0x0679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MKuwahara;                                         // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IKuwahara;                                         // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Kuwahara_Amount;                                   // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Pulse;                                             // 0x0694(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3001[0x3];                                     // 0x0695(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MPulse;                                            // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IPulse;                                            // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Pulse_Center_X;                                    // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Pulse_Center_Y;                                    // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Pulse_Speed;                                       // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Pulse_Smoothing;                                   // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Squares;                                           // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3002[0x7];                                     // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MSquares;                                          // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ISquares;                                          // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Squares_Scale;                                     // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Squares_Ratio;                                     // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Squares_Radius;                                    // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Squares_Brightness;                                // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Tiles;                                             // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3003[0x7];                                     // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MTiles;                                            // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ITiles;                                            // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Tiles_Centered;                                    // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3004[0x7];                                     // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Tiles_Count;                                       // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          TV_Noise;                                          // 0x0728(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3005[0x7];                                     // 0x0729(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MTVNoise;                                          // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ITVNoise;                                          // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TV_Noise_Contrast;                                 // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        TV_Noise_Intensity;                                // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FPostProcessSettings                   Native_Post_Process;                               // 0x0750(0x06E0)(Edit, BlueprintVisible)
	bool                                          LOOK_;                                             // 0x0E30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	ELOOKPresetsEnum                              LOOK__Presets;                                     // 0x0E31(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Circles;                                           // 0x0E32(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3006[0x5];                                     // 0x0E33(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MCircles;                                          // 0x0E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ICircles;                                          // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Circles_Ratio;                                     // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Circles_Tiling;                                    // 0x0E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Sonar;                                             // 0x0E58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3007[0x7];                                     // 0x0E59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MSonar;                                            // 0x0E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ISonar;                                            // 0x0E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Sonar_Animated;                                    // 0x0E70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3008[0x7];                                     // 0x0E71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sonar_Animation_Speed;                             // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sonar_Color;                                       // 0x0E80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sonar_Color_Intensity;                             // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Sonar_Hit_Texture;                                 // 0x0E98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sonar_Hit_Texture_Scale;                           // 0x0EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sonar_Depth;                                       // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sonar_Wave_Distance;                               // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sonar_Distortion_Intensity;                        // 0x0EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sonar_Sharpness;                                   // 0x0EC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Alcohol_Offset;                                    // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Distance_Distortion;                               // 0x0ED0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3009[0x7];                                     // 0x0ED1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MDistanceDistortion;                               // 0x0ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IDistanceDistortion;                               // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Distance_Distortion_Normal;                        // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Distortion_Amount;                        // 0x0EF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Distortion_Edge_Distance;                 // 0x0EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Distortion_Edge_Fading;                   // 0x0F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Distortion_Movement_Speed;                // 0x0F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Distortion_Movement_Scale;                // 0x0F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Distortion_Affected_Brightness;           // 0x0F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Distortion_Unaffected_Brightness;         // 0x0F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Drawing;                                           // 0x0F28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_300A[0x7];                                     // 0x0F29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MDrawing;                                          // 0x0F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IDrawing;                                          // 0x0F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Drawing_Paper_Texture;                             // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	EDrawingNoiseModes                            Drawing_Noise_Algorithm;                           // 0x0F48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_300B[0x7];                                     // 0x0F49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Drawing_Ink_Amount;                                // 0x0F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Drawing_Liner_Amount;                              // 0x0F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Drawing_Blending_Color;                            // 0x0F60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Magic_Transitions;                                 // 0x0F70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_300C[0x7];                                     // 0x0F71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MMagicTransitions;                                 // 0x0F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IMagicTransitions;                                 // 0x0F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Magic_Transitions_Final_Texture;                   // 0x0F88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Magic_Transitions_Mask_Texture;                    // 0x0F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Magic_Transitions_Transition_Amount;               // 0x0F98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Magic_Transitions_Flashing_Intensity;              // 0x0FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Magic_Transitions_Flashing_Tolerance;              // 0x0FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Magic_Transitions_Flashing_Color;                  // 0x0FB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Screen_Damage;                                     // 0x0FC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_300D[0x7];                                     // 0x0FC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MScreenDamage;                                     // 0x0FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IScreenDamage;                                     // 0x0FD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Screen_Damage_Texture;                             // 0x0FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Damage_Intensity;                           // 0x0FE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Damage_Distortion;                          // 0x0FE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Screen_Damage_Tint;                                // 0x0FF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Damage_Edge_Size;                           // 0x1000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Damage_Fading;                              // 0x1008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Screen_Decals;                                     // 0x1010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_300E[0x7];                                     // 0x1011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MScreenDecals;                                     // 0x1018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IScreenDecals;                                     // 0x1020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Screen_Decals_Slot_1_Minus_Texture;                // 0x1028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_1_Minus_Distortion;             // 0x1030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_1_Minus_Intensity;              // 0x1038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_1_Minus_Position_X;             // 0x1040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_1_Minus_Position_Y;             // 0x1048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_1_Minus_Rotation;               // 0x1050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_1_Minus_Size;                   // 0x1058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Screen_Decals_Slot_2_Minus_Texture;                // 0x1060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_2_Minus_Distortion;             // 0x1068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_2_Minus_Intensity;              // 0x1070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_2_Minus_Position_X;             // 0x1078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_2_Minus_Position_Y;             // 0x1080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_2_Minus_Rotation;               // 0x1088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_2_Minus_Size;                   // 0x1090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Screen_Decals_Slot_3_Minus_Texture;                // 0x1098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_3_Minus_Distortion;             // 0x10A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_3_Minus_Intensity;              // 0x10A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_3_Minus_Position_X;             // 0x10B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_3_Minus_Position_Y;             // 0x10B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_3_Minus_Rotation;               // 0x10C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_3_Minus_Size;                   // 0x10C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Screen_Decals_Slot_4_Minus_Texture;                // 0x10D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_4_Minus_Distortion;             // 0x10D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_4_Minus_Intensity;              // 0x10E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_4_Minus_Position_X;             // 0x10E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_4_Minus_Position_Y;             // 0x10F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_4_Minus_Rotation;               // 0x10F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Decals_Slot_4_Minus_Size;                   // 0x1100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Sharpen;                                           // 0x1108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_300F[0x7];                                     // 0x1109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MSharpen;                                          // 0x1110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ISharpen;                                          // 0x1118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Sharpen_Value;                                     // 0x1120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Toon_Shading;                                      // 0x1128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3010[0x7];                                     // 0x1129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MToonShading;                                      // 0x1130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IToonShading;                                      // 0x1138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Toon_Shading_Use_Diffuse_Buffer;                   // 0x1140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3011[0x7];                                     // 0x1141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Toon_Shading_Details;                              // 0x1148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Toon_Shading_Fading_;                              // 0x1150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Toon_Shading_Size;                                 // 0x1158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Toon_Shading_Sobel_Strength;                       // 0x1160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Anamorphic_Lens_Flares;                            // 0x1168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3012[0x7];                                     // 0x1169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MAnamorphicLensFlares;                             // 0x1170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IAnamorphicLensFlares;                             // 0x1178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Anamorphic_Lens_Flares_Linear_Color;               // 0x1180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Anamorphic_Lens_Flares_Exposure_Scale;             // 0x1188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Anamorphic_Lens_Flares_Threshold;                  // 0x1190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Anamorphic_Lens_Flares_Intensity;                  // 0x1198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Anamorphic_Lens_Flares_Steps;                      // 0x11A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Anamorphic_Lens_Flares_Length;                     // 0x11A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Anamorphic_Lens_Flares_Tint;                       // 0x11B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Frost;                                             // 0x11C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3013[0x7];                                     // 0x11C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MFrost;                                            // 0x11C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IFrost;                                            // 0x11D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Frost_Texture;                                     // 0x11D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Frost_Colorization;                                // 0x11E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Frost_Distortion_Strength;                         // 0x11E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Frost_Visible_Area;                                // 0x11F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ASCII_Color_Multiplier;                            // 0x11F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Neon;                                              // 0x1208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3014[0x7];                                     // 0x1209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MNeon;                                             // 0x1210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               INeon;                                             // 0x1218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Neon_Color;                                        // 0x1220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Neon_Background_Color;                             // 0x1230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Neon_Power;                                        // 0x1240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Neon_Noise;                                        // 0x1248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Neon_Noise_Speed;                                  // 0x1250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Custom_Depth_Highlighter;                          // 0x1258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3015[0x7];                                     // 0x1259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MCustomDepthHighlighter;                           // 0x1260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ICustomDepthHighlighter;                           // 0x1268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Custom_Depth_Highlighter_Highlight_Color;          // 0x1270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Depth_Highlighter_Highlight_Opacity;        // 0x1280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Custom_Depth_Highlighter__Clip_;                   // 0x1288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3016[0x7];                                     // 0x1289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MCustomDepthHighlighterClip;                       // 0x1290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ICustomDepthHighlighterClip;                       // 0x1298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Custom_Depth_Highlighter__C__Highlight_Color;      // 0x12A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Depth_Highlighter__C__Highlight_Opacity;    // 0x12B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Edge_Detect_Threshold;                             // 0x12B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Scratches_Noising;                                 // 0x12C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x12C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Unbound;                                           // 0x12C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3017[0x6];                                     // 0x12CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterial*>                      AllMaterials;                                      // 0x12D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Screen_Drops_Layer_3_Noise;                        // 0x12E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Screen_Drops_Diffuse_Color;                        // 0x12E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Splashes_Amount;                      // 0x12F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Splashes_Tiling;                      // 0x1300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Splashes_Intensity;                   // 0x1308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Bump;                                 // 0x1310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          TwoD_Transform;                                    // 0x1318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3018[0x7];                                     // 0x1319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              M2DTransform;                                      // 0x1320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               I2DTransform;                                      // 0x1328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Kaleidoscope;                                      // 0x1330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3019[0x7];                                     // 0x1331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MKaleidoscope;                                     // 0x1338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IKaleidoscope;                                     // 0x1340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Letterboxing;                                      // 0x1348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301A[0x7];                                     // 0x1349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MLetterboxing;                                     // 0x1350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ILetterboxing;                                     // 0x1358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Snow;                                              // 0x1360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301B[0x7];                                     // 0x1361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MSnow;                                             // 0x1368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ISnow;                                             // 0x1370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TwoD_Transform_Anchor_Point__X_;                   // 0x1378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        TwoD_Transform_Anchor_Point__Y_;                   // 0x1380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        TwoD_Transform_Rotate;                             // 0x1388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        TwoD_Transform_Pan__X_;                            // 0x1390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        TwoD_Transform_Pan__Y_;                            // 0x1398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        TwoD_Transform_Scale__X_;                          // 0x13A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        TwoD_Transform_Scale__Y_;                          // 0x13A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          TwoD_Transform_Tiled;                              // 0x13B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301C[0x3];                                     // 0x13B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Kaleidoscope_Amount;                               // 0x13B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Kaleidoscope_SphericalDistortion;                  // 0x13B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Kaleidoscope_Warp;                                 // 0x13C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Kaleidoscope_FMul;                                 // 0x13C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Letterboxing_Texture;                              // 0x13D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Letterboxing_Size;                                 // 0x13D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Letterboxing_Horizontal;                           // 0x13E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Letterboxing_Vertical;                             // 0x13E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301D[0x6];                                     // 0x13E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Snow_Amount;                                       // 0x13E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Distortion;                                   // 0x13F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Size;                                         // 0x13F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Speed__X_;                                    // 0x1400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Speed__Y_;                                    // 0x1408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Drawing_Animation_Speed;                           // 0x1410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Fog_Edge_Sharpness;                       // 0x1418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Drops_Diffuse_Intensity;                    // 0x1420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          World_Splash;                                      // 0x1428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301E[0x7];                                     // 0x1429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MWorldSplash;                                      // 0x1430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IWorldSplash;                                      // 0x1438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        World_Splash_Distort;                              // 0x1440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        World_Splash_Smoothness;                           // 0x1448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        World_Splash_Tiling;                               // 0x1450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           World_Splash_Color_Tint;                           // 0x1458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         Blur_Samples;                                      // 0x1468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Frost_Color;                                       // 0x146C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301F[0x4];                                     // 0x147C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Comic_PreMultiplier;                               // 0x1480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Comic_Pre_Add;                                     // 0x1488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Comic_Desaturation;                                // 0x1490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          World_Glitch;                                      // 0x1498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3020[0x7];                                     // 0x1499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MWorldGlitch;                                      // 0x14A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IWorldGlitch;                                      // 0x14A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          World_Glitch_Animated;                             // 0x14B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3021[0x7];                                     // 0x14B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        World_Glitch_Animation_Speed;                      // 0x14B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        World_Glitch_Distance;                             // 0x14C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        World_Glitch_Distance_Sharpness;                   // 0x14C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        World_Glitch_Phase;                                // 0x14D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        World_Glitch_Power;                                // 0x14D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                World_Glitch_Grid_Position;                        // 0x14E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                World_Glitch_Grid_Size;                            // 0x14F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Digitize;                                          // 0x1510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3022[0x7];                                     // 0x1511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MDigitize;                                         // 0x1518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IDigitize;                                         // 0x1520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Digitize_Cell_Color;                               // 0x1528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Digitize_Cell_Position;                            // 0x1538(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Digitize_Cell_Position_Over_Time;                  // 0x1550(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Digitize_Distance;                                 // 0x1568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Digitize_Distance_Sharpness;                       // 0x1570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Digitize_Cell_Size;                                // 0x1578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Digitize_Cell_Color_Multiplier;                    // 0x1580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Digitize_Cell_Distortion;                          // 0x1588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Digitize_Background_Color_Multiplier;              // 0x1590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Alarm;                                             // 0x1598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3023[0x7];                                     // 0x1599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MAlarm;                                            // 0x15A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IAlarm;                                            // 0x15A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Alarm_Color;                                       // 0x15B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Alarm_Speed;                                       // 0x15C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Sketch;                                            // 0x15C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3024[0x7];                                     // 0x15C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MSketch;                                           // 0x15D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ISketch;                                           // 0x15D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sketch_Color;                                      // 0x15E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sketch_Background_Color;                           // 0x15F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sketch_Power;                                      // 0x1600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Sketch_World_Space;                                // 0x1608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3025[0x7];                                     // 0x1609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sketch_Pattern_Rotation;                           // 0x1610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sketch_Pattern_Speed;                              // 0x1618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Custom_Depth_Highlighter_Outline_Color;            // 0x1620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Depth_Highlighter_Outline_Opacity;          // 0x1630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Custom_Depth_Highlighter__C__Outline_Color;        // 0x1638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Depth_Highlighter__C__Outline_Opacity;      // 0x1648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Wired;                                             // 0x1650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3026[0x7];                                     // 0x1651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               IWired;                                            // 0x1658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              MWired;                                            // 0x1660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Wired_Color;                                       // 0x1668(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Wired_Power;                                       // 0x1678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Mosaic_Tiling_Y;                                   // 0x1680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Mosaic_Mask;                                       // 0x1688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Mosaic_Mask_Intensity;                             // 0x1690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Mosaic_Minus_Advanced;                             // 0x1698(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Drug_Minus_Advanced;                               // 0x16D0(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Alcohol_Minus_Advanced;                            // 0x1708(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	double                                        Pixel_Dissolve_Scale;                              // 0x1740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Pixel_Dissolve_Jitter;                             // 0x1748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Pixel_Dissolve_Minus_Advanced;                     // 0x1750(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Channel_Clamper_Minus_Advanced;                    // 0x1788(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Channel_Swapper_Minus_Advanced;                    // 0x17C0(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Bleach_Bypass_Minus_Advanced;                      // 0x17F8(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Blur_Minus_Advanced;                               // 0x1830(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	double                                        ASCII_PreMultiplier;                               // 0x1868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                ASCII_Minus_Advanced;                              // 0x1870(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	double                                        Colorize_Pre_Add;                                  // 0x18A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Colorize_Minus_Advanced;                           // 0x18B0(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Edge_Detect_Minus_Advanced;                        // 0x18E8(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Emboss_Minus_Advanced;                             // 0x1920(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Hard_Emboss_Minus_Advanced;                        // 0x1958(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	double                                        Glitch_Grid_Distortion_Power;                      // 0x1990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Glitch_Grid_Distortion_Size;                       // 0x1998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Glitch_Grid_Distortion_Speed;                      // 0x19A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Glitch_Minus_Advanced;                             // 0x19A8(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          Monitor_Effects_Tiled;                             // 0x19E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3027[0x7];                                     // 0x19E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAdvancedEffectFeatures                Monitor_Effects_Minus_Advanced;                    // 0x19E8(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Hue_Panner_Minus_Advanced;                         // 0x1A20(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Monochrome_Minus_Advanced;                         // 0x1A58(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Radial_Blur_Center;                                // 0x1A90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Radial_Blur_Sample_Offset;                         // 0x1AA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Radial_Blur_Minus_Advanced;                        // 0x1AB0(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Scratches_Minus_Advanced;                          // 0x1AE8(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Screen_Waves_Minus_Advanced;                       // 0x1B20(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Distance_Fog_Minus_Advanced;                       // 0x1B58(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Screen_Drops_Minus_Advanced;                       // 0x1B90(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Invert_Minus_Advanced;                             // 0x1BC8(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Iridescent_Minus_Advanced;                         // 0x1C00(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Kuwahara_Minus_Advanced;                           // 0x1C38(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Pulse_Minus_Advanced;                              // 0x1C70(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Squares_Minus_Advanced;                            // 0x1CA8(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Tiles_Minus_Advanced;                              // 0x1CE0(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                TV_Noise_Minus_Advanced;                           // 0x1D18(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Circles_Minus_Advanced;                            // 0x1D50(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Sonar_Minus_Advanced;                              // 0x1D88(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Distance_Distortion_Minus_Advanced;                // 0x1DC0(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Drawing_Minus_Advanced;                            // 0x1DF8(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Magic_Transitions_Minus_Advanced;                  // 0x1E30(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Screen_Damage_Minus_Advanced;                      // 0x1E68(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Screen_Decals_Minus_Advanced;                      // 0x1EA0(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Sharpen_Minus_Advanced;                            // 0x1ED8(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Toon_Shading_Minus_Advanced;                       // 0x1F10(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Anamorphic_Lens_Flares_Minus_Advanced;             // 0x1F48(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Frost_Minus_Advanced;                              // 0x1F80(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Neon_Minus_Advanced;                               // 0x1FB8(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeaturesNoCustomDepth   Custom_Depth_Highlighter_Minus_Advanced;           // 0x1FF0(0x0030)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeaturesNoCustomDepth   Custom_Depth_Highlighter__Clip__Minus_Advanced;    // 0x2020(0x0030)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TwoD_Transform_Background_Color;                   // 0x2050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                TwoD_Transform_Minus_Advanced;                     // 0x2060(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Kaleidoscope_Minus_Advanced;                       // 0x2098(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Letterboxing_Minus_Advanced;                       // 0x20D0(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Snow_Minus_Advanced;                               // 0x2108(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                World_Splash_Minus_Advanced;                       // 0x2140(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                World_Glitch_Minus_Advanced;                       // 0x2178(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Digitize_Minus_Advanced;                           // 0x21B0(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Alarm_Minus_Advanced;                              // 0x21E8(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Sketch_Minus_Advanced;                             // 0x2220(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Wired_Minus_Advanced;                              // 0x2258(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Comic_Pattern_Intensity;                           // 0x2290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         Comic_Pattern_Line_Count;                          // 0x2298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3028[0x4];                                     // 0x229C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Comic_Pattern_Rotation;                            // 0x22A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Comic_Minus_Advanced;                              // 0x22A8(0x0038)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          Actor_Featurette;                                  // 0x22E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3029[0x7];                                     // 0x22E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MActorFeaturette;                                  // 0x22E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IActorFeaturette;                                  // 0x22F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Actor_Featurette_Background_Multiplier;            // 0x22F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Actor_Featurette_Background_Desaturation;          // 0x2308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Actor_Featurette_Foreground_Multiplier;            // 0x2310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Actor_Featurette_Foreground_Saturation;            // 0x2320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Actor_Featurette_Blur_Amount;                      // 0x2328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         Actor_Featurette_Blur_Samples;                     // 0x2330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         Actor_Featurette_Stencil_Mask;                     // 0x2334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeaturesNoCustomDepth   Actor_Featurette_Minus_Advanced;                   // 0x2338(0x0030)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Infected;                                          // 0x2368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_302A[0x7];                                     // 0x2369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MInfected;                                         // 0x2370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IInfected;                                         // 0x2378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Infected_Distortion_Amount;                        // 0x2380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Infected_Smoothness;                               // 0x2388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Infected_Speed;                                    // 0x2390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Infected_TransformZ;                               // 0x2398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Infected_Minus_Advanced;                           // 0x23A0(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Colored_AO;                                        // 0x23D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_302B[0x7];                                     // 0x23D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MColoredAO;                                        // 0x23E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IColoredAO;                                        // 0x23E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Colored_AO_Color;                                  // 0x23F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Colored_AO_Intensity;                              // 0x2400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Colored_AO_Minus_Advanced;                         // 0x2408(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Camera_Shake;                                      // 0x2440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_302C[0x7];                                     // 0x2441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MCameraShake;                                      // 0x2448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ICameraShake;                                      // 0x2450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Camera_Shake_Power__X_;                            // 0x2458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Camera_Shake_Power__Y_;                            // 0x2460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Camera_Shake_Frequency;                            // 0x2468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Camera_Shake_Minus_Advanced;                       // 0x2470(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Disco_Ball;                                        // 0x24A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_302D[0x7];                                     // 0x24A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MDiscoBall;                                        // 0x24B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IDiscoBall;                                        // 0x24B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector3DN                             Disco_Ball_WS_Center;                              // 0x24C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Disco_Ball_Color_1;                                // 0x24CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Disco_Ball_Color_2;                                // 0x24DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_302E[0x4];                                     // 0x24EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Disco_Ball_Block_Scale;                            // 0x24F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Disco_Ball_Block_Distribution;                     // 0x2508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Disco_Ball_Rotation_Speed;                         // 0x2510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Disco_Ball_Manual_Rotation;                        // 0x2518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Disco_Ball_Minus_Advanced;                         // 0x2520(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Hazy_Lights;                                       // 0x2558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_302F[0x7];                                     // 0x2559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MHazyLights;                                       // 0x2560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IHazyLights;                                       // 0x2568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2DN                             Hazy_Lights_Move_Speed;                            // 0x2570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector2DN                             Hazy_Lights_Position;                              // 0x2578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Hazy_Lights_Minus_Advanced;                        // 0x2580(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Melted_World;                                      // 0x25B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3030[0x7];                                     // 0x25B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MMeltedWorld;                                      // 0x25C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IMeltedWorld;                                      // 0x25C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Melted_World_Size;                                 // 0x25D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Melted_World_Distance;                             // 0x25E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Melted_World_Power;                                // 0x25F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Melted_World_Sharpness;                            // 0x25F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Melted_World_Minus_Advanced;                       // 0x2600(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Selective_Color;                                   // 0x2638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3031[0x7];                                     // 0x2639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MSelectiveColor;                                   // 0x2640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ISelectiveColor;                                   // 0x2648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Selective_Color_Mask_Color;                        // 0x2650(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Selective_Color_Hue_Tolerance;                     // 0x2660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Selective_Color_Saturation_Tolerance;              // 0x2668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Selective_Color_Value_Tolerance;                   // 0x2670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Selective_Color_Minus_Advanced;                    // 0x2678(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Screen_Fire;                                       // 0x26B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3032[0x7];                                     // 0x26B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MScreenFire;                                       // 0x26B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IScreenFire;                                       // 0x26C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Screen_Fire_Color;                                 // 0x26C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Fire_Distortion_Amount;                     // 0x26D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Fire_Mask_Contrast;                         // 0x26E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Fire_Mask_Scale;                            // 0x26E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Fire_Flame_Tiling;                          // 0x26F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Screen_Fire_Speed;                                 // 0x26F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Screen_Fire_Minus_Advanced;                        // 0x2700(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Haunted;                                           // 0x2738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3033[0x7];                                     // 0x2739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MHaunted;                                          // 0x2740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IHaunted;                                          // 0x2748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Haunted_Amount;                                    // 0x2750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Haunted_Mask_Scale;                                // 0x2758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Haunted_Texture;                                   // 0x2760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Haunted_Texture_Scale;                             // 0x2768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Haunted_Minus_Advanced;                            // 0x2770(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Grid_Cell;                                         // 0x27A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3034[0x7];                                     // 0x27A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MGridCell;                                         // 0x27B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IGridCell;                                         // 0x27B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Grid_Cell_Animated;                                // 0x27C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3035[0x7];                                     // 0x27C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Grid_Cell_Animation_Speed;                         // 0x27C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Grid_Cell_Color;                                   // 0x27D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Grid_Cell_Void_Color;                              // 0x27E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Grid_Cell_Tiling;                                  // 0x27F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Grid_Cell_Transition_Amount;                       // 0x27F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Lens_Distortion;                                   // 0x2800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3036[0x7];                                     // 0x2801(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MLensDistortion;                                   // 0x2808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ILensDistortion;                                   // 0x2810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Lens_Distortion_Optic_Refinement;                  // 0x2818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lens_Distortion_Optic_Size;                        // 0x2820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lens_Distortion_Optic_Position_X;                  // 0x2828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lens_Distortion_Optic_Position_Y;                  // 0x2830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Lens_Distortion_Scope_Texture;                     // 0x2838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lens_Distortion_Scope_Texture_Scale_X;             // 0x2840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Lens_Distortion_Scope_Texture_Scale_Y;             // 0x2848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Lens_Distortion_Minus_Advanced;                    // 0x2850(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Grid_Cell_Minus_Advanced;                          // 0x2888(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Zone;                                              // 0x28C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3037[0x7];                                     // 0x28C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MZone;                                             // 0x28C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IZone;                                             // 0x28D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Zone_Inverted;                                     // 0x28D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3038[0x3];                                     // 0x28D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Zone_Center;                                       // 0x28DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3039[0x4];                                     // 0x28EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Zone_Radius;                                       // 0x28F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Zone_Edge_Hardness;                                // 0x28F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Zone_Edge_Color;                                   // 0x2900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Zone_Coverage_Color;                               // 0x2910(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Zone_Minus_Advanced;                               // 0x2920(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Pyramid;                                           // 0x2958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_303A[0x7];                                     // 0x2959(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MPyramid;                                          // 0x2960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IPyramid;                                          // 0x2968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Pyramid_Masked;                                    // 0x2970(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_303B[0x3];                                     // 0x2971(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Pyramid_Background_Color;                          // 0x2974(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_303C[0x4];                                     // 0x2984(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Pyramid_Width;                                     // 0x2988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Pyramid_Pan;                                       // 0x2990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Pyramid_Tile_Amount;                               // 0x2998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Pyramid_Minus_Advanced;                            // 0x29A0(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Mojo;                                              // 0x29D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_303D[0x7];                                     // 0x29D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MMojo;                                             // 0x29E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IMojo;                                             // 0x29E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Mojo_Animated;                                     // 0x29F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_303E[0x7];                                     // 0x29F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Mojo_Animation_Speed;                              // 0x29F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Mojo_Mask;                                         // 0x2A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Mojo_Distortion_Map;                               // 0x2A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Mojo_Distortion_Amount;                            // 0x2A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Mojo_Color;                                        // 0x2A18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Mojo_Intensity;                                    // 0x2A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Mojo_Phase;                                        // 0x2A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Mojo_Tolerance;                                    // 0x2A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Mojo_Minus_Advanced;                               // 0x2A40(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Gradient_Fog;                                      // 0x2A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_303F[0x7];                                     // 0x2A79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MGradientFog;                                      // 0x2A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IGradientFog;                                      // 0x2A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FColor>                         Gradient_Fog_Colors;                               // 0x2A90(0x0010)(Edit, BlueprintVisible, Interp)
	double                                        Gradient_Fog_Distance;                             // 0x2AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Gradient_Fog_Sharpness;                            // 0x2AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Gradient_Fog_Minus_Advanced;                       // 0x2AB0(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 ColorIndexRT;                                      // 0x2AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              M_ColorIndexer;                                    // 0x2AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               I_ColorIndexer;                                    // 0x2AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Dither;                                            // 0x2B00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3040[0x7];                                     // 0x2B01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MDither;                                           // 0x2B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IDither;                                           // 0x2B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Dither_Limit;                                      // 0x2B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Dither_Minus_Advanced;                             // 0x2B20(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Speed_Lines;                                       // 0x2B58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3041[0x7];                                     // 0x2B59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MSpeedLines_;                                      // 0x2B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ISpeedLines;                                       // 0x2B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Speed_Lines_Intensity;                             // 0x2B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Speed_Lines_Line_Width;                            // 0x2B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Speed_Lines_Speed;                                 // 0x2B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Speed_Lines_Mask_Radius;                           // 0x2B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Speed_Lines_Mask_Hardness;                         // 0x2B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Speed_Lines_Minus_Advanced;                        // 0x2B98(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Cyber_Scan;                                        // 0x2BD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3042[0x7];                                     // 0x2BD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              MCyberScan;                                        // 0x2BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ICyberScan;                                        // 0x2BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Cyber_Scan_Speed;                                  // 0x2BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FAdvancedEffectFeatures                Cyber_Scan_Minus_Advanced;                         // 0x2BF0(0x0038)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        LOOK__Intensity;                                   // 0x2C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void TwoD_Transform_Func(bool IsEnabled);
	void Actor_Featurette_Func(bool IsEnabled);
	void Alarm_Func(bool IsEnabled);
	void Alcohol_Func(bool IsEnabled);
	void Anamorphic_Lens_Flares_Func(bool IsEnabled);
	void ApplyChameleonSettings();
	void ASCII_Func(bool& IsEnabled);
	void Bleach_Func(bool& IsEnabled);
	void Blur_Func(bool IsEnabled);
	void Blur_TL__FinishedFunc();
	void Blur_TL__UpdateFunc();
	void Camera_Shake_Func(bool IsEnabled);
	void Channel_Clamper_Func(bool& IsEnabled);
	void Channel_Swapper_Func(bool IsEnabled);
	void Circles_Func(bool Condition);
	void Colored_AO_Func(bool IsEnabled);
	void Colorize_Func(bool Condition);
	void Comic_Func(bool IsEnabled);
	void Create_Effect_Material_Instance(class UMaterial* Material, class UMaterialInstanceDynamic*& Instance);
	void Create_Material_Instances();
	void Custom_Depth_Highlighter__NC__Func(bool IsEnabled);
	void Custom_Depth_Highlighter_Func(bool IsEnabled);
	void Cyber_Scan_Func(bool IsEnabled);
	void Digitize_Func(bool IsEnabled);
	void Disco_Ball_Func(bool IsEnabled);
	void Distance_Distortion_Func(bool Condition);
	void Distance_Fog_Func(bool IsEnabled);
	void Dither_Func(bool IsEnabled);
	void Drawing_Func(bool IsEnabled);
	void Drug_Func(bool IsEnabled);
	void Edge_Detect_Func(bool& IsEnabled);
	void Emboss_Func(bool& IsEnabled);
	void ExecuteUbergraph_Chameleon(int32 EntryPoint);
	void Frost_Func(bool IsEnabled);
	void Glitch_Func(bool IsEnabled);
	void Gradient_Fog_Func(bool IsEnabled);
	void Grid_Cell_Func(bool IsEnabled);
	void Hard_Emboss_Func(bool& IsEnabled);
	void Haunted_Func(bool IsEnabled);
	void Hazy_Lights_Func(bool IsEnabled);
	void Hue_Panner_Func(bool IsEnabled);
	void Infected_Func(bool IsEnabled);
	void InitChameleon();
	void Invert_Func(bool& IsEnabled);
	void Iridescent_Func(bool& IsEnabled);
	void JewelHit_Event();
	void Kaleidoscope_Func(bool IsEnabled);
	void Kuwahara_Func(bool& IsEnabled);
	void Lens_Func(bool IsEnabled);
	void Letterboxing_Func(bool IsEnabled);
	void LOOK_Func(bool Condition);
	void Magic_Transitions_Func(bool IsEnabled);
	void Melted_World_Func(bool IsEnabled);
	void Mojo_Func(bool IsEnabled);
	void MonitorFX_Func(bool IsEnabled);
	void Monochrome_Func(bool IsEnabled);
	void Mosaic_Func(bool IsEnabled);
	void Neon_Func(bool IsEnabled);
	void Pixel_Dissolve_Func(bool IsEnabled);
	void Pulse_Func(bool& IsEnabled);
	void Pyramid_Func(bool IsEnabled);
	void Radial_Blur_Func(bool IsEnabled);
	void ReceiveTick(float DeltaSeconds);
	void Scratches_Func(bool IsEnabled);
	void Screen_Damage_Func(bool IsEnabled);
	void Screen_Decals_Func(bool IsEnabled);
	void Screen_Drops_Func(bool IsEnabled);
	void Screen_Fire_Func(bool IsEnabled);
	void Screen_Waves_Func(bool IsEnabled);
	void Selective_Color_Func(bool IsEnabled);
	void Set_Advanced_Effect_Features(const struct FAdvancedEffectFeatures& Features, class UMaterial* Material, class UMaterialInstanceDynamic* Dynamic_Material_Instance);
	void Set_Advanced_Effect_Features__No_Custom_Depth_(const struct FAdvancedEffectFeaturesNoCustomDepth& Features, class UMaterial* Material, class UMaterialInstanceDynamic* Dynamic_Material_Instance);
	void SetEffectPriority(int32 Priority, class UMaterial* Material);
	void Sharpen_Func(bool IsEnabled);
	void Sketch_Func(bool IsEnabled);
	void Snow_Func(bool IsEnabled);
	void Sonar_Func(bool Condition);
	void Speed_Lines_Func(bool IsEnabled);
	void Squares_Func(bool& IsEnabled);
	void Tiles_Func(bool& IsEnabled);
	void Toon_Shading_Func(bool IsEnabled);
	void TV_Noise_Func(bool& IsEnabled);
	void UserConstructionScript();
	void Wired_Func(bool IsEnabled);
	void World_Glitch_Func(bool IsEnabled);
	void World_Splash_Func(bool IsEnabled);
	void Zone_Func(bool IsEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Chameleon_C">();
	}
	static class AChameleon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChameleon_C>();
	}
};
static_assert(alignof(AChameleon_C) == 0x000010, "Wrong alignment on AChameleon_C");
static_assert(sizeof(AChameleon_C) == 0x002C30, "Wrong size on AChameleon_C");
static_assert(offsetof(AChameleon_C, UberGraphFrame) == 0x000298, "Member 'AChameleon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MaterialBillboard) == 0x0002A0, "Member 'AChameleon_C::MaterialBillboard' has a wrong offset!");
static_assert(offsetof(AChameleon_C, InternalPP) == 0x0002A8, "Member 'AChameleon_C::InternalPP' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Bounding_Box) == 0x0002B0, "Member 'AChameleon_C::Bounding_Box' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Blur_TL_Alpha_7903F8524414A3145BFE94AAB4B704BA) == 0x0002B8, "Member 'AChameleon_C::Blur_TL_Alpha_7903F8524414A3145BFE94AAB4B704BA' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Blur_TL__Direction_7903F8524414A3145BFE94AAB4B704BA) == 0x0002BC, "Member 'AChameleon_C::Blur_TL__Direction_7903F8524414A3145BFE94AAB4B704BA' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Blur_TL) == 0x0002C0, "Member 'AChameleon_C::Blur_TL' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Bleach_Bypass) == 0x0002C8, "Member 'AChameleon_C::Bleach_Bypass' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Fog) == 0x0002C9, "Member 'AChameleon_C::Distance_Fog' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Channel_Clamper) == 0x0002CA, "Member 'AChameleon_C::Channel_Clamper' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MChannelClamper) == 0x0002D0, "Member 'AChameleon_C::MChannelClamper' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IChannelClamper) == 0x0002D8, "Member 'AChameleon_C::IChannelClamper' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Channel_Swapper) == 0x0002E0, "Member 'AChameleon_C::Channel_Swapper' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops) == 0x0002E1, "Member 'AChameleon_C::Screen_Drops' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Alcohol) == 0x0002E2, "Member 'AChameleon_C::Alcohol' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Drug) == 0x0002E3, "Member 'AChameleon_C::Drug' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mosaic) == 0x0002E4, "Member 'AChameleon_C::Mosaic' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pixel_Dissolve) == 0x0002E5, "Member 'AChameleon_C::Pixel_Dissolve' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Blur) == 0x0002E6, "Member 'AChameleon_C::Blur' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MBleachBypass) == 0x0002E8, "Member 'AChameleon_C::MBleachBypass' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MDistanceFog) == 0x0002F0, "Member 'AChameleon_C::MDistanceFog' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MChannelSwapper) == 0x0002F8, "Member 'AChameleon_C::MChannelSwapper' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MScreenDrops) == 0x000300, "Member 'AChameleon_C::MScreenDrops' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MAlcohol) == 0x000308, "Member 'AChameleon_C::MAlcohol' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MDrug) == 0x000310, "Member 'AChameleon_C::MDrug' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MMosaic) == 0x000318, "Member 'AChameleon_C::MMosaic' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MPixelDissolve) == 0x000320, "Member 'AChameleon_C::MPixelDissolve' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MBlur) == 0x000328, "Member 'AChameleon_C::MBlur' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Channel_Clamper_Red_Intensity) == 0x000330, "Member 'AChameleon_C::Channel_Clamper_Red_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Channel_Clamper_Green_Intensity) == 0x000338, "Member 'AChameleon_C::Channel_Clamper_Green_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Channel_Clamper_Blue_Intensity) == 0x000340, "Member 'AChameleon_C::Channel_Clamper_Blue_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IBleachBypass) == 0x000348, "Member 'AChameleon_C::IBleachBypass' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IDistanceFog) == 0x000350, "Member 'AChameleon_C::IDistanceFog' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IChannelSwapper) == 0x000358, "Member 'AChameleon_C::IChannelSwapper' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Channel_Swapper_Red) == 0x000360, "Member 'AChameleon_C::Channel_Swapper_Red' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Channel_Swapper_Green) == 0x000361, "Member 'AChameleon_C::Channel_Swapper_Green' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Channel_Swapper_Blue) == 0x000362, "Member 'AChameleon_C::Channel_Swapper_Blue' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IScreenDrops) == 0x000368, "Member 'AChameleon_C::IScreenDrops' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IAlcohol) == 0x000370, "Member 'AChameleon_C::IAlcohol' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IDrug) == 0x000378, "Member 'AChameleon_C::IDrug' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IMosaic) == 0x000380, "Member 'AChameleon_C::IMosaic' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IPixelDissolve) == 0x000388, "Member 'AChameleon_C::IPixelDissolve' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IBlur) == 0x000390, "Member 'AChameleon_C::IBlur' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Layer_1_Map) == 0x000398, "Member 'AChameleon_C::Screen_Drops_Layer_1_Map' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Layer_1_Intensity) == 0x0003A0, "Member 'AChameleon_C::Screen_Drops_Layer_1_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mosaic_Tiling_X) == 0x0003A8, "Member 'AChameleon_C::Mosaic_Tiling_X' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Alcohol_Speed) == 0x0003B0, "Member 'AChameleon_C::Alcohol_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Drug_Speed) == 0x0003B8, "Member 'AChameleon_C::Drug_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pixel_Dissolve_Intensity) == 0x0003C0, "Member 'AChameleon_C::Pixel_Dissolve_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Blur_Amount) == 0x0003C8, "Member 'AChameleon_C::Blur_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ASCII) == 0x0003D0, "Member 'AChameleon_C::ASCII' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MAscii) == 0x0003D8, "Member 'AChameleon_C::MAscii' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IAscii) == 0x0003E0, "Member 'AChameleon_C::IAscii' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Colorize) == 0x0003E8, "Member 'AChameleon_C::Colorize' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MColorize) == 0x0003F0, "Member 'AChameleon_C::MColorize' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IColorize) == 0x0003F8, "Member 'AChameleon_C::IColorize' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Colorize_Detail) == 0x000400, "Member 'AChameleon_C::Colorize_Detail' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Comic) == 0x000408, "Member 'AChameleon_C::Comic' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MComic) == 0x000410, "Member 'AChameleon_C::MComic' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IComic) == 0x000418, "Member 'AChameleon_C::IComic' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Comic_Blend_Color) == 0x000420, "Member 'AChameleon_C::Comic_Blend_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Comic_Threshold) == 0x000430, "Member 'AChameleon_C::Comic_Threshold' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Edge_Detect) == 0x000438, "Member 'AChameleon_C::Edge_Detect' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MEdgeDetect) == 0x000440, "Member 'AChameleon_C::MEdgeDetect' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IEdgeDetect) == 0x000448, "Member 'AChameleon_C::IEdgeDetect' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Emboss) == 0x000450, "Member 'AChameleon_C::Emboss' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MEmboss) == 0x000458, "Member 'AChameleon_C::MEmboss' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IEmboss) == 0x000460, "Member 'AChameleon_C::IEmboss' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Glitch) == 0x000468, "Member 'AChameleon_C::Glitch' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MGlitch) == 0x000470, "Member 'AChameleon_C::MGlitch' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IGlitch) == 0x000478, "Member 'AChameleon_C::IGlitch' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Glitch_Speed) == 0x000480, "Member 'AChameleon_C::Glitch_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Glitch_Lines) == 0x000488, "Member 'AChameleon_C::Glitch_Lines' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Glitch_Blocking) == 0x000490, "Member 'AChameleon_C::Glitch_Blocking' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Monitor_Effects) == 0x000498, "Member 'AChameleon_C::Monitor_Effects' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MGrainNLines) == 0x0004A0, "Member 'AChameleon_C::MGrainNLines' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IGrainNLines) == 0x0004A8, "Member 'AChameleon_C::IGrainNLines' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Monitor_Effects_Line_Count) == 0x0004B0, "Member 'AChameleon_C::Monitor_Effects_Line_Count' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Monitor_Effects_Intensity_1) == 0x0004B8, "Member 'AChameleon_C::Monitor_Effects_Intensity_1' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Monitor_Effects_Intensity_2) == 0x0004C0, "Member 'AChameleon_C::Monitor_Effects_Intensity_2' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Hard_Emboss) == 0x0004C8, "Member 'AChameleon_C::Hard_Emboss' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MHardEmboss) == 0x0004D0, "Member 'AChameleon_C::MHardEmboss' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IHardEmboss) == 0x0004D8, "Member 'AChameleon_C::IHardEmboss' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Hue_Panner) == 0x0004E0, "Member 'AChameleon_C::Hue_Panner' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MHuePanner) == 0x0004E8, "Member 'AChameleon_C::MHuePanner' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IHuePanner) == 0x0004F0, "Member 'AChameleon_C::IHuePanner' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Hue_Panner_Phase) == 0x0004F8, "Member 'AChameleon_C::Hue_Panner_Phase' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Hue_Panner_Animated) == 0x000500, "Member 'AChameleon_C::Hue_Panner_Animated' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Hue_Panner_Speed) == 0x000508, "Member 'AChameleon_C::Hue_Panner_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Monochrome) == 0x000510, "Member 'AChameleon_C::Monochrome' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MMonochrome) == 0x000518, "Member 'AChameleon_C::MMonochrome' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IMonochrome) == 0x000520, "Member 'AChameleon_C::IMonochrome' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Monochrome_Color) == 0x000528, "Member 'AChameleon_C::Monochrome_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Radial_Blur) == 0x000538, "Member 'AChameleon_C::Radial_Blur' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MRadialBlur) == 0x000540, "Member 'AChameleon_C::MRadialBlur' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IRadialBlur) == 0x000548, "Member 'AChameleon_C::IRadialBlur' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Radial_Blur_Width) == 0x000550, "Member 'AChameleon_C::Radial_Blur_Width' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Radial_Blur_Samples) == 0x000558, "Member 'AChameleon_C::Radial_Blur_Samples' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Scratches) == 0x00055C, "Member 'AChameleon_C::Scratches' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MScratches) == 0x000560, "Member 'AChameleon_C::MScratches' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IScratches) == 0x000568, "Member 'AChameleon_C::IScratches' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Waves) == 0x000570, "Member 'AChameleon_C::Screen_Waves' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MScreenWaves) == 0x000578, "Member 'AChameleon_C::MScreenWaves' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IScreenWaves) == 0x000580, "Member 'AChameleon_C::IScreenWaves' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Waves_X_Tiling) == 0x000588, "Member 'AChameleon_C::Screen_Waves_X_Tiling' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Waves_Y_Tiling) == 0x000590, "Member 'AChameleon_C::Screen_Waves_Y_Tiling' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Monitor_Effects_Distortion_1) == 0x000598, "Member 'AChameleon_C::Monitor_Effects_Distortion_1' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Monitor_Effects_Distortion_2) == 0x0005A0, "Member 'AChameleon_C::Monitor_Effects_Distortion_2' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Monitor_Effects_Picture_Scale) == 0x0005A8, "Member 'AChameleon_C::Monitor_Effects_Picture_Scale' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Fog_Near_Color) == 0x0005B0, "Member 'AChameleon_C::Distance_Fog_Near_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Fog_Far_Color) == 0x0005C0, "Member 'AChameleon_C::Distance_Fog_Far_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Fog_Distance) == 0x0005D0, "Member 'AChameleon_C::Distance_Fog_Distance' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Scratches_Distortion_Map) == 0x0005D8, "Member 'AChameleon_C::Scratches_Distortion_Map' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Scratches_Distortion_Amount) == 0x0005E0, "Member 'AChameleon_C::Scratches_Distortion_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Scratches_Color) == 0x0005E8, "Member 'AChameleon_C::Scratches_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Layer_1_Speed) == 0x0005F8, "Member 'AChameleon_C::Screen_Drops_Layer_1_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Layer_1_Noise) == 0x000600, "Member 'AChameleon_C::Screen_Drops_Layer_1_Noise' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Layer_2_Map) == 0x000608, "Member 'AChameleon_C::Screen_Drops_Layer_2_Map' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Layer_2_Intensity) == 0x000610, "Member 'AChameleon_C::Screen_Drops_Layer_2_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Layer_2_Speed) == 0x000618, "Member 'AChameleon_C::Screen_Drops_Layer_2_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Layer_2_Noise) == 0x000620, "Member 'AChameleon_C::Screen_Drops_Layer_2_Noise' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Layer_3_Map) == 0x000628, "Member 'AChameleon_C::Screen_Drops_Layer_3_Map' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Layer_3_Intensity) == 0x000630, "Member 'AChameleon_C::Screen_Drops_Layer_3_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Layer_3_Speed) == 0x000638, "Member 'AChameleon_C::Screen_Drops_Layer_3_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Invert) == 0x000640, "Member 'AChameleon_C::Invert' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MInvert) == 0x000648, "Member 'AChameleon_C::MInvert' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IInvert) == 0x000650, "Member 'AChameleon_C::IInvert' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Iridescent) == 0x000658, "Member 'AChameleon_C::Iridescent' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MIridescent) == 0x000660, "Member 'AChameleon_C::MIridescent' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IIridescent) == 0x000668, "Member 'AChameleon_C::IIridescent' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Iridescent_Iridescence) == 0x000670, "Member 'AChameleon_C::Iridescent_Iridescence' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Kuwahara) == 0x000678, "Member 'AChameleon_C::Kuwahara' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MKuwahara) == 0x000680, "Member 'AChameleon_C::MKuwahara' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IKuwahara) == 0x000688, "Member 'AChameleon_C::IKuwahara' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Kuwahara_Amount) == 0x000690, "Member 'AChameleon_C::Kuwahara_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pulse) == 0x000694, "Member 'AChameleon_C::Pulse' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MPulse) == 0x000698, "Member 'AChameleon_C::MPulse' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IPulse) == 0x0006A0, "Member 'AChameleon_C::IPulse' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pulse_Center_X) == 0x0006A8, "Member 'AChameleon_C::Pulse_Center_X' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pulse_Center_Y) == 0x0006B0, "Member 'AChameleon_C::Pulse_Center_Y' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pulse_Speed) == 0x0006B8, "Member 'AChameleon_C::Pulse_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pulse_Smoothing) == 0x0006C0, "Member 'AChameleon_C::Pulse_Smoothing' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Squares) == 0x0006C8, "Member 'AChameleon_C::Squares' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MSquares) == 0x0006D0, "Member 'AChameleon_C::MSquares' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ISquares) == 0x0006D8, "Member 'AChameleon_C::ISquares' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Squares_Scale) == 0x0006E0, "Member 'AChameleon_C::Squares_Scale' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Squares_Ratio) == 0x0006E8, "Member 'AChameleon_C::Squares_Ratio' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Squares_Radius) == 0x0006F0, "Member 'AChameleon_C::Squares_Radius' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Squares_Brightness) == 0x0006F8, "Member 'AChameleon_C::Squares_Brightness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Tiles) == 0x000700, "Member 'AChameleon_C::Tiles' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MTiles) == 0x000708, "Member 'AChameleon_C::MTiles' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ITiles) == 0x000710, "Member 'AChameleon_C::ITiles' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Tiles_Centered) == 0x000718, "Member 'AChameleon_C::Tiles_Centered' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Tiles_Count) == 0x000720, "Member 'AChameleon_C::Tiles_Count' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TV_Noise) == 0x000728, "Member 'AChameleon_C::TV_Noise' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MTVNoise) == 0x000730, "Member 'AChameleon_C::MTVNoise' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ITVNoise) == 0x000738, "Member 'AChameleon_C::ITVNoise' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TV_Noise_Contrast) == 0x000740, "Member 'AChameleon_C::TV_Noise_Contrast' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TV_Noise_Intensity) == 0x000748, "Member 'AChameleon_C::TV_Noise_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Native_Post_Process) == 0x000750, "Member 'AChameleon_C::Native_Post_Process' has a wrong offset!");
static_assert(offsetof(AChameleon_C, LOOK_) == 0x000E30, "Member 'AChameleon_C::LOOK_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, LOOK__Presets) == 0x000E31, "Member 'AChameleon_C::LOOK__Presets' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Circles) == 0x000E32, "Member 'AChameleon_C::Circles' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MCircles) == 0x000E38, "Member 'AChameleon_C::MCircles' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ICircles) == 0x000E40, "Member 'AChameleon_C::ICircles' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Circles_Ratio) == 0x000E48, "Member 'AChameleon_C::Circles_Ratio' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Circles_Tiling) == 0x000E50, "Member 'AChameleon_C::Circles_Tiling' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sonar) == 0x000E58, "Member 'AChameleon_C::Sonar' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MSonar) == 0x000E60, "Member 'AChameleon_C::MSonar' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ISonar) == 0x000E68, "Member 'AChameleon_C::ISonar' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sonar_Animated) == 0x000E70, "Member 'AChameleon_C::Sonar_Animated' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sonar_Animation_Speed) == 0x000E78, "Member 'AChameleon_C::Sonar_Animation_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sonar_Color) == 0x000E80, "Member 'AChameleon_C::Sonar_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sonar_Color_Intensity) == 0x000E90, "Member 'AChameleon_C::Sonar_Color_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sonar_Hit_Texture) == 0x000E98, "Member 'AChameleon_C::Sonar_Hit_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sonar_Hit_Texture_Scale) == 0x000EA0, "Member 'AChameleon_C::Sonar_Hit_Texture_Scale' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sonar_Depth) == 0x000EA8, "Member 'AChameleon_C::Sonar_Depth' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sonar_Wave_Distance) == 0x000EB0, "Member 'AChameleon_C::Sonar_Wave_Distance' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sonar_Distortion_Intensity) == 0x000EB8, "Member 'AChameleon_C::Sonar_Distortion_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sonar_Sharpness) == 0x000EC0, "Member 'AChameleon_C::Sonar_Sharpness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Alcohol_Offset) == 0x000EC8, "Member 'AChameleon_C::Alcohol_Offset' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Distortion) == 0x000ED0, "Member 'AChameleon_C::Distance_Distortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MDistanceDistortion) == 0x000ED8, "Member 'AChameleon_C::MDistanceDistortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IDistanceDistortion) == 0x000EE0, "Member 'AChameleon_C::IDistanceDistortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Distortion_Normal) == 0x000EE8, "Member 'AChameleon_C::Distance_Distortion_Normal' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Distortion_Amount) == 0x000EF0, "Member 'AChameleon_C::Distance_Distortion_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Distortion_Edge_Distance) == 0x000EF8, "Member 'AChameleon_C::Distance_Distortion_Edge_Distance' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Distortion_Edge_Fading) == 0x000F00, "Member 'AChameleon_C::Distance_Distortion_Edge_Fading' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Distortion_Movement_Speed) == 0x000F08, "Member 'AChameleon_C::Distance_Distortion_Movement_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Distortion_Movement_Scale) == 0x000F10, "Member 'AChameleon_C::Distance_Distortion_Movement_Scale' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Distortion_Affected_Brightness) == 0x000F18, "Member 'AChameleon_C::Distance_Distortion_Affected_Brightness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Distortion_Unaffected_Brightness) == 0x000F20, "Member 'AChameleon_C::Distance_Distortion_Unaffected_Brightness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Drawing) == 0x000F28, "Member 'AChameleon_C::Drawing' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MDrawing) == 0x000F30, "Member 'AChameleon_C::MDrawing' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IDrawing) == 0x000F38, "Member 'AChameleon_C::IDrawing' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Drawing_Paper_Texture) == 0x000F40, "Member 'AChameleon_C::Drawing_Paper_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Drawing_Noise_Algorithm) == 0x000F48, "Member 'AChameleon_C::Drawing_Noise_Algorithm' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Drawing_Ink_Amount) == 0x000F50, "Member 'AChameleon_C::Drawing_Ink_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Drawing_Liner_Amount) == 0x000F58, "Member 'AChameleon_C::Drawing_Liner_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Drawing_Blending_Color) == 0x000F60, "Member 'AChameleon_C::Drawing_Blending_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Magic_Transitions) == 0x000F70, "Member 'AChameleon_C::Magic_Transitions' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MMagicTransitions) == 0x000F78, "Member 'AChameleon_C::MMagicTransitions' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IMagicTransitions) == 0x000F80, "Member 'AChameleon_C::IMagicTransitions' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Magic_Transitions_Final_Texture) == 0x000F88, "Member 'AChameleon_C::Magic_Transitions_Final_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Magic_Transitions_Mask_Texture) == 0x000F90, "Member 'AChameleon_C::Magic_Transitions_Mask_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Magic_Transitions_Transition_Amount) == 0x000F98, "Member 'AChameleon_C::Magic_Transitions_Transition_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Magic_Transitions_Flashing_Intensity) == 0x000FA0, "Member 'AChameleon_C::Magic_Transitions_Flashing_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Magic_Transitions_Flashing_Tolerance) == 0x000FA8, "Member 'AChameleon_C::Magic_Transitions_Flashing_Tolerance' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Magic_Transitions_Flashing_Color) == 0x000FB0, "Member 'AChameleon_C::Magic_Transitions_Flashing_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Damage) == 0x000FC0, "Member 'AChameleon_C::Screen_Damage' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MScreenDamage) == 0x000FC8, "Member 'AChameleon_C::MScreenDamage' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IScreenDamage) == 0x000FD0, "Member 'AChameleon_C::IScreenDamage' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Damage_Texture) == 0x000FD8, "Member 'AChameleon_C::Screen_Damage_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Damage_Intensity) == 0x000FE0, "Member 'AChameleon_C::Screen_Damage_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Damage_Distortion) == 0x000FE8, "Member 'AChameleon_C::Screen_Damage_Distortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Damage_Tint) == 0x000FF0, "Member 'AChameleon_C::Screen_Damage_Tint' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Damage_Edge_Size) == 0x001000, "Member 'AChameleon_C::Screen_Damage_Edge_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Damage_Fading) == 0x001008, "Member 'AChameleon_C::Screen_Damage_Fading' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals) == 0x001010, "Member 'AChameleon_C::Screen_Decals' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MScreenDecals) == 0x001018, "Member 'AChameleon_C::MScreenDecals' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IScreenDecals) == 0x001020, "Member 'AChameleon_C::IScreenDecals' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_1_Minus_Texture) == 0x001028, "Member 'AChameleon_C::Screen_Decals_Slot_1_Minus_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_1_Minus_Distortion) == 0x001030, "Member 'AChameleon_C::Screen_Decals_Slot_1_Minus_Distortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_1_Minus_Intensity) == 0x001038, "Member 'AChameleon_C::Screen_Decals_Slot_1_Minus_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_1_Minus_Position_X) == 0x001040, "Member 'AChameleon_C::Screen_Decals_Slot_1_Minus_Position_X' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_1_Minus_Position_Y) == 0x001048, "Member 'AChameleon_C::Screen_Decals_Slot_1_Minus_Position_Y' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_1_Minus_Rotation) == 0x001050, "Member 'AChameleon_C::Screen_Decals_Slot_1_Minus_Rotation' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_1_Minus_Size) == 0x001058, "Member 'AChameleon_C::Screen_Decals_Slot_1_Minus_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_2_Minus_Texture) == 0x001060, "Member 'AChameleon_C::Screen_Decals_Slot_2_Minus_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_2_Minus_Distortion) == 0x001068, "Member 'AChameleon_C::Screen_Decals_Slot_2_Minus_Distortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_2_Minus_Intensity) == 0x001070, "Member 'AChameleon_C::Screen_Decals_Slot_2_Minus_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_2_Minus_Position_X) == 0x001078, "Member 'AChameleon_C::Screen_Decals_Slot_2_Minus_Position_X' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_2_Minus_Position_Y) == 0x001080, "Member 'AChameleon_C::Screen_Decals_Slot_2_Minus_Position_Y' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_2_Minus_Rotation) == 0x001088, "Member 'AChameleon_C::Screen_Decals_Slot_2_Minus_Rotation' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_2_Minus_Size) == 0x001090, "Member 'AChameleon_C::Screen_Decals_Slot_2_Minus_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_3_Minus_Texture) == 0x001098, "Member 'AChameleon_C::Screen_Decals_Slot_3_Minus_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_3_Minus_Distortion) == 0x0010A0, "Member 'AChameleon_C::Screen_Decals_Slot_3_Minus_Distortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_3_Minus_Intensity) == 0x0010A8, "Member 'AChameleon_C::Screen_Decals_Slot_3_Minus_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_3_Minus_Position_X) == 0x0010B0, "Member 'AChameleon_C::Screen_Decals_Slot_3_Minus_Position_X' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_3_Minus_Position_Y) == 0x0010B8, "Member 'AChameleon_C::Screen_Decals_Slot_3_Minus_Position_Y' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_3_Minus_Rotation) == 0x0010C0, "Member 'AChameleon_C::Screen_Decals_Slot_3_Minus_Rotation' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_3_Minus_Size) == 0x0010C8, "Member 'AChameleon_C::Screen_Decals_Slot_3_Minus_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_4_Minus_Texture) == 0x0010D0, "Member 'AChameleon_C::Screen_Decals_Slot_4_Minus_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_4_Minus_Distortion) == 0x0010D8, "Member 'AChameleon_C::Screen_Decals_Slot_4_Minus_Distortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_4_Minus_Intensity) == 0x0010E0, "Member 'AChameleon_C::Screen_Decals_Slot_4_Minus_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_4_Minus_Position_X) == 0x0010E8, "Member 'AChameleon_C::Screen_Decals_Slot_4_Minus_Position_X' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_4_Minus_Position_Y) == 0x0010F0, "Member 'AChameleon_C::Screen_Decals_Slot_4_Minus_Position_Y' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_4_Minus_Rotation) == 0x0010F8, "Member 'AChameleon_C::Screen_Decals_Slot_4_Minus_Rotation' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Slot_4_Minus_Size) == 0x001100, "Member 'AChameleon_C::Screen_Decals_Slot_4_Minus_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sharpen) == 0x001108, "Member 'AChameleon_C::Sharpen' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MSharpen) == 0x001110, "Member 'AChameleon_C::MSharpen' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ISharpen) == 0x001118, "Member 'AChameleon_C::ISharpen' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sharpen_Value) == 0x001120, "Member 'AChameleon_C::Sharpen_Value' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Toon_Shading) == 0x001128, "Member 'AChameleon_C::Toon_Shading' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MToonShading) == 0x001130, "Member 'AChameleon_C::MToonShading' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IToonShading) == 0x001138, "Member 'AChameleon_C::IToonShading' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Toon_Shading_Use_Diffuse_Buffer) == 0x001140, "Member 'AChameleon_C::Toon_Shading_Use_Diffuse_Buffer' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Toon_Shading_Details) == 0x001148, "Member 'AChameleon_C::Toon_Shading_Details' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Toon_Shading_Fading_) == 0x001150, "Member 'AChameleon_C::Toon_Shading_Fading_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Toon_Shading_Size) == 0x001158, "Member 'AChameleon_C::Toon_Shading_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Toon_Shading_Sobel_Strength) == 0x001160, "Member 'AChameleon_C::Toon_Shading_Sobel_Strength' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Anamorphic_Lens_Flares) == 0x001168, "Member 'AChameleon_C::Anamorphic_Lens_Flares' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MAnamorphicLensFlares) == 0x001170, "Member 'AChameleon_C::MAnamorphicLensFlares' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IAnamorphicLensFlares) == 0x001178, "Member 'AChameleon_C::IAnamorphicLensFlares' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Anamorphic_Lens_Flares_Linear_Color) == 0x001180, "Member 'AChameleon_C::Anamorphic_Lens_Flares_Linear_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Anamorphic_Lens_Flares_Exposure_Scale) == 0x001188, "Member 'AChameleon_C::Anamorphic_Lens_Flares_Exposure_Scale' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Anamorphic_Lens_Flares_Threshold) == 0x001190, "Member 'AChameleon_C::Anamorphic_Lens_Flares_Threshold' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Anamorphic_Lens_Flares_Intensity) == 0x001198, "Member 'AChameleon_C::Anamorphic_Lens_Flares_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Anamorphic_Lens_Flares_Steps) == 0x0011A0, "Member 'AChameleon_C::Anamorphic_Lens_Flares_Steps' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Anamorphic_Lens_Flares_Length) == 0x0011A8, "Member 'AChameleon_C::Anamorphic_Lens_Flares_Length' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Anamorphic_Lens_Flares_Tint) == 0x0011B0, "Member 'AChameleon_C::Anamorphic_Lens_Flares_Tint' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Frost) == 0x0011C0, "Member 'AChameleon_C::Frost' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MFrost) == 0x0011C8, "Member 'AChameleon_C::MFrost' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IFrost) == 0x0011D0, "Member 'AChameleon_C::IFrost' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Frost_Texture) == 0x0011D8, "Member 'AChameleon_C::Frost_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Frost_Colorization) == 0x0011E0, "Member 'AChameleon_C::Frost_Colorization' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Frost_Distortion_Strength) == 0x0011E8, "Member 'AChameleon_C::Frost_Distortion_Strength' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Frost_Visible_Area) == 0x0011F0, "Member 'AChameleon_C::Frost_Visible_Area' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ASCII_Color_Multiplier) == 0x0011F8, "Member 'AChameleon_C::ASCII_Color_Multiplier' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Neon) == 0x001208, "Member 'AChameleon_C::Neon' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MNeon) == 0x001210, "Member 'AChameleon_C::MNeon' has a wrong offset!");
static_assert(offsetof(AChameleon_C, INeon) == 0x001218, "Member 'AChameleon_C::INeon' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Neon_Color) == 0x001220, "Member 'AChameleon_C::Neon_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Neon_Background_Color) == 0x001230, "Member 'AChameleon_C::Neon_Background_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Neon_Power) == 0x001240, "Member 'AChameleon_C::Neon_Power' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Neon_Noise) == 0x001248, "Member 'AChameleon_C::Neon_Noise' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Neon_Noise_Speed) == 0x001250, "Member 'AChameleon_C::Neon_Noise_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Custom_Depth_Highlighter) == 0x001258, "Member 'AChameleon_C::Custom_Depth_Highlighter' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MCustomDepthHighlighter) == 0x001260, "Member 'AChameleon_C::MCustomDepthHighlighter' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ICustomDepthHighlighter) == 0x001268, "Member 'AChameleon_C::ICustomDepthHighlighter' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Custom_Depth_Highlighter_Highlight_Color) == 0x001270, "Member 'AChameleon_C::Custom_Depth_Highlighter_Highlight_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Custom_Depth_Highlighter_Highlight_Opacity) == 0x001280, "Member 'AChameleon_C::Custom_Depth_Highlighter_Highlight_Opacity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Custom_Depth_Highlighter__Clip_) == 0x001288, "Member 'AChameleon_C::Custom_Depth_Highlighter__Clip_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MCustomDepthHighlighterClip) == 0x001290, "Member 'AChameleon_C::MCustomDepthHighlighterClip' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ICustomDepthHighlighterClip) == 0x001298, "Member 'AChameleon_C::ICustomDepthHighlighterClip' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Custom_Depth_Highlighter__C__Highlight_Color) == 0x0012A0, "Member 'AChameleon_C::Custom_Depth_Highlighter__C__Highlight_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Custom_Depth_Highlighter__C__Highlight_Opacity) == 0x0012B0, "Member 'AChameleon_C::Custom_Depth_Highlighter__C__Highlight_Opacity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Edge_Detect_Threshold) == 0x0012B8, "Member 'AChameleon_C::Edge_Detect_Threshold' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Scratches_Noising) == 0x0012C0, "Member 'AChameleon_C::Scratches_Noising' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Enabled) == 0x0012C8, "Member 'AChameleon_C::Enabled' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Unbound) == 0x0012C9, "Member 'AChameleon_C::Unbound' has a wrong offset!");
static_assert(offsetof(AChameleon_C, AllMaterials) == 0x0012D0, "Member 'AChameleon_C::AllMaterials' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Layer_3_Noise) == 0x0012E0, "Member 'AChameleon_C::Screen_Drops_Layer_3_Noise' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Diffuse_Color) == 0x0012E8, "Member 'AChameleon_C::Screen_Drops_Diffuse_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Splashes_Amount) == 0x0012F8, "Member 'AChameleon_C::Screen_Drops_Splashes_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Splashes_Tiling) == 0x001300, "Member 'AChameleon_C::Screen_Drops_Splashes_Tiling' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Splashes_Intensity) == 0x001308, "Member 'AChameleon_C::Screen_Drops_Splashes_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Bump) == 0x001310, "Member 'AChameleon_C::Screen_Drops_Bump' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TwoD_Transform) == 0x001318, "Member 'AChameleon_C::TwoD_Transform' has a wrong offset!");
static_assert(offsetof(AChameleon_C, M2DTransform) == 0x001320, "Member 'AChameleon_C::M2DTransform' has a wrong offset!");
static_assert(offsetof(AChameleon_C, I2DTransform) == 0x001328, "Member 'AChameleon_C::I2DTransform' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Kaleidoscope) == 0x001330, "Member 'AChameleon_C::Kaleidoscope' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MKaleidoscope) == 0x001338, "Member 'AChameleon_C::MKaleidoscope' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IKaleidoscope) == 0x001340, "Member 'AChameleon_C::IKaleidoscope' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Letterboxing) == 0x001348, "Member 'AChameleon_C::Letterboxing' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MLetterboxing) == 0x001350, "Member 'AChameleon_C::MLetterboxing' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ILetterboxing) == 0x001358, "Member 'AChameleon_C::ILetterboxing' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Snow) == 0x001360, "Member 'AChameleon_C::Snow' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MSnow) == 0x001368, "Member 'AChameleon_C::MSnow' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ISnow) == 0x001370, "Member 'AChameleon_C::ISnow' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TwoD_Transform_Anchor_Point__X_) == 0x001378, "Member 'AChameleon_C::TwoD_Transform_Anchor_Point__X_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TwoD_Transform_Anchor_Point__Y_) == 0x001380, "Member 'AChameleon_C::TwoD_Transform_Anchor_Point__Y_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TwoD_Transform_Rotate) == 0x001388, "Member 'AChameleon_C::TwoD_Transform_Rotate' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TwoD_Transform_Pan__X_) == 0x001390, "Member 'AChameleon_C::TwoD_Transform_Pan__X_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TwoD_Transform_Pan__Y_) == 0x001398, "Member 'AChameleon_C::TwoD_Transform_Pan__Y_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TwoD_Transform_Scale__X_) == 0x0013A0, "Member 'AChameleon_C::TwoD_Transform_Scale__X_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TwoD_Transform_Scale__Y_) == 0x0013A8, "Member 'AChameleon_C::TwoD_Transform_Scale__Y_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TwoD_Transform_Tiled) == 0x0013B0, "Member 'AChameleon_C::TwoD_Transform_Tiled' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Kaleidoscope_Amount) == 0x0013B4, "Member 'AChameleon_C::Kaleidoscope_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Kaleidoscope_SphericalDistortion) == 0x0013B8, "Member 'AChameleon_C::Kaleidoscope_SphericalDistortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Kaleidoscope_Warp) == 0x0013C0, "Member 'AChameleon_C::Kaleidoscope_Warp' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Kaleidoscope_FMul) == 0x0013C8, "Member 'AChameleon_C::Kaleidoscope_FMul' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Letterboxing_Texture) == 0x0013D0, "Member 'AChameleon_C::Letterboxing_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Letterboxing_Size) == 0x0013D8, "Member 'AChameleon_C::Letterboxing_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Letterboxing_Horizontal) == 0x0013E0, "Member 'AChameleon_C::Letterboxing_Horizontal' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Letterboxing_Vertical) == 0x0013E1, "Member 'AChameleon_C::Letterboxing_Vertical' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Snow_Amount) == 0x0013E8, "Member 'AChameleon_C::Snow_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Snow_Distortion) == 0x0013F0, "Member 'AChameleon_C::Snow_Distortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Snow_Size) == 0x0013F8, "Member 'AChameleon_C::Snow_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Snow_Speed__X_) == 0x001400, "Member 'AChameleon_C::Snow_Speed__X_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Snow_Speed__Y_) == 0x001408, "Member 'AChameleon_C::Snow_Speed__Y_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Drawing_Animation_Speed) == 0x001410, "Member 'AChameleon_C::Drawing_Animation_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Fog_Edge_Sharpness) == 0x001418, "Member 'AChameleon_C::Distance_Fog_Edge_Sharpness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Diffuse_Intensity) == 0x001420, "Member 'AChameleon_C::Screen_Drops_Diffuse_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Splash) == 0x001428, "Member 'AChameleon_C::World_Splash' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MWorldSplash) == 0x001430, "Member 'AChameleon_C::MWorldSplash' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IWorldSplash) == 0x001438, "Member 'AChameleon_C::IWorldSplash' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Splash_Distort) == 0x001440, "Member 'AChameleon_C::World_Splash_Distort' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Splash_Smoothness) == 0x001448, "Member 'AChameleon_C::World_Splash_Smoothness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Splash_Tiling) == 0x001450, "Member 'AChameleon_C::World_Splash_Tiling' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Splash_Color_Tint) == 0x001458, "Member 'AChameleon_C::World_Splash_Color_Tint' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Blur_Samples) == 0x001468, "Member 'AChameleon_C::Blur_Samples' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Frost_Color) == 0x00146C, "Member 'AChameleon_C::Frost_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Comic_PreMultiplier) == 0x001480, "Member 'AChameleon_C::Comic_PreMultiplier' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Comic_Pre_Add) == 0x001488, "Member 'AChameleon_C::Comic_Pre_Add' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Comic_Desaturation) == 0x001490, "Member 'AChameleon_C::Comic_Desaturation' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Glitch) == 0x001498, "Member 'AChameleon_C::World_Glitch' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MWorldGlitch) == 0x0014A0, "Member 'AChameleon_C::MWorldGlitch' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IWorldGlitch) == 0x0014A8, "Member 'AChameleon_C::IWorldGlitch' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Glitch_Animated) == 0x0014B0, "Member 'AChameleon_C::World_Glitch_Animated' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Glitch_Animation_Speed) == 0x0014B8, "Member 'AChameleon_C::World_Glitch_Animation_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Glitch_Distance) == 0x0014C0, "Member 'AChameleon_C::World_Glitch_Distance' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Glitch_Distance_Sharpness) == 0x0014C8, "Member 'AChameleon_C::World_Glitch_Distance_Sharpness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Glitch_Phase) == 0x0014D0, "Member 'AChameleon_C::World_Glitch_Phase' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Glitch_Power) == 0x0014D8, "Member 'AChameleon_C::World_Glitch_Power' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Glitch_Grid_Position) == 0x0014E0, "Member 'AChameleon_C::World_Glitch_Grid_Position' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Glitch_Grid_Size) == 0x0014F8, "Member 'AChameleon_C::World_Glitch_Grid_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Digitize) == 0x001510, "Member 'AChameleon_C::Digitize' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MDigitize) == 0x001518, "Member 'AChameleon_C::MDigitize' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IDigitize) == 0x001520, "Member 'AChameleon_C::IDigitize' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Digitize_Cell_Color) == 0x001528, "Member 'AChameleon_C::Digitize_Cell_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Digitize_Cell_Position) == 0x001538, "Member 'AChameleon_C::Digitize_Cell_Position' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Digitize_Cell_Position_Over_Time) == 0x001550, "Member 'AChameleon_C::Digitize_Cell_Position_Over_Time' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Digitize_Distance) == 0x001568, "Member 'AChameleon_C::Digitize_Distance' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Digitize_Distance_Sharpness) == 0x001570, "Member 'AChameleon_C::Digitize_Distance_Sharpness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Digitize_Cell_Size) == 0x001578, "Member 'AChameleon_C::Digitize_Cell_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Digitize_Cell_Color_Multiplier) == 0x001580, "Member 'AChameleon_C::Digitize_Cell_Color_Multiplier' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Digitize_Cell_Distortion) == 0x001588, "Member 'AChameleon_C::Digitize_Cell_Distortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Digitize_Background_Color_Multiplier) == 0x001590, "Member 'AChameleon_C::Digitize_Background_Color_Multiplier' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Alarm) == 0x001598, "Member 'AChameleon_C::Alarm' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MAlarm) == 0x0015A0, "Member 'AChameleon_C::MAlarm' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IAlarm) == 0x0015A8, "Member 'AChameleon_C::IAlarm' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Alarm_Color) == 0x0015B0, "Member 'AChameleon_C::Alarm_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Alarm_Speed) == 0x0015C0, "Member 'AChameleon_C::Alarm_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sketch) == 0x0015C8, "Member 'AChameleon_C::Sketch' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MSketch) == 0x0015D0, "Member 'AChameleon_C::MSketch' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ISketch) == 0x0015D8, "Member 'AChameleon_C::ISketch' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sketch_Color) == 0x0015E0, "Member 'AChameleon_C::Sketch_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sketch_Background_Color) == 0x0015F0, "Member 'AChameleon_C::Sketch_Background_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sketch_Power) == 0x001600, "Member 'AChameleon_C::Sketch_Power' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sketch_World_Space) == 0x001608, "Member 'AChameleon_C::Sketch_World_Space' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sketch_Pattern_Rotation) == 0x001610, "Member 'AChameleon_C::Sketch_Pattern_Rotation' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sketch_Pattern_Speed) == 0x001618, "Member 'AChameleon_C::Sketch_Pattern_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Custom_Depth_Highlighter_Outline_Color) == 0x001620, "Member 'AChameleon_C::Custom_Depth_Highlighter_Outline_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Custom_Depth_Highlighter_Outline_Opacity) == 0x001630, "Member 'AChameleon_C::Custom_Depth_Highlighter_Outline_Opacity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Custom_Depth_Highlighter__C__Outline_Color) == 0x001638, "Member 'AChameleon_C::Custom_Depth_Highlighter__C__Outline_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Custom_Depth_Highlighter__C__Outline_Opacity) == 0x001648, "Member 'AChameleon_C::Custom_Depth_Highlighter__C__Outline_Opacity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Wired) == 0x001650, "Member 'AChameleon_C::Wired' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IWired) == 0x001658, "Member 'AChameleon_C::IWired' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MWired) == 0x001660, "Member 'AChameleon_C::MWired' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Wired_Color) == 0x001668, "Member 'AChameleon_C::Wired_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Wired_Power) == 0x001678, "Member 'AChameleon_C::Wired_Power' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mosaic_Tiling_Y) == 0x001680, "Member 'AChameleon_C::Mosaic_Tiling_Y' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mosaic_Mask) == 0x001688, "Member 'AChameleon_C::Mosaic_Mask' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mosaic_Mask_Intensity) == 0x001690, "Member 'AChameleon_C::Mosaic_Mask_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mosaic_Minus_Advanced) == 0x001698, "Member 'AChameleon_C::Mosaic_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Drug_Minus_Advanced) == 0x0016D0, "Member 'AChameleon_C::Drug_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Alcohol_Minus_Advanced) == 0x001708, "Member 'AChameleon_C::Alcohol_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pixel_Dissolve_Scale) == 0x001740, "Member 'AChameleon_C::Pixel_Dissolve_Scale' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pixel_Dissolve_Jitter) == 0x001748, "Member 'AChameleon_C::Pixel_Dissolve_Jitter' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pixel_Dissolve_Minus_Advanced) == 0x001750, "Member 'AChameleon_C::Pixel_Dissolve_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Channel_Clamper_Minus_Advanced) == 0x001788, "Member 'AChameleon_C::Channel_Clamper_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Channel_Swapper_Minus_Advanced) == 0x0017C0, "Member 'AChameleon_C::Channel_Swapper_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Bleach_Bypass_Minus_Advanced) == 0x0017F8, "Member 'AChameleon_C::Bleach_Bypass_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Blur_Minus_Advanced) == 0x001830, "Member 'AChameleon_C::Blur_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ASCII_PreMultiplier) == 0x001868, "Member 'AChameleon_C::ASCII_PreMultiplier' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ASCII_Minus_Advanced) == 0x001870, "Member 'AChameleon_C::ASCII_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Colorize_Pre_Add) == 0x0018A8, "Member 'AChameleon_C::Colorize_Pre_Add' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Colorize_Minus_Advanced) == 0x0018B0, "Member 'AChameleon_C::Colorize_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Edge_Detect_Minus_Advanced) == 0x0018E8, "Member 'AChameleon_C::Edge_Detect_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Emboss_Minus_Advanced) == 0x001920, "Member 'AChameleon_C::Emboss_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Hard_Emboss_Minus_Advanced) == 0x001958, "Member 'AChameleon_C::Hard_Emboss_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Glitch_Grid_Distortion_Power) == 0x001990, "Member 'AChameleon_C::Glitch_Grid_Distortion_Power' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Glitch_Grid_Distortion_Size) == 0x001998, "Member 'AChameleon_C::Glitch_Grid_Distortion_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Glitch_Grid_Distortion_Speed) == 0x0019A0, "Member 'AChameleon_C::Glitch_Grid_Distortion_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Glitch_Minus_Advanced) == 0x0019A8, "Member 'AChameleon_C::Glitch_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Monitor_Effects_Tiled) == 0x0019E0, "Member 'AChameleon_C::Monitor_Effects_Tiled' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Monitor_Effects_Minus_Advanced) == 0x0019E8, "Member 'AChameleon_C::Monitor_Effects_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Hue_Panner_Minus_Advanced) == 0x001A20, "Member 'AChameleon_C::Hue_Panner_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Monochrome_Minus_Advanced) == 0x001A58, "Member 'AChameleon_C::Monochrome_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Radial_Blur_Center) == 0x001A90, "Member 'AChameleon_C::Radial_Blur_Center' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Radial_Blur_Sample_Offset) == 0x001AA0, "Member 'AChameleon_C::Radial_Blur_Sample_Offset' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Radial_Blur_Minus_Advanced) == 0x001AB0, "Member 'AChameleon_C::Radial_Blur_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Scratches_Minus_Advanced) == 0x001AE8, "Member 'AChameleon_C::Scratches_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Waves_Minus_Advanced) == 0x001B20, "Member 'AChameleon_C::Screen_Waves_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Fog_Minus_Advanced) == 0x001B58, "Member 'AChameleon_C::Distance_Fog_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Drops_Minus_Advanced) == 0x001B90, "Member 'AChameleon_C::Screen_Drops_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Invert_Minus_Advanced) == 0x001BC8, "Member 'AChameleon_C::Invert_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Iridescent_Minus_Advanced) == 0x001C00, "Member 'AChameleon_C::Iridescent_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Kuwahara_Minus_Advanced) == 0x001C38, "Member 'AChameleon_C::Kuwahara_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pulse_Minus_Advanced) == 0x001C70, "Member 'AChameleon_C::Pulse_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Squares_Minus_Advanced) == 0x001CA8, "Member 'AChameleon_C::Squares_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Tiles_Minus_Advanced) == 0x001CE0, "Member 'AChameleon_C::Tiles_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TV_Noise_Minus_Advanced) == 0x001D18, "Member 'AChameleon_C::TV_Noise_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Circles_Minus_Advanced) == 0x001D50, "Member 'AChameleon_C::Circles_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sonar_Minus_Advanced) == 0x001D88, "Member 'AChameleon_C::Sonar_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Distance_Distortion_Minus_Advanced) == 0x001DC0, "Member 'AChameleon_C::Distance_Distortion_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Drawing_Minus_Advanced) == 0x001DF8, "Member 'AChameleon_C::Drawing_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Magic_Transitions_Minus_Advanced) == 0x001E30, "Member 'AChameleon_C::Magic_Transitions_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Damage_Minus_Advanced) == 0x001E68, "Member 'AChameleon_C::Screen_Damage_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Decals_Minus_Advanced) == 0x001EA0, "Member 'AChameleon_C::Screen_Decals_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sharpen_Minus_Advanced) == 0x001ED8, "Member 'AChameleon_C::Sharpen_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Toon_Shading_Minus_Advanced) == 0x001F10, "Member 'AChameleon_C::Toon_Shading_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Anamorphic_Lens_Flares_Minus_Advanced) == 0x001F48, "Member 'AChameleon_C::Anamorphic_Lens_Flares_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Frost_Minus_Advanced) == 0x001F80, "Member 'AChameleon_C::Frost_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Neon_Minus_Advanced) == 0x001FB8, "Member 'AChameleon_C::Neon_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Custom_Depth_Highlighter_Minus_Advanced) == 0x001FF0, "Member 'AChameleon_C::Custom_Depth_Highlighter_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Custom_Depth_Highlighter__Clip__Minus_Advanced) == 0x002020, "Member 'AChameleon_C::Custom_Depth_Highlighter__Clip__Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TwoD_Transform_Background_Color) == 0x002050, "Member 'AChameleon_C::TwoD_Transform_Background_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, TwoD_Transform_Minus_Advanced) == 0x002060, "Member 'AChameleon_C::TwoD_Transform_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Kaleidoscope_Minus_Advanced) == 0x002098, "Member 'AChameleon_C::Kaleidoscope_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Letterboxing_Minus_Advanced) == 0x0020D0, "Member 'AChameleon_C::Letterboxing_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Snow_Minus_Advanced) == 0x002108, "Member 'AChameleon_C::Snow_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Splash_Minus_Advanced) == 0x002140, "Member 'AChameleon_C::World_Splash_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, World_Glitch_Minus_Advanced) == 0x002178, "Member 'AChameleon_C::World_Glitch_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Digitize_Minus_Advanced) == 0x0021B0, "Member 'AChameleon_C::Digitize_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Alarm_Minus_Advanced) == 0x0021E8, "Member 'AChameleon_C::Alarm_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Sketch_Minus_Advanced) == 0x002220, "Member 'AChameleon_C::Sketch_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Wired_Minus_Advanced) == 0x002258, "Member 'AChameleon_C::Wired_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Comic_Pattern_Intensity) == 0x002290, "Member 'AChameleon_C::Comic_Pattern_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Comic_Pattern_Line_Count) == 0x002298, "Member 'AChameleon_C::Comic_Pattern_Line_Count' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Comic_Pattern_Rotation) == 0x0022A0, "Member 'AChameleon_C::Comic_Pattern_Rotation' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Comic_Minus_Advanced) == 0x0022A8, "Member 'AChameleon_C::Comic_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Actor_Featurette) == 0x0022E0, "Member 'AChameleon_C::Actor_Featurette' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MActorFeaturette) == 0x0022E8, "Member 'AChameleon_C::MActorFeaturette' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IActorFeaturette) == 0x0022F0, "Member 'AChameleon_C::IActorFeaturette' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Actor_Featurette_Background_Multiplier) == 0x0022F8, "Member 'AChameleon_C::Actor_Featurette_Background_Multiplier' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Actor_Featurette_Background_Desaturation) == 0x002308, "Member 'AChameleon_C::Actor_Featurette_Background_Desaturation' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Actor_Featurette_Foreground_Multiplier) == 0x002310, "Member 'AChameleon_C::Actor_Featurette_Foreground_Multiplier' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Actor_Featurette_Foreground_Saturation) == 0x002320, "Member 'AChameleon_C::Actor_Featurette_Foreground_Saturation' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Actor_Featurette_Blur_Amount) == 0x002328, "Member 'AChameleon_C::Actor_Featurette_Blur_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Actor_Featurette_Blur_Samples) == 0x002330, "Member 'AChameleon_C::Actor_Featurette_Blur_Samples' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Actor_Featurette_Stencil_Mask) == 0x002334, "Member 'AChameleon_C::Actor_Featurette_Stencil_Mask' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Actor_Featurette_Minus_Advanced) == 0x002338, "Member 'AChameleon_C::Actor_Featurette_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Infected) == 0x002368, "Member 'AChameleon_C::Infected' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MInfected) == 0x002370, "Member 'AChameleon_C::MInfected' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IInfected) == 0x002378, "Member 'AChameleon_C::IInfected' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Infected_Distortion_Amount) == 0x002380, "Member 'AChameleon_C::Infected_Distortion_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Infected_Smoothness) == 0x002388, "Member 'AChameleon_C::Infected_Smoothness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Infected_Speed) == 0x002390, "Member 'AChameleon_C::Infected_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Infected_TransformZ) == 0x002398, "Member 'AChameleon_C::Infected_TransformZ' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Infected_Minus_Advanced) == 0x0023A0, "Member 'AChameleon_C::Infected_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Colored_AO) == 0x0023D8, "Member 'AChameleon_C::Colored_AO' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MColoredAO) == 0x0023E0, "Member 'AChameleon_C::MColoredAO' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IColoredAO) == 0x0023E8, "Member 'AChameleon_C::IColoredAO' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Colored_AO_Color) == 0x0023F0, "Member 'AChameleon_C::Colored_AO_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Colored_AO_Intensity) == 0x002400, "Member 'AChameleon_C::Colored_AO_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Colored_AO_Minus_Advanced) == 0x002408, "Member 'AChameleon_C::Colored_AO_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Camera_Shake) == 0x002440, "Member 'AChameleon_C::Camera_Shake' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MCameraShake) == 0x002448, "Member 'AChameleon_C::MCameraShake' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ICameraShake) == 0x002450, "Member 'AChameleon_C::ICameraShake' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Camera_Shake_Power__X_) == 0x002458, "Member 'AChameleon_C::Camera_Shake_Power__X_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Camera_Shake_Power__Y_) == 0x002460, "Member 'AChameleon_C::Camera_Shake_Power__Y_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Camera_Shake_Frequency) == 0x002468, "Member 'AChameleon_C::Camera_Shake_Frequency' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Camera_Shake_Minus_Advanced) == 0x002470, "Member 'AChameleon_C::Camera_Shake_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Disco_Ball) == 0x0024A8, "Member 'AChameleon_C::Disco_Ball' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MDiscoBall) == 0x0024B0, "Member 'AChameleon_C::MDiscoBall' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IDiscoBall) == 0x0024B8, "Member 'AChameleon_C::IDiscoBall' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Disco_Ball_WS_Center) == 0x0024C0, "Member 'AChameleon_C::Disco_Ball_WS_Center' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Disco_Ball_Color_1) == 0x0024CC, "Member 'AChameleon_C::Disco_Ball_Color_1' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Disco_Ball_Color_2) == 0x0024DC, "Member 'AChameleon_C::Disco_Ball_Color_2' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Disco_Ball_Block_Scale) == 0x0024F0, "Member 'AChameleon_C::Disco_Ball_Block_Scale' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Disco_Ball_Block_Distribution) == 0x002508, "Member 'AChameleon_C::Disco_Ball_Block_Distribution' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Disco_Ball_Rotation_Speed) == 0x002510, "Member 'AChameleon_C::Disco_Ball_Rotation_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Disco_Ball_Manual_Rotation) == 0x002518, "Member 'AChameleon_C::Disco_Ball_Manual_Rotation' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Disco_Ball_Minus_Advanced) == 0x002520, "Member 'AChameleon_C::Disco_Ball_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Hazy_Lights) == 0x002558, "Member 'AChameleon_C::Hazy_Lights' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MHazyLights) == 0x002560, "Member 'AChameleon_C::MHazyLights' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IHazyLights) == 0x002568, "Member 'AChameleon_C::IHazyLights' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Hazy_Lights_Move_Speed) == 0x002570, "Member 'AChameleon_C::Hazy_Lights_Move_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Hazy_Lights_Position) == 0x002578, "Member 'AChameleon_C::Hazy_Lights_Position' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Hazy_Lights_Minus_Advanced) == 0x002580, "Member 'AChameleon_C::Hazy_Lights_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Melted_World) == 0x0025B8, "Member 'AChameleon_C::Melted_World' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MMeltedWorld) == 0x0025C0, "Member 'AChameleon_C::MMeltedWorld' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IMeltedWorld) == 0x0025C8, "Member 'AChameleon_C::IMeltedWorld' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Melted_World_Size) == 0x0025D0, "Member 'AChameleon_C::Melted_World_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Melted_World_Distance) == 0x0025E8, "Member 'AChameleon_C::Melted_World_Distance' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Melted_World_Power) == 0x0025F0, "Member 'AChameleon_C::Melted_World_Power' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Melted_World_Sharpness) == 0x0025F8, "Member 'AChameleon_C::Melted_World_Sharpness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Melted_World_Minus_Advanced) == 0x002600, "Member 'AChameleon_C::Melted_World_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Selective_Color) == 0x002638, "Member 'AChameleon_C::Selective_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MSelectiveColor) == 0x002640, "Member 'AChameleon_C::MSelectiveColor' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ISelectiveColor) == 0x002648, "Member 'AChameleon_C::ISelectiveColor' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Selective_Color_Mask_Color) == 0x002650, "Member 'AChameleon_C::Selective_Color_Mask_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Selective_Color_Hue_Tolerance) == 0x002660, "Member 'AChameleon_C::Selective_Color_Hue_Tolerance' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Selective_Color_Saturation_Tolerance) == 0x002668, "Member 'AChameleon_C::Selective_Color_Saturation_Tolerance' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Selective_Color_Value_Tolerance) == 0x002670, "Member 'AChameleon_C::Selective_Color_Value_Tolerance' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Selective_Color_Minus_Advanced) == 0x002678, "Member 'AChameleon_C::Selective_Color_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Fire) == 0x0026B0, "Member 'AChameleon_C::Screen_Fire' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MScreenFire) == 0x0026B8, "Member 'AChameleon_C::MScreenFire' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IScreenFire) == 0x0026C0, "Member 'AChameleon_C::IScreenFire' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Fire_Color) == 0x0026C8, "Member 'AChameleon_C::Screen_Fire_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Fire_Distortion_Amount) == 0x0026D8, "Member 'AChameleon_C::Screen_Fire_Distortion_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Fire_Mask_Contrast) == 0x0026E0, "Member 'AChameleon_C::Screen_Fire_Mask_Contrast' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Fire_Mask_Scale) == 0x0026E8, "Member 'AChameleon_C::Screen_Fire_Mask_Scale' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Fire_Flame_Tiling) == 0x0026F0, "Member 'AChameleon_C::Screen_Fire_Flame_Tiling' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Fire_Speed) == 0x0026F8, "Member 'AChameleon_C::Screen_Fire_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Screen_Fire_Minus_Advanced) == 0x002700, "Member 'AChameleon_C::Screen_Fire_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Haunted) == 0x002738, "Member 'AChameleon_C::Haunted' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MHaunted) == 0x002740, "Member 'AChameleon_C::MHaunted' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IHaunted) == 0x002748, "Member 'AChameleon_C::IHaunted' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Haunted_Amount) == 0x002750, "Member 'AChameleon_C::Haunted_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Haunted_Mask_Scale) == 0x002758, "Member 'AChameleon_C::Haunted_Mask_Scale' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Haunted_Texture) == 0x002760, "Member 'AChameleon_C::Haunted_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Haunted_Texture_Scale) == 0x002768, "Member 'AChameleon_C::Haunted_Texture_Scale' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Haunted_Minus_Advanced) == 0x002770, "Member 'AChameleon_C::Haunted_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Grid_Cell) == 0x0027A8, "Member 'AChameleon_C::Grid_Cell' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MGridCell) == 0x0027B0, "Member 'AChameleon_C::MGridCell' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IGridCell) == 0x0027B8, "Member 'AChameleon_C::IGridCell' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Grid_Cell_Animated) == 0x0027C0, "Member 'AChameleon_C::Grid_Cell_Animated' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Grid_Cell_Animation_Speed) == 0x0027C8, "Member 'AChameleon_C::Grid_Cell_Animation_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Grid_Cell_Color) == 0x0027D0, "Member 'AChameleon_C::Grid_Cell_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Grid_Cell_Void_Color) == 0x0027E0, "Member 'AChameleon_C::Grid_Cell_Void_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Grid_Cell_Tiling) == 0x0027F0, "Member 'AChameleon_C::Grid_Cell_Tiling' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Grid_Cell_Transition_Amount) == 0x0027F8, "Member 'AChameleon_C::Grid_Cell_Transition_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Lens_Distortion) == 0x002800, "Member 'AChameleon_C::Lens_Distortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MLensDistortion) == 0x002808, "Member 'AChameleon_C::MLensDistortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ILensDistortion) == 0x002810, "Member 'AChameleon_C::ILensDistortion' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Lens_Distortion_Optic_Refinement) == 0x002818, "Member 'AChameleon_C::Lens_Distortion_Optic_Refinement' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Lens_Distortion_Optic_Size) == 0x002820, "Member 'AChameleon_C::Lens_Distortion_Optic_Size' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Lens_Distortion_Optic_Position_X) == 0x002828, "Member 'AChameleon_C::Lens_Distortion_Optic_Position_X' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Lens_Distortion_Optic_Position_Y) == 0x002830, "Member 'AChameleon_C::Lens_Distortion_Optic_Position_Y' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Lens_Distortion_Scope_Texture) == 0x002838, "Member 'AChameleon_C::Lens_Distortion_Scope_Texture' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Lens_Distortion_Scope_Texture_Scale_X) == 0x002840, "Member 'AChameleon_C::Lens_Distortion_Scope_Texture_Scale_X' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Lens_Distortion_Scope_Texture_Scale_Y) == 0x002848, "Member 'AChameleon_C::Lens_Distortion_Scope_Texture_Scale_Y' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Lens_Distortion_Minus_Advanced) == 0x002850, "Member 'AChameleon_C::Lens_Distortion_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Grid_Cell_Minus_Advanced) == 0x002888, "Member 'AChameleon_C::Grid_Cell_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Zone) == 0x0028C0, "Member 'AChameleon_C::Zone' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MZone) == 0x0028C8, "Member 'AChameleon_C::MZone' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IZone) == 0x0028D0, "Member 'AChameleon_C::IZone' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Zone_Inverted) == 0x0028D8, "Member 'AChameleon_C::Zone_Inverted' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Zone_Center) == 0x0028DC, "Member 'AChameleon_C::Zone_Center' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Zone_Radius) == 0x0028F0, "Member 'AChameleon_C::Zone_Radius' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Zone_Edge_Hardness) == 0x0028F8, "Member 'AChameleon_C::Zone_Edge_Hardness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Zone_Edge_Color) == 0x002900, "Member 'AChameleon_C::Zone_Edge_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Zone_Coverage_Color) == 0x002910, "Member 'AChameleon_C::Zone_Coverage_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Zone_Minus_Advanced) == 0x002920, "Member 'AChameleon_C::Zone_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pyramid) == 0x002958, "Member 'AChameleon_C::Pyramid' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MPyramid) == 0x002960, "Member 'AChameleon_C::MPyramid' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IPyramid) == 0x002968, "Member 'AChameleon_C::IPyramid' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pyramid_Masked) == 0x002970, "Member 'AChameleon_C::Pyramid_Masked' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pyramid_Background_Color) == 0x002974, "Member 'AChameleon_C::Pyramid_Background_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pyramid_Width) == 0x002988, "Member 'AChameleon_C::Pyramid_Width' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pyramid_Pan) == 0x002990, "Member 'AChameleon_C::Pyramid_Pan' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pyramid_Tile_Amount) == 0x002998, "Member 'AChameleon_C::Pyramid_Tile_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Pyramid_Minus_Advanced) == 0x0029A0, "Member 'AChameleon_C::Pyramid_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mojo) == 0x0029D8, "Member 'AChameleon_C::Mojo' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MMojo) == 0x0029E0, "Member 'AChameleon_C::MMojo' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IMojo) == 0x0029E8, "Member 'AChameleon_C::IMojo' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mojo_Animated) == 0x0029F0, "Member 'AChameleon_C::Mojo_Animated' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mojo_Animation_Speed) == 0x0029F8, "Member 'AChameleon_C::Mojo_Animation_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mojo_Mask) == 0x002A00, "Member 'AChameleon_C::Mojo_Mask' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mojo_Distortion_Map) == 0x002A08, "Member 'AChameleon_C::Mojo_Distortion_Map' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mojo_Distortion_Amount) == 0x002A10, "Member 'AChameleon_C::Mojo_Distortion_Amount' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mojo_Color) == 0x002A18, "Member 'AChameleon_C::Mojo_Color' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mojo_Intensity) == 0x002A28, "Member 'AChameleon_C::Mojo_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mojo_Phase) == 0x002A30, "Member 'AChameleon_C::Mojo_Phase' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mojo_Tolerance) == 0x002A38, "Member 'AChameleon_C::Mojo_Tolerance' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Mojo_Minus_Advanced) == 0x002A40, "Member 'AChameleon_C::Mojo_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Gradient_Fog) == 0x002A78, "Member 'AChameleon_C::Gradient_Fog' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MGradientFog) == 0x002A80, "Member 'AChameleon_C::MGradientFog' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IGradientFog) == 0x002A88, "Member 'AChameleon_C::IGradientFog' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Gradient_Fog_Colors) == 0x002A90, "Member 'AChameleon_C::Gradient_Fog_Colors' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Gradient_Fog_Distance) == 0x002AA0, "Member 'AChameleon_C::Gradient_Fog_Distance' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Gradient_Fog_Sharpness) == 0x002AA8, "Member 'AChameleon_C::Gradient_Fog_Sharpness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Gradient_Fog_Minus_Advanced) == 0x002AB0, "Member 'AChameleon_C::Gradient_Fog_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ColorIndexRT) == 0x002AE8, "Member 'AChameleon_C::ColorIndexRT' has a wrong offset!");
static_assert(offsetof(AChameleon_C, M_ColorIndexer) == 0x002AF0, "Member 'AChameleon_C::M_ColorIndexer' has a wrong offset!");
static_assert(offsetof(AChameleon_C, I_ColorIndexer) == 0x002AF8, "Member 'AChameleon_C::I_ColorIndexer' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Dither) == 0x002B00, "Member 'AChameleon_C::Dither' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MDither) == 0x002B08, "Member 'AChameleon_C::MDither' has a wrong offset!");
static_assert(offsetof(AChameleon_C, IDither) == 0x002B10, "Member 'AChameleon_C::IDither' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Dither_Limit) == 0x002B18, "Member 'AChameleon_C::Dither_Limit' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Dither_Minus_Advanced) == 0x002B20, "Member 'AChameleon_C::Dither_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Speed_Lines) == 0x002B58, "Member 'AChameleon_C::Speed_Lines' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MSpeedLines_) == 0x002B60, "Member 'AChameleon_C::MSpeedLines_' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ISpeedLines) == 0x002B68, "Member 'AChameleon_C::ISpeedLines' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Speed_Lines_Intensity) == 0x002B70, "Member 'AChameleon_C::Speed_Lines_Intensity' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Speed_Lines_Line_Width) == 0x002B78, "Member 'AChameleon_C::Speed_Lines_Line_Width' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Speed_Lines_Speed) == 0x002B80, "Member 'AChameleon_C::Speed_Lines_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Speed_Lines_Mask_Radius) == 0x002B88, "Member 'AChameleon_C::Speed_Lines_Mask_Radius' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Speed_Lines_Mask_Hardness) == 0x002B90, "Member 'AChameleon_C::Speed_Lines_Mask_Hardness' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Speed_Lines_Minus_Advanced) == 0x002B98, "Member 'AChameleon_C::Speed_Lines_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Cyber_Scan) == 0x002BD0, "Member 'AChameleon_C::Cyber_Scan' has a wrong offset!");
static_assert(offsetof(AChameleon_C, MCyberScan) == 0x002BD8, "Member 'AChameleon_C::MCyberScan' has a wrong offset!");
static_assert(offsetof(AChameleon_C, ICyberScan) == 0x002BE0, "Member 'AChameleon_C::ICyberScan' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Cyber_Scan_Speed) == 0x002BE8, "Member 'AChameleon_C::Cyber_Scan_Speed' has a wrong offset!");
static_assert(offsetof(AChameleon_C, Cyber_Scan_Minus_Advanced) == 0x002BF0, "Member 'AChameleon_C::Cyber_Scan_Minus_Advanced' has a wrong offset!");
static_assert(offsetof(AChameleon_C, LOOK__Intensity) == 0x002C28, "Member 'AChameleon_C::LOOK__Intensity' has a wrong offset!");

}

