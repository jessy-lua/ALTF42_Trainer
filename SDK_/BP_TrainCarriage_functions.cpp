#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TrainCarriage

#include "Basic.hpp"

#include "BP_TrainCarriage_classes.hpp"
#include "BP_TrainCarriage_parameters.hpp"


namespace SDK
{

// Function BP_TrainCarriage.BP_TrainCarriage_C.AddActorToCollisionIgnoreList
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorToIgnore                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  IgnoreTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NeverExpire                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::AddActorToCollisionIgnoreList(class AActor* ActorToIgnore, double IgnoreTime, bool NeverExpire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "AddActorToCollisionIgnoreList");

	Params::BP_TrainCarriage_C_AddActorToCollisionIgnoreList Parms{};

	Parms.ActorToIgnore = ActorToIgnore;
	Parms.IgnoreTime = IgnoreTime;
	Parms.NeverExpire = NeverExpire;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.ApplyOrReleaseBrakes
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsBraking                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::ApplyOrReleaseBrakes(bool Param_IsBraking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "ApplyOrReleaseBrakes");

	Params::BP_TrainCarriage_C_ApplyOrReleaseBrakes Parms{};

	Parms.Param_IsBraking = Param_IsBraking;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.AttachToTrack
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::AttachToTrack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "AttachToTrack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.BogieChangeTracks
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_TrackConnection               TrackConnection                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UAC_Bogie_C*                      Bogie                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DistanceToEnd                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::BogieChangeTracks(struct FS_TrackConnection& TrackConnection, class UAC_Bogie_C* Bogie, double& Speed, double& DistanceToEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "BogieChangeTracks");

	Params::BP_TrainCarriage_C_BogieChangeTracks Parms{};

	Parms.TrackConnection = std::move(TrackConnection);
	Parms.Bogie = Bogie;
	Parms.Speed = Speed;
	Parms.DistanceToEnd = DistanceToEnd;

	UObject::ProcessEvent(Func, &Parms);

	TrackConnection = std::move(Parms.TrackConnection);
	Speed = Parms.Speed;
	DistanceToEnd = Parms.DistanceToEnd;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.CalculateSpeed
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreLerp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::CalculateSpeed(double& DeltaSeconds, bool IgnoreLerp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "CalculateSpeed");

	Params::BP_TrainCarriage_C_CalculateSpeed Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.IgnoreLerp = IgnoreLerp;

	UObject::ProcessEvent(Func, &Parms);

	DeltaSeconds = Parms.DeltaSeconds;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.CheckDistanceToParent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::CheckDistanceToParent(double& DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "CheckDistanceToParent");

	Params::BP_TrainCarriage_C_CheckDistanceToParent Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	DeltaSeconds = Parms.DeltaSeconds;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.ConnectToParent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USphereComponent*                 ParentHitch                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 ChildHitch                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::ConnectToParent(class USphereComponent* ParentHitch, class USphereComponent* ChildHitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "ConnectToParent");

	Params::BP_TrainCarriage_C_ConnectToParent Parms{};

	Parms.ParentHitch = ParentHitch;
	Parms.ChildHitch = ChildHitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.DerailCarriage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ImpactLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpactForce                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::DerailCarriage(const struct FVector& ImpactLocation, const struct FVector& ImpactForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "DerailCarriage");

	Params::BP_TrainCarriage_C_DerailCarriage Parms{};

	Parms.ImpactLocation = std::move(ImpactLocation);
	Parms.ImpactForce = std::move(ImpactForce);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.DisconnectChild
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::DisconnectChild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "DisconnectChild");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.DisconnectFromParent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AddToTimedIgnoreList                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::DisconnectFromParent(bool AddToTimedIgnoreList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "DisconnectFromParent");

	Params::BP_TrainCarriage_C_DisconnectFromParent Parms{};

	Parms.AddToTimedIgnoreList = AddToTimedIgnoreList;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.ExecuteUbergraph_BP_TrainCarriage
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::ExecuteUbergraph_BP_TrainCarriage(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "ExecuteUbergraph_BP_TrainCarriage");

	Params::BP_TrainCarriage_C_ExecuteUbergraph_BP_TrainCarriage Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.GetRotationBasedSmoothErrorTolerance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         SourceRotator                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// double                                  ErrorTolerance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::GetRotationBasedSmoothErrorTolerance(struct FRotator& SourceRotator, double* ErrorTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "GetRotationBasedSmoothErrorTolerance");

	Params::BP_TrainCarriage_C_GetRotationBasedSmoothErrorTolerance Parms{};

	Parms.SourceRotator = std::move(SourceRotator);

	UObject::ProcessEvent(Func, &Parms);

	SourceRotator = std::move(Parms.SourceRotator);

	if (ErrorTolerance != nullptr)
		*ErrorTolerance = Parms.ErrorTolerance;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.HandleActiveObstacle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::HandleActiveObstacle(double& DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "HandleActiveObstacle");

	Params::BP_TrainCarriage_C_HandleActiveObstacle Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	DeltaSeconds = Parms.DeltaSeconds;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.HandleEndOfTrack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HitByHelperBogie                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_TrainCarriage_C*              InstantiatingCarriage                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::HandleEndOfTrack(bool HitByHelperBogie, class ABP_TrainCarriage_C* InstantiatingCarriage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "HandleEndOfTrack");

	Params::BP_TrainCarriage_C_HandleEndOfTrack Parms{};

	Parms.HitByHelperBogie = HitByHelperBogie;
	Parms.InstantiatingCarriage = InstantiatingCarriage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.InitalizeMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::InitalizeMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "InitalizeMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.InitalizeTrainCarriage
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::InitalizeTrainCarriage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "InitalizeTrainCarriage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.LeanCarriage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::LeanCarriage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "LeanCarriage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.ManuallySetupCarriage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::ManuallySetupCarriage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "ManuallySetupCarriage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.NotifyAboutTrackUpdate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_TrainTrack_C*                 UpdatedTrack                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::NotifyAboutTrackUpdate(class ABP_TrainTrack_C* UpdatedTrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "NotifyAboutTrackUpdate");

	Params::BP_TrainCarriage_C_NotifyAboutTrackUpdate Parms{};

	Parms.UpdatedTrack = UpdatedTrack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.PerformRollCheck
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::PerformRollCheck(double& DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "PerformRollCheck");

	Params::BP_TrainCarriage_C_PerformRollCheck Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	DeltaSeconds = Parms.DeltaSeconds;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.PostMoveUpdate
// (BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::PostMoveUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "PostMoveUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.PutSensorBogieOutFront
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::PutSensorBogieOutFront()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "PutSensorBogieOutFront");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_TrainCarriage_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "ReceiveTick");

	Params::BP_TrainCarriage_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.RefreshPositionOnTrack
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::RefreshPositionOnTrack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "RefreshPositionOnTrack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.ResetCarriage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ResetChildren                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::ResetCarriage(bool ResetChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "ResetCarriage");

	Params::BP_TrainCarriage_C_ResetCarriage Parms{};

	Parms.ResetChildren = ResetChildren;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.RevertDistances
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::RevertDistances()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "RevertDistances");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.SensorPulse
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_Bogie_C*                      StartBogie                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    SensorHitSomething                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::SensorPulse(class UAC_Bogie_C* StartBogie, bool* SensorHitSomething)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "SensorPulse");

	Params::BP_TrainCarriage_C_SensorPulse Parms{};

	Parms.StartBogie = StartBogie;

	UObject::ProcessEvent(Func, &Parms);

	if (SensorHitSomething != nullptr)
		*SensorHitSomething = Parms.SensorHitSomething;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.SetCarriageDirection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BogieDirectionOfTravel                DirOfTravel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::SetCarriageDirection(E_BogieDirectionOfTravel DirOfTravel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "SetCarriageDirection");

	Params::BP_TrainCarriage_C_SetCarriageDirection Parms{};

	Parms.DirOfTravel = DirOfTravel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.SetCarriageState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CarriageState                         NewCarriageState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PassToChildren                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::SetCarriageState(E_CarriageState NewCarriageState, bool PassToChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "SetCarriageState");

	Params::BP_TrainCarriage_C_SetCarriageState Parms{};

	Parms.NewCarriageState = NewCarriageState;
	Parms.PassToChildren = PassToChildren;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.SetChildCarriage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_TrainCarriage_C*              NewChild                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::SetChildCarriage(class ABP_TrainCarriage_C* NewChild)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "SetChildCarriage");

	Params::BP_TrainCarriage_C_SetChildCarriage Parms{};

	Parms.NewChild = NewChild;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.SetParentCarriage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_TrainCarriage_C*              NewParent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    RefreshPosition                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::SetParentCarriage(class ABP_TrainCarriage_C* NewParent, bool RefreshPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "SetParentCarriage");

	Params::BP_TrainCarriage_C_SetParentCarriage Parms{};

	Parms.NewParent = NewParent;
	Parms.RefreshPosition = RefreshPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.SetupAnimations
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::SetupAnimations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "SetupAnimations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.SetupBogies
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::SetupBogies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "SetupBogies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.SetupCollision
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::SetupCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "SetupCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.SmoothOutBogieDistance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_Bogie_C*                      Bogie                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  TargetDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PreviousLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::SmoothOutBogieDistance(class UAC_Bogie_C* Bogie, double TargetDistance, const struct FVector& PreviousLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "SmoothOutBogieDistance");

	Params::BP_TrainCarriage_C_SmoothOutBogieDistance Parms{};

	Parms.Bogie = Bogie;
	Parms.TargetDistance = TargetDistance;
	Parms.PreviousLocation = std::move(PreviousLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.StopCarriage
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::StopCarriage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "StopCarriage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.TickBogieMovement
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_Bogie_C*                      Bogie                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreEndOfTrack                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HitEOT                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::TickBogieMovement(class UAC_Bogie_C* Bogie, double& Speed, bool IgnoreEndOfTrack, bool* HitEOT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "TickBogieMovement");

	Params::BP_TrainCarriage_C_TickBogieMovement Parms{};

	Parms.Bogie = Bogie;
	Parms.Speed = Speed;
	Parms.IgnoreEndOfTrack = IgnoreEndOfTrack;

	UObject::ProcessEvent(Func, &Parms);

	Speed = Parms.Speed;

	if (HitEOT != nullptr)
		*HitEOT = Parms.HitEOT;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.TickCarriageMovement
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SuccessfulUpdate                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UpdateAborted                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::TickCarriageMovement(double& DeltaSeconds, bool* SuccessfulUpdate, bool* UpdateAborted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "TickCarriageMovement");

	Params::BP_TrainCarriage_C_TickCarriageMovement Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	DeltaSeconds = Parms.DeltaSeconds;

	if (SuccessfulUpdate != nullptr)
		*SuccessfulUpdate = Parms.SuccessfulUpdate;

	if (UpdateAborted != nullptr)
		*UpdateAborted = Parms.UpdateAborted;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.TickCollision
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::TickCollision(double& DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "TickCollision");

	Params::BP_TrainCarriage_C_TickCollision Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	DeltaSeconds = Parms.DeltaSeconds;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.ToggleCarriageDirection
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::ToggleCarriageDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "ToggleCarriageDirection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.UpdateAnimations
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::UpdateAnimations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "UpdateAnimations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.UpdateBogieDistances
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  StartingTrackDistance                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_TrainTrack_C*                 Track                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   TrackSplineIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAlignedBogies                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UAC_Bogie_C*>              Param_Bogies                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    Invert                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::UpdateBogieDistances(double& StartingTrackDistance, class ABP_TrainTrack_C* Track, int32& TrackSplineIndex, bool SkipAlignedBogies, TArray<class UAC_Bogie_C*>& Param_Bogies, bool Invert)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "UpdateBogieDistances");

	Params::BP_TrainCarriage_C_UpdateBogieDistances Parms{};

	Parms.StartingTrackDistance = StartingTrackDistance;
	Parms.Track = Track;
	Parms.TrackSplineIndex = TrackSplineIndex;
	Parms.SkipAlignedBogies = SkipAlignedBogies;
	Parms.Param_Bogies = std::move(Param_Bogies);
	Parms.Invert = Invert;

	UObject::ProcessEvent(Func, &Parms);

	StartingTrackDistance = Parms.StartingTrackDistance;
	TrackSplineIndex = Parms.TrackSplineIndex;
	Param_Bogies = std::move(Parms.Param_Bogies);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.UpdateCarriageMeshLocations
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::UpdateCarriageMeshLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "UpdateCarriageMeshLocations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.UpdateSettingsFromParent
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::UpdateSettingsFromParent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "UpdateSettingsFromParent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.UpdateStartingDistanceRelativeToParent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::UpdateStartingDistanceRelativeToParent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "UpdateStartingDistanceRelativeToParent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainCarriage_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.WarpCarriageToStartingPoint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WarpChildren                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::WarpCarriageToStartingPoint(bool WarpChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "WarpCarriageToStartingPoint");

	Params::BP_TrainCarriage_C_WarpCarriageToStartingPoint Parms{};

	Parms.WarpChildren = WarpChildren;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.GetWheelSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  WheelSpeed                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::GetWheelSpeed(double* WheelSpeed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "GetWheelSpeed");

	Params::BP_TrainCarriage_C_GetWheelSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WheelSpeed != nullptr)
		*WheelSpeed = Parms.WheelSpeed;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.IsActorOnIgnoreList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           ActorToCheck                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOnIgnoreList                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::IsActorOnIgnoreList(class AActor* ActorToCheck, bool* IsOnIgnoreList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "IsActorOnIgnoreList");

	Params::BP_TrainCarriage_C_IsActorOnIgnoreList Parms{};

	Parms.ActorToCheck = ActorToCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (IsOnIgnoreList != nullptr)
		*IsOnIgnoreList = Parms.IsOnIgnoreList;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.IsDirectionOfTravelInverted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// E_TrackSplineLocation                   ConnectionLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInverted                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainCarriage_C::IsDirectionOfTravelInverted(E_TrackSplineLocation& ConnectionLocation, double& Speed, bool* IsInverted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "IsDirectionOfTravelInverted");

	Params::BP_TrainCarriage_C_IsDirectionOfTravelInverted Parms{};

	Parms.ConnectionLocation = ConnectionLocation;
	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);

	ConnectionLocation = Parms.ConnectionLocation;
	Speed = Parms.Speed;

	if (IsInverted != nullptr)
		*IsInverted = Parms.IsInverted;
}


// Function BP_TrainCarriage.BP_TrainCarriage_C.PrintDebugString
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           InfoString                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)

void ABP_TrainCarriage_C::PrintDebugString(class FString& InfoString) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainCarriage_C", "PrintDebugString");

	Params::BP_TrainCarriage_C_PrintDebugString Parms{};

	Parms.InfoString = std::move(InfoString);

	UObject::ProcessEvent(Func, &Parms);

	InfoString = std::move(Parms.InfoString);
}

}

