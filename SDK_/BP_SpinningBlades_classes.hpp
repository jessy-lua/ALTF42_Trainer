#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpinningBlades

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SpinningBlades.BP_SpinningBlades_C
// 0x00E8 (0x0380 - 0x0298)
class ABP_SpinningBlades_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTickOptToolkitTargetComponent*         TickOptToolkitTarget;                              // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        RollingWOod;                                       // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Blade;                                          // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          Blades;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   base;                                              // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TurningOn_PlayingRate_86EBE3B342F0A4F85763238F6473F964; // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TurningOn__Direction_86EBE3B342F0A4F85763238F6473F964; // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41AD[0x3];                                     // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TurningOn;                                         // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOn;                                              // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Damage_Trap_;                                      // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          UseIntervals;                                      // 0x02E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41AE[0x1];                                     // 0x02E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfBlades;                                    // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RevsPerSeconds;                                    // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TransitionRate;                                    // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StateTimeInterval;                                 // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            BladeMeshOverride;                                 // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpinning;                                        // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41AF[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ModifyBoxExtentBy;                                 // 0x0310(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBoxComponent*>                  CollisionBoxes;                                    // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UMaterialInterface*                     BaseMaterialOverride;                              // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     BladesMaterialOverride;                            // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AALTF4_Loco_BP_C*                       ALTF4_Char;                                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UInstancedStaticMeshComponent*>  CollisionSM;                                       // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        ForceAppliedOnImpact;                              // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact_Point;                                      // 0x0368(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActiveBlades();
	void BaseMatOverride(class UMaterialInterface* Material);
	void BladesMatOverride(class UMaterialInterface* Material);
	void BladeSMOverride(class UStaticMesh* NewMesh);
	void BndEvt__BP_SpinningBlades_SM_Blade_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ExecuteUbergraph_BP_SpinningBlades(int32 EntryPoint);
	void HittedSomething(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void TurningOn__FinishedFunc();
	void TurningOn__UpdateFunc();
	void TurnOff();
	void TurnOn();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SpinningBlades_C">();
	}
	static class ABP_SpinningBlades_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SpinningBlades_C>();
	}
};
static_assert(alignof(ABP_SpinningBlades_C) == 0x000008, "Wrong alignment on ABP_SpinningBlades_C");
static_assert(sizeof(ABP_SpinningBlades_C) == 0x000380, "Wrong size on ABP_SpinningBlades_C");
static_assert(offsetof(ABP_SpinningBlades_C, UberGraphFrame) == 0x000298, "Member 'ABP_SpinningBlades_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, TickOptToolkitTarget) == 0x0002A0, "Member 'ABP_SpinningBlades_C::TickOptToolkitTarget' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, RollingWOod) == 0x0002A8, "Member 'ABP_SpinningBlades_C::RollingWOod' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, SM_Blade) == 0x0002B0, "Member 'ABP_SpinningBlades_C::SM_Blade' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, Blades) == 0x0002B8, "Member 'ABP_SpinningBlades_C::Blades' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, base) == 0x0002C0, "Member 'ABP_SpinningBlades_C::base' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, DefaultSceneRoot) == 0x0002C8, "Member 'ABP_SpinningBlades_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, TurningOn_PlayingRate_86EBE3B342F0A4F85763238F6473F964) == 0x0002D0, "Member 'ABP_SpinningBlades_C::TurningOn_PlayingRate_86EBE3B342F0A4F85763238F6473F964' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, TurningOn__Direction_86EBE3B342F0A4F85763238F6473F964) == 0x0002D4, "Member 'ABP_SpinningBlades_C::TurningOn__Direction_86EBE3B342F0A4F85763238F6473F964' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, TurningOn) == 0x0002D8, "Member 'ABP_SpinningBlades_C::TurningOn' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, IsOn) == 0x0002E0, "Member 'ABP_SpinningBlades_C::IsOn' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, Damage_Trap_) == 0x0002E1, "Member 'ABP_SpinningBlades_C::Damage_Trap_' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, UseIntervals) == 0x0002E2, "Member 'ABP_SpinningBlades_C::UseIntervals' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, NumberOfBlades) == 0x0002E4, "Member 'ABP_SpinningBlades_C::NumberOfBlades' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, RevsPerSeconds) == 0x0002E8, "Member 'ABP_SpinningBlades_C::RevsPerSeconds' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, TransitionRate) == 0x0002F0, "Member 'ABP_SpinningBlades_C::TransitionRate' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, StateTimeInterval) == 0x0002F8, "Member 'ABP_SpinningBlades_C::StateTimeInterval' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, BladeMeshOverride) == 0x000300, "Member 'ABP_SpinningBlades_C::BladeMeshOverride' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, IsSpinning) == 0x000308, "Member 'ABP_SpinningBlades_C::IsSpinning' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, ModifyBoxExtentBy) == 0x000310, "Member 'ABP_SpinningBlades_C::ModifyBoxExtentBy' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, CollisionBoxes) == 0x000328, "Member 'ABP_SpinningBlades_C::CollisionBoxes' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, BaseMaterialOverride) == 0x000338, "Member 'ABP_SpinningBlades_C::BaseMaterialOverride' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, BladesMaterialOverride) == 0x000340, "Member 'ABP_SpinningBlades_C::BladesMaterialOverride' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, ALTF4_Char) == 0x000348, "Member 'ABP_SpinningBlades_C::ALTF4_Char' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, CollisionSM) == 0x000350, "Member 'ABP_SpinningBlades_C::CollisionSM' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, ForceAppliedOnImpact) == 0x000360, "Member 'ABP_SpinningBlades_C::ForceAppliedOnImpact' has a wrong offset!");
static_assert(offsetof(ABP_SpinningBlades_C, Impact_Point) == 0x000368, "Member 'ABP_SpinningBlades_C::Impact_Point' has a wrong offset!");

}

