#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFL_TrainAndRail

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BFL_TrainAndRail.BFL_TrainAndRail_C
// 0x0000 (0x0028 - 0x0028)
class UBFL_TrainAndRail_C final : public UBlueprintFunctionLibrary
{
public:
	static void FindLocationOnTracks(class ABP_TrainTrack_C* StartingTrack, struct FS_TrackSpline& StartingTrackSpline, double& StartingDistance, double& RequestedDistance, bool Invert, TArray<struct FS_TrackPassThroughInfo>& CurrentPassThroughInfo, class UObject* __WorldContext, class ABP_TrainTrack_C** EndTrack, struct FS_TrackSpline* EndTrackSpline, double* EndDistance, bool* EndReached, bool* InvertedDirOfTravel, TArray<struct FS_TrackPassThroughInfo>* TravelInfo);
	static void GetClosestDistanceBetweenSplinePoints(class USplineComponent* Spline, int32& PointA, int32& PointB, struct FVector& WorldLocation, int32 NumDistanceSamples, class UObject* __WorldContext, double* ClosestDistance);
	static void GetClosestDistanceOnSpline(class USplineComponent*& Spline, struct FVector& WorldLocation, int32& DistanceSampleCount, class UObject* __WorldContext, double* DistanceOnSpline, bool* ValidDistance);
	static void GetClosestSplinePoint(class USplineComponent*& Spline, TArray<int32>& IgnorePoints, struct FVector& Location, class UObject* __WorldContext, int32* ClosestPointIndex);
	static void GetDistanceBetweenLocations(const struct FVector& PointA, const struct FVector& PointB, class UObject* __WorldContext, double* Distance);
	static void GetInternalCompTag(class UObject* __WorldContext, class FName* IgnoreTag);
	static void GetLowestFloat(double& ValueA, double& ValueB, class UObject* __WorldContext, double* Lowest, double* Highest);
	static void GetStartAndEndLocationOfSpline(class USplineComponent* SplineComp, class UObject* __WorldContext, struct FVector* StartPoint, struct FVector* EndPoint);
	static void GetTrackIgnoreTag(class UObject* __WorldContext, class FName* IgnoreTag);
	static void GetUsableSplinesFromTrack(class ABP_TrainTrack_C* SourceTrack, class UObject* __WorldContext, TArray<class USplineComponent*>* UsableSplineComponents);
	static void HasTrackSplines(class ABP_TrainTrack_C* Track, class UObject* __WorldContext, bool* Param_HasTrackSplines);
	static void IsValidTrackSplineIndex(class ABP_TrainTrack_C* Track, int32& SplineIndex, class UObject* __WorldContext, bool* ValidIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BFL_TrainAndRail_C">();
	}
	static class UBFL_TrainAndRail_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBFL_TrainAndRail_C>();
	}
};
static_assert(alignof(UBFL_TrainAndRail_C) == 0x000008, "Wrong alignment on UBFL_TrainAndRail_C");
static_assert(sizeof(UBFL_TrainAndRail_C) == 0x000028, "Wrong size on UBFL_TrainAndRail_C");

}

