#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DlgSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum DlgSystem.EDlgConditionStrength
// NumValues: 0x0003
enum class EDlgConditionStrength : uint8
{
	Strong                                   = 0,
	Weak                                     = 1,
	EDlgConditionStrength_MAX                = 2,
};

// Enum DlgSystem.EDlgConditionType
// NumValues: 0x000D
enum class EDlgConditionType : uint8
{
	IntCall                                  = 0,
	FloatCall                                = 1,
	BoolCall                                 = 2,
	NameCall                                 = 3,
	EventCall                                = 4,
	ClassIntVariable                         = 5,
	ClassFloatVariable                       = 6,
	ClassBoolVariable                        = 7,
	ClassNameVariable                        = 8,
	WasNodeVisited                           = 9,
	HasSatisfiedChild                        = 10,
	Custom                                   = 11,
	EDlgConditionType_MAX                    = 12,
};

// Enum DlgSystem.EDlgOperation
// NumValues: 0x0007
enum class EDlgOperation : uint8
{
	Equal                                    = 0,
	NotEqual                                 = 1,
	Less                                     = 2,
	LessOrEqual                              = 3,
	Greater                                  = 4,
	GreaterOrEqual                           = 5,
	EDlgOperation_MAX                        = 6,
};

// Enum DlgSystem.EDlgCompare
// NumValues: 0x0004
enum class EDlgCompare : uint8
{
	ToConst                                  = 0,
	ToVariable                               = 1,
	ToClassVariable                          = 2,
	EDlgCompare_MAX                          = 3,
};

// Enum DlgSystem.EDlgValidateStatus
// NumValues: 0x0006
enum class EDlgValidateStatus : uint8
{
	Valid                                    = 0,
	ParticipantIsNull                        = 1,
	DialogueIsNull                           = 2,
	ParticipantDoesNotImplementInterface     = 3,
	ParticipantIsABlueprintClassAndDoesNotImplementInterface = 4,
	EDlgValidateStatus_MAX                   = 5,
};

// Enum DlgSystem.EDlgEventType
// NumValues: 0x000C
enum class EDlgEventType : uint8
{
	Event                                    = 0,
	ModifyInt                                = 1,
	ModifyFloat                              = 2,
	ModifyBool                               = 3,
	ModifyName                               = 4,
	ModifyClassIntVariable                   = 5,
	ModifyClassFloatVariable                 = 6,
	ModifyClassBoolVariable                  = 7,
	ModifyClassNameVariable                  = 8,
	Custom                                   = 9,
	UnrealFunction                           = 10,
	EDlgEventType_MAX                        = 11,
};

// Enum DlgSystem.EDlgTestEnum
// NumValues: 0x0005
enum class EDlgTestEnum : uint8
{
	First                                    = 0,
	Second                                   = 1,
	Third                                    = 2,
	NumOf                                    = 3,
	EDlgTestEnum_MAX                         = 4,
};

// Enum DlgSystem.EDlgEntryRestriction
// NumValues: 0x0004
enum class EDlgEntryRestriction : uint8
{
	None                                     = 0,
	OncePerContext                           = 1,
	Once                                     = 2,
	EDlgEntryRestriction_MAX                 = 3,
};

// Enum DlgSystem.EDlgNodeSelectorType
// NumValues: 0x0003
enum class EDlgNodeSelectorType : uint8
{
	First                                    = 0,
	Random                                   = 1,
	EDlgNodeSelectorType_MAX                 = 2,
};

// Enum DlgSystem.EDlgDialogueTextFormat
// NumValues: 0x0007
enum class EDlgDialogueTextFormat : uint8
{
	None                                     = 0,
	All                                      = 1,
	DialogueDEPRECATED                       = 2,
	StartTextFormats                         = 2,
	JSON                                     = 3,
	NumTextFormats                           = 4,
	EDlgDialogueTextFormat_MAX               = 5,
};

// Enum DlgSystem.EDlgVoiceDisplayedFields
// NumValues: 0x0005
enum class EDlgVoiceDisplayedFields : uint8
{
	None                                     = 0,
	SoundWave                                = 1,
	DialogueWave                             = 2,
	SoundWaveAndDialogueWave                 = 3,
	EDlgVoiceDisplayedFields_MAX             = 4,
};

// Enum DlgSystem.EDlgSpeakerStateVisibility
// NumValues: 0x0005
enum class EDlgSpeakerStateVisibility : uint8
{
	HideAll                                  = 0,
	ShowOnEdge                               = 1,
	ShowOnNode                               = 2,
	ShowOnNodeAndEdge                        = 3,
	EDlgSpeakerStateVisibility_MAX           = 4,
};

// Enum DlgSystem.EDlgTextInputKeyForNewLine
// NumValues: 0x0003
enum class EDlgTextInputKeyForNewLine : uint8
{
	Enter                                    = 0,
	ShiftPlusEnter                           = 1,
	EDlgTextInputKeyForNewLine_MAX           = 2,
};

// Enum DlgSystem.EDlgTextNamespaceLocalization
// NumValues: 0x0005
enum class EDlgTextNamespaceLocalization : uint8
{
	Ignore                                   = 0,
	PerDialogue                              = 1,
	WithPrefixPerDialogue                    = 2,
	Global                                   = 3,
	EDlgTextNamespaceLocalization_MAX        = 4,
};

// Enum DlgSystem.EDlgClassPickerDisplayMode
// NumValues: 0x0004
enum class EDlgClassPickerDisplayMode : uint8
{
	DefaultView                              = 0,
	TreeView                                 = 1,
	ListView                                 = 2,
	EDlgClassPickerDisplayMode_MAX           = 3,
};

// Enum DlgSystem.EDlgNoSatisfiedChildBehavior
// NumValues: 0x0004
enum class EDlgNoSatisfiedChildBehavior : uint8
{
	PrintErrorAndEndDialogue                 = 0,
	EndDialogue                              = 1,
	ContinueDialogue                         = 2,
	EDlgNoSatisfiedChildBehavior_MAX         = 3,
};

// Enum DlgSystem.EDlgTextArgumentType
// NumValues: 0x0009
enum class EDlgTextArgumentType : uint8
{
	DisplayName                              = 0,
	Gender                                   = 1,
	DialogueInt                              = 2,
	DialogueFloat                            = 3,
	ClassInt                                 = 4,
	ClassFloat                               = 5,
	ClassText                                = 6,
	Custom                                   = 7,
	EDlgTextArgumentType_MAX                 = 8,
};

// Enum DlgSystem.ENYLoggerLogLevel
// NumValues: 0x0007
enum class ENYLoggerLogLevel : uint8
{
	NoLogging                                = 0,
	Error                                    = 1,
	Warning                                  = 2,
	Info                                     = 3,
	Debug                                    = 4,
	Trace                                    = 5,
	ENYLoggerLogLevel_MAX                    = 6,
};

// ScriptStruct DlgSystem.DlgCondition
// 0x0060 (0x0060 - 0x0000)
struct FDlgCondition final
{
public:
	EDlgConditionStrength                         Strength;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlgConditionType                             ConditionType;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1740[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParticipantName;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CallbackName;                                      // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlgOperation                                 Operation;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlgCompare                                   CompareType;                                       // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1741[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OtherParticipantName;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OtherVariableName;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1742[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FloatValue;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameValue;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoolValue;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLongTermMemory;                                   // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1743[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x0044(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1744[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDlgConditionCustom*                    CustomCondition;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgCondition) == 0x000008, "Wrong alignment on FDlgCondition");
static_assert(sizeof(FDlgCondition) == 0x000060, "Wrong size on FDlgCondition");
static_assert(offsetof(FDlgCondition, Strength) == 0x000000, "Member 'FDlgCondition::Strength' has a wrong offset!");
static_assert(offsetof(FDlgCondition, ConditionType) == 0x000001, "Member 'FDlgCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(FDlgCondition, ParticipantName) == 0x000004, "Member 'FDlgCondition::ParticipantName' has a wrong offset!");
static_assert(offsetof(FDlgCondition, CallbackName) == 0x00000C, "Member 'FDlgCondition::CallbackName' has a wrong offset!");
static_assert(offsetof(FDlgCondition, Operation) == 0x000014, "Member 'FDlgCondition::Operation' has a wrong offset!");
static_assert(offsetof(FDlgCondition, CompareType) == 0x000015, "Member 'FDlgCondition::CompareType' has a wrong offset!");
static_assert(offsetof(FDlgCondition, OtherParticipantName) == 0x000018, "Member 'FDlgCondition::OtherParticipantName' has a wrong offset!");
static_assert(offsetof(FDlgCondition, OtherVariableName) == 0x000020, "Member 'FDlgCondition::OtherVariableName' has a wrong offset!");
static_assert(offsetof(FDlgCondition, IntValue) == 0x000028, "Member 'FDlgCondition::IntValue' has a wrong offset!");
static_assert(offsetof(FDlgCondition, FloatValue) == 0x000030, "Member 'FDlgCondition::FloatValue' has a wrong offset!");
static_assert(offsetof(FDlgCondition, NameValue) == 0x000038, "Member 'FDlgCondition::NameValue' has a wrong offset!");
static_assert(offsetof(FDlgCondition, bBoolValue) == 0x000040, "Member 'FDlgCondition::bBoolValue' has a wrong offset!");
static_assert(offsetof(FDlgCondition, bLongTermMemory) == 0x000041, "Member 'FDlgCondition::bLongTermMemory' has a wrong offset!");
static_assert(offsetof(FDlgCondition, Guid) == 0x000044, "Member 'FDlgCondition::Guid' has a wrong offset!");
static_assert(offsetof(FDlgCondition, CustomCondition) == 0x000058, "Member 'FDlgCondition::CustomCondition' has a wrong offset!");

// ScriptStruct DlgSystem.DlgTextArgument
// 0x0030 (0x0030 - 0x0000)
struct FDlgTextArgument final
{
public:
	class FString                                 DisplayString;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlgTextArgumentType                          Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1745[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParticipantName;                                   // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VariableName;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1746[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDlgTextArgumentCustom*                 CustomTextArgument;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgTextArgument) == 0x000008, "Wrong alignment on FDlgTextArgument");
static_assert(sizeof(FDlgTextArgument) == 0x000030, "Wrong size on FDlgTextArgument");
static_assert(offsetof(FDlgTextArgument, DisplayString) == 0x000000, "Member 'FDlgTextArgument::DisplayString' has a wrong offset!");
static_assert(offsetof(FDlgTextArgument, Type) == 0x000010, "Member 'FDlgTextArgument::Type' has a wrong offset!");
static_assert(offsetof(FDlgTextArgument, ParticipantName) == 0x000014, "Member 'FDlgTextArgument::ParticipantName' has a wrong offset!");
static_assert(offsetof(FDlgTextArgument, VariableName) == 0x00001C, "Member 'FDlgTextArgument::VariableName' has a wrong offset!");
static_assert(offsetof(FDlgTextArgument, CustomTextArgument) == 0x000028, "Member 'FDlgTextArgument::CustomTextArgument' has a wrong offset!");

// ScriptStruct DlgSystem.DlgEdge
// 0x0070 (0x0070 - 0x0000)
struct FDlgEdge final
{
public:
	int32                                         TargetIndex;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1747[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDlgCondition>                  Conditions;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   SpeakerState;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeInAllOptionListIfUnsatisfied;              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1748[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDlgNodeData*                           EdgeData;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDlgTextArgument>               TextArguments;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1749[0x18];                                    // 0x0058(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDlgEdge) == 0x000008, "Wrong alignment on FDlgEdge");
static_assert(sizeof(FDlgEdge) == 0x000070, "Wrong size on FDlgEdge");
static_assert(offsetof(FDlgEdge, TargetIndex) == 0x000000, "Member 'FDlgEdge::TargetIndex' has a wrong offset!");
static_assert(offsetof(FDlgEdge, Conditions) == 0x000008, "Member 'FDlgEdge::Conditions' has a wrong offset!");
static_assert(offsetof(FDlgEdge, SpeakerState) == 0x000018, "Member 'FDlgEdge::SpeakerState' has a wrong offset!");
static_assert(offsetof(FDlgEdge, bIncludeInAllOptionListIfUnsatisfied) == 0x000020, "Member 'FDlgEdge::bIncludeInAllOptionListIfUnsatisfied' has a wrong offset!");
static_assert(offsetof(FDlgEdge, EdgeData) == 0x000028, "Member 'FDlgEdge::EdgeData' has a wrong offset!");
static_assert(offsetof(FDlgEdge, Text) == 0x000030, "Member 'FDlgEdge::Text' has a wrong offset!");
static_assert(offsetof(FDlgEdge, TextArguments) == 0x000048, "Member 'FDlgEdge::TextArguments' has a wrong offset!");

// ScriptStruct DlgSystem.DlgEdgeData
// 0x0078 (0x0078 - 0x0000)
struct FDlgEdgeData final
{
public:
	bool                                          bSatisfied;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_174A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDlgEdge                               Edge;                                              // 0x0008(0x0070)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FDlgEdgeData) == 0x000008, "Wrong alignment on FDlgEdgeData");
static_assert(sizeof(FDlgEdgeData) == 0x000078, "Wrong size on FDlgEdgeData");
static_assert(offsetof(FDlgEdgeData, bSatisfied) == 0x000000, "Member 'FDlgEdgeData::bSatisfied' has a wrong offset!");
static_assert(offsetof(FDlgEdgeData, Edge) == 0x000008, "Member 'FDlgEdgeData::Edge' has a wrong offset!");

// ScriptStruct DlgSystem.DlgParticipantClass
// 0x0010 (0x0010 - 0x0000)
struct FDlgParticipantClass final
{
public:
	class FName                                   ParticipantName;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ParticipantClass;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgParticipantClass) == 0x000008, "Wrong alignment on FDlgParticipantClass");
static_assert(sizeof(FDlgParticipantClass) == 0x000010, "Wrong size on FDlgParticipantClass");
static_assert(offsetof(FDlgParticipantClass, ParticipantName) == 0x000000, "Member 'FDlgParticipantClass::ParticipantName' has a wrong offset!");
static_assert(offsetof(FDlgParticipantClass, ParticipantClass) == 0x000008, "Member 'FDlgParticipantClass::ParticipantClass' has a wrong offset!");

// ScriptStruct DlgSystem.DlgParticipantData
// 0x04B0 (0x04B0 - 0x0000)
struct FDlgParticipantData final
{
public:
	TSet<class FName>                             Conditions;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class UClass*>                           CustomConditions;                                  // 0x0050(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             Events;                                            // 0x00A0(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             UnrealFunctions;                                   // 0x00F0(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class UClass*>                           CustomEvents;                                      // 0x0140(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class UClass*>                           CustomTextArguments;                               // 0x0190(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             IntVariableNames;                                  // 0x01E0(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             FloatVariableNames;                                // 0x0230(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             BoolVariableNames;                                 // 0x0280(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             NameVariableNames;                                 // 0x02D0(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             ClassIntVariableNames;                             // 0x0320(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             ClassFloatVariableNames;                           // 0x0370(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             ClassBoolVariableNames;                            // 0x03C0(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             ClassNameVariableNames;                            // 0x0410(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TSet<class FName>                             ClassTextVariableNames;                            // 0x0460(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgParticipantData) == 0x000008, "Wrong alignment on FDlgParticipantData");
static_assert(sizeof(FDlgParticipantData) == 0x0004B0, "Wrong size on FDlgParticipantData");
static_assert(offsetof(FDlgParticipantData, Conditions) == 0x000000, "Member 'FDlgParticipantData::Conditions' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, CustomConditions) == 0x000050, "Member 'FDlgParticipantData::CustomConditions' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, Events) == 0x0000A0, "Member 'FDlgParticipantData::Events' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, UnrealFunctions) == 0x0000F0, "Member 'FDlgParticipantData::UnrealFunctions' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, CustomEvents) == 0x000140, "Member 'FDlgParticipantData::CustomEvents' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, CustomTextArguments) == 0x000190, "Member 'FDlgParticipantData::CustomTextArguments' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, IntVariableNames) == 0x0001E0, "Member 'FDlgParticipantData::IntVariableNames' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, FloatVariableNames) == 0x000230, "Member 'FDlgParticipantData::FloatVariableNames' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, BoolVariableNames) == 0x000280, "Member 'FDlgParticipantData::BoolVariableNames' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, NameVariableNames) == 0x0002D0, "Member 'FDlgParticipantData::NameVariableNames' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, ClassIntVariableNames) == 0x000320, "Member 'FDlgParticipantData::ClassIntVariableNames' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, ClassFloatVariableNames) == 0x000370, "Member 'FDlgParticipantData::ClassFloatVariableNames' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, ClassBoolVariableNames) == 0x0003C0, "Member 'FDlgParticipantData::ClassBoolVariableNames' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, ClassNameVariableNames) == 0x000410, "Member 'FDlgParticipantData::ClassNameVariableNames' has a wrong offset!");
static_assert(offsetof(FDlgParticipantData, ClassTextVariableNames) == 0x000460, "Member 'FDlgParticipantData::ClassTextVariableNames' has a wrong offset!");

// ScriptStruct DlgSystem.DlgEvent
// 0x0038 (0x0038 - 0x0000)
struct FDlgEvent final
{
public:
	class FName                                   ParticipantName;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlgEventType                                 EventType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174B[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventName;                                         // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        FloatValue;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameValue;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDelta;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174C[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDlgEventCustom*                        CustomEvent;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgEvent) == 0x000008, "Wrong alignment on FDlgEvent");
static_assert(sizeof(FDlgEvent) == 0x000038, "Wrong size on FDlgEvent");
static_assert(offsetof(FDlgEvent, ParticipantName) == 0x000000, "Member 'FDlgEvent::ParticipantName' has a wrong offset!");
static_assert(offsetof(FDlgEvent, EventType) == 0x000008, "Member 'FDlgEvent::EventType' has a wrong offset!");
static_assert(offsetof(FDlgEvent, EventName) == 0x00000C, "Member 'FDlgEvent::EventName' has a wrong offset!");
static_assert(offsetof(FDlgEvent, IntValue) == 0x000014, "Member 'FDlgEvent::IntValue' has a wrong offset!");
static_assert(offsetof(FDlgEvent, FloatValue) == 0x000018, "Member 'FDlgEvent::FloatValue' has a wrong offset!");
static_assert(offsetof(FDlgEvent, NameValue) == 0x000020, "Member 'FDlgEvent::NameValue' has a wrong offset!");
static_assert(offsetof(FDlgEvent, bDelta) == 0x000028, "Member 'FDlgEvent::bDelta' has a wrong offset!");
static_assert(offsetof(FDlgEvent, bValue) == 0x000029, "Member 'FDlgEvent::bValue' has a wrong offset!");
static_assert(offsetof(FDlgEvent, CustomEvent) == 0x000030, "Member 'FDlgEvent::CustomEvent' has a wrong offset!");

// ScriptStruct DlgSystem.DlgClassAndObject
// 0x0010 (0x0010 - 0x0000)
struct FDlgClassAndObject final
{
public:
	class UClass*                                 Class;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgClassAndObject) == 0x000008, "Wrong alignment on FDlgClassAndObject");
static_assert(sizeof(FDlgClassAndObject) == 0x000010, "Wrong size on FDlgClassAndObject");
static_assert(offsetof(FDlgClassAndObject, Class) == 0x000000, "Member 'FDlgClassAndObject::Class' has a wrong offset!");
static_assert(offsetof(FDlgClassAndObject, Object) == 0x000008, "Member 'FDlgClassAndObject::Object' has a wrong offset!");

// ScriptStruct DlgSystem.DlgIOTesterOptions
// 0x0005 (0x0005 - 0x0000)
struct FDlgIOTesterOptions final
{
public:
	bool                                          bSupportsPureEnumContainer;                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsNonPrimitiveInSet;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsColorPrimitives;                          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsDatePrimitive;                            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsUObjectValueInMap;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgIOTesterOptions) == 0x000001, "Wrong alignment on FDlgIOTesterOptions");
static_assert(sizeof(FDlgIOTesterOptions) == 0x000005, "Wrong size on FDlgIOTesterOptions");
static_assert(offsetof(FDlgIOTesterOptions, bSupportsPureEnumContainer) == 0x000000, "Member 'FDlgIOTesterOptions::bSupportsPureEnumContainer' has a wrong offset!");
static_assert(offsetof(FDlgIOTesterOptions, bSupportsNonPrimitiveInSet) == 0x000001, "Member 'FDlgIOTesterOptions::bSupportsNonPrimitiveInSet' has a wrong offset!");
static_assert(offsetof(FDlgIOTesterOptions, bSupportsColorPrimitives) == 0x000002, "Member 'FDlgIOTesterOptions::bSupportsColorPrimitives' has a wrong offset!");
static_assert(offsetof(FDlgIOTesterOptions, bSupportsDatePrimitive) == 0x000003, "Member 'FDlgIOTesterOptions::bSupportsDatePrimitive' has a wrong offset!");
static_assert(offsetof(FDlgIOTesterOptions, bSupportsUObjectValueInMap) == 0x000004, "Member 'FDlgIOTesterOptions::bSupportsUObjectValueInMap' has a wrong offset!");

// ScriptStruct DlgSystem.DlgTestStructPrimitives
// 0x0250 (0x0250 - 0x0000)
struct FDlgTestStructPrimitives final
{
public:
	uint8                                         Pad_174D[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Integer32;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Integer64;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoolean;                                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlgTestEnum                                  Enum;                                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174F[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float;                                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmptyString;                                       // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0048(0x0018)(NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LinearColor;                                       // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1750[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DateTime;                                          // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              IntPoint;                                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector3;                                           // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Vector2;                                           // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Vector4;                                           // 0x00B0(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1751[0x8];                                     // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                Matrix;                                            // 0x00F0(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0170(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Class;                                             // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EmptyObjectInitialized;                            // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EmptyObjectInitializedReference;                   // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ConstTexture2D;                                    // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture2DReference;                                // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDlgTestObjectPrimitivesBase*           ObjectPrimitivesBase;                              // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDlgTestObjectPrimitives_DefaultToInstanced* ObjectDefaultToInstanced;                          // 0x0210(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDlgTestObjectPrimitives_ChildA*        ObjectPrimitivesChildA;                            // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDlgTestObjectPrimitivesBase*           ObjectSwitch;                                      // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDlgTestObjectPrimitivesBase*           ObjectPrimitivesPolymorphismChildA;                // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDlgTestObjectPrimitivesBase*           ObjectPrimitivesPolymorphismChildB;                // 0x0230(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDlgTestObjectPrimitives_GrandChildA_Of_ChildA* ObjectPrimitivesGrandChildA;                       // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDlgTestObjectPrimitivesBase*           ObjectPrimitivesPolymorphismBaseGrandChildA;       // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDlgTestObjectPrimitives_ChildA*        ObjectPrimitivesPolymorphismChildGrandChildA;      // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgTestStructPrimitives) == 0x000010, "Wrong alignment on FDlgTestStructPrimitives");
static_assert(sizeof(FDlgTestStructPrimitives) == 0x000250, "Wrong size on FDlgTestStructPrimitives");
static_assert(offsetof(FDlgTestStructPrimitives, Integer32) == 0x000008, "Member 'FDlgTestStructPrimitives::Integer32' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Integer64) == 0x000010, "Member 'FDlgTestStructPrimitives::Integer64' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, bBoolean) == 0x000018, "Member 'FDlgTestStructPrimitives::bBoolean' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Enum) == 0x000019, "Member 'FDlgTestStructPrimitives::Enum' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Float) == 0x00001C, "Member 'FDlgTestStructPrimitives::Float' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Name) == 0x000020, "Member 'FDlgTestStructPrimitives::Name' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, String) == 0x000028, "Member 'FDlgTestStructPrimitives::String' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, EmptyString) == 0x000038, "Member 'FDlgTestStructPrimitives::EmptyString' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Text) == 0x000048, "Member 'FDlgTestStructPrimitives::Text' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Color) == 0x000060, "Member 'FDlgTestStructPrimitives::Color' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, LinearColor) == 0x000064, "Member 'FDlgTestStructPrimitives::LinearColor' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, DateTime) == 0x000078, "Member 'FDlgTestStructPrimitives::DateTime' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, IntPoint) == 0x000080, "Member 'FDlgTestStructPrimitives::IntPoint' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Vector3) == 0x000088, "Member 'FDlgTestStructPrimitives::Vector3' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Vector2) == 0x0000A0, "Member 'FDlgTestStructPrimitives::Vector2' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Vector4) == 0x0000B0, "Member 'FDlgTestStructPrimitives::Vector4' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Rotator) == 0x0000D0, "Member 'FDlgTestStructPrimitives::Rotator' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Matrix) == 0x0000F0, "Member 'FDlgTestStructPrimitives::Matrix' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Transform) == 0x000170, "Member 'FDlgTestStructPrimitives::Transform' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Guid) == 0x0001D0, "Member 'FDlgTestStructPrimitives::Guid' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Class) == 0x0001E0, "Member 'FDlgTestStructPrimitives::Class' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, EmptyObjectInitialized) == 0x0001E8, "Member 'FDlgTestStructPrimitives::EmptyObjectInitialized' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, EmptyObjectInitializedReference) == 0x0001F0, "Member 'FDlgTestStructPrimitives::EmptyObjectInitializedReference' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, ConstTexture2D) == 0x0001F8, "Member 'FDlgTestStructPrimitives::ConstTexture2D' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, Texture2DReference) == 0x000200, "Member 'FDlgTestStructPrimitives::Texture2DReference' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, ObjectPrimitivesBase) == 0x000208, "Member 'FDlgTestStructPrimitives::ObjectPrimitivesBase' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, ObjectDefaultToInstanced) == 0x000210, "Member 'FDlgTestStructPrimitives::ObjectDefaultToInstanced' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, ObjectPrimitivesChildA) == 0x000218, "Member 'FDlgTestStructPrimitives::ObjectPrimitivesChildA' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, ObjectSwitch) == 0x000220, "Member 'FDlgTestStructPrimitives::ObjectSwitch' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, ObjectPrimitivesPolymorphismChildA) == 0x000228, "Member 'FDlgTestStructPrimitives::ObjectPrimitivesPolymorphismChildA' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, ObjectPrimitivesPolymorphismChildB) == 0x000230, "Member 'FDlgTestStructPrimitives::ObjectPrimitivesPolymorphismChildB' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, ObjectPrimitivesGrandChildA) == 0x000238, "Member 'FDlgTestStructPrimitives::ObjectPrimitivesGrandChildA' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, ObjectPrimitivesPolymorphismBaseGrandChildA) == 0x000240, "Member 'FDlgTestStructPrimitives::ObjectPrimitivesPolymorphismBaseGrandChildA' has a wrong offset!");
static_assert(offsetof(FDlgTestStructPrimitives, ObjectPrimitivesPolymorphismChildGrandChildA) == 0x000248, "Member 'FDlgTestStructPrimitives::ObjectPrimitivesPolymorphismChildGrandChildA' has a wrong offset!");

// ScriptStruct DlgSystem.DlgTestStructComplex
// 0x0038 (0x0038 - 0x0000)
struct FDlgTestStructComplex final
{
public:
	uint8                                         Pad_1752[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDlgTestStructPrimitives>       StructArrayPrimitives;                             // 0x0008(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UDlgTestObjectPrimitivesBase*>   ArrayOfObjects;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDlgTestObjectPrimitivesBase*>   ArrayOfObjectsAsReference;                         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgTestStructComplex) == 0x000008, "Wrong alignment on FDlgTestStructComplex");
static_assert(sizeof(FDlgTestStructComplex) == 0x000038, "Wrong size on FDlgTestStructComplex");
static_assert(offsetof(FDlgTestStructComplex, StructArrayPrimitives) == 0x000008, "Member 'FDlgTestStructComplex::StructArrayPrimitives' has a wrong offset!");
static_assert(offsetof(FDlgTestStructComplex, ArrayOfObjects) == 0x000018, "Member 'FDlgTestStructComplex::ArrayOfObjects' has a wrong offset!");
static_assert(offsetof(FDlgTestStructComplex, ArrayOfObjectsAsReference) == 0x000028, "Member 'FDlgTestStructComplex::ArrayOfObjectsAsReference' has a wrong offset!");

// ScriptStruct DlgSystem.DlgTestArrayPrimitive
// 0x00A8 (0x00A8 - 0x0000)
struct FDlgTestArrayPrimitive final
{
public:
	uint8                                         Pad_1753[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EmptyArray;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Num1_Array;                                        // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Int32Array;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int64>                                 Int64Array;                                        // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  BoolArray;                                         // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FloatArray;                                        // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EDlgTestEnum>                          EnumArray;                                         // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           NameArray;                                         // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArray;                                       // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDlgTestObjectPrimitivesBase*>   ObjectArrayConstantNulls;                          // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgTestArrayPrimitive) == 0x000008, "Wrong alignment on FDlgTestArrayPrimitive");
static_assert(sizeof(FDlgTestArrayPrimitive) == 0x0000A8, "Wrong size on FDlgTestArrayPrimitive");
static_assert(offsetof(FDlgTestArrayPrimitive, EmptyArray) == 0x000008, "Member 'FDlgTestArrayPrimitive::EmptyArray' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayPrimitive, Num1_Array) == 0x000018, "Member 'FDlgTestArrayPrimitive::Num1_Array' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayPrimitive, Int32Array) == 0x000028, "Member 'FDlgTestArrayPrimitive::Int32Array' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayPrimitive, Int64Array) == 0x000038, "Member 'FDlgTestArrayPrimitive::Int64Array' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayPrimitive, BoolArray) == 0x000048, "Member 'FDlgTestArrayPrimitive::BoolArray' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayPrimitive, FloatArray) == 0x000058, "Member 'FDlgTestArrayPrimitive::FloatArray' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayPrimitive, EnumArray) == 0x000068, "Member 'FDlgTestArrayPrimitive::EnumArray' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayPrimitive, NameArray) == 0x000078, "Member 'FDlgTestArrayPrimitive::NameArray' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayPrimitive, StringArray) == 0x000088, "Member 'FDlgTestArrayPrimitive::StringArray' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayPrimitive, ObjectArrayConstantNulls) == 0x000098, "Member 'FDlgTestArrayPrimitive::ObjectArrayConstantNulls' has a wrong offset!");

// ScriptStruct DlgSystem.DlgTestArrayComplex
// 0x0058 (0x0058 - 0x0000)
struct FDlgTestArrayComplex final
{
public:
	uint8                                         Pad_1754[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDlgTestStructPrimitives>       StructArrayPrimitives;                             // 0x0008(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FDlgTestArrayPrimitive>         StructArrayOfArrayPrimitives;                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDlgTestObjectPrimitivesBase*>   ObjectArrayFrequentsNulls;                         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDlgTestObjectPrimitivesBase*>   ObjectArrayPrimitivesBase;                         // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UDlgTestObjectPrimitivesBase*>   ObjectArrayPrimitivesAll;                          // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgTestArrayComplex) == 0x000008, "Wrong alignment on FDlgTestArrayComplex");
static_assert(sizeof(FDlgTestArrayComplex) == 0x000058, "Wrong size on FDlgTestArrayComplex");
static_assert(offsetof(FDlgTestArrayComplex, StructArrayPrimitives) == 0x000008, "Member 'FDlgTestArrayComplex::StructArrayPrimitives' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayComplex, StructArrayOfArrayPrimitives) == 0x000018, "Member 'FDlgTestArrayComplex::StructArrayOfArrayPrimitives' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayComplex, ObjectArrayFrequentsNulls) == 0x000028, "Member 'FDlgTestArrayComplex::ObjectArrayFrequentsNulls' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayComplex, ObjectArrayPrimitivesBase) == 0x000038, "Member 'FDlgTestArrayComplex::ObjectArrayPrimitivesBase' has a wrong offset!");
static_assert(offsetof(FDlgTestArrayComplex, ObjectArrayPrimitivesAll) == 0x000048, "Member 'FDlgTestArrayComplex::ObjectArrayPrimitivesAll' has a wrong offset!");

// ScriptStruct DlgSystem.DlgTestSetPrimitive
// 0x0238 (0x0238 - 0x0000)
struct FDlgTestSetPrimitive final
{
public:
	uint8                                         Pad_1755[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   EmptySet;                                          // 0x0008(0x0050)(NativeAccessSpecifierPublic)
	TSet<int32>                                   Num1_Set;                                          // 0x0058(0x0050)(NativeAccessSpecifierPublic)
	TSet<int32>                                   Int32Set;                                          // 0x00A8(0x0050)(NativeAccessSpecifierPublic)
	TSet<int64>                                   Int64Set;                                          // 0x00F8(0x0050)(NativeAccessSpecifierPublic)
	TSet<EDlgTestEnum>                            EnumSet;                                           // 0x0148(0x0050)(NativeAccessSpecifierPublic)
	TSet<class FName>                             NameSet;                                           // 0x0198(0x0050)(NativeAccessSpecifierPublic)
	TSet<class FString>                           StringSet;                                         // 0x01E8(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgTestSetPrimitive) == 0x000008, "Wrong alignment on FDlgTestSetPrimitive");
static_assert(sizeof(FDlgTestSetPrimitive) == 0x000238, "Wrong size on FDlgTestSetPrimitive");
static_assert(offsetof(FDlgTestSetPrimitive, EmptySet) == 0x000008, "Member 'FDlgTestSetPrimitive::EmptySet' has a wrong offset!");
static_assert(offsetof(FDlgTestSetPrimitive, Num1_Set) == 0x000058, "Member 'FDlgTestSetPrimitive::Num1_Set' has a wrong offset!");
static_assert(offsetof(FDlgTestSetPrimitive, Int32Set) == 0x0000A8, "Member 'FDlgTestSetPrimitive::Int32Set' has a wrong offset!");
static_assert(offsetof(FDlgTestSetPrimitive, Int64Set) == 0x0000F8, "Member 'FDlgTestSetPrimitive::Int64Set' has a wrong offset!");
static_assert(offsetof(FDlgTestSetPrimitive, EnumSet) == 0x000148, "Member 'FDlgTestSetPrimitive::EnumSet' has a wrong offset!");
static_assert(offsetof(FDlgTestSetPrimitive, NameSet) == 0x000198, "Member 'FDlgTestSetPrimitive::NameSet' has a wrong offset!");
static_assert(offsetof(FDlgTestSetPrimitive, StringSet) == 0x0001E8, "Member 'FDlgTestSetPrimitive::StringSet' has a wrong offset!");

// ScriptStruct DlgSystem.DlgTestSetComplex
// 0x0058 (0x0058 - 0x0000)
struct FDlgTestSetComplex final
{
public:
	uint8                                         Pad_1756[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FDlgTestStructPrimitives>         StructSetPrimitives;                               // 0x0008(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgTestSetComplex) == 0x000008, "Wrong alignment on FDlgTestSetComplex");
static_assert(sizeof(FDlgTestSetComplex) == 0x000058, "Wrong size on FDlgTestSetComplex");
static_assert(offsetof(FDlgTestSetComplex, StructSetPrimitives) == 0x000008, "Member 'FDlgTestSetComplex::StructSetPrimitives' has a wrong offset!");

// ScriptStruct DlgSystem.DlgTestMapPrimitive
// 0x04B8 (0x04B8 - 0x0000)
struct FDlgTestMapPrimitive final
{
public:
	uint8                                         Pad_1757[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            EmptyMap;                                          // 0x0008(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, int32>                            Int32ToInt32Map;                                   // 0x0058(0x0050)(NativeAccessSpecifierPublic)
	TMap<int64, int64>                            Int64ToInt64Map;                                   // 0x00A8(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, class FString>                    Int32ToStringMap;                                  // 0x00F8(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, class FName>                      Int32ToNameMap;                                    // 0x0148(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    StringToInt32Map;                                  // 0x0198(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            StringToStringMap;                                 // 0x01E8(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      NameToInt32Map;                                    // 0x0238(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                NameToNameMap;                                     // 0x0288(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, float>                    StringToFloatMap;                                  // 0x02D8(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, float>                            Int32ToFloatMap;                                   // 0x0328(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FColor>              NameToColorMap;                                    // 0x0378(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, class UDlgTestObjectPrimitivesBase*> ObjectFrequentsNullsMap;                           // 0x03C8(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, class UDlgTestObjectPrimitivesBase*> ObjectConstantNullMap;                             // 0x0418(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, class UDlgTestObjectPrimitivesBase*> ObjectPrimitivesAllMap;                            // 0x0468(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgTestMapPrimitive) == 0x000008, "Wrong alignment on FDlgTestMapPrimitive");
static_assert(sizeof(FDlgTestMapPrimitive) == 0x0004B8, "Wrong size on FDlgTestMapPrimitive");
static_assert(offsetof(FDlgTestMapPrimitive, EmptyMap) == 0x000008, "Member 'FDlgTestMapPrimitive::EmptyMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, Int32ToInt32Map) == 0x000058, "Member 'FDlgTestMapPrimitive::Int32ToInt32Map' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, Int64ToInt64Map) == 0x0000A8, "Member 'FDlgTestMapPrimitive::Int64ToInt64Map' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, Int32ToStringMap) == 0x0000F8, "Member 'FDlgTestMapPrimitive::Int32ToStringMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, Int32ToNameMap) == 0x000148, "Member 'FDlgTestMapPrimitive::Int32ToNameMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, StringToInt32Map) == 0x000198, "Member 'FDlgTestMapPrimitive::StringToInt32Map' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, StringToStringMap) == 0x0001E8, "Member 'FDlgTestMapPrimitive::StringToStringMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, NameToInt32Map) == 0x000238, "Member 'FDlgTestMapPrimitive::NameToInt32Map' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, NameToNameMap) == 0x000288, "Member 'FDlgTestMapPrimitive::NameToNameMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, StringToFloatMap) == 0x0002D8, "Member 'FDlgTestMapPrimitive::StringToFloatMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, Int32ToFloatMap) == 0x000328, "Member 'FDlgTestMapPrimitive::Int32ToFloatMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, NameToColorMap) == 0x000378, "Member 'FDlgTestMapPrimitive::NameToColorMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, ObjectFrequentsNullsMap) == 0x0003C8, "Member 'FDlgTestMapPrimitive::ObjectFrequentsNullsMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, ObjectConstantNullMap) == 0x000418, "Member 'FDlgTestMapPrimitive::ObjectConstantNullMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapPrimitive, ObjectPrimitivesAllMap) == 0x000468, "Member 'FDlgTestMapPrimitive::ObjectPrimitivesAllMap' has a wrong offset!");

// ScriptStruct DlgSystem.DlgTestMapComplex
// 0x0288 (0x0288 - 0x0000)
struct FDlgTestMapComplex final
{
public:
	uint8                                         Pad_1758[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FDlgTestStructPrimitives>  Int32ToStructPrimitiveMap;                         // 0x0008(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDlgTestStructPrimitives> NameToStructPrimitiveMap;                          // 0x0058(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<struct FDlgTestStructPrimitives, int32>  StructPrimitiveToIntMap;                           // 0x00A8(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDlgTestMapPrimitive> NameToStructOfMapPrimitives;                       // 0x00F8(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FDlgTestArrayPrimitive> NameToStructOfArrayPrimitives;                     // 0x0148(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FDlgTestSetPrimitive> NameToStructOfSetPrimitives;                       // 0x0198(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FDlgTestArrayComplex> NameToStructOfArrayComplex;                        // 0x01E8(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDlgTestSetComplex>  NameToStructOfSetComplex;                          // 0x0238(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgTestMapComplex) == 0x000008, "Wrong alignment on FDlgTestMapComplex");
static_assert(sizeof(FDlgTestMapComplex) == 0x000288, "Wrong size on FDlgTestMapComplex");
static_assert(offsetof(FDlgTestMapComplex, Int32ToStructPrimitiveMap) == 0x000008, "Member 'FDlgTestMapComplex::Int32ToStructPrimitiveMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapComplex, NameToStructPrimitiveMap) == 0x000058, "Member 'FDlgTestMapComplex::NameToStructPrimitiveMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapComplex, StructPrimitiveToIntMap) == 0x0000A8, "Member 'FDlgTestMapComplex::StructPrimitiveToIntMap' has a wrong offset!");
static_assert(offsetof(FDlgTestMapComplex, NameToStructOfMapPrimitives) == 0x0000F8, "Member 'FDlgTestMapComplex::NameToStructOfMapPrimitives' has a wrong offset!");
static_assert(offsetof(FDlgTestMapComplex, NameToStructOfArrayPrimitives) == 0x000148, "Member 'FDlgTestMapComplex::NameToStructOfArrayPrimitives' has a wrong offset!");
static_assert(offsetof(FDlgTestMapComplex, NameToStructOfSetPrimitives) == 0x000198, "Member 'FDlgTestMapComplex::NameToStructOfSetPrimitives' has a wrong offset!");
static_assert(offsetof(FDlgTestMapComplex, NameToStructOfArrayComplex) == 0x0001E8, "Member 'FDlgTestMapComplex::NameToStructOfArrayComplex' has a wrong offset!");
static_assert(offsetof(FDlgTestMapComplex, NameToStructOfSetComplex) == 0x000238, "Member 'FDlgTestMapComplex::NameToStructOfSetComplex' has a wrong offset!");

// ScriptStruct DlgSystem.DlgObjectsArray
// 0x0010 (0x0010 - 0x0000)
struct FDlgObjectsArray final
{
public:
	TArray<class UObject*>                        Array;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgObjectsArray) == 0x000008, "Wrong alignment on FDlgObjectsArray");
static_assert(sizeof(FDlgObjectsArray) == 0x000010, "Wrong size on FDlgObjectsArray");
static_assert(offsetof(FDlgObjectsArray, Array) == 0x000000, "Member 'FDlgObjectsArray::Array' has a wrong offset!");

// ScriptStruct DlgSystem.DlgNodeSavedData
// 0x0010 (0x0010 - 0x0000)
struct FDlgNodeSavedData final
{
public:
	TArray<struct FGuid>                          GUIDList;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgNodeSavedData) == 0x000008, "Wrong alignment on FDlgNodeSavedData");
static_assert(sizeof(FDlgNodeSavedData) == 0x000010, "Wrong size on FDlgNodeSavedData");
static_assert(offsetof(FDlgNodeSavedData, GUIDList) == 0x000000, "Member 'FDlgNodeSavedData::GUIDList' has a wrong offset!");

// ScriptStruct DlgSystem.DlgHistory
// 0x00F0 (0x00F0 - 0x0000)
struct FDlgHistory final
{
public:
	TSet<int32>                                   VisitedNodeIndices;                                // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<struct FGuid>                            VisitedNodeGUIDs;                                  // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FDlgNodeSavedData>  NodeData;                                          // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgHistory) == 0x000008, "Wrong alignment on FDlgHistory");
static_assert(sizeof(FDlgHistory) == 0x0000F0, "Wrong size on FDlgHistory");
static_assert(offsetof(FDlgHistory, VisitedNodeIndices) == 0x000000, "Member 'FDlgHistory::VisitedNodeIndices' has a wrong offset!");
static_assert(offsetof(FDlgHistory, VisitedNodeGUIDs) == 0x000050, "Member 'FDlgHistory::VisitedNodeGUIDs' has a wrong offset!");
static_assert(offsetof(FDlgHistory, NodeData) == 0x0000A0, "Member 'FDlgHistory::NodeData' has a wrong offset!");

// ScriptStruct DlgSystem.DlgMemory
// 0x0050 (0x0050 - 0x0000)
struct FDlgMemory final
{
public:
	TMap<struct FGuid, struct FDlgHistory>        HistoryMap;                                        // 0x0000(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDlgMemory) == 0x000008, "Wrong alignment on FDlgMemory");
static_assert(sizeof(FDlgMemory) == 0x000050, "Wrong size on FDlgMemory");
static_assert(offsetof(FDlgMemory, HistoryMap) == 0x000000, "Member 'FDlgMemory::HistoryMap' has a wrong offset!");

// ScriptStruct DlgSystem.DlgSpeechSequenceEntry
// 0x0060 (0x0060 - 0x0000)
struct FDlgSpeechSequenceEntry final
{
public:
	class FName                                   Speaker;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   EdgeText;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   SpeakerState;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDlgNodeData*                           NodeData;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             VoiceSoundWave;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogueWave*                          VoiceDialogueWave;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                GenericData;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgSpeechSequenceEntry) == 0x000008, "Wrong alignment on FDlgSpeechSequenceEntry");
static_assert(sizeof(FDlgSpeechSequenceEntry) == 0x000060, "Wrong size on FDlgSpeechSequenceEntry");
static_assert(offsetof(FDlgSpeechSequenceEntry, Speaker) == 0x000000, "Member 'FDlgSpeechSequenceEntry::Speaker' has a wrong offset!");
static_assert(offsetof(FDlgSpeechSequenceEntry, Text) == 0x000008, "Member 'FDlgSpeechSequenceEntry::Text' has a wrong offset!");
static_assert(offsetof(FDlgSpeechSequenceEntry, EdgeText) == 0x000020, "Member 'FDlgSpeechSequenceEntry::EdgeText' has a wrong offset!");
static_assert(offsetof(FDlgSpeechSequenceEntry, SpeakerState) == 0x000038, "Member 'FDlgSpeechSequenceEntry::SpeakerState' has a wrong offset!");
static_assert(offsetof(FDlgSpeechSequenceEntry, NodeData) == 0x000040, "Member 'FDlgSpeechSequenceEntry::NodeData' has a wrong offset!");
static_assert(offsetof(FDlgSpeechSequenceEntry, VoiceSoundWave) == 0x000048, "Member 'FDlgSpeechSequenceEntry::VoiceSoundWave' has a wrong offset!");
static_assert(offsetof(FDlgSpeechSequenceEntry, VoiceDialogueWave) == 0x000050, "Member 'FDlgSpeechSequenceEntry::VoiceDialogueWave' has a wrong offset!");
static_assert(offsetof(FDlgSpeechSequenceEntry, GenericData) == 0x000058, "Member 'FDlgSpeechSequenceEntry::GenericData' has a wrong offset!");

// ScriptStruct DlgSystem.DlgParticipantName
// 0x0008 (0x0008 - 0x0000)
struct FDlgParticipantName final
{
public:
	class FName                                   ParticipantName;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgParticipantName) == 0x000004, "Wrong alignment on FDlgParticipantName");
static_assert(sizeof(FDlgParticipantName) == 0x000008, "Wrong size on FDlgParticipantName");
static_assert(offsetof(FDlgParticipantName, ParticipantName) == 0x000000, "Member 'FDlgParticipantName::ParticipantName' has a wrong offset!");

}

