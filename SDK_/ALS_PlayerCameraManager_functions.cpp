#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_PlayerCameraManager

#include "Basic.hpp"

#include "ALS_PlayerCameraManager_classes.hpp"
#include "ALS_PlayerCameraManager_parameters.hpp"


namespace SDK
{

// Function ALS_PlayerCameraManager.ALS_PlayerCameraManager_C.BlueprintUpdateCamera
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           CameraTarget                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NewCameraLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         NewCameraRotation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   NewCameraFOV                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AALS_PlayerCameraManager_C::BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_PlayerCameraManager_C", "BlueprintUpdateCamera");

	Params::ALS_PlayerCameraManager_C_BlueprintUpdateCamera Parms{};

	Parms.CameraTarget = CameraTarget;

	UObject::ProcessEvent(Func, &Parms);

	if (NewCameraLocation != nullptr)
		*NewCameraLocation = std::move(Parms.NewCameraLocation);

	if (NewCameraRotation != nullptr)
		*NewCameraRotation = std::move(Parms.NewCameraRotation);

	if (NewCameraFOV != nullptr)
		*NewCameraFOV = Parms.NewCameraFOV;

	return Parms.ReturnValue;
}


// Function ALS_PlayerCameraManager.ALS_PlayerCameraManager_C.CalculateAxisIndependentLag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          CurrentLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         CameraRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          LagSpeeds                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AALS_PlayerCameraManager_C::CalculateAxisIndependentLag(const struct FVector& CurrentLocation, const struct FVector& TargetLocation, const struct FRotator& CameraRotation, const struct FVector& LagSpeeds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_PlayerCameraManager_C", "CalculateAxisIndependentLag");

	Params::ALS_PlayerCameraManager_C_CalculateAxisIndependentLag Parms{};

	Parms.CurrentLocation = std::move(CurrentLocation);
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.CameraRotation = std::move(CameraRotation);
	Parms.LagSpeeds = std::move(LagSpeeds);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_PlayerCameraManager.ALS_PlayerCameraManager_C.CustomCameraBehavior
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  FOV                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_PlayerCameraManager_C::CustomCameraBehavior(struct FVector* Location, struct FRotator* Rotation, double* FOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_PlayerCameraManager_C", "CustomCameraBehavior");

	Params::ALS_PlayerCameraManager_C_CustomCameraBehavior Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);

	if (FOV != nullptr)
		*FOV = Parms.FOV;
}


// Function ALS_PlayerCameraManager.ALS_PlayerCameraManager_C.ExecuteUbergraph_ALS_PlayerCameraManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_PlayerCameraManager_C::ExecuteUbergraph_ALS_PlayerCameraManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_PlayerCameraManager_C", "ExecuteUbergraph_ALS_PlayerCameraManager");

	Params::ALS_PlayerCameraManager_C_ExecuteUbergraph_ALS_PlayerCameraManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_PlayerCameraManager.ALS_PlayerCameraManager_C.Get_CameraBehaviorParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             CurveName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AALS_PlayerCameraManager_C::Get_CameraBehaviorParam(class FName CurveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_PlayerCameraManager_C", "Get_CameraBehaviorParam");

	Params::ALS_PlayerCameraManager_C_Get_CameraBehaviorParam Parms{};

	Parms.CurveName = CurveName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_PlayerCameraManager.ALS_PlayerCameraManager_C.GetDebugTraceType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EDrawDebugTrace                         ShowTraceType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         DebugTypu                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_PlayerCameraManager_C::GetDebugTraceType(EDrawDebugTrace ShowTraceType, EDrawDebugTrace* DebugTypu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_PlayerCameraManager_C", "GetDebugTraceType");

	Params::ALS_PlayerCameraManager_C_GetDebugTraceType Parms{};

	Parms.ShowTraceType = ShowTraceType;

	UObject::ProcessEvent(Func, &Parms);

	if (DebugTypu != nullptr)
		*DebugTypu = Parms.DebugTypu;
}


// Function ALS_PlayerCameraManager.ALS_PlayerCameraManager_C.OnPossess
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            NewPawn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_PlayerCameraManager_C::OnPossess(class APawn* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_PlayerCameraManager_C", "OnPossess");

	Params::ALS_PlayerCameraManager_C_OnPossess Parms{};

	Parms.NewPawn = NewPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_PlayerCameraManager.ALS_PlayerCameraManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_PlayerCameraManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_PlayerCameraManager_C", "ReceiveTick");

	Params::ALS_PlayerCameraManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}

}

