#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Fence_03

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Fence_03.BP_Fence_03_C
// 0x0080 (0x0318 - 0x0298)
class ABP_Fence_03_C final : public AActor
{
public:
	class UStaticMeshComponent*                   SM_Rope3;                                          // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Big_Rope;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Big_Rope1;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Big_Rope2;                                      // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Rope4;                                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Rope5;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Rope1;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WoodenPole_17_StaticMeshComponent0;             // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WoodenPole_19_StaticMeshComponent0;             // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WoodenPole_03_StaticMeshComponent0;             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WoodenPole_18_StaticMeshComponent0;             // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WoodenPole_20_StaticMeshComponent0;             // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Rope;                                           // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Rope2;                                          // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Pivot;                                             // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SharedRoot;                                        // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Fence_03_C">();
	}
	static class ABP_Fence_03_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Fence_03_C>();
	}
};
static_assert(alignof(ABP_Fence_03_C) == 0x000008, "Wrong alignment on ABP_Fence_03_C");
static_assert(sizeof(ABP_Fence_03_C) == 0x000318, "Wrong size on ABP_Fence_03_C");
static_assert(offsetof(ABP_Fence_03_C, SM_Rope3) == 0x000298, "Member 'ABP_Fence_03_C::SM_Rope3' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_Big_Rope) == 0x0002A0, "Member 'ABP_Fence_03_C::SM_Big_Rope' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_Big_Rope1) == 0x0002A8, "Member 'ABP_Fence_03_C::SM_Big_Rope1' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_Big_Rope2) == 0x0002B0, "Member 'ABP_Fence_03_C::SM_Big_Rope2' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_Rope4) == 0x0002B8, "Member 'ABP_Fence_03_C::SM_Rope4' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_Rope5) == 0x0002C0, "Member 'ABP_Fence_03_C::SM_Rope5' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_Rope1) == 0x0002C8, "Member 'ABP_Fence_03_C::SM_Rope1' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_WoodenPole_17_StaticMeshComponent0) == 0x0002D0, "Member 'ABP_Fence_03_C::SM_WoodenPole_17_StaticMeshComponent0' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_WoodenPole_19_StaticMeshComponent0) == 0x0002D8, "Member 'ABP_Fence_03_C::SM_WoodenPole_19_StaticMeshComponent0' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_WoodenPole_03_StaticMeshComponent0) == 0x0002E0, "Member 'ABP_Fence_03_C::SM_WoodenPole_03_StaticMeshComponent0' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_WoodenPole_18_StaticMeshComponent0) == 0x0002E8, "Member 'ABP_Fence_03_C::SM_WoodenPole_18_StaticMeshComponent0' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_WoodenPole_20_StaticMeshComponent0) == 0x0002F0, "Member 'ABP_Fence_03_C::SM_WoodenPole_20_StaticMeshComponent0' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_Rope) == 0x0002F8, "Member 'ABP_Fence_03_C::SM_Rope' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SM_Rope2) == 0x000300, "Member 'ABP_Fence_03_C::SM_Rope2' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, Pivot) == 0x000308, "Member 'ABP_Fence_03_C::Pivot' has a wrong offset!");
static_assert(offsetof(ABP_Fence_03_C, SharedRoot) == 0x000310, "Member 'ABP_Fence_03_C::SharedRoot' has a wrong offset!");

}

