#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GamepadWidgetBP

#include "Basic.hpp"

#include "GamepadWidgetBP_classes.hpp"
#include "GamepadWidgetBP_parameters.hpp"


namespace SDK
{

// Function GamepadWidgetBP.GamepadWidgetBP_C.ExecuteUbergraph_GamepadWidgetBP
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadWidgetBP_C::ExecuteUbergraph_GamepadWidgetBP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadWidgetBP_C", "ExecuteUbergraph_GamepadWidgetBP");

	Params::GamepadWidgetBP_C_ExecuteUbergraph_GamepadWidgetBP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadWidgetBP.GamepadWidgetBP_C.OnGlobalSettingsApply
// (BlueprintCallable, BlueprintEvent)

void UGamepadWidgetBP_C::OnGlobalSettingsApply()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadWidgetBP_C", "OnGlobalSettingsApply");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadWidgetBP.GamepadWidgetBP_C.ResetGamepadVisualization
// (Public, BlueprintCallable, BlueprintEvent)

void UGamepadWidgetBP_C::ResetGamepadVisualization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadWidgetBP_C", "ResetGamepadVisualization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadWidgetBP.GamepadWidgetBP_C.SetGamepadBindingText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InBindingName                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FKey                             InSelectedKey                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FKey                             InLastSelectedKey                                      (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UGamepadWidgetBP_C::SetGamepadBindingText(const class FText& InBindingName, const struct FKey& InSelectedKey, const struct FKey& InLastSelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadWidgetBP_C", "SetGamepadBindingText");

	Params::GamepadWidgetBP_C_SetGamepadBindingText Parms{};

	Parms.InBindingName = std::move(InBindingName);
	Parms.InSelectedKey = std::move(InSelectedKey);
	Parms.InLastSelectedKey = std::move(InLastSelectedKey);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GamepadWidgetBP.GamepadWidgetBP_C.SetGlobalSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UGamepadWidgetBP_C::SetGlobalSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadWidgetBP_C", "SetGlobalSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadWidgetBP.GamepadWidgetBP_C.SetupGamepadKeys
// (Public, BlueprintCallable, BlueprintEvent)

void UGamepadWidgetBP_C::SetupGamepadKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadWidgetBP_C", "SetupGamepadKeys");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GamepadWidgetBP.GamepadWidgetBP_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGamepadWidgetBP_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GamepadWidgetBP_C", "PreConstruct");

	Params::GamepadWidgetBP_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}

}

