#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_Bogie

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_Bogie.AC_Bogie_C
// 0x0068 (0x0108 - 0x00A0)
class UAC_Bogie_C final : public UActorComponent
{
public:
	class USplineComponent*                       SplineComponent;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SplineDistance;                                    // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SplineLength;                                      // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SplineIndex;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C8[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TrainTrack_C*                       Track;                                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceToEndOfTrack;                              // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedsAlignment;                                    // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C9[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugName;                                         // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IgnoreEndOfTrack;                                  // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSensorOrHelperBogie;                             // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvertDirOfTravel;                                 // 0x00EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40CA[0x5];                                     // 0x00EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceFromCarriage;                              // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousSplineDistance;                            // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpdateID;                                          // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ChangeTrack(class ABP_TrainTrack_C* Param_Track, int32 TrackSplineIndex, double DistanceOnTrack);
	void GetConnectionPoint(bool& GetEndPoint, struct FS_TrackConnectionPoint* ConnectionPoint, bool* IsEndPoint);
	void GetLocation(struct FVector* Location);
	void GetRotation(struct FRotator* Rotation);
	void GetTransform(struct FTransform* BogieTransform);
	void RestorePreviousDistance(int32 UpdateReverseID);
	void TickMovement(double& Speed, int32 Param_UpdateID);
	void UpdateDistanceForEndOfClosedLoop(double& Speed);

	void GetDistanceToEndOfTrack(double& Speed, double* Distance, bool* AtSplineEnd) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_Bogie_C">();
	}
	static class UAC_Bogie_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_Bogie_C>();
	}
};
static_assert(alignof(UAC_Bogie_C) == 0x000008, "Wrong alignment on UAC_Bogie_C");
static_assert(sizeof(UAC_Bogie_C) == 0x000108, "Wrong size on UAC_Bogie_C");
static_assert(offsetof(UAC_Bogie_C, SplineComponent) == 0x0000A0, "Member 'UAC_Bogie_C::SplineComponent' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, SplineDistance) == 0x0000A8, "Member 'UAC_Bogie_C::SplineDistance' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, SplineLength) == 0x0000B0, "Member 'UAC_Bogie_C::SplineLength' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, SplineIndex) == 0x0000B8, "Member 'UAC_Bogie_C::SplineIndex' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, Track) == 0x0000C0, "Member 'UAC_Bogie_C::Track' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, DistanceToEndOfTrack) == 0x0000C8, "Member 'UAC_Bogie_C::DistanceToEndOfTrack' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, NeedsAlignment) == 0x0000D0, "Member 'UAC_Bogie_C::NeedsAlignment' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, DebugName) == 0x0000D8, "Member 'UAC_Bogie_C::DebugName' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, IgnoreEndOfTrack) == 0x0000E8, "Member 'UAC_Bogie_C::IgnoreEndOfTrack' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, IsSensorOrHelperBogie) == 0x0000E9, "Member 'UAC_Bogie_C::IsSensorOrHelperBogie' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, InvertDirOfTravel) == 0x0000EA, "Member 'UAC_Bogie_C::InvertDirOfTravel' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, DistanceFromCarriage) == 0x0000F0, "Member 'UAC_Bogie_C::DistanceFromCarriage' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, PreviousSplineDistance) == 0x0000F8, "Member 'UAC_Bogie_C::PreviousSplineDistance' has a wrong offset!");
static_assert(offsetof(UAC_Bogie_C, UpdateID) == 0x000100, "Member 'UAC_Bogie_C::UpdateID' has a wrong offset!");

}

