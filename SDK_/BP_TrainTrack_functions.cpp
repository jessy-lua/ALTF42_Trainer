#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TrainTrack

#include "Basic.hpp"

#include "BP_TrainTrack_classes.hpp"
#include "BP_TrainTrack_parameters.hpp"


namespace SDK
{

// Function BP_TrainTrack.BP_TrainTrack_C.AddConnectionArrow
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FLinearColor                     Colour                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USplineComponent*                 Spline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   SplinePoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::AddConnectionArrow(const struct FRotator& Rotation, const struct FLinearColor& Colour, class USplineComponent* Spline, int32 SplinePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "AddConnectionArrow");

	Params::BP_TrainTrack_C_AddConnectionArrow Parms{};

	Parms.Rotation = std::move(Rotation);
	Parms.Colour = std::move(Colour);
	Parms.Spline = Spline;
	Parms.SplinePoint = SplinePoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainTrack.BP_TrainTrack_C.AddTriggerRegion
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_TrackTriggerRegion            NewTriggerRegion                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::AddTriggerRegion(const struct FS_TrackTriggerRegion& NewTriggerRegion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "AddTriggerRegion");

	Params::BP_TrainTrack_C_AddTriggerRegion Parms{};

	Parms.NewTriggerRegion = std::move(NewTriggerRegion);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainTrack.BP_TrainTrack_C.AddUpDirArrow
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ArrowLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          UpDirForArrow                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::AddUpDirArrow(struct FVector& ArrowLocation, struct FVector& UpDirForArrow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "AddUpDirArrow");

	Params::BP_TrainTrack_C_AddUpDirArrow Parms{};

	Parms.ArrowLocation = std::move(ArrowLocation);
	Parms.UpDirForArrow = std::move(UpDirForArrow);

	UObject::ProcessEvent(Func, &Parms);

	ArrowLocation = std::move(Parms.ArrowLocation);
	UpDirForArrow = std::move(Parms.UpDirForArrow);
}


// Function BP_TrainTrack.BP_TrainTrack_C.BuildSplineFromBakingSource
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainTrack_C::BuildSplineFromBakingSource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "BuildSplineFromBakingSource");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainTrack.BP_TrainTrack_C.BuildTrackConnections
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DoNotRefreshOtherTracks                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::BuildTrackConnections(bool DoNotRefreshOtherTracks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "BuildTrackConnections");

	Params::BP_TrainTrack_C_BuildTrackConnections Parms{};

	Parms.DoNotRefreshOtherTracks = DoNotRefreshOtherTracks;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainTrack.BP_TrainTrack_C.BuildTrackMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainTrack_C::BuildTrackMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "BuildTrackMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainTrack.BP_TrainTrack_C.CarriageEnteredTrack
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_Bogie_C*                      Bogie                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class ABP_TrainCarriage_C*              Carriage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::CarriageEnteredTrack(class UAC_Bogie_C* Bogie, class ABP_TrainCarriage_C* Carriage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "CarriageEnteredTrack");

	Params::BP_TrainTrack_C_CarriageEnteredTrack Parms{};

	Parms.Bogie = Bogie;
	Parms.Carriage = Carriage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainTrack.BP_TrainTrack_C.CarriageExitedTrack
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_Bogie_C*                      Bogie                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class ABP_TrainCarriage_C*              Carriage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::CarriageExitedTrack(class UAC_Bogie_C* Bogie, class ABP_TrainCarriage_C* Carriage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "CarriageExitedTrack");

	Params::BP_TrainTrack_C_CarriageExitedTrack Parms{};

	Parms.Bogie = Bogie;
	Parms.Carriage = Carriage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainTrack.BP_TrainTrack_C.CheckForRegionOverlap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_Bogie_C*                      Bogie                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class ABP_TrainCarriage_C*              TrainCarriage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::CheckForRegionOverlap(class UAC_Bogie_C* Bogie, class ABP_TrainCarriage_C* TrainCarriage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "CheckForRegionOverlap");

	Params::BP_TrainTrack_C_CheckForRegionOverlap Parms{};

	Parms.Bogie = Bogie;
	Parms.TrainCarriage = TrainCarriage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainTrack.BP_TrainTrack_C.ClearTriggerRegions
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_TrackTrigger_C*               Trigger                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    WipeAllRegions                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::ClearTriggerRegions(class ABP_TrackTrigger_C* Trigger, bool WipeAllRegions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "ClearTriggerRegions");

	Params::BP_TrainTrack_C_ClearTriggerRegions Parms{};

	Parms.Trigger = Trigger;
	Parms.WipeAllRegions = WipeAllRegions;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainTrack.BP_TrainTrack_C.ExecuteUbergraph_BP_TrainTrack
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::ExecuteUbergraph_BP_TrainTrack(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "ExecuteUbergraph_BP_TrainTrack");

	Params::BP_TrainTrack_C_ExecuteUbergraph_BP_TrainTrack Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TrainTrack.BP_TrainTrack_C.GetSplineByIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SplineIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USplineComponent*                 Spline                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::GetSplineByIndex(int32& SplineIndex, class USplineComponent** Spline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "GetSplineByIndex");

	Params::BP_TrainTrack_C_GetSplineByIndex Parms{};

	Parms.SplineIndex = SplineIndex;

	UObject::ProcessEvent(Func, &Parms);

	SplineIndex = Parms.SplineIndex;

	if (Spline != nullptr)
		*Spline = Parms.Spline;
}


// Function BP_TrainTrack.BP_TrainTrack_C.GetTrackSplineByIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SplineIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_TrackSpline                   TrackSpline                                            (Parm, OutParm, HasGetValueTypeHash)
// bool                                    ValidTrackSpline                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::GetTrackSplineByIndex(int32& SplineIndex, struct FS_TrackSpline* TrackSpline, bool* ValidTrackSpline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "GetTrackSplineByIndex");

	Params::BP_TrainTrack_C_GetTrackSplineByIndex Parms{};

	Parms.SplineIndex = SplineIndex;

	UObject::ProcessEvent(Func, &Parms);

	SplineIndex = Parms.SplineIndex;

	if (TrackSpline != nullptr)
		*TrackSpline = std::move(Parms.TrackSpline);

	if (ValidTrackSpline != nullptr)
		*ValidTrackSpline = Parms.ValidTrackSpline;
}


// Function BP_TrainTrack.BP_TrainTrack_C.InitalizeTrackSplines
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainTrack_C::InitalizeTrackSplines()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "InitalizeTrackSplines");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainTrack.BP_TrainTrack_C.InitalizeTrainTrack
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainTrack_C::InitalizeTrainTrack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "InitalizeTrainTrack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainTrack.BP_TrainTrack_C.NotifyCarriagesAboutTrackUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainTrack_C::NotifyCarriagesAboutTrackUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "NotifyCarriagesAboutTrackUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainTrack.BP_TrainTrack_C.PickConnectionToUse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_TrackConnectionPoint          ConnectionPoint                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    ConnPointAtEOT                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_TrackConnection               Connection                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ConnectionFound                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::PickConnectionToUse(struct FS_TrackConnectionPoint& ConnectionPoint, bool ConnPointAtEOT, struct FS_TrackConnection* Connection, bool* ConnectionFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "PickConnectionToUse");

	Params::BP_TrainTrack_C_PickConnectionToUse Parms{};

	Parms.ConnectionPoint = std::move(ConnectionPoint);
	Parms.ConnPointAtEOT = ConnPointAtEOT;

	UObject::ProcessEvent(Func, &Parms);

	ConnectionPoint = std::move(Parms.ConnectionPoint);

	if (Connection != nullptr)
		*Connection = std::move(Parms.Connection);

	if (ConnectionFound != nullptr)
		*ConnectionFound = Parms.ConnectionFound;
}


// Function BP_TrainTrack.BP_TrainTrack_C.RebuildTrackConnections
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainTrack_C::RebuildTrackConnections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "RebuildTrackConnections");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainTrack.BP_TrainTrack_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_TrainTrack_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainTrack.BP_TrainTrack_C.RegisterTrackTrigger
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_TrackTrigger_C*               NewTrigger                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    TriggerAdded                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::RegisterTrackTrigger(class ABP_TrackTrigger_C* NewTrigger, bool* TriggerAdded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "RegisterTrackTrigger");

	Params::BP_TrainTrack_C_RegisterTrackTrigger Parms{};

	Parms.NewTrigger = NewTrigger;

	UObject::ProcessEvent(Func, &Parms);

	if (TriggerAdded != nullptr)
		*TriggerAdded = Parms.TriggerAdded;
}


// Function BP_TrainTrack.BP_TrainTrack_C.SetupArrows
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainTrack_C::SetupArrows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "SetupArrows");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainTrack.BP_TrainTrack_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_TrainTrack_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainTrack.BP_TrainTrack_C.ValidateTriggers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TrainTrack_C::ValidateTriggers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "ValidateTriggers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TrainTrack.BP_TrainTrack_C.GetSplineIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class USplineComponent*                 Spline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   SplineIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::GetSplineIndex(class USplineComponent* Spline, int32* SplineIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "GetSplineIndex");

	Params::BP_TrainTrack_C_GetSplineIndex Parms{};

	Parms.Spline = Spline;

	UObject::ProcessEvent(Func, &Parms);

	if (SplineIndex != nullptr)
		*SplineIndex = Parms.SplineIndex;
}


// Function BP_TrainTrack.BP_TrainTrack_C.GetTrackSplineCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   NumTrackSplines                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TrainTrack_C::GetTrackSplineCount(int32* NumTrackSplines) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TrainTrack_C", "GetTrackSplineCount");

	Params::BP_TrainTrack_C_GetTrackSplineCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NumTrackSplines != nullptr)
		*NumTrackSplines = Parms.NumTrackSplines;
}

}

