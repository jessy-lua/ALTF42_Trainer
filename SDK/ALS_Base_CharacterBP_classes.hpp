#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_Base_CharacterBP

#include "Basic.hpp"

#include "ALS_Gait_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Mantle_TraceSettings_structs.hpp"
#include "MovementSettings_structs.hpp"
#include "ALS_MovementAction_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "ALS_Stance_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MovementSettings_State_structs.hpp"
#include "Mantle_Params_structs.hpp"
#include "AI_StepTalk_WhoOrWhere_structs.hpp"
#include "ALS_ComponentAndTransform_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "MantleType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ALS_Base_CharacterBP.ALS_Base_CharacterBP_C
// 0x04D0 (0x0B50 - 0x0680)
#pragma pack(push, 0x1)
class alignas(0x10) AALS_Base_CharacterBP_C : public ACharacter
{
public:
	uint8                                         Pad_396E[0x8];                                     // 0x0678(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0680(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTickOptToolkitTargetComponent*         TickOptToolkitTarget;                              // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTickOptToolkitAnimUpdateRateOptComponent* TickOptToolkitAnimUpdateRateOpt;                   // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Sprint_TL_Alpha_C26AD4634439BB3ADDEDB2B64DC846EE;  // 0x0698(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Sprint_TL__Direction_C26AD4634439BB3ADDEDB2B64DC846EE; // 0x069C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_396F[0x3];                                     // 0x069D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Sprint_TL;                                         // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         MantleTimeline_BlendIn_91D7A42A4A23268AEE2E28853DEE703D; // 0x06A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            MantleTimeline__Direction_91D7A42A4A23268AEE2E28853DEE703D; // 0x06AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3970[0x3];                                     // 0x06AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MantleTimeline;                                    // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            MovementState;                                     // 0x06B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            PrevMovementState;                                 // 0x06B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             DesiredRotationMode;                               // 0x06BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           MovementAction;                                    // 0x06BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             RotationMode;                                      // 0x06BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     DesiredGait;                                       // 0x06BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     Gait;                                              // 0x06BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   Stance;                                            // 0x06BF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 ViewMode;                                          // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3971[0x7];                                     // 0x06C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreviousVelocity;                                  // 0x06C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Acceleration;                                      // 0x06E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IK_Possible;                                       // 0x06F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sprint_JUMP_;                                      // 0x06FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMovementInput;                                  // 0x06FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3972[0x4];                                     // 0x06FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LastVelocityRotation;                              // 0x0700(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LastMovementInputRotation;                         // 0x0718(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Speed;                                             // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementInputAmount;                               // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousAimYaw;                                    // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x0748(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               InAirRotation;                                     // 0x0760(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        YawOffset;                                         // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    MovementModel;                                     // 0x0780(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FMovementSettings_State                MovementData;                                      // 0x0790(0x00C0)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMovementSettings                      CurrentMovementSettings;                           // 0x0850(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Params                         MantleParams;                                      // 0x0870(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FALS_ComponentAndTransform             MantleLedgeLS;                                     // 0x08A0(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FTransform                             MantleTarget;                                      // 0x0910(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             MantleActualStartOffset;                           // 0x0970(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             MantleAnimatedStartOffset;                         // 0x09D0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_TraceSettings                  GroundedTraceSettings;                             // 0x0A30(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_TraceSettings                  AutomaticTraceSettings;                            // 0x0A44(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_TraceSettings                  FallingTraceSettings;                              // 0x0A58(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   DesiredStance;                                     // 0x0A6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3973[0x3];                                     // 0x0A6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DownRate;                                          // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LookLeftRightRate;                                 // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AimYawRate;                                        // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             OverlayState;                                      // 0x0A88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3974[0x3];                                     // 0x0A89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimesPressedStance;                                // 0x0A8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BreakFall;                                         // 0x0A90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SprintHeld;                                        // 0x0A91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3975[0x6];                                     // 0x0A92(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          MainAnimInstance;                                  // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollOnGround;                                   // 0x0AA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollFaceUp;                                     // 0x0AA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3976[0x6];                                     // 0x0AA2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastRagdollVelocity;                               // 0x0AA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThirdPersonFOV;                                    // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FirstPersonFOV;                                    // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightShoulder;                                     // 0x0AD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3977[0x7];                                     // 0x0AD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AALTF42_InGame_PC_Loco_C*               ALTF42_PC;                                         // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Fall_Location;                                     // 0x0AE0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Invert_X_Value;                                    // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Invert_Y_Value;                                    // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeftAxis;                                          // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BackAxis;                                          // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Talking_;                                          // 0x0B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCantAction;                                       // 0x0B19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThisPlayerble_;                                    // 0x0B1A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CrossHair_ON_;                                     // 0x0B1B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Char_RollStatus;                                   // 0x0B1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Jumpimg_Push_;                                     // 0x0B1D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Trampoline_Area_;                                  // 0x0B1E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCantCamRotation;                                  // 0x0B1F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SprintTrigger_time;                                // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PushSprint;                                        // 0x0B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SprintAirControl_OnOFF;                            // 0x0B29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DontJumpAndSprint_ON_;                             // 0x0B2A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AgingForm_;                                        // 0x0B2B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChickForm_;                                        // 0x0B2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3978[0x3];                                     // 0x0B2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Normal_Camera_Length;                              // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normal_Camera_Height;                              // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SuperMode_Active_;                                 // 0x0B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_jump_;                                         // 0x0B41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void One1111();
	void AddToCharacterRotation(const struct FRotator& DeltaRotation);
	void AI_DoMove();
	void AI_DontMove();
	struct FTransform BPI_Get_3P_PivotTarget();
	void BPI_Get_3P_TraceParams(struct FVector* TraceOrigin, double* TraceRadius, ETraceTypeQuery* TraceChannel);
	void BPI_Get_CameraParameters(double* TP_FOV, double* FP_FOV, bool* Param_RightShoulder, double* CameraView_Length, double* CameraView_Height);
	void BPI_Get_CaptainKnight_Attack(bool* SimpleAttack_);
	void BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* Param_MovementState, EALS_MovementState* Param_PrevMovementState, EALS_MovementAction* Param_MovementAction, EALS_RotationMode* Param_RotationMode, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* Param_ViewMode, EALS_OverlayState* Param_OverlayState);
	void BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Param_Acceleration, struct FVector* MovementInput, bool* Param_IsMoving, bool* Param_IK_Possible, bool* SprintJUMP_, bool* Param_HasMovementInput, double* Param_Speed, double* Param_MovementInputAmount, struct FRotator* AimingRotation, double* Param_AimYawRate);
	struct FVector BPI_Get_FP_CameraTarget();
	void BPI_Get_PlayerbleChar_Status(double* ChickThrowAnimBP, bool* TubeIdleON, bool* Flamingo_, bool* AgingMode_, class UAnimSequenceBase** CostumeDanceAnim, bool* CostumeDanceTime_, bool* TimeSlowMode_Active_, double* TimeSlow_SelfCustom_Value, double* TimeSlow_CameraAlpha);
	void BPI_Get_RagdollFalling_FlailOnOFF(bool* RagdollFlail_Off, double* RagdollFlail_Value);
	void BPI_GetAI_NPC_ActionMode(bool* NPC_ActionMode, double* ActionStartTime, class UAnimSequenceBase** NPC_ActionAnim, bool* LoopActive, EAI_StepTalk_WhoOrWhere* Who_NPC, bool* Hit_);
	void BPI_Set_Gait(EALS_Gait NewGait);
	void BPI_Set_MovementAction(EALS_MovementAction NewMovementAction);
	void BPI_Set_MovementState(EALS_MovementState NewMovementState);
	void BPI_Set_OverlayState(EALS_OverlayState NewOverlayState);
	void BPI_Set_RotationMode(EALS_RotationMode NewRotationMode);
	void BPI_Set_ViewMode(EALS_ViewMode NewViewMode);
	void Breakfall_Event();
	void CacheValues();
	struct FVector CalculateAcceleration();
	double CalculateGroundedRotationRate();
	void CanSprint(bool* Param_CanSprint);
	bool CanUpdateMovingRotation();
	void CapsuleHasRoomCheck(class UCapsuleComponent* Capsule, const struct FVector& TargetLocation, double HeightOffset, double RadiusOffset, EDrawDebugTrace DebugType, bool* HasRoom);
	void DrawDebugShapes();
	void End_Sprint_Caculation();
	void Equip_End_Event();
	void Equip_Event();
	void ExecuteUbergraph_ALS_Base_CharacterBP(int32 EntryPoint);
	void FixDiagonalGamepadValues(double Y_in, double X_in, double* Y_Out, double* X_Out);
	void GetActualGait(EALS_Gait AllowedGait, EALS_Gait* ActualGait);
	void GetAllowedGait(EALS_Gait* AllowedGait);
	double GetAnimCurveValue(class FName CurveName);
	struct FVector GetCalpsuleBaseLocation(double ZOffset);
	struct FVector GetCapsuleLocationFromBase(const struct FVector& BaseLocation, double ZOffset);
	class UAnimMontage* GetChickThrowAnimation();
	void RightVector(struct FVector* ForwardVector, struct FVector* Param_RightVector);
	class UAnimMontage* GetGetUpAnimation(bool Param_RagdollFaceUp);
	struct FMantle_Asset GetMantleAsset(EMantleType MantleType);
	double GetMappedSpeed();
	struct FVector GetPlayerMovementInput();
	class UAnimMontage* GetRollAnimation();
	void GetTargetMovementSettings(struct FMovementSettings* MovementSettings);
	EDrawDebugTrace GetTraceDebugType(EDrawDebugTrace ShowTraceType);
	void InpActEvt_IA_Aim_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Aim_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_LookTurn_GamePad_K2Node_EnhancedInputActionEvent_10(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_LookTurn_GamePad_K2Node_EnhancedInputActionEvent_9(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_LookTurn_K2Node_EnhancedInputActionEvent_11(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_LookTurn_K2Node_EnhancedInputActionEvent_14(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Ragdoll_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_12(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Sprint_K2Node_EnhancedInputActionEvent_13(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void LimitRotation(double AimYawMin, double AimYawMax, double InterpSpeed);
	void Look_Gamepad_X(double X_Value);
	void Look_Gamepad_Y(double Y_Value);
	void MantleCheck(const struct FMantle_TraceSettings& Trace_Settings, EDrawDebugTrace DebugType, bool* Vault);
	void MantleEnd();
	void MantleStart(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType);
	void MantleTimeline__FinishedFunc();
	void MantleTimeline__UpdateFunc();
	void MantleUpdate(double BlendIn);
	void Move_X(double X_Value);
	void Move_Y(double Y_Value);
	void OFF_DontJumpSprint();
	void On_Begin_Play();
	void ON_DontJumpSprint();
	void OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void OnGaitChanged(EALS_Gait NewActualGait);
	void OnJumped();
	void OnLanded(const struct FHitResult& Hit);
	void OnMovementActionChanged(EALS_MovementAction NewMovementAction);
	void OnMovementStateChanged(EALS_MovementState NewMovementState);
	void OnOverlayStateChanged(EALS_OverlayState NewOverlayState);
	void OnRotationModeChanged(EALS_RotationMode NewRotationMode);
	void OnStanceChanged(EALS_Stance NewStance);
	void OnViewModeChanged(EALS_ViewMode NewViewMode);
	void PlayerMovementInput(bool IsForwardAxis, double Y_in, double X_in);
	void RagdollEnd();
	void RagdollStart();
	void RagdollUpdate();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Restart_Sprint_Caculation();
	void Roll_Event();
	void Rotation_LookingMode();
	void Rotation_VelocityMode();
	bool SetActorLocationAndRotation_UpdateTarget_(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void SetActorLocationDuringRagdoll();
	void SetEssentialValues();
	void SetMovementModel();
	void SmoothCharacterRotation(const struct FRotator& Target, double TargetInterpSpeed_Const_, double ActorInterpSpeed_Smooth_);
	void Sprint_TL__FinishedFunc();
	void Sprint_TL__UpdateFunc();
	void UpdateCharacterMovement();
	void UpdateDynamicMovementSettings(EALS_Gait AllowedGait);
	void UpdateGroudedRotation();
	void UpdateInAirRotation();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ALS_Base_CharacterBP_C">();
	}
	static class AALS_Base_CharacterBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALS_Base_CharacterBP_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AALS_Base_CharacterBP_C) == 0x000010, "Wrong alignment on AALS_Base_CharacterBP_C");
static_assert(sizeof(AALS_Base_CharacterBP_C) == 0x000B50, "Wrong size on AALS_Base_CharacterBP_C");
static_assert(offsetof(AALS_Base_CharacterBP_C, UberGraphFrame) == 0x000680, "Member 'AALS_Base_CharacterBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, TickOptToolkitTarget) == 0x000688, "Member 'AALS_Base_CharacterBP_C::TickOptToolkitTarget' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, TickOptToolkitAnimUpdateRateOpt) == 0x000690, "Member 'AALS_Base_CharacterBP_C::TickOptToolkitAnimUpdateRateOpt' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Sprint_TL_Alpha_C26AD4634439BB3ADDEDB2B64DC846EE) == 0x000698, "Member 'AALS_Base_CharacterBP_C::Sprint_TL_Alpha_C26AD4634439BB3ADDEDB2B64DC846EE' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Sprint_TL__Direction_C26AD4634439BB3ADDEDB2B64DC846EE) == 0x00069C, "Member 'AALS_Base_CharacterBP_C::Sprint_TL__Direction_C26AD4634439BB3ADDEDB2B64DC846EE' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Sprint_TL) == 0x0006A0, "Member 'AALS_Base_CharacterBP_C::Sprint_TL' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleTimeline_BlendIn_91D7A42A4A23268AEE2E28853DEE703D) == 0x0006A8, "Member 'AALS_Base_CharacterBP_C::MantleTimeline_BlendIn_91D7A42A4A23268AEE2E28853DEE703D' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleTimeline__Direction_91D7A42A4A23268AEE2E28853DEE703D) == 0x0006AC, "Member 'AALS_Base_CharacterBP_C::MantleTimeline__Direction_91D7A42A4A23268AEE2E28853DEE703D' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleTimeline) == 0x0006B0, "Member 'AALS_Base_CharacterBP_C::MantleTimeline' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MovementState) == 0x0006B8, "Member 'AALS_Base_CharacterBP_C::MovementState' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, PrevMovementState) == 0x0006B9, "Member 'AALS_Base_CharacterBP_C::PrevMovementState' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, DesiredRotationMode) == 0x0006BA, "Member 'AALS_Base_CharacterBP_C::DesiredRotationMode' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MovementAction) == 0x0006BB, "Member 'AALS_Base_CharacterBP_C::MovementAction' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, RotationMode) == 0x0006BC, "Member 'AALS_Base_CharacterBP_C::RotationMode' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, DesiredGait) == 0x0006BD, "Member 'AALS_Base_CharacterBP_C::DesiredGait' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Gait) == 0x0006BE, "Member 'AALS_Base_CharacterBP_C::Gait' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Stance) == 0x0006BF, "Member 'AALS_Base_CharacterBP_C::Stance' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, ViewMode) == 0x0006C0, "Member 'AALS_Base_CharacterBP_C::ViewMode' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, PreviousVelocity) == 0x0006C8, "Member 'AALS_Base_CharacterBP_C::PreviousVelocity' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Acceleration) == 0x0006E0, "Member 'AALS_Base_CharacterBP_C::Acceleration' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, IsMoving) == 0x0006F8, "Member 'AALS_Base_CharacterBP_C::IsMoving' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, IK_Possible) == 0x0006F9, "Member 'AALS_Base_CharacterBP_C::IK_Possible' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Sprint_JUMP_) == 0x0006FA, "Member 'AALS_Base_CharacterBP_C::Sprint_JUMP_' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, HasMovementInput) == 0x0006FB, "Member 'AALS_Base_CharacterBP_C::HasMovementInput' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, LastVelocityRotation) == 0x000700, "Member 'AALS_Base_CharacterBP_C::LastVelocityRotation' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, LastMovementInputRotation) == 0x000718, "Member 'AALS_Base_CharacterBP_C::LastMovementInputRotation' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Speed) == 0x000730, "Member 'AALS_Base_CharacterBP_C::Speed' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MovementInputAmount) == 0x000738, "Member 'AALS_Base_CharacterBP_C::MovementInputAmount' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, PreviousAimYaw) == 0x000740, "Member 'AALS_Base_CharacterBP_C::PreviousAimYaw' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, TargetRotation) == 0x000748, "Member 'AALS_Base_CharacterBP_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, InAirRotation) == 0x000760, "Member 'AALS_Base_CharacterBP_C::InAirRotation' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, YawOffset) == 0x000778, "Member 'AALS_Base_CharacterBP_C::YawOffset' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MovementModel) == 0x000780, "Member 'AALS_Base_CharacterBP_C::MovementModel' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MovementData) == 0x000790, "Member 'AALS_Base_CharacterBP_C::MovementData' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, CurrentMovementSettings) == 0x000850, "Member 'AALS_Base_CharacterBP_C::CurrentMovementSettings' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleParams) == 0x000870, "Member 'AALS_Base_CharacterBP_C::MantleParams' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleLedgeLS) == 0x0008A0, "Member 'AALS_Base_CharacterBP_C::MantleLedgeLS' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleTarget) == 0x000910, "Member 'AALS_Base_CharacterBP_C::MantleTarget' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleActualStartOffset) == 0x000970, "Member 'AALS_Base_CharacterBP_C::MantleActualStartOffset' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MantleAnimatedStartOffset) == 0x0009D0, "Member 'AALS_Base_CharacterBP_C::MantleAnimatedStartOffset' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, GroundedTraceSettings) == 0x000A30, "Member 'AALS_Base_CharacterBP_C::GroundedTraceSettings' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, AutomaticTraceSettings) == 0x000A44, "Member 'AALS_Base_CharacterBP_C::AutomaticTraceSettings' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, FallingTraceSettings) == 0x000A58, "Member 'AALS_Base_CharacterBP_C::FallingTraceSettings' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, DesiredStance) == 0x000A6C, "Member 'AALS_Base_CharacterBP_C::DesiredStance' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, DownRate) == 0x000A70, "Member 'AALS_Base_CharacterBP_C::DownRate' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, LookLeftRightRate) == 0x000A78, "Member 'AALS_Base_CharacterBP_C::LookLeftRightRate' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, AimYawRate) == 0x000A80, "Member 'AALS_Base_CharacterBP_C::AimYawRate' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, OverlayState) == 0x000A88, "Member 'AALS_Base_CharacterBP_C::OverlayState' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, TimesPressedStance) == 0x000A8C, "Member 'AALS_Base_CharacterBP_C::TimesPressedStance' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, BreakFall) == 0x000A90, "Member 'AALS_Base_CharacterBP_C::BreakFall' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, SprintHeld) == 0x000A91, "Member 'AALS_Base_CharacterBP_C::SprintHeld' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, MainAnimInstance) == 0x000A98, "Member 'AALS_Base_CharacterBP_C::MainAnimInstance' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, RagdollOnGround) == 0x000AA0, "Member 'AALS_Base_CharacterBP_C::RagdollOnGround' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, RagdollFaceUp) == 0x000AA1, "Member 'AALS_Base_CharacterBP_C::RagdollFaceUp' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, LastRagdollVelocity) == 0x000AA8, "Member 'AALS_Base_CharacterBP_C::LastRagdollVelocity' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, ThirdPersonFOV) == 0x000AC0, "Member 'AALS_Base_CharacterBP_C::ThirdPersonFOV' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, FirstPersonFOV) == 0x000AC8, "Member 'AALS_Base_CharacterBP_C::FirstPersonFOV' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, RightShoulder) == 0x000AD0, "Member 'AALS_Base_CharacterBP_C::RightShoulder' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, ALTF42_PC) == 0x000AD8, "Member 'AALS_Base_CharacterBP_C::ALTF42_PC' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Fall_Location) == 0x000AE0, "Member 'AALS_Base_CharacterBP_C::Fall_Location' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Invert_X_Value) == 0x000AF8, "Member 'AALS_Base_CharacterBP_C::Invert_X_Value' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Invert_Y_Value) == 0x000B00, "Member 'AALS_Base_CharacterBP_C::Invert_Y_Value' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, LeftAxis) == 0x000B08, "Member 'AALS_Base_CharacterBP_C::LeftAxis' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, BackAxis) == 0x000B10, "Member 'AALS_Base_CharacterBP_C::BackAxis' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Talking_) == 0x000B18, "Member 'AALS_Base_CharacterBP_C::Talking_' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, bCantAction) == 0x000B19, "Member 'AALS_Base_CharacterBP_C::bCantAction' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, ThisPlayerble_) == 0x000B1A, "Member 'AALS_Base_CharacterBP_C::ThisPlayerble_' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, CrossHair_ON_) == 0x000B1B, "Member 'AALS_Base_CharacterBP_C::CrossHair_ON_' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Char_RollStatus) == 0x000B1C, "Member 'AALS_Base_CharacterBP_C::Char_RollStatus' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Jumpimg_Push_) == 0x000B1D, "Member 'AALS_Base_CharacterBP_C::Jumpimg_Push_' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Trampoline_Area_) == 0x000B1E, "Member 'AALS_Base_CharacterBP_C::Trampoline_Area_' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, bCantCamRotation) == 0x000B1F, "Member 'AALS_Base_CharacterBP_C::bCantCamRotation' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, SprintTrigger_time) == 0x000B20, "Member 'AALS_Base_CharacterBP_C::SprintTrigger_time' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, PushSprint) == 0x000B28, "Member 'AALS_Base_CharacterBP_C::PushSprint' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, SprintAirControl_OnOFF) == 0x000B29, "Member 'AALS_Base_CharacterBP_C::SprintAirControl_OnOFF' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, DontJumpAndSprint_ON_) == 0x000B2A, "Member 'AALS_Base_CharacterBP_C::DontJumpAndSprint_ON_' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, AgingForm_) == 0x000B2B, "Member 'AALS_Base_CharacterBP_C::AgingForm_' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, ChickForm_) == 0x000B2C, "Member 'AALS_Base_CharacterBP_C::ChickForm_' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Normal_Camera_Length) == 0x000B30, "Member 'AALS_Base_CharacterBP_C::Normal_Camera_Length' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Normal_Camera_Height) == 0x000B38, "Member 'AALS_Base_CharacterBP_C::Normal_Camera_Height' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, SuperMode_Active_) == 0x000B40, "Member 'AALS_Base_CharacterBP_C::SuperMode_Active_' has a wrong offset!");
static_assert(offsetof(AALS_Base_CharacterBP_C, Can_jump_) == 0x000B41, "Member 'AALS_Base_CharacterBP_C::Can_jump_' has a wrong offset!");

}

