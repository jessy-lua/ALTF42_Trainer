#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OptionsActionBinder

#include "Basic.hpp"

#include "OptionsActionBinder_classes.hpp"
#include "OptionsActionBinder_parameters.hpp"


namespace SDK
{

// Function OptionsActionBinder.OptionsActionBinder_C.BndEvt__ActionButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)

void UOptionsActionBinder_C::BndEvt__ActionButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "BndEvt__ActionButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.BndEvt__ActionButton_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature
// (BlueprintEvent)

void UOptionsActionBinder_C::BndEvt__ActionButton_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "BndEvt__ActionButton_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.ChangeInputBinding
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInputChord                      InInputChord                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UOptionsActionBinder_C::ChangeInputBinding(const struct FInputChord& InInputChord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "ChangeInputBinding");

	Params::OptionsActionBinder_C_ChangeInputBinding Parms{};

	Parms.InInputChord = std::move(InInputChord);

	UObject::ProcessEvent(Func, &Parms);
}


// Function OptionsActionBinder.OptionsActionBinder_C.CheckIfNotSameKey
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FInputChord                      InNewKey                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UOptionsActionBinder_C::CheckIfNotSameKey(const struct FInputChord& InNewKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "CheckIfNotSameKey");

	Params::OptionsActionBinder_C_CheckIfNotSameKey Parms{};

	Parms.InNewKey = std::move(InNewKey);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function OptionsActionBinder.OptionsActionBinder_C.CheckIfNotSameModifierKey
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNotSame                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOptionsActionBinder_C::CheckIfNotSameModifierKey(bool NewParam, bool* IsNotSame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "CheckIfNotSameModifierKey");

	Params::OptionsActionBinder_C_CheckIfNotSameModifierKey Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);

	if (IsNotSame != nullptr)
		*IsNotSame = Parms.IsNotSame;
}


// Function OptionsActionBinder.OptionsActionBinder_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UOptionsActionBinder_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.ExecuteUbergraph_OptionsActionBinder
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOptionsActionBinder_C::ExecuteUbergraph_OptionsActionBinder(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "ExecuteUbergraph_OptionsActionBinder");

	Params::OptionsActionBinder_C_ExecuteUbergraph_OptionsActionBinder Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OptionsActionBinder.OptionsActionBinder_C.Get_InputKeyName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Input_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputActionValueType                   Value_Type                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey                             Key                                                    (Parm, OutParm, HasGetValueTypeHash)

void UOptionsActionBinder_C::Get_InputKeyName(class FName Input_Name, EInputActionValueType Value_Type, struct FKey* Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "Get_InputKeyName");

	Params::OptionsActionBinder_C_Get_InputKeyName Parms{};

	Parms.Input_Name = Input_Name;
	Parms.Value_Type = Value_Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Key != nullptr)
		*Key = std::move(Parms.Key);
}


// Function OptionsActionBinder.OptionsActionBinder_C.GetModifierKey
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FKey                             InKey                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    bIsShift                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsCtrl                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsAlt                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsCmd                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOptionsActionBinder_C::GetModifierKey(const struct FKey& InKey, bool* bIsShift, bool* bIsCtrl, bool* bIsAlt, bool* bIsCmd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "GetModifierKey");

	Params::OptionsActionBinder_C_GetModifierKey Parms{};

	Parms.InKey = std::move(InKey);

	UObject::ProcessEvent(Func, &Parms);

	if (bIsShift != nullptr)
		*bIsShift = Parms.bIsShift;

	if (bIsCtrl != nullptr)
		*bIsCtrl = Parms.bIsCtrl;

	if (bIsAlt != nullptr)
		*bIsAlt = Parms.bIsAlt;

	if (bIsCmd != nullptr)
		*bIsCmd = Parms.bIsCmd;
}


// Function OptionsActionBinder.OptionsActionBinder_C.IsBlacklistedKey
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FKey                             InKey                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    bIsBlacklisted                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOptionsActionBinder_C::IsBlacklistedKey(const struct FKey& InKey, bool* bIsBlacklisted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "IsBlacklistedKey");

	Params::OptionsActionBinder_C_IsBlacklistedKey Parms{};

	Parms.InKey = std::move(InKey);

	UObject::ProcessEvent(Func, &Parms);

	if (bIsBlacklisted != nullptr)
		*bIsBlacklisted = Parms.bIsBlacklisted;
}


// Function OptionsActionBinder.OptionsActionBinder_C.IsKeyAlreadyBound
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInputChord                      InInputChord                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    bIsGamepad                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsAlreadyInUse                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FInputActionKeyMapping           Param_OldActionMapping                                 (Parm, OutParm)
// struct FInputAxisKeyMapping             Param_OldAxisMapping                                   (Parm, OutParm)

void UOptionsActionBinder_C::IsKeyAlreadyBound(const struct FInputChord& InInputChord, bool bIsGamepad, bool* bIsAlreadyInUse, struct FInputActionKeyMapping* Param_OldActionMapping, struct FInputAxisKeyMapping* Param_OldAxisMapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "IsKeyAlreadyBound");

	Params::OptionsActionBinder_C_IsKeyAlreadyBound Parms{};

	Parms.InInputChord = std::move(InInputChord);
	Parms.bIsGamepad = bIsGamepad;

	UObject::ProcessEvent(Func, &Parms);

	if (bIsAlreadyInUse != nullptr)
		*bIsAlreadyInUse = Parms.bIsAlreadyInUse;

	if (Param_OldActionMapping != nullptr)
		*Param_OldActionMapping = std::move(Parms.Param_OldActionMapping);

	if (Param_OldAxisMapping != nullptr)
		*Param_OldAxisMapping = std::move(Parms.Param_OldAxisMapping);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnCancelKeyChange
// (BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnCancelKeyChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnCancelKeyChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnEndKeyChange
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInputChord                      InInputChord                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UOptionsActionBinder_C::OnEndKeyChange(const struct FInputChord& InInputChord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnEndKeyChange");

	Params::OptionsActionBinder_C_OnEndKeyChange Parms{};

	Parms.InInputChord = std::move(InInputChord);

	UObject::ProcessEvent(Func, &Parms);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnGlobalSettingsApply
// (BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnGlobalSettingsApply()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnGlobalSettingsApply");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnKeyChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnKeyChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnKeyChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnKeyInit__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnKeyInit__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnKeyInit__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnKeyUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UOptionsActionBinder_C::OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnKeyUp");

	Params::OptionsActionBinder_C_OnKeyUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnLeaveEditMode
// (BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnLeaveEditMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnLeaveEditMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnModifierKeyCooldownStart
// (BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnModifierKeyCooldownStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnModifierKeyCooldownStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnMouseWheel
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UOptionsActionBinder_C::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnMouseWheel");

	Params::OptionsActionBinder_C_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnPreviewKeyDown
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UOptionsActionBinder_C::OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnPreviewKeyDown");

	Params::OptionsActionBinder_C_OnPreviewKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnPreviewMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UOptionsActionBinder_C::OnPreviewMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnPreviewMouseButtonDown");

	Params::OptionsActionBinder_C_OnPreviewMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnRebindAccept
// (BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnRebindAccept()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnRebindAccept");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnRebindDecline
// (BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnRebindDecline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnRebindDecline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnSetHoverEffect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsHovered                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPlaySound                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOptionsActionBinder_C::OnSetHoverEffect(bool bIsHovered, bool bPlaySound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnSetHoverEffect");

	Params::OptionsActionBinder_C_OnSetHoverEffect Parms{};

	Parms.bIsHovered = bIsHovered;
	Parms.bPlaySound = bPlaySound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnStartKeyChange
// (BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnStartKeyChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnStartKeyChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.RebindInput
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bRemoveOld                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOptionsActionBinder_C::RebindInput(bool bRemoveOld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "RebindInput");

	Params::OptionsActionBinder_C_RebindInput Parms{};

	Parms.bRemoveOld = bRemoveOld;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OptionsActionBinder.OptionsActionBinder_C.SetAllowMenuNavigation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsAllowed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOptionsActionBinder_C::SetAllowMenuNavigation(bool bIsAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "SetAllowMenuNavigation");

	Params::OptionsActionBinder_C_SetAllowMenuNavigation Parms{};

	Parms.bIsAllowed = bIsAllowed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OptionsActionBinder.OptionsActionBinder_C.SetCurrentActionMapping
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::SetCurrentActionMapping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "SetCurrentActionMapping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.SetCurrentAxisMapping
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::SetCurrentAxisMapping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "SetCurrentAxisMapping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.SetGlobalSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::SetGlobalSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "SetGlobalSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.SetHoverEffect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsHovered                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOptionsActionBinder_C::SetHoverEffect(bool Param_IsHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "SetHoverEffect");

	Params::OptionsActionBinder_C_SetHoverEffect Parms{};

	Parms.Param_IsHovered = Param_IsHovered;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OptionsActionBinder.OptionsActionBinder_C.SetKeyTextOrIcon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInputChord                      InInputChord                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    bIsWaitingForInput                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOptionsActionBinder_C::SetKeyTextOrIcon(const struct FInputChord& InInputChord, bool bIsWaitingForInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "SetKeyTextOrIcon");

	Params::OptionsActionBinder_C_SetKeyTextOrIcon Parms{};

	Parms.InInputChord = std::move(InInputChord);
	Parms.bIsWaitingForInput = bIsWaitingForInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OptionsActionBinder.OptionsActionBinder_C.SetupDisplayNameText
// (Public, BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::SetupDisplayNameText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "SetupDisplayNameText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.SetupInputBinding
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::SetupInputBinding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "SetupInputBinding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.ShowGamepadIcon
// (Public, BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::ShowGamepadIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "ShowGamepadIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.ShowRebindDialog
// (Public, BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::ShowRebindDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "ShowRebindDialog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnPressedBack
// (BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnPressedBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnPressedBack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnPressedLeft
// (BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnPressedLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnPressedLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnPressedRight
// (BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnPressedRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnPressedRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.OnPressedSelect
// (BlueprintCallable, BlueprintEvent)

void UOptionsActionBinder_C::OnPressedSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "OnPressedSelect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OptionsActionBinder.OptionsActionBinder_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOptionsActionBinder_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OptionsActionBinder_C", "PreConstruct");

	Params::OptionsActionBinder_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}

}

