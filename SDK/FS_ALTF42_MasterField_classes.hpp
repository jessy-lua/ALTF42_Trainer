#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FS_ALTF42_MasterField

#include "Basic.hpp"

#include "EFieldShapeType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FieldSystemEngine_classes.hpp"
#include "Chaos_structs.hpp"
#include "EFieldActivationType_structs.hpp"
#include "EFieldForceVel_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FS_ALTF42_MasterField.FS_ALTF42_MasterField_C
// 0x04F0 (0x0790 - 0x02A0)
class AFS_ALTF42_MasterField_C final : public AFieldSystemActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFieldSystemMetaDataProcessingResolution* FieldSystemMetaDataProcessingResolution;           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PlanarNormal_Arrow2;                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PlaneVolumeFalloffDistance;                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PlaneVolumeBox;                                    // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PlaneVolume;                                       // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_DirectionArrow;                                 // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DirectionalArrowNull;                              // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereVolumeCol;                                   // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_RadialArrow;                                    // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_RadialArrow4;                                   // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_RadialArrow3;                                   // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_RadialArrow2;                                   // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_RadialArrow1;                                   // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_RadialArrow5;                                   // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PlanarNormal_Arrow1;                            // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_DirectionArrow1;                                // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_DirectionArrow2;                                // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   NoiseMaxValueText;                                 // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   NoiseMinValueText;                                 // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TorqueValueText;                                   // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Noise_MinMaxTitle_Text;                            // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TorqueTitleText;                                   // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   DirectionalValueText;                              // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   DirectionalMagTitleText;                           // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   RadialValueText;                                   // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Radial_Mag_Title_Text;                             // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   StrainValueText;                                   // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   StrainTitleText;                                   // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   DelayTitleText;                                    // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   ActiveTitleText;                                   // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   DelayValueText;                                    // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SphereVolume;                                      // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   ActiveValueText;                                   // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   FieldTitleText;                                    // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BoxVolume;                                         // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   Field_Text;                                        // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxVolumeCol;                                      // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UReturnResultsTerminal*                 ReturnResultsTerminal;                             // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Field_Active;                                      // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3180[0x7];                                     // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOperatorField*                         OperatorFIeld_Input;                               // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldActivationType                          ActivationType;                                    // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldShapeType                               Field_Falloff_Shape;                               // 0x03EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTick;                                           // 0x03EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3181[0x4];                                     // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DelayAmount;                                       // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_External_Strain;                               // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3182[0x7];                                     // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Strain_Magnitude;                                  // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             StrainFalloffType;                                 // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3183[0x7];                                     // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              StrainFalloffMinMax;                               // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumStrainHits;                                     // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRadialVector;                                   // 0x0424(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3184[0x3];                                     // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Radial_Magnitude;                                  // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDirectionalVector;                              // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3185[0x7];                                     // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DirectionalMagnitude;                              // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTorque;                                         // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3186[0x7];                                     // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TorqueMult;                                        // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             VelocityFieldFalloffType;                          // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3187[0x7];                                     // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              VelocityFalloffMinMax;                             // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseNoise;                                          // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3188[0x7];                                     // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NoiseMinMax;                                       // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDecay;                                          // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3189[0x7];                                     // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DecayAmount;                                       // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             DecayFalloffType;                                  // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318A[0x7];                                     // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DecayFalloffMinMax;                                // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FieldVolume;                                       // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        DecayDelay;                                        // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDecayAmount;                                    // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RadialPositionOffset;                              // 0x04C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverideDIrectionalVector;                          // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318B[0x7];                                     // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DIrectionalVectorOveride;                          // 0x04E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TorqueVectorOveride;                               // 0x04F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldForceVel                                Velocity_Vector_Switch;                            // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318C[0x7];                                     // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ForceMult;                                         // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BoxCullingOnPlanar;                                // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318D[0x7];                                     // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlanarFalloffDistOveride;                          // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force_Dynamic_Switch;                              // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActivateTaggedStaticAndSkeletal;                   // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318E[0x6];                                     // 0x0532(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Chaos_Field_Name;                                  // 0x0538(0x0018)(Edit, BlueprintVisible)
	struct FLinearColor                           FieldColour;                                       // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebugText;                                     // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowWireFrame;                                     // 0x0561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowSolidShapes;                                   // 0x0562(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318F[0x5];                                     // 0x0563(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DirectionalDisplayScale;                           // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RadialDisplayScale;                                // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Text_Vertical_Offset;                              // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldPhysicsType                             LinearPhysicsType;                                 // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldPhysicsType                             AngularPhysicsType;                                // 0x0581(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             FieldFalloffType;                                  // 0x0582(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             Field_Falloff_Noise;                               // 0x0583(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             Field_Falloff_Torque;                              // 0x0584(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLifespan;                                       // 0x0585(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3190[0x2];                                     // 0x0586(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FieldLifespan;                                     // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFramesForTiming;                                // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3191[0x7];                                     // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FPS;                                               // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EObjectStateTypeEnum                          Dynamic_State;                                     // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3192[0x7];                                     // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlanarFalloffDist;                                 // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TotalDecay;                                        // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FalloffMinMax;                                     // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PlanarFalloffExtentColor;                          // 0x05C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DIrectionalVelocityVector;                         // 0x05D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                UpVector;                                          // 0x05F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLocation;                                     // 0x0608(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForwardVector;                                     // 0x0620(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightVector;                                       // 0x0638(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Skel;                                              // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class AStaticMeshActor*>               SimmableStaticMeshes;                              // 0x0658(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ASkeletalMeshActor*>             SimmableSkelMeshes;                                // 0x0668(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FName                                   PulseLevel;                                        // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FText>                           TextDisplay;                                       // 0x0680(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UTextRenderComponent*>           AllText;                                           // 0x0690(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FLinearColor                           ArrowColour_Dir;                                   // 0x06A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ArrowColour_Normal;                                // 0x06B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DeactivatedColour;                                 // 0x06C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DeactivatedTextColour;                             // 0x06D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Preview_Material;                                  // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TimeElapsed;                                       // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NoiseScaleMult;                                    // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3193[0x8];                                     // 0x06F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NewVar_0;                                          // 0x0700(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTriggered;                                       // 0x0760(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3194[0x7];                                     // 0x0761(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NoiseScaleBase;                                    // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DestroyActor;                                      // 0x0770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFieldFalloffType                             FieldFalloffType_Input;                            // 0x0771(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3195[0x6];                                     // 0x0772(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              FalloffMinMax_Input;                               // 0x0778(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Magnitude_Input;                                   // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateNoise(class UNoiseField** OutputPin);
	void CE_Trigger();
	void DisplayTextSetup();
	void ExecuteUbergraph_FS_ALTF42_MasterField(int32 EntryPoint);
	void FalloffAndCullSwitch_Main(double Magnitude, EFieldFalloffType FalloffType, const struct FVector2D& Param_FalloffMinMax, class UOperatorField* OperatorField, class UCullingField** CullingField);
	void FalloffShapeSwitch(EFieldFalloffType FalloffType, const struct FVector2D& Param_FalloffMinMax, class UOperatorField** OperatorFieldOut);
	void ForceMultiplier();
	void InitializeFieldVariables();
	void MakeDynamic_EnableNonGC();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetVisibility();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FS_ALTF42_MasterField_C">();
	}
	static class AFS_ALTF42_MasterField_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFS_ALTF42_MasterField_C>();
	}
};
static_assert(alignof(AFS_ALTF42_MasterField_C) == 0x000010, "Wrong alignment on AFS_ALTF42_MasterField_C");
static_assert(sizeof(AFS_ALTF42_MasterField_C) == 0x000790, "Wrong size on AFS_ALTF42_MasterField_C");
static_assert(offsetof(AFS_ALTF42_MasterField_C, UberGraphFrame) == 0x0002A0, "Member 'AFS_ALTF42_MasterField_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, FieldSystemMetaDataProcessingResolution) == 0x0002A8, "Member 'AFS_ALTF42_MasterField_C::FieldSystemMetaDataProcessingResolution' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SM_PlanarNormal_Arrow2) == 0x0002B0, "Member 'AFS_ALTF42_MasterField_C::SM_PlanarNormal_Arrow2' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, PlaneVolumeFalloffDistance) == 0x0002B8, "Member 'AFS_ALTF42_MasterField_C::PlaneVolumeFalloffDistance' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, PlaneVolumeBox) == 0x0002C0, "Member 'AFS_ALTF42_MasterField_C::PlaneVolumeBox' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, PlaneVolume) == 0x0002C8, "Member 'AFS_ALTF42_MasterField_C::PlaneVolume' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SM_DirectionArrow) == 0x0002D0, "Member 'AFS_ALTF42_MasterField_C::SM_DirectionArrow' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DirectionalArrowNull) == 0x0002D8, "Member 'AFS_ALTF42_MasterField_C::DirectionalArrowNull' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SphereVolumeCol) == 0x0002E0, "Member 'AFS_ALTF42_MasterField_C::SphereVolumeCol' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SM_RadialArrow) == 0x0002E8, "Member 'AFS_ALTF42_MasterField_C::SM_RadialArrow' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SM_RadialArrow4) == 0x0002F0, "Member 'AFS_ALTF42_MasterField_C::SM_RadialArrow4' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SM_RadialArrow3) == 0x0002F8, "Member 'AFS_ALTF42_MasterField_C::SM_RadialArrow3' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SM_RadialArrow2) == 0x000300, "Member 'AFS_ALTF42_MasterField_C::SM_RadialArrow2' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SM_RadialArrow1) == 0x000308, "Member 'AFS_ALTF42_MasterField_C::SM_RadialArrow1' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SM_RadialArrow5) == 0x000310, "Member 'AFS_ALTF42_MasterField_C::SM_RadialArrow5' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SM_PlanarNormal_Arrow1) == 0x000318, "Member 'AFS_ALTF42_MasterField_C::SM_PlanarNormal_Arrow1' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SM_DirectionArrow1) == 0x000320, "Member 'AFS_ALTF42_MasterField_C::SM_DirectionArrow1' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SM_DirectionArrow2) == 0x000328, "Member 'AFS_ALTF42_MasterField_C::SM_DirectionArrow2' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, NoiseMaxValueText) == 0x000330, "Member 'AFS_ALTF42_MasterField_C::NoiseMaxValueText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, NoiseMinValueText) == 0x000338, "Member 'AFS_ALTF42_MasterField_C::NoiseMinValueText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, TorqueValueText) == 0x000340, "Member 'AFS_ALTF42_MasterField_C::TorqueValueText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Noise_MinMaxTitle_Text) == 0x000348, "Member 'AFS_ALTF42_MasterField_C::Noise_MinMaxTitle_Text' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, TorqueTitleText) == 0x000350, "Member 'AFS_ALTF42_MasterField_C::TorqueTitleText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DirectionalValueText) == 0x000358, "Member 'AFS_ALTF42_MasterField_C::DirectionalValueText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DirectionalMagTitleText) == 0x000360, "Member 'AFS_ALTF42_MasterField_C::DirectionalMagTitleText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, RadialValueText) == 0x000368, "Member 'AFS_ALTF42_MasterField_C::RadialValueText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Radial_Mag_Title_Text) == 0x000370, "Member 'AFS_ALTF42_MasterField_C::Radial_Mag_Title_Text' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, StrainValueText) == 0x000378, "Member 'AFS_ALTF42_MasterField_C::StrainValueText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, StrainTitleText) == 0x000380, "Member 'AFS_ALTF42_MasterField_C::StrainTitleText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DelayTitleText) == 0x000388, "Member 'AFS_ALTF42_MasterField_C::DelayTitleText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, ActiveTitleText) == 0x000390, "Member 'AFS_ALTF42_MasterField_C::ActiveTitleText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DelayValueText) == 0x000398, "Member 'AFS_ALTF42_MasterField_C::DelayValueText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SphereVolume) == 0x0003A0, "Member 'AFS_ALTF42_MasterField_C::SphereVolume' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, ActiveValueText) == 0x0003A8, "Member 'AFS_ALTF42_MasterField_C::ActiveValueText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, FieldTitleText) == 0x0003B0, "Member 'AFS_ALTF42_MasterField_C::FieldTitleText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, BoxVolume) == 0x0003B8, "Member 'AFS_ALTF42_MasterField_C::BoxVolume' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Field_Text) == 0x0003C0, "Member 'AFS_ALTF42_MasterField_C::Field_Text' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, BoxVolumeCol) == 0x0003C8, "Member 'AFS_ALTF42_MasterField_C::BoxVolumeCol' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, ReturnResultsTerminal) == 0x0003D0, "Member 'AFS_ALTF42_MasterField_C::ReturnResultsTerminal' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Field_Active) == 0x0003D8, "Member 'AFS_ALTF42_MasterField_C::Field_Active' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, OperatorFIeld_Input) == 0x0003E0, "Member 'AFS_ALTF42_MasterField_C::OperatorFIeld_Input' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Debug) == 0x0003E8, "Member 'AFS_ALTF42_MasterField_C::Debug' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, ActivationType) == 0x0003E9, "Member 'AFS_ALTF42_MasterField_C::ActivationType' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Field_Falloff_Shape) == 0x0003EA, "Member 'AFS_ALTF42_MasterField_C::Field_Falloff_Shape' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, UseTick) == 0x0003EB, "Member 'AFS_ALTF42_MasterField_C::UseTick' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DelayAmount) == 0x0003F0, "Member 'AFS_ALTF42_MasterField_C::DelayAmount' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Use_External_Strain) == 0x0003F8, "Member 'AFS_ALTF42_MasterField_C::Use_External_Strain' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Strain_Magnitude) == 0x000400, "Member 'AFS_ALTF42_MasterField_C::Strain_Magnitude' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, StrainFalloffType) == 0x000408, "Member 'AFS_ALTF42_MasterField_C::StrainFalloffType' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, StrainFalloffMinMax) == 0x000410, "Member 'AFS_ALTF42_MasterField_C::StrainFalloffMinMax' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, NumStrainHits) == 0x000420, "Member 'AFS_ALTF42_MasterField_C::NumStrainHits' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, UseRadialVector) == 0x000424, "Member 'AFS_ALTF42_MasterField_C::UseRadialVector' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Radial_Magnitude) == 0x000428, "Member 'AFS_ALTF42_MasterField_C::Radial_Magnitude' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, UseDirectionalVector) == 0x000430, "Member 'AFS_ALTF42_MasterField_C::UseDirectionalVector' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DirectionalMagnitude) == 0x000438, "Member 'AFS_ALTF42_MasterField_C::DirectionalMagnitude' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, UseTorque) == 0x000440, "Member 'AFS_ALTF42_MasterField_C::UseTorque' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, TorqueMult) == 0x000448, "Member 'AFS_ALTF42_MasterField_C::TorqueMult' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, VelocityFieldFalloffType) == 0x000450, "Member 'AFS_ALTF42_MasterField_C::VelocityFieldFalloffType' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, VelocityFalloffMinMax) == 0x000458, "Member 'AFS_ALTF42_MasterField_C::VelocityFalloffMinMax' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, UseNoise) == 0x000468, "Member 'AFS_ALTF42_MasterField_C::UseNoise' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, NoiseMinMax) == 0x000470, "Member 'AFS_ALTF42_MasterField_C::NoiseMinMax' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, UseDecay) == 0x000480, "Member 'AFS_ALTF42_MasterField_C::UseDecay' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DecayAmount) == 0x000488, "Member 'AFS_ALTF42_MasterField_C::DecayAmount' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DecayFalloffType) == 0x000490, "Member 'AFS_ALTF42_MasterField_C::DecayFalloffType' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DecayFalloffMinMax) == 0x000498, "Member 'AFS_ALTF42_MasterField_C::DecayFalloffMinMax' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, FieldVolume) == 0x0004A8, "Member 'AFS_ALTF42_MasterField_C::FieldVolume' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DecayDelay) == 0x0004B0, "Member 'AFS_ALTF42_MasterField_C::DecayDelay' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, MaxDecayAmount) == 0x0004B8, "Member 'AFS_ALTF42_MasterField_C::MaxDecayAmount' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, RadialPositionOffset) == 0x0004C0, "Member 'AFS_ALTF42_MasterField_C::RadialPositionOffset' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, OverideDIrectionalVector) == 0x0004D8, "Member 'AFS_ALTF42_MasterField_C::OverideDIrectionalVector' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DIrectionalVectorOveride) == 0x0004E0, "Member 'AFS_ALTF42_MasterField_C::DIrectionalVectorOveride' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, TorqueVectorOveride) == 0x0004F8, "Member 'AFS_ALTF42_MasterField_C::TorqueVectorOveride' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Velocity_Vector_Switch) == 0x000510, "Member 'AFS_ALTF42_MasterField_C::Velocity_Vector_Switch' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, ForceMult) == 0x000518, "Member 'AFS_ALTF42_MasterField_C::ForceMult' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, BoxCullingOnPlanar) == 0x000520, "Member 'AFS_ALTF42_MasterField_C::BoxCullingOnPlanar' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, PlanarFalloffDistOveride) == 0x000528, "Member 'AFS_ALTF42_MasterField_C::PlanarFalloffDistOveride' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Force_Dynamic_Switch) == 0x000530, "Member 'AFS_ALTF42_MasterField_C::Force_Dynamic_Switch' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, ActivateTaggedStaticAndSkeletal) == 0x000531, "Member 'AFS_ALTF42_MasterField_C::ActivateTaggedStaticAndSkeletal' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Chaos_Field_Name) == 0x000538, "Member 'AFS_ALTF42_MasterField_C::Chaos_Field_Name' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, FieldColour) == 0x000550, "Member 'AFS_ALTF42_MasterField_C::FieldColour' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, ShowDebugText) == 0x000560, "Member 'AFS_ALTF42_MasterField_C::ShowDebugText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, ShowWireFrame) == 0x000561, "Member 'AFS_ALTF42_MasterField_C::ShowWireFrame' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, ShowSolidShapes) == 0x000562, "Member 'AFS_ALTF42_MasterField_C::ShowSolidShapes' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DirectionalDisplayScale) == 0x000568, "Member 'AFS_ALTF42_MasterField_C::DirectionalDisplayScale' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, RadialDisplayScale) == 0x000570, "Member 'AFS_ALTF42_MasterField_C::RadialDisplayScale' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Text_Vertical_Offset) == 0x000578, "Member 'AFS_ALTF42_MasterField_C::Text_Vertical_Offset' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, LinearPhysicsType) == 0x000580, "Member 'AFS_ALTF42_MasterField_C::LinearPhysicsType' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, AngularPhysicsType) == 0x000581, "Member 'AFS_ALTF42_MasterField_C::AngularPhysicsType' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, FieldFalloffType) == 0x000582, "Member 'AFS_ALTF42_MasterField_C::FieldFalloffType' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Field_Falloff_Noise) == 0x000583, "Member 'AFS_ALTF42_MasterField_C::Field_Falloff_Noise' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Field_Falloff_Torque) == 0x000584, "Member 'AFS_ALTF42_MasterField_C::Field_Falloff_Torque' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, UseLifespan) == 0x000585, "Member 'AFS_ALTF42_MasterField_C::UseLifespan' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, FieldLifespan) == 0x000588, "Member 'AFS_ALTF42_MasterField_C::FieldLifespan' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, UseFramesForTiming) == 0x000590, "Member 'AFS_ALTF42_MasterField_C::UseFramesForTiming' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, FPS) == 0x000598, "Member 'AFS_ALTF42_MasterField_C::FPS' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Dynamic_State) == 0x0005A0, "Member 'AFS_ALTF42_MasterField_C::Dynamic_State' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, PlanarFalloffDist) == 0x0005A8, "Member 'AFS_ALTF42_MasterField_C::PlanarFalloffDist' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, TotalDecay) == 0x0005B0, "Member 'AFS_ALTF42_MasterField_C::TotalDecay' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, FalloffMinMax) == 0x0005B8, "Member 'AFS_ALTF42_MasterField_C::FalloffMinMax' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, PlanarFalloffExtentColor) == 0x0005C8, "Member 'AFS_ALTF42_MasterField_C::PlanarFalloffExtentColor' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DIrectionalVelocityVector) == 0x0005D8, "Member 'AFS_ALTF42_MasterField_C::DIrectionalVelocityVector' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, UpVector) == 0x0005F0, "Member 'AFS_ALTF42_MasterField_C::UpVector' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, WorldLocation) == 0x000608, "Member 'AFS_ALTF42_MasterField_C::WorldLocation' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, ForwardVector) == 0x000620, "Member 'AFS_ALTF42_MasterField_C::ForwardVector' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, RightVector) == 0x000638, "Member 'AFS_ALTF42_MasterField_C::RightVector' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Skel) == 0x000650, "Member 'AFS_ALTF42_MasterField_C::Skel' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SimmableStaticMeshes) == 0x000658, "Member 'AFS_ALTF42_MasterField_C::SimmableStaticMeshes' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, SimmableSkelMeshes) == 0x000668, "Member 'AFS_ALTF42_MasterField_C::SimmableSkelMeshes' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, PulseLevel) == 0x000678, "Member 'AFS_ALTF42_MasterField_C::PulseLevel' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, TextDisplay) == 0x000680, "Member 'AFS_ALTF42_MasterField_C::TextDisplay' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, AllText) == 0x000690, "Member 'AFS_ALTF42_MasterField_C::AllText' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, ArrowColour_Dir) == 0x0006A0, "Member 'AFS_ALTF42_MasterField_C::ArrowColour_Dir' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, ArrowColour_Normal) == 0x0006B0, "Member 'AFS_ALTF42_MasterField_C::ArrowColour_Normal' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DeactivatedColour) == 0x0006C0, "Member 'AFS_ALTF42_MasterField_C::DeactivatedColour' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DeactivatedTextColour) == 0x0006D0, "Member 'AFS_ALTF42_MasterField_C::DeactivatedTextColour' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Preview_Material) == 0x0006E0, "Member 'AFS_ALTF42_MasterField_C::Preview_Material' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, TimeElapsed) == 0x0006E8, "Member 'AFS_ALTF42_MasterField_C::TimeElapsed' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, NoiseScaleMult) == 0x0006F0, "Member 'AFS_ALTF42_MasterField_C::NoiseScaleMult' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, NewVar_0) == 0x000700, "Member 'AFS_ALTF42_MasterField_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, IsTriggered) == 0x000760, "Member 'AFS_ALTF42_MasterField_C::IsTriggered' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, NoiseScaleBase) == 0x000768, "Member 'AFS_ALTF42_MasterField_C::NoiseScaleBase' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, DestroyActor) == 0x000770, "Member 'AFS_ALTF42_MasterField_C::DestroyActor' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, FieldFalloffType_Input) == 0x000771, "Member 'AFS_ALTF42_MasterField_C::FieldFalloffType_Input' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, FalloffMinMax_Input) == 0x000778, "Member 'AFS_ALTF42_MasterField_C::FalloffMinMax_Input' has a wrong offset!");
static_assert(offsetof(AFS_ALTF42_MasterField_C, Magnitude_Input) == 0x000788, "Member 'AFS_ALTF42_MasterField_C::Magnitude_Input' has a wrong offset!");

}

