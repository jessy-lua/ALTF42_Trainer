#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_turret

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_turret.BP_Turret_C
// 0x00F0 (0x0410 - 0x0320)
class ABP_Turret_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Bullet_Arrow;                                      // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Hit_Only_RocketChick;                              // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialForceComponent*                  RadialForce;                                       // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTickOptToolkitTargetComponent*         TickOptToolkitTarget;                              // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Socket;                                            // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Turret_gun_part;                                   // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Turret_cylinder;                                   // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Turret_wheel;                                      // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Turret_tray;                                       // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Turret_base;                                       // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Turret_bar;                                        // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Turret_bottom;                                     // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPawnSensingComponent*                  PawnSensing;                                       // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UALTF42_GameInstance_C*                 ALTF42_GI;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Get_Base_Position;                                 // 0x03B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ACharacter*                             Player;                                            // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Off;                                               // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          In_range;                                          // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3521[0x6];                                     // 0x03D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Delta_Time;                                        // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FireRate;                                          // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rotate_barrel_speed;                               // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rotation_speed;                                    // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_ammo;                                          // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ammo;                                              // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Health;                                            // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDestroy_Turret;                                   // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Barrel_Rotation_Multicast();
	void Barrel_Rotation_Server();
	void BndEvt__BP_Turret_Hit_Only_RocketChick_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__PawnSensing_K2Node_ComponentBoundEvent_0_SeePawnDelegate__DelegateSignature(class APawn* Pawn);
	void Destroy_Turret_Event();
	void ExecuteUbergraph_BP_Turret(int32 EntryPoint);
	void Fire_action();
	void Fire_multi(int32 Param_Ammo);
	void Forward_in_trace(struct FHitResult* OutHit, bool* HitAnything);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetYWorldLocation_multi(class USceneComponent* Target, double New_Rotation_Z__Yaw_, double New_Rotation_Y__Pitch_);
	void SetZworlLocation_multi(class USceneComponent* Target, double New_Rotation_X__Roll_, double New_Rotation_Z__Yaw_);
	void Turret_rotation();
	void Turret_Stop_Event();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Turret_C">();
	}
	static class ABP_Turret_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Turret_C>();
	}
};
static_assert(alignof(ABP_Turret_C) == 0x000008, "Wrong alignment on ABP_Turret_C");
static_assert(sizeof(ABP_Turret_C) == 0x000410, "Wrong size on ABP_Turret_C");
static_assert(offsetof(ABP_Turret_C, UberGraphFrame) == 0x000320, "Member 'ABP_Turret_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Bullet_Arrow) == 0x000328, "Member 'ABP_Turret_C::Bullet_Arrow' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Hit_Only_RocketChick) == 0x000330, "Member 'ABP_Turret_C::Hit_Only_RocketChick' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, RadialForce) == 0x000338, "Member 'ABP_Turret_C::RadialForce' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, TickOptToolkitTarget) == 0x000340, "Member 'ABP_Turret_C::TickOptToolkitTarget' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Arrow) == 0x000348, "Member 'ABP_Turret_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Socket) == 0x000350, "Member 'ABP_Turret_C::Socket' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, ParticleSystem) == 0x000358, "Member 'ABP_Turret_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Turret_gun_part) == 0x000360, "Member 'ABP_Turret_C::Turret_gun_part' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Turret_cylinder) == 0x000368, "Member 'ABP_Turret_C::Turret_cylinder' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Turret_wheel) == 0x000370, "Member 'ABP_Turret_C::Turret_wheel' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Turret_tray) == 0x000378, "Member 'ABP_Turret_C::Turret_tray' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Turret_base) == 0x000380, "Member 'ABP_Turret_C::Turret_base' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Turret_bar) == 0x000388, "Member 'ABP_Turret_C::Turret_bar' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Turret_bottom) == 0x000390, "Member 'ABP_Turret_C::Turret_bottom' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, PawnSensing) == 0x000398, "Member 'ABP_Turret_C::PawnSensing' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, DefaultSceneRoot) == 0x0003A0, "Member 'ABP_Turret_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, ALTF42_GI) == 0x0003A8, "Member 'ABP_Turret_C::ALTF42_GI' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Get_Base_Position) == 0x0003B0, "Member 'ABP_Turret_C::Get_Base_Position' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Player) == 0x0003C8, "Member 'ABP_Turret_C::Player' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Off) == 0x0003D0, "Member 'ABP_Turret_C::Off' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, In_range) == 0x0003D1, "Member 'ABP_Turret_C::In_range' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Delta_Time) == 0x0003D8, "Member 'ABP_Turret_C::Delta_Time' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, FireRate) == 0x0003E0, "Member 'ABP_Turret_C::FireRate' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Rotate_barrel_speed) == 0x0003E8, "Member 'ABP_Turret_C::Rotate_barrel_speed' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Rotation_speed) == 0x0003F0, "Member 'ABP_Turret_C::Rotation_speed' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Max_ammo) == 0x0003F8, "Member 'ABP_Turret_C::Max_ammo' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Ammo) == 0x0003FC, "Member 'ABP_Turret_C::Ammo' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Health) == 0x000400, "Member 'ABP_Turret_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, Damage) == 0x000404, "Member 'ABP_Turret_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_Turret_C, bDestroy_Turret) == 0x000408, "Member 'ABP_Turret_C::bDestroy_Turret' has a wrong offset!");

}

