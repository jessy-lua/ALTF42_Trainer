#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PathFollow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum PathFollow.EEasingType
// NumValues: 0x000E
enum class EEasingType : uint8
{
	Linear                                   = 0,
	CircularIn                               = 1,
	CircularOut                              = 2,
	CircularInOut                            = 3,
	EaseIn                                   = 4,
	EaseOut                                  = 5,
	EaseInOut                                = 6,
	ExpoIn                                   = 7,
	ExpoOut                                  = 8,
	ExpoInOut                                = 9,
	SinIn                                    = 10,
	SinOut                                   = 11,
	SinInOut                                 = 12,
	EEasingType_MAX                          = 13,
};

// Enum PathFollow.EPFEventFireMode
// NumValues: 0x0004
enum class EPFEventFireMode : uint8
{
	Forward                                  = 0,
	Reverse                                  = 1,
	Always                                   = 2,
	EPFEventFireMode_MAX                     = 3,
};

// Enum PathFollow.EPFLoopType
// NumValues: 0x0004
enum class EPFLoopType : uint8
{
	Replay                                   = 0,
	ReplayFromStart                          = 1,
	PingPong                                 = 2,
	EPFLoopType_MAX                          = 3,
};

// Enum PathFollow.EPFFactorOperation
// NumValues: 0x0004
enum class EPFFactorOperation : uint8
{
	None                                     = 0,
	Add                                      = 1,
	Mul                                      = 2,
	EPFFactorOperation_MAX                   = 3,
};

// Enum PathFollow.EPFRollInterpType
// NumValues: 0x0006
enum class EPFRollInterpType : uint8
{
	Constant                                 = 0,
	Linear                                   = 1,
	LinearStable                             = 2,
	Cubic                                    = 3,
	CubicClamped                             = 4,
	EPFRollInterpType_MAX                    = 5,
};

// ScriptStruct PathFollow.PFAutoRollVisualConfig
// 0x0030 (0x0030 - 0x0000)
struct FPFAutoRollVisualConfig final
{
public:
	bool                                          bHidePointsVisualization;                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideTextInfo;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A6[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineLength;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PointColor;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SelectedPointColor;                                // 0x0018(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointSize;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPFAutoRollVisualConfig) == 0x000004, "Wrong alignment on FPFAutoRollVisualConfig");
static_assert(sizeof(FPFAutoRollVisualConfig) == 0x000030, "Wrong size on FPFAutoRollVisualConfig");
static_assert(offsetof(FPFAutoRollVisualConfig, bHidePointsVisualization) == 0x000000, "Member 'FPFAutoRollVisualConfig::bHidePointsVisualization' has a wrong offset!");
static_assert(offsetof(FPFAutoRollVisualConfig, bHideTextInfo) == 0x000001, "Member 'FPFAutoRollVisualConfig::bHideTextInfo' has a wrong offset!");
static_assert(offsetof(FPFAutoRollVisualConfig, LineLength) == 0x000004, "Member 'FPFAutoRollVisualConfig::LineLength' has a wrong offset!");
static_assert(offsetof(FPFAutoRollVisualConfig, PointColor) == 0x000008, "Member 'FPFAutoRollVisualConfig::PointColor' has a wrong offset!");
static_assert(offsetof(FPFAutoRollVisualConfig, SelectedPointColor) == 0x000018, "Member 'FPFAutoRollVisualConfig::SelectedPointColor' has a wrong offset!");
static_assert(offsetof(FPFAutoRollVisualConfig, PointSize) == 0x000028, "Member 'FPFAutoRollVisualConfig::PointSize' has a wrong offset!");
static_assert(offsetof(FPFAutoRollVisualConfig, LineThickness) == 0x00002C, "Member 'FPFAutoRollVisualConfig::LineThickness' has a wrong offset!");

// ScriptStruct PathFollow.EventPoint
// 0x0028 (0x0028 - 0x0000)
struct FEventPoint final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A7[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    UserData;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPFEventFireMode                              FireMode;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A8[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FireCount;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A9[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventPoint) == 0x000008, "Wrong alignment on FEventPoint");
static_assert(sizeof(FEventPoint) == 0x000028, "Wrong size on FEventPoint");
static_assert(offsetof(FEventPoint, Name) == 0x000000, "Member 'FEventPoint::Name' has a wrong offset!");
static_assert(offsetof(FEventPoint, Distance) == 0x000008, "Member 'FEventPoint::Distance' has a wrong offset!");
static_assert(offsetof(FEventPoint, UserData) == 0x000010, "Member 'FEventPoint::UserData' has a wrong offset!");
static_assert(offsetof(FEventPoint, FireMode) == 0x000018, "Member 'FEventPoint::FireMode' has a wrong offset!");
static_assert(offsetof(FEventPoint, FireCount) == 0x00001C, "Member 'FEventPoint::FireCount' has a wrong offset!");
static_assert(offsetof(FEventPoint, Index) == 0x000020, "Member 'FEventPoint::Index' has a wrong offset!");

// ScriptStruct PathFollow.PFEventPointsVisualization
// 0x0018 (0x0018 - 0x0000)
struct FPFEventPointsVisualization final
{
public:
	bool                                          bHideEventPoints;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideEventPointInfoText;                           // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17AA[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 EventPointsColor;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventPointHitProxySize;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17AB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             _EventPointSpriteTexture;                          // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPFEventPointsVisualization) == 0x000008, "Wrong alignment on FPFEventPointsVisualization");
static_assert(sizeof(FPFEventPointsVisualization) == 0x000018, "Wrong size on FPFEventPointsVisualization");
static_assert(offsetof(FPFEventPointsVisualization, bHideEventPoints) == 0x000000, "Member 'FPFEventPointsVisualization::bHideEventPoints' has a wrong offset!");
static_assert(offsetof(FPFEventPointsVisualization, bHideEventPointInfoText) == 0x000001, "Member 'FPFEventPointsVisualization::bHideEventPointInfoText' has a wrong offset!");
static_assert(offsetof(FPFEventPointsVisualization, EventPointsColor) == 0x000004, "Member 'FPFEventPointsVisualization::EventPointsColor' has a wrong offset!");
static_assert(offsetof(FPFEventPointsVisualization, EventPointHitProxySize) == 0x000008, "Member 'FPFEventPointsVisualization::EventPointHitProxySize' has a wrong offset!");
static_assert(offsetof(FPFEventPointsVisualization, _EventPointSpriteTexture) == 0x000010, "Member 'FPFEventPointsVisualization::_EventPointSpriteTexture' has a wrong offset!");

// ScriptStruct PathFollow.PFEventPoints
// 0x0038 (0x0038 - 0x0000)
struct FPFEventPoints final
{
public:
	TArray<struct FEventPoint>                    Points;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17AC[0x10];                                    // 0x0010(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UEventPointDelegateHolder*              AllEventHolder;                                    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UEventPointDelegateHolder*>      Holders;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPFEventPoints) == 0x000008, "Wrong alignment on FPFEventPoints");
static_assert(sizeof(FPFEventPoints) == 0x000038, "Wrong size on FPFEventPoints");
static_assert(offsetof(FPFEventPoints, Points) == 0x000000, "Member 'FPFEventPoints::Points' has a wrong offset!");
static_assert(offsetof(FPFEventPoints, AllEventHolder) == 0x000020, "Member 'FPFEventPoints::AllEventHolder' has a wrong offset!");
static_assert(offsetof(FPFEventPoints, Holders) == 0x000028, "Member 'FPFEventPoints::Holders' has a wrong offset!");

// ScriptStruct PathFollow.DrawerData
// 0x0010 (0x0010 - 0x0000)
struct FDrawerData final
{
public:
	bool                                          bDrawIfNotSelected;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawIfSelected;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17AD[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 PathColor;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlPointSize;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDrawerData) == 0x000004, "Wrong alignment on FDrawerData");
static_assert(sizeof(FDrawerData) == 0x000010, "Wrong size on FDrawerData");
static_assert(offsetof(FDrawerData, bDrawIfNotSelected) == 0x000000, "Member 'FDrawerData::bDrawIfNotSelected' has a wrong offset!");
static_assert(offsetof(FDrawerData, bDrawIfSelected) == 0x000001, "Member 'FDrawerData::bDrawIfSelected' has a wrong offset!");
static_assert(offsetof(FDrawerData, PathColor) == 0x000004, "Member 'FDrawerData::PathColor' has a wrong offset!");
static_assert(offsetof(FDrawerData, Thickness) == 0x000008, "Member 'FDrawerData::Thickness' has a wrong offset!");
static_assert(offsetof(FDrawerData, ControlPointSize) == 0x00000C, "Member 'FDrawerData::ControlPointSize' has a wrong offset!");

// ScriptStruct PathFollow.PathFollowerInstanceData
// 0x0078 (0x00E0 - 0x0068)
struct FPathFollowerInstanceData final : public FActorComponentInstanceData
{
public:
	uint8                                         Pad_17AE[0x78];                                    // 0x0068(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPathFollowerInstanceData) == 0x000008, "Wrong alignment on FPathFollowerInstanceData");
static_assert(sizeof(FPathFollowerInstanceData) == 0x0000E0, "Wrong size on FPathFollowerInstanceData");

// ScriptStruct PathFollow.PFPathRoller
// 0x0028 (0x0028 - 0x0000)
struct FPFPathRoller final
{
public:
	struct FInterpCurveVector                     _rollAnglesCurve;                                  // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        _curves;                                           // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPFPathRoller) == 0x000008, "Wrong alignment on FPFPathRoller");
static_assert(sizeof(FPFPathRoller) == 0x000028, "Wrong size on FPFPathRoller");
static_assert(offsetof(FPFPathRoller, _rollAnglesCurve) == 0x000000, "Member 'FPFPathRoller::_rollAnglesCurve' has a wrong offset!");
static_assert(offsetof(FPFPathRoller, _curves) == 0x000018, "Member 'FPFPathRoller::_curves' has a wrong offset!");

// ScriptStruct PathFollow.PFSpeedPointsDrawConfig
// 0x0040 (0x0040 - 0x0000)
struct FPFSpeedPointsDrawConfig final
{
public:
	bool                                          bHideSpeedPoints;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideSpeedPointInfoText;                           // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17AF[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 SpeedPointsColor;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedPointHitProxySize;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B0[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             _SpeedPointSpriteTexture;                          // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisualizeSpeed;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B1[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LowSpeedColor;                                     // 0x001C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HighSpeedColor;                                    // 0x002C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B2[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPFSpeedPointsDrawConfig) == 0x000008, "Wrong alignment on FPFSpeedPointsDrawConfig");
static_assert(sizeof(FPFSpeedPointsDrawConfig) == 0x000040, "Wrong size on FPFSpeedPointsDrawConfig");
static_assert(offsetof(FPFSpeedPointsDrawConfig, bHideSpeedPoints) == 0x000000, "Member 'FPFSpeedPointsDrawConfig::bHideSpeedPoints' has a wrong offset!");
static_assert(offsetof(FPFSpeedPointsDrawConfig, bHideSpeedPointInfoText) == 0x000001, "Member 'FPFSpeedPointsDrawConfig::bHideSpeedPointInfoText' has a wrong offset!");
static_assert(offsetof(FPFSpeedPointsDrawConfig, SpeedPointsColor) == 0x000004, "Member 'FPFSpeedPointsDrawConfig::SpeedPointsColor' has a wrong offset!");
static_assert(offsetof(FPFSpeedPointsDrawConfig, SpeedPointHitProxySize) == 0x000008, "Member 'FPFSpeedPointsDrawConfig::SpeedPointHitProxySize' has a wrong offset!");
static_assert(offsetof(FPFSpeedPointsDrawConfig, _SpeedPointSpriteTexture) == 0x000010, "Member 'FPFSpeedPointsDrawConfig::_SpeedPointSpriteTexture' has a wrong offset!");
static_assert(offsetof(FPFSpeedPointsDrawConfig, bVisualizeSpeed) == 0x000018, "Member 'FPFSpeedPointsDrawConfig::bVisualizeSpeed' has a wrong offset!");
static_assert(offsetof(FPFSpeedPointsDrawConfig, LowSpeedColor) == 0x00001C, "Member 'FPFSpeedPointsDrawConfig::LowSpeedColor' has a wrong offset!");
static_assert(offsetof(FPFSpeedPointsDrawConfig, HighSpeedColor) == 0x00002C, "Member 'FPFSpeedPointsDrawConfig::HighSpeedColor' has a wrong offset!");

// ScriptStruct PathFollow.PFSpeedCurve
// 0x0018 (0x0018 - 0x0000)
struct FPFSpeedCurve final
{
public:
	struct FInterpCurveFloat                      _speedCurve;                                       // 0x0000(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPFSpeedCurve) == 0x000008, "Wrong alignment on FPFSpeedCurve");
static_assert(sizeof(FPFSpeedCurve) == 0x000018, "Wrong size on FPFSpeedCurve");
static_assert(offsetof(FPFSpeedCurve, _speedCurve) == 0x000000, "Member 'FPFSpeedCurve::_speedCurve' has a wrong offset!");

}

