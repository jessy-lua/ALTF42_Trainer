#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OptimusCore

#include "Basic.hpp"

#include "ComputeFramework_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum OptimusCore.EOptimusDiagnosticLevel
// NumValues: 0x0005
enum class EOptimusDiagnosticLevel : uint8
{
	None                                     = 0,
	Info                                     = 1,
	Warning                                  = 2,
	Error                                    = 3,
	EOptimusDiagnosticLevel_MAX              = 4,
};

// Enum OptimusCore.EOptimusBufferWriteType
// NumValues: 0x0006
enum class EOptimusBufferWriteType : uint8
{
	Write                                    = 0,
	WriteAtomicAdd                           = 1,
	WriteAtomicMin                           = 2,
	WriteAtomicMax                           = 3,
	Count                                    = 4,
	EOptimusBufferWriteType_MAX              = 5,
};

// Enum OptimusCore.EOptimusSkinnedMeshExecDomain
// NumValues: 0x0004
enum class EOptimusSkinnedMeshExecDomain : uint8
{
	None                                     = 0,
	Vertex                                   = 1,
	Triangle                                 = 2,
	EOptimusSkinnedMeshExecDomain_MAX        = 3,
};

// Enum OptimusCore.EOptimusTerminalType
// NumValues: 0x0004
enum class EOptimusTerminalType : uint32
{
	Unknown                                  = 0,
	Entry                                    = 1,
	Return                                   = 2,
	EOptimusTerminalType_MAX                 = 3,
};

// Enum OptimusCore.EOptimusDataDomainType
// NumValues: 0x0003
enum class EOptimusDataDomainType : uint32
{
	Dimensional                              = 0,
	Expression                               = 1,
	EOptimusDataDomainType_MAX               = 2,
};

// Enum OptimusCore.EOptimusDataTypeUsageFlags
// NumValues: 0x0005
enum class EOptimusDataTypeUsageFlags : uint8
{
	None                                     = 0,
	Resource                                 = 1,
	Variable                                 = 2,
	AnimAttributes                           = 4,
	EOptimusDataTypeUsageFlags_MAX           = 5,
};

// Enum OptimusCore.EOptimusDataTypeFlags
// NumValues: 0x0004
enum class EOptimusDataTypeFlags : uint8
{
	None                                     = 0,
	IsStructType                             = 1,
	ShowElements                             = 2,
	EOptimusDataTypeFlags_MAX                = 3,
};

// Enum OptimusCore.EOptimusDeformerStatus
// NumValues: 0x0005
enum class EOptimusDeformerStatus : uint32
{
	Compiled                                 = 0,
	CompiledWithWarnings                     = 1,
	Modified                                 = 2,
	HasErrors                                = 3,
	EOptimusDeformerStatus_MAX               = 4,
};

// Enum OptimusCore.EOptimusNodeGraphType
// NumValues: 0x0007
enum class EOptimusNodeGraphType : uint32
{
	Setup                                    = 0,
	Update                                   = 1,
	ExternalTrigger                          = 2,
	Function                                 = 3,
	SubGraph                                 = 4,
	Transient                                = 5,
	EOptimusNodeGraphType_MAX                = 6,
};

// Enum OptimusCore.EOptimusNodePinStorageType
// NumValues: 0x0003
enum class EOptimusNodePinStorageType : uint8
{
	Value                                    = 0,
	Resource                                 = 1,
	EOptimusNodePinStorageType_MAX           = 2,
};

// Enum OptimusCore.EOptimusNodePinDirection
// NumValues: 0x0004
enum class EOptimusNodePinDirection : uint8
{
	Unknown                                  = 0,
	Input                                    = 1,
	Output                                   = 2,
	EOptimusNodePinDirection_MAX             = 3,
};

// ScriptStruct OptimusCore.OptimusExecutionDomain
// 0x0008 (0x0008 - 0x0000)
struct FOptimusExecutionDomain final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusExecutionDomain) == 0x000004, "Wrong alignment on FOptimusExecutionDomain");
static_assert(sizeof(FOptimusExecutionDomain) == 0x000008, "Wrong size on FOptimusExecutionDomain");
static_assert(offsetof(FOptimusExecutionDomain, Name) == 0x000000, "Member 'FOptimusExecutionDomain::Name' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusDataTypeRef
// 0x0010 (0x0010 - 0x0000)
struct FOptimusDataTypeRef final
{
public:
	class FName                                   TypeName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 TypeObject;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusDataTypeRef) == 0x000004, "Wrong alignment on FOptimusDataTypeRef");
static_assert(sizeof(FOptimusDataTypeRef) == 0x000010, "Wrong size on FOptimusDataTypeRef");
static_assert(offsetof(FOptimusDataTypeRef, TypeName) == 0x000000, "Member 'FOptimusDataTypeRef::TypeName' has a wrong offset!");
static_assert(offsetof(FOptimusDataTypeRef, TypeObject) == 0x000008, "Member 'FOptimusDataTypeRef::TypeObject' has a wrong offset!");

// ScriptStruct OptimusCore.Optimus_ShaderBinding
// 0x0018 (0x0018 - 0x0000)
struct FOptimus_ShaderBinding final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOptimusDataTypeRef                    DataType;                                          // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimus_ShaderBinding) == 0x000004, "Wrong alignment on FOptimus_ShaderBinding");
static_assert(sizeof(FOptimus_ShaderBinding) == 0x000018, "Wrong size on FOptimus_ShaderBinding");
static_assert(offsetof(FOptimus_ShaderBinding, Name) == 0x000000, "Member 'FOptimus_ShaderBinding::Name' has a wrong offset!");
static_assert(offsetof(FOptimus_ShaderBinding, DataType) == 0x000008, "Member 'FOptimus_ShaderBinding::DataType' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusValidatedName
// 0x0008 (0x0008 - 0x0000)
struct FOptimusValidatedName final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusValidatedName) == 0x000004, "Wrong alignment on FOptimusValidatedName");
static_assert(sizeof(FOptimusValidatedName) == 0x000008, "Wrong size on FOptimusValidatedName");
static_assert(offsetof(FOptimusValidatedName, Name) == 0x000000, "Member 'FOptimusValidatedName::Name' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusDataDomain
// 0x0040 (0x0040 - 0x0000)
struct FOptimusDataDomain final
{
public:
	EOptimusDataDomainType                        Type;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A52[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DimensionNames;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Multiplier;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A53[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Expression;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LevelNames;                                        // 0x0030(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FOptimusDataDomain) == 0x000008, "Wrong alignment on FOptimusDataDomain");
static_assert(sizeof(FOptimusDataDomain) == 0x000040, "Wrong size on FOptimusDataDomain");
static_assert(offsetof(FOptimusDataDomain, Type) == 0x000000, "Member 'FOptimusDataDomain::Type' has a wrong offset!");
static_assert(offsetof(FOptimusDataDomain, DimensionNames) == 0x000008, "Member 'FOptimusDataDomain::DimensionNames' has a wrong offset!");
static_assert(offsetof(FOptimusDataDomain, Multiplier) == 0x000018, "Member 'FOptimusDataDomain::Multiplier' has a wrong offset!");
static_assert(offsetof(FOptimusDataDomain, Expression) == 0x000020, "Member 'FOptimusDataDomain::Expression' has a wrong offset!");
static_assert(offsetof(FOptimusDataDomain, LevelNames) == 0x000030, "Member 'FOptimusDataDomain::LevelNames' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusParameterBinding
// 0x0058 (0x0058 - 0x0000)
struct FOptimusParameterBinding final
{
public:
	struct FOptimusValidatedName                  Name;                                              // 0x0000(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FOptimusDataTypeRef                    DataType;                                          // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FOptimusDataDomain                     DataDomain;                                        // 0x0018(0x0040)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusParameterBinding) == 0x000008, "Wrong alignment on FOptimusParameterBinding");
static_assert(sizeof(FOptimusParameterBinding) == 0x000058, "Wrong size on FOptimusParameterBinding");
static_assert(offsetof(FOptimusParameterBinding, Name) == 0x000000, "Member 'FOptimusParameterBinding::Name' has a wrong offset!");
static_assert(offsetof(FOptimusParameterBinding, DataType) == 0x000008, "Member 'FOptimusParameterBinding::DataType' has a wrong offset!");
static_assert(offsetof(FOptimusParameterBinding, DataDomain) == 0x000018, "Member 'FOptimusParameterBinding::DataDomain' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusParameterBindingArray
// 0x0010 (0x0010 - 0x0000)
struct FOptimusParameterBindingArray final
{
public:
	TArray<struct FOptimusParameterBinding>       InnerArray;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusParameterBindingArray) == 0x000008, "Wrong alignment on FOptimusParameterBindingArray");
static_assert(sizeof(FOptimusParameterBindingArray) == 0x000010, "Wrong size on FOptimusParameterBindingArray");
static_assert(offsetof(FOptimusParameterBindingArray, InnerArray) == 0x000000, "Member 'FOptimusParameterBindingArray::InnerArray' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusShaderText
// 0x0020 (0x0020 - 0x0000)
struct FOptimusShaderText final
{
public:
	class FString                                 Declarations;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShaderText;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusShaderText) == 0x000008, "Wrong alignment on FOptimusShaderText");
static_assert(sizeof(FOptimusShaderText) == 0x000020, "Wrong size on FOptimusShaderText");
static_assert(offsetof(FOptimusShaderText, Declarations) == 0x000000, "Member 'FOptimusShaderText::Declarations' has a wrong offset!");
static_assert(offsetof(FOptimusShaderText, ShaderText) == 0x000010, "Member 'FOptimusShaderText::ShaderText' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusAction
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FOptimusAction
{
public:
	uint8                                         Pad_1A54[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusAction) == 0x000008, "Wrong alignment on FOptimusAction");
static_assert(sizeof(FOptimusAction) == 0x000018, "Wrong size on FOptimusAction");

// ScriptStruct OptimusCore.OptimusCompoundAction
// 0x0010 (0x0028 - 0x0018)
struct FOptimusCompoundAction final : public FOptimusAction
{
public:
	uint8                                         Pad_1A55[0x10];                                    // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusCompoundAction) == 0x000008, "Wrong alignment on FOptimusCompoundAction");
static_assert(sizeof(FOptimusCompoundAction) == 0x000028, "Wrong size on FOptimusCompoundAction");

// ScriptStruct OptimusCore.OptimusComponentBindingAction_AddBinding
// 0x0018 (0x0030 - 0x0018)
struct FOptimusComponentBindingAction_AddBinding final : public FOptimusAction
{
public:
	uint8                                         Pad_1A56[0x18];                                    // 0x0018(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusComponentBindingAction_AddBinding) == 0x000008, "Wrong alignment on FOptimusComponentBindingAction_AddBinding");
static_assert(sizeof(FOptimusComponentBindingAction_AddBinding) == 0x000030, "Wrong size on FOptimusComponentBindingAction_AddBinding");

// ScriptStruct OptimusCore.OptimusComponentBindingAction_RemoveBinding
// 0x0030 (0x0048 - 0x0018)
struct FOptimusComponentBindingAction_RemoveBinding final : public FOptimusAction
{
public:
	uint8                                         Pad_1A57[0x30];                                    // 0x0018(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusComponentBindingAction_RemoveBinding) == 0x000008, "Wrong alignment on FOptimusComponentBindingAction_RemoveBinding");
static_assert(sizeof(FOptimusComponentBindingAction_RemoveBinding) == 0x000048, "Wrong size on FOptimusComponentBindingAction_RemoveBinding");

// ScriptStruct OptimusCore.OptimusComponentBindingAction_RenameBinding
// 0x0010 (0x0028 - 0x0018)
struct FOptimusComponentBindingAction_RenameBinding final : public FOptimusAction
{
public:
	uint8                                         Pad_1A58[0x10];                                    // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusComponentBindingAction_RenameBinding) == 0x000008, "Wrong alignment on FOptimusComponentBindingAction_RenameBinding");
static_assert(sizeof(FOptimusComponentBindingAction_RenameBinding) == 0x000028, "Wrong size on FOptimusComponentBindingAction_RenameBinding");

// ScriptStruct OptimusCore.OptimusComponentBindingAction_SetComponentSource
// 0x0028 (0x0040 - 0x0018)
struct FOptimusComponentBindingAction_SetComponentSource final : public FOptimusAction
{
public:
	uint8                                         Pad_1A59[0x28];                                    // 0x0018(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusComponentBindingAction_SetComponentSource) == 0x000008, "Wrong alignment on FOptimusComponentBindingAction_SetComponentSource");
static_assert(sizeof(FOptimusComponentBindingAction_SetComponentSource) == 0x000040, "Wrong size on FOptimusComponentBindingAction_SetComponentSource");

// ScriptStruct OptimusCore.OptimusNodeAction_RenameNode
// 0x0040 (0x0058 - 0x0018)
struct FOptimusNodeAction_RenameNode final : public FOptimusAction
{
public:
	uint8                                         Pad_1A5A[0x40];                                    // 0x0018(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeAction_RenameNode) == 0x000008, "Wrong alignment on FOptimusNodeAction_RenameNode");
static_assert(sizeof(FOptimusNodeAction_RenameNode) == 0x000058, "Wrong size on FOptimusNodeAction_RenameNode");

// ScriptStruct OptimusCore.OptimusNodeAction_MoveNode
// 0x0030 (0x0048 - 0x0018)
struct FOptimusNodeAction_MoveNode final : public FOptimusAction
{
public:
	uint8                                         Pad_1A5B[0x30];                                    // 0x0018(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeAction_MoveNode) == 0x000008, "Wrong alignment on FOptimusNodeAction_MoveNode");
static_assert(sizeof(FOptimusNodeAction_MoveNode) == 0x000048, "Wrong size on FOptimusNodeAction_MoveNode");

// ScriptStruct OptimusCore.OptimusNodeAction_SetPinValue
// 0x0030 (0x0048 - 0x0018)
struct FOptimusNodeAction_SetPinValue final : public FOptimusAction
{
public:
	uint8                                         Pad_1A5C[0x30];                                    // 0x0018(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeAction_SetPinValue) == 0x000008, "Wrong alignment on FOptimusNodeAction_SetPinValue");
static_assert(sizeof(FOptimusNodeAction_SetPinValue) == 0x000048, "Wrong size on FOptimusNodeAction_SetPinValue");

// ScriptStruct OptimusCore.OptimusNodeAction_SetPinName
// 0x0020 (0x0038 - 0x0018)
struct FOptimusNodeAction_SetPinName final : public FOptimusAction
{
public:
	uint8                                         Pad_1A5D[0x20];                                    // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeAction_SetPinName) == 0x000008, "Wrong alignment on FOptimusNodeAction_SetPinName");
static_assert(sizeof(FOptimusNodeAction_SetPinName) == 0x000038, "Wrong size on FOptimusNodeAction_SetPinName");

// ScriptStruct OptimusCore.OptimusNodeAction_SetPinType
// 0x0020 (0x0038 - 0x0018)
struct FOptimusNodeAction_SetPinType final : public FOptimusAction
{
public:
	uint8                                         Pad_1A5E[0x20];                                    // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeAction_SetPinType) == 0x000008, "Wrong alignment on FOptimusNodeAction_SetPinType");
static_assert(sizeof(FOptimusNodeAction_SetPinType) == 0x000038, "Wrong size on FOptimusNodeAction_SetPinType");

// ScriptStruct OptimusCore.OptimusNodeAction_SetPinDataDomain
// 0x0090 (0x00A8 - 0x0018)
struct FOptimusNodeAction_SetPinDataDomain final : public FOptimusAction
{
public:
	uint8                                         Pad_1A5F[0x90];                                    // 0x0018(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeAction_SetPinDataDomain) == 0x000008, "Wrong alignment on FOptimusNodeAction_SetPinDataDomain");
static_assert(sizeof(FOptimusNodeAction_SetPinDataDomain) == 0x0000A8, "Wrong size on FOptimusNodeAction_SetPinDataDomain");

// ScriptStruct OptimusCore.OptimusNodeAction_AddRemovePin
// 0x00A0 (0x00B8 - 0x0018)
struct FOptimusNodeAction_AddRemovePin : public FOptimusAction
{
public:
	uint8                                         Pad_1A60[0xA0];                                    // 0x0018(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeAction_AddRemovePin) == 0x000008, "Wrong alignment on FOptimusNodeAction_AddRemovePin");
static_assert(sizeof(FOptimusNodeAction_AddRemovePin) == 0x0000B8, "Wrong size on FOptimusNodeAction_AddRemovePin");

// ScriptStruct OptimusCore.OptimusNodeAction_AddPin
// 0x0000 (0x00B8 - 0x00B8)
struct FOptimusNodeAction_AddPin final : public FOptimusNodeAction_AddRemovePin
{
};
static_assert(alignof(FOptimusNodeAction_AddPin) == 0x000008, "Wrong alignment on FOptimusNodeAction_AddPin");
static_assert(sizeof(FOptimusNodeAction_AddPin) == 0x0000B8, "Wrong size on FOptimusNodeAction_AddPin");

// ScriptStruct OptimusCore.OptimusNodeAction_AddGroupingPin
// 0x0000 (0x00B8 - 0x00B8)
struct FOptimusNodeAction_AddGroupingPin final : public FOptimusNodeAction_AddRemovePin
{
};
static_assert(alignof(FOptimusNodeAction_AddGroupingPin) == 0x000008, "Wrong alignment on FOptimusNodeAction_AddGroupingPin");
static_assert(sizeof(FOptimusNodeAction_AddGroupingPin) == 0x0000B8, "Wrong size on FOptimusNodeAction_AddGroupingPin");

// ScriptStruct OptimusCore.OptimusNodeAction_RemovePin
// 0x0000 (0x00B8 - 0x00B8)
struct FOptimusNodeAction_RemovePin final : public FOptimusNodeAction_AddRemovePin
{
};
static_assert(alignof(FOptimusNodeAction_RemovePin) == 0x000008, "Wrong alignment on FOptimusNodeAction_RemovePin");
static_assert(sizeof(FOptimusNodeAction_RemovePin) == 0x0000B8, "Wrong size on FOptimusNodeAction_RemovePin");

// ScriptStruct OptimusCore.OptimusNodeAction_MovePin
// 0x0030 (0x0048 - 0x0018)
struct FOptimusNodeAction_MovePin final : public FOptimusAction
{
public:
	uint8                                         Pad_1A61[0x30];                                    // 0x0018(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeAction_MovePin) == 0x000008, "Wrong alignment on FOptimusNodeAction_MovePin");
static_assert(sizeof(FOptimusNodeAction_MovePin) == 0x000048, "Wrong size on FOptimusNodeAction_MovePin");

// ScriptStruct OptimusCore.OptimusNodeGraphAction_AddGraph
// 0x0078 (0x0090 - 0x0018)
struct alignas(0x10) FOptimusNodeGraphAction_AddGraph final : public FOptimusAction
{
public:
	uint8                                         Pad_1A62[0x78];                                    // 0x0018(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeGraphAction_AddGraph) == 0x000010, "Wrong alignment on FOptimusNodeGraphAction_AddGraph");
static_assert(sizeof(FOptimusNodeGraphAction_AddGraph) == 0x000090, "Wrong size on FOptimusNodeGraphAction_AddGraph");

// ScriptStruct OptimusCore.OptimusNodeGraphAction_RemoveGraph
// 0x0040 (0x0058 - 0x0018)
struct FOptimusNodeGraphAction_RemoveGraph final : public FOptimusAction
{
public:
	uint8                                         Pad_1A63[0x40];                                    // 0x0018(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeGraphAction_RemoveGraph) == 0x000008, "Wrong alignment on FOptimusNodeGraphAction_RemoveGraph");
static_assert(sizeof(FOptimusNodeGraphAction_RemoveGraph) == 0x000058, "Wrong size on FOptimusNodeGraphAction_RemoveGraph");

// ScriptStruct OptimusCore.OptimusNodeGraphAction_RenameGraph
// 0x0020 (0x0038 - 0x0018)
struct FOptimusNodeGraphAction_RenameGraph final : public FOptimusAction
{
public:
	uint8                                         Pad_1A64[0x20];                                    // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeGraphAction_RenameGraph) == 0x000008, "Wrong alignment on FOptimusNodeGraphAction_RenameGraph");
static_assert(sizeof(FOptimusNodeGraphAction_RenameGraph) == 0x000038, "Wrong size on FOptimusNodeGraphAction_RenameGraph");

// ScriptStruct OptimusCore.OptimusNodeGraphAction_AddNode
// 0x0088 (0x00A0 - 0x0018)
struct alignas(0x10) FOptimusNodeGraphAction_AddNode final : public FOptimusAction
{
public:
	uint8                                         Pad_1A65[0x88];                                    // 0x0018(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeGraphAction_AddNode) == 0x000010, "Wrong alignment on FOptimusNodeGraphAction_AddNode");
static_assert(sizeof(FOptimusNodeGraphAction_AddNode) == 0x0000A0, "Wrong size on FOptimusNodeGraphAction_AddNode");

// ScriptStruct OptimusCore.OptimusNodeGraphAction_DuplicateNode
// 0x0088 (0x00A0 - 0x0018)
struct alignas(0x10) FOptimusNodeGraphAction_DuplicateNode final : public FOptimusAction
{
public:
	uint8                                         Pad_1A66[0x88];                                    // 0x0018(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeGraphAction_DuplicateNode) == 0x000010, "Wrong alignment on FOptimusNodeGraphAction_DuplicateNode");
static_assert(sizeof(FOptimusNodeGraphAction_DuplicateNode) == 0x0000A0, "Wrong size on FOptimusNodeGraphAction_DuplicateNode");

// ScriptStruct OptimusCore.OptimusNodeGraphAction_RemoveNode
// 0x0048 (0x0060 - 0x0018)
struct FOptimusNodeGraphAction_RemoveNode final : public FOptimusAction
{
public:
	uint8                                         Pad_1A67[0x48];                                    // 0x0018(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeGraphAction_RemoveNode) == 0x000008, "Wrong alignment on FOptimusNodeGraphAction_RemoveNode");
static_assert(sizeof(FOptimusNodeGraphAction_RemoveNode) == 0x000060, "Wrong size on FOptimusNodeGraphAction_RemoveNode");

// ScriptStruct OptimusCore.OptimusNodeGraphAction_AddRemoveLink
// 0x0028 (0x0040 - 0x0018)
struct FOptimusNodeGraphAction_AddRemoveLink : public FOptimusAction
{
public:
	uint8                                         Pad_1A68[0x28];                                    // 0x0018(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeGraphAction_AddRemoveLink) == 0x000008, "Wrong alignment on FOptimusNodeGraphAction_AddRemoveLink");
static_assert(sizeof(FOptimusNodeGraphAction_AddRemoveLink) == 0x000040, "Wrong size on FOptimusNodeGraphAction_AddRemoveLink");

// ScriptStruct OptimusCore.OptimusNodeGraphAction_AddLink
// 0x0000 (0x0040 - 0x0040)
struct FOptimusNodeGraphAction_AddLink final : public FOptimusNodeGraphAction_AddRemoveLink
{
};
static_assert(alignof(FOptimusNodeGraphAction_AddLink) == 0x000008, "Wrong alignment on FOptimusNodeGraphAction_AddLink");
static_assert(sizeof(FOptimusNodeGraphAction_AddLink) == 0x000040, "Wrong size on FOptimusNodeGraphAction_AddLink");

// ScriptStruct OptimusCore.OptimusNodeGraphAction_RemoveLink
// 0x0000 (0x0040 - 0x0040)
struct FOptimusNodeGraphAction_RemoveLink final : public FOptimusNodeGraphAction_AddRemoveLink
{
};
static_assert(alignof(FOptimusNodeGraphAction_RemoveLink) == 0x000008, "Wrong alignment on FOptimusNodeGraphAction_RemoveLink");
static_assert(sizeof(FOptimusNodeGraphAction_RemoveLink) == 0x000040, "Wrong size on FOptimusNodeGraphAction_RemoveLink");

// ScriptStruct OptimusCore.OptimusNodeGraphAction_ConnectAdderPin
// 0x0068 (0x00A8 - 0x0040)
struct FOptimusNodeGraphAction_ConnectAdderPin final : public FOptimusNodeGraphAction_AddRemoveLink
{
public:
	uint8                                         Pad_1A69[0x68];                                    // 0x0040(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeGraphAction_ConnectAdderPin) == 0x000008, "Wrong alignment on FOptimusNodeGraphAction_ConnectAdderPin");
static_assert(sizeof(FOptimusNodeGraphAction_ConnectAdderPin) == 0x0000A8, "Wrong size on FOptimusNodeGraphAction_ConnectAdderPin");

// ScriptStruct OptimusCore.OptimusNodeGraphAction_PackageKernelFunction
// 0x0098 (0x00B0 - 0x0018)
struct FOptimusNodeGraphAction_PackageKernelFunction final : public FOptimusAction
{
public:
	uint8                                         Pad_1A6A[0x98];                                    // 0x0018(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeGraphAction_PackageKernelFunction) == 0x000008, "Wrong alignment on FOptimusNodeGraphAction_PackageKernelFunction");
static_assert(sizeof(FOptimusNodeGraphAction_PackageKernelFunction) == 0x0000B0, "Wrong size on FOptimusNodeGraphAction_PackageKernelFunction");

// ScriptStruct OptimusCore.OptimusNodeGraphAction_UnpackageKernelFunction
// 0x0048 (0x0060 - 0x0018)
struct FOptimusNodeGraphAction_UnpackageKernelFunction final : public FOptimusAction
{
public:
	uint8                                         Pad_1A6B[0x48];                                    // 0x0018(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusNodeGraphAction_UnpackageKernelFunction) == 0x000008, "Wrong alignment on FOptimusNodeGraphAction_UnpackageKernelFunction");
static_assert(sizeof(FOptimusNodeGraphAction_UnpackageKernelFunction) == 0x000060, "Wrong size on FOptimusNodeGraphAction_UnpackageKernelFunction");

// ScriptStruct OptimusCore.OptimusResourceAction_AddResource
// 0x0058 (0x0070 - 0x0018)
struct FOptimusResourceAction_AddResource final : public FOptimusAction
{
public:
	uint8                                         Pad_1A6C[0x58];                                    // 0x0018(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusResourceAction_AddResource) == 0x000008, "Wrong alignment on FOptimusResourceAction_AddResource");
static_assert(sizeof(FOptimusResourceAction_AddResource) == 0x000070, "Wrong size on FOptimusResourceAction_AddResource");

// ScriptStruct OptimusCore.OptimusResourceAction_RemoveResource
// 0x0030 (0x0048 - 0x0018)
struct FOptimusResourceAction_RemoveResource final : public FOptimusAction
{
public:
	uint8                                         Pad_1A6D[0x30];                                    // 0x0018(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusResourceAction_RemoveResource) == 0x000008, "Wrong alignment on FOptimusResourceAction_RemoveResource");
static_assert(sizeof(FOptimusResourceAction_RemoveResource) == 0x000048, "Wrong size on FOptimusResourceAction_RemoveResource");

// ScriptStruct OptimusCore.OptimusResourceAction_RenameResource
// 0x0010 (0x0028 - 0x0018)
struct FOptimusResourceAction_RenameResource final : public FOptimusAction
{
public:
	uint8                                         Pad_1A6E[0x10];                                    // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusResourceAction_RenameResource) == 0x000008, "Wrong alignment on FOptimusResourceAction_RenameResource");
static_assert(sizeof(FOptimusResourceAction_RenameResource) == 0x000028, "Wrong size on FOptimusResourceAction_RenameResource");

// ScriptStruct OptimusCore.OptimusResourceAction_SetDataType
// 0x0028 (0x0040 - 0x0018)
struct FOptimusResourceAction_SetDataType final : public FOptimusAction
{
public:
	uint8                                         Pad_1A6F[0x28];                                    // 0x0018(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusResourceAction_SetDataType) == 0x000008, "Wrong alignment on FOptimusResourceAction_SetDataType");
static_assert(sizeof(FOptimusResourceAction_SetDataType) == 0x000040, "Wrong size on FOptimusResourceAction_SetDataType");

// ScriptStruct OptimusCore.OptimusResourceAction_SetDataDomain
// 0x0088 (0x00A0 - 0x0018)
struct FOptimusResourceAction_SetDataDomain final : public FOptimusAction
{
public:
	uint8                                         Pad_1A70[0x88];                                    // 0x0018(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusResourceAction_SetDataDomain) == 0x000008, "Wrong alignment on FOptimusResourceAction_SetDataDomain");
static_assert(sizeof(FOptimusResourceAction_SetDataDomain) == 0x0000A0, "Wrong size on FOptimusResourceAction_SetDataDomain");

// ScriptStruct OptimusCore.OptimusVariableAction_AddVariable
// 0x0018 (0x0030 - 0x0018)
struct FOptimusVariableAction_AddVariable final : public FOptimusAction
{
public:
	uint8                                         Pad_1A71[0x18];                                    // 0x0018(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusVariableAction_AddVariable) == 0x000008, "Wrong alignment on FOptimusVariableAction_AddVariable");
static_assert(sizeof(FOptimusVariableAction_AddVariable) == 0x000030, "Wrong size on FOptimusVariableAction_AddVariable");

// ScriptStruct OptimusCore.OptimusVariableAction_RemoveVariable
// 0x0040 (0x0058 - 0x0018)
struct FOptimusVariableAction_RemoveVariable final : public FOptimusAction
{
public:
	uint8                                         Pad_1A72[0x40];                                    // 0x0018(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusVariableAction_RemoveVariable) == 0x000008, "Wrong alignment on FOptimusVariableAction_RemoveVariable");
static_assert(sizeof(FOptimusVariableAction_RemoveVariable) == 0x000058, "Wrong size on FOptimusVariableAction_RemoveVariable");

// ScriptStruct OptimusCore.OptimusVariableAction_RenameVariable
// 0x0010 (0x0028 - 0x0018)
struct FOptimusVariableAction_RenameVariable final : public FOptimusAction
{
public:
	uint8                                         Pad_1A73[0x10];                                    // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusVariableAction_RenameVariable) == 0x000008, "Wrong alignment on FOptimusVariableAction_RenameVariable");
static_assert(sizeof(FOptimusVariableAction_RenameVariable) == 0x000028, "Wrong size on FOptimusVariableAction_RenameVariable");

// ScriptStruct OptimusCore.OptimusVariableAction_SetDataType
// 0x0028 (0x0040 - 0x0018)
struct FOptimusVariableAction_SetDataType final : public FOptimusAction
{
public:
	uint8                                         Pad_1A74[0x28];                                    // 0x0018(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusVariableAction_SetDataType) == 0x000008, "Wrong alignment on FOptimusVariableAction_SetDataType");
static_assert(sizeof(FOptimusVariableAction_SetDataType) == 0x000040, "Wrong size on FOptimusVariableAction_SetDataType");

// ScriptStruct OptimusCore.OptimusAnimAttributeDescription
// 0x0048 (0x0048 - 0x0000)
struct FOptimusAnimAttributeDescription final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOptimusDataTypeRef                    DataType;                                          // 0x0018(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UOptimusValueContainer*                 DefaultValue;                                      // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HlslId;                                            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PinName;                                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusAnimAttributeDescription) == 0x000008, "Wrong alignment on FOptimusAnimAttributeDescription");
static_assert(sizeof(FOptimusAnimAttributeDescription) == 0x000048, "Wrong size on FOptimusAnimAttributeDescription");
static_assert(offsetof(FOptimusAnimAttributeDescription, Name) == 0x000000, "Member 'FOptimusAnimAttributeDescription::Name' has a wrong offset!");
static_assert(offsetof(FOptimusAnimAttributeDescription, BoneName) == 0x000010, "Member 'FOptimusAnimAttributeDescription::BoneName' has a wrong offset!");
static_assert(offsetof(FOptimusAnimAttributeDescription, DataType) == 0x000018, "Member 'FOptimusAnimAttributeDescription::DataType' has a wrong offset!");
static_assert(offsetof(FOptimusAnimAttributeDescription, DefaultValue) == 0x000028, "Member 'FOptimusAnimAttributeDescription::DefaultValue' has a wrong offset!");
static_assert(offsetof(FOptimusAnimAttributeDescription, HlslId) == 0x000030, "Member 'FOptimusAnimAttributeDescription::HlslId' has a wrong offset!");
static_assert(offsetof(FOptimusAnimAttributeDescription, PinName) == 0x000040, "Member 'FOptimusAnimAttributeDescription::PinName' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusAnimAttributeArray
// 0x0010 (0x0010 - 0x0000)
struct FOptimusAnimAttributeArray final
{
public:
	TArray<struct FOptimusAnimAttributeDescription> InnerArray;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusAnimAttributeArray) == 0x000008, "Wrong alignment on FOptimusAnimAttributeArray");
static_assert(sizeof(FOptimusAnimAttributeArray) == 0x000010, "Wrong size on FOptimusAnimAttributeArray");
static_assert(offsetof(FOptimusAnimAttributeArray, InnerArray) == 0x000000, "Member 'FOptimusAnimAttributeArray::InnerArray' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusDebugDrawParameters
// 0x0014 (0x0014 - 0x0000)
struct FOptimusDebugDrawParameters final
{
public:
	bool                                          bForceEnable;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A75[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxLineCount;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTriangleCount;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCharacterCount;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FontSize;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusDebugDrawParameters) == 0x000004, "Wrong alignment on FOptimusDebugDrawParameters");
static_assert(sizeof(FOptimusDebugDrawParameters) == 0x000014, "Wrong size on FOptimusDebugDrawParameters");
static_assert(offsetof(FOptimusDebugDrawParameters, bForceEnable) == 0x000000, "Member 'FOptimusDebugDrawParameters::bForceEnable' has a wrong offset!");
static_assert(offsetof(FOptimusDebugDrawParameters, MaxLineCount) == 0x000004, "Member 'FOptimusDebugDrawParameters::MaxLineCount' has a wrong offset!");
static_assert(offsetof(FOptimusDebugDrawParameters, MaxTriangleCount) == 0x000008, "Member 'FOptimusDebugDrawParameters::MaxTriangleCount' has a wrong offset!");
static_assert(offsetof(FOptimusDebugDrawParameters, MaxCharacterCount) == 0x00000C, "Member 'FOptimusDebugDrawParameters::MaxCharacterCount' has a wrong offset!");
static_assert(offsetof(FOptimusDebugDrawParameters, FontSize) == 0x000010, "Member 'FOptimusDebugDrawParameters::FontSize' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusGraphVariableDescription
// 0x0030 (0x0030 - 0x0000)
struct FOptimusGraphVariableDescription final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShaderValueTypeHandle                 ValueType;                                         // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Value;                                             // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A76[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusGraphVariableDescription) == 0x000008, "Wrong alignment on FOptimusGraphVariableDescription");
static_assert(sizeof(FOptimusGraphVariableDescription) == 0x000030, "Wrong size on FOptimusGraphVariableDescription");
static_assert(offsetof(FOptimusGraphVariableDescription, Name) == 0x000000, "Member 'FOptimusGraphVariableDescription::Name' has a wrong offset!");
static_assert(offsetof(FOptimusGraphVariableDescription, ValueType) == 0x000010, "Member 'FOptimusGraphVariableDescription::ValueType' has a wrong offset!");
static_assert(offsetof(FOptimusGraphVariableDescription, Value) == 0x000018, "Member 'FOptimusGraphVariableDescription::Value' has a wrong offset!");
static_assert(offsetof(FOptimusGraphVariableDescription, Offset) == 0x000028, "Member 'FOptimusGraphVariableDescription::Offset' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusSecondaryInputBindingsGroup
// 0x0018 (0x0018 - 0x0000)
struct FOptimusSecondaryInputBindingsGroup final
{
public:
	struct FOptimusValidatedName                  GroupName;                                         // 0x0000(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FOptimusParameterBindingArray          BindingArray;                                      // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusSecondaryInputBindingsGroup) == 0x000008, "Wrong alignment on FOptimusSecondaryInputBindingsGroup");
static_assert(sizeof(FOptimusSecondaryInputBindingsGroup) == 0x000018, "Wrong size on FOptimusSecondaryInputBindingsGroup");
static_assert(offsetof(FOptimusSecondaryInputBindingsGroup, GroupName) == 0x000000, "Member 'FOptimusSecondaryInputBindingsGroup::GroupName' has a wrong offset!");
static_assert(offsetof(FOptimusSecondaryInputBindingsGroup, BindingArray) == 0x000008, "Member 'FOptimusSecondaryInputBindingsGroup::BindingArray' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusNode_GetVariable_DuplicationInfo
// 0x0028 (0x0028 - 0x0000)
struct FOptimusNode_GetVariable_DuplicationInfo final
{
public:
	class FName                                   VariableName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOptimusDataTypeRef                    DataType;                                          // 0x0008(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusNode_GetVariable_DuplicationInfo) == 0x000008, "Wrong alignment on FOptimusNode_GetVariable_DuplicationInfo");
static_assert(sizeof(FOptimusNode_GetVariable_DuplicationInfo) == 0x000028, "Wrong size on FOptimusNode_GetVariable_DuplicationInfo");
static_assert(offsetof(FOptimusNode_GetVariable_DuplicationInfo, VariableName) == 0x000000, "Member 'FOptimusNode_GetVariable_DuplicationInfo::VariableName' has a wrong offset!");
static_assert(offsetof(FOptimusNode_GetVariable_DuplicationInfo, DataType) == 0x000008, "Member 'FOptimusNode_GetVariable_DuplicationInfo::DataType' has a wrong offset!");
static_assert(offsetof(FOptimusNode_GetVariable_DuplicationInfo, DefaultValue) == 0x000018, "Member 'FOptimusNode_GetVariable_DuplicationInfo::DefaultValue' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusNode_ResourceAccessorBase_DuplicationInfo
// 0x0058 (0x0058 - 0x0000)
struct FOptimusNode_ResourceAccessorBase_DuplicationInfo final
{
public:
	class FName                                   ResourceName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOptimusDataTypeRef                    DataType;                                          // 0x0008(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FOptimusDataDomain                     DataDomain;                                        // 0x0018(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusNode_ResourceAccessorBase_DuplicationInfo) == 0x000008, "Wrong alignment on FOptimusNode_ResourceAccessorBase_DuplicationInfo");
static_assert(sizeof(FOptimusNode_ResourceAccessorBase_DuplicationInfo) == 0x000058, "Wrong size on FOptimusNode_ResourceAccessorBase_DuplicationInfo");
static_assert(offsetof(FOptimusNode_ResourceAccessorBase_DuplicationInfo, ResourceName) == 0x000000, "Member 'FOptimusNode_ResourceAccessorBase_DuplicationInfo::ResourceName' has a wrong offset!");
static_assert(offsetof(FOptimusNode_ResourceAccessorBase_DuplicationInfo, DataType) == 0x000008, "Member 'FOptimusNode_ResourceAccessorBase_DuplicationInfo::DataType' has a wrong offset!");
static_assert(offsetof(FOptimusNode_ResourceAccessorBase_DuplicationInfo, DataDomain) == 0x000018, "Member 'FOptimusNode_ResourceAccessorBase_DuplicationInfo::DataDomain' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusDataType
// 0x0058 (0x0058 - 0x0000)
struct FOptimusDataType final
{
public:
	class FName                                   TypeName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	struct FShaderValueTypeHandle                 ShaderValueType;                                   // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShaderValueSize;                                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypeCategory;                                      // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 TypeObject;                                        // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCustomPinColor;                                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A77[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CustomPinColor;                                    // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptimusDataTypeUsageFlags                    UsageFlags;                                        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptimusDataTypeFlags                         TypeFlags;                                         // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A78[0x6];                                     // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOptimusDataType) == 0x000008, "Wrong alignment on FOptimusDataType");
static_assert(sizeof(FOptimusDataType) == 0x000058, "Wrong size on FOptimusDataType");
static_assert(offsetof(FOptimusDataType, TypeName) == 0x000000, "Member 'FOptimusDataType::TypeName' has a wrong offset!");
static_assert(offsetof(FOptimusDataType, DisplayName) == 0x000008, "Member 'FOptimusDataType::DisplayName' has a wrong offset!");
static_assert(offsetof(FOptimusDataType, ShaderValueType) == 0x000020, "Member 'FOptimusDataType::ShaderValueType' has a wrong offset!");
static_assert(offsetof(FOptimusDataType, ShaderValueSize) == 0x000028, "Member 'FOptimusDataType::ShaderValueSize' has a wrong offset!");
static_assert(offsetof(FOptimusDataType, TypeCategory) == 0x00002C, "Member 'FOptimusDataType::TypeCategory' has a wrong offset!");
static_assert(offsetof(FOptimusDataType, TypeObject) == 0x000034, "Member 'FOptimusDataType::TypeObject' has a wrong offset!");
static_assert(offsetof(FOptimusDataType, bHasCustomPinColor) == 0x00003C, "Member 'FOptimusDataType::bHasCustomPinColor' has a wrong offset!");
static_assert(offsetof(FOptimusDataType, CustomPinColor) == 0x000040, "Member 'FOptimusDataType::CustomPinColor' has a wrong offset!");
static_assert(offsetof(FOptimusDataType, UsageFlags) == 0x000050, "Member 'FOptimusDataType::UsageFlags' has a wrong offset!");
static_assert(offsetof(FOptimusDataType, TypeFlags) == 0x000051, "Member 'FOptimusDataType::TypeFlags' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusComputeGraphInfo
// 0x0018 (0x0018 - 0x0000)
struct FOptimusComputeGraphInfo final
{
public:
	EOptimusNodeGraphType                         GraphType;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GraphName;                                         // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A79[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOptimusComputeGraph*                   ComputeGraph;                                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusComputeGraphInfo) == 0x000008, "Wrong alignment on FOptimusComputeGraphInfo");
static_assert(sizeof(FOptimusComputeGraphInfo) == 0x000018, "Wrong size on FOptimusComputeGraphInfo");
static_assert(offsetof(FOptimusComputeGraphInfo, GraphType) == 0x000000, "Member 'FOptimusComputeGraphInfo::GraphType' has a wrong offset!");
static_assert(offsetof(FOptimusComputeGraphInfo, GraphName) == 0x000004, "Member 'FOptimusComputeGraphInfo::GraphName' has a wrong offset!");
static_assert(offsetof(FOptimusComputeGraphInfo, ComputeGraph) == 0x000010, "Member 'FOptimusComputeGraphInfo::ComputeGraph' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusDeformerInstanceExecInfo
// 0x0030 (0x0030 - 0x0000)
struct FOptimusDeformerInstanceExecInfo final
{
public:
	class FName                                   GraphName;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptimusNodeGraphType                         GraphType;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A7A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UComputeGraph*                          ComputeGraph;                                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FComputeGraphInstance                  ComputeGraphInstance;                              // 0x0018(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusDeformerInstanceExecInfo) == 0x000008, "Wrong alignment on FOptimusDeformerInstanceExecInfo");
static_assert(sizeof(FOptimusDeformerInstanceExecInfo) == 0x000030, "Wrong size on FOptimusDeformerInstanceExecInfo");
static_assert(offsetof(FOptimusDeformerInstanceExecInfo, GraphName) == 0x000000, "Member 'FOptimusDeformerInstanceExecInfo::GraphName' has a wrong offset!");
static_assert(offsetof(FOptimusDeformerInstanceExecInfo, GraphType) == 0x000008, "Member 'FOptimusDeformerInstanceExecInfo::GraphType' has a wrong offset!");
static_assert(offsetof(FOptimusDeformerInstanceExecInfo, ComputeGraph) == 0x000010, "Member 'FOptimusDeformerInstanceExecInfo::ComputeGraph' has a wrong offset!");
static_assert(offsetof(FOptimusDeformerInstanceExecInfo, ComputeGraphInstance) == 0x000018, "Member 'FOptimusDeformerInstanceExecInfo::ComputeGraphInstance' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusDeformerInstanceComponentBinding
// 0x0010 (0x0010 - 0x0000)
struct FOptimusDeformerInstanceComponentBinding final
{
public:
	class FName                                   ProviderName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentName;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusDeformerInstanceComponentBinding) == 0x000004, "Wrong alignment on FOptimusDeformerInstanceComponentBinding");
static_assert(sizeof(FOptimusDeformerInstanceComponentBinding) == 0x000010, "Wrong size on FOptimusDeformerInstanceComponentBinding");
static_assert(offsetof(FOptimusDeformerInstanceComponentBinding, ProviderName) == 0x000000, "Member 'FOptimusDeformerInstanceComponentBinding::ProviderName' has a wrong offset!");
static_assert(offsetof(FOptimusDeformerInstanceComponentBinding, ComponentName) == 0x000008, "Member 'FOptimusDeformerInstanceComponentBinding::ComponentName' has a wrong offset!");

// ScriptStruct OptimusCore.OptimusVariableMetaDataEntry
// 0x0018 (0x0018 - 0x0000)
struct FOptimusVariableMetaDataEntry final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptimusVariableMetaDataEntry) == 0x000008, "Wrong alignment on FOptimusVariableMetaDataEntry");
static_assert(sizeof(FOptimusVariableMetaDataEntry) == 0x000018, "Wrong size on FOptimusVariableMetaDataEntry");
static_assert(offsetof(FOptimusVariableMetaDataEntry, Key) == 0x000000, "Member 'FOptimusVariableMetaDataEntry::Key' has a wrong offset!");
static_assert(offsetof(FOptimusVariableMetaDataEntry, Value) == 0x000008, "Member 'FOptimusVariableMetaDataEntry::Value' has a wrong offset!");

}

