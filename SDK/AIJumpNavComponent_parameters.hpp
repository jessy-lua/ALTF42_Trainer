#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIJumpNavComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AIJumpNavComponent.AIJumpNavComponent_C.AIJumpNavComponent_AutoGenFunc
// 0x0028 (0x0028 - 0x0000)
struct AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3475[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc) == 0x000008, "Wrong alignment on AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc");
static_assert(sizeof(AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc) == 0x000028, "Wrong size on AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc");
static_assert(offsetof(AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc, Character) == 0x000000, "Member 'AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc::Character' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc, PrevMovementMode) == 0x000008, "Member 'AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc, PreviousCustomMode) == 0x000009, "Member 'AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc::PreviousCustomMode' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc, K2Node_SwitchEnum_CmpSuccess) == 0x00000A, "Member 'AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc, CallFunc_GetAIController_ReturnValue) == 0x000010, "Member 'AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'AIJumpNavComponent_C_AIJumpNavComponent_AutoGenFunc::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function AIJumpNavComponent.AIJumpNavComponent_C.Calculate Jump
// 0x02F0 (0x02F0 - 0x0000)
struct AIJumpNavComponent_C_Calculate_Jump final
{
public:
	struct FVector                                End_Pos;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arc_Param;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OutLaunchVelocity;                                 // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Obstructed;                                        // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3476[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Target_Destination;                                // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_Get_Owning_Character_Character;           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ConstParm, ReferenceParm)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGravityZ_ReturnValue;                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3477[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SuggestProjectileVelocity_CustomArc_OutLaunchVelocity; // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SuggestProjectileVelocity_CustomArc_ReturnValue; // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3478[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutHit; // 0x00E8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TArray<struct FVector>                        CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions; // 0x01D0(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutLastTraceDestination; // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_ReturnValue; // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3479[0x1];                                     // 0x01FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_347A[0x4];                                     // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0278(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_347B[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_347C[0x2];                                     // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SuggestProjectileVelocity_CustomArc_ArcParam_ImplicitCast; // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIJumpNavComponent_C_Calculate_Jump) == 0x000008, "Wrong alignment on AIJumpNavComponent_C_Calculate_Jump");
static_assert(sizeof(AIJumpNavComponent_C_Calculate_Jump) == 0x0002F0, "Wrong size on AIJumpNavComponent_C_Calculate_Jump");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, End_Pos) == 0x000000, "Member 'AIJumpNavComponent_C_Calculate_Jump::End_Pos' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, Arc_Param) == 0x000018, "Member 'AIJumpNavComponent_C_Calculate_Jump::Arc_Param' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, OutLaunchVelocity) == 0x000020, "Member 'AIJumpNavComponent_C_Calculate_Jump::OutLaunchVelocity' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, Obstructed) == 0x000038, "Member 'AIJumpNavComponent_C_Calculate_Jump::Obstructed' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, Target_Destination) == 0x000040, "Member 'AIJumpNavComponent_C_Calculate_Jump::Target_Destination' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_Get_Owning_Character_Character) == 0x000058, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_Get_Owning_Character_Character' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, K2Node_MakeArray_Array) == 0x000060, "Member 'AIJumpNavComponent_C_Calculate_Jump::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000070, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_GetGravityZ_ReturnValue) == 0x000078, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_GetGravityZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_MakeVector_ReturnValue) == 0x000080, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000098, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_SuggestProjectileVelocity_CustomArc_OutLaunchVelocity) == 0x0000B0, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_SuggestProjectileVelocity_CustomArc_OutLaunchVelocity' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_SuggestProjectileVelocity_CustomArc_ReturnValue) == 0x0000C8, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_SuggestProjectileVelocity_CustomArc_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000D0, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutHit) == 0x0000E8, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutHit' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions) == 0x0001D0, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutLastTraceDestination) == 0x0001E0, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_OutLastTraceDestination' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_ReturnValue) == 0x0001F8, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_Blueprint_PredictProjectilePath_ByTraceChannel_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_bBlockingHit) == 0x0001F9, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001FA, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_Time) == 0x0001FC, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_Distance) == 0x000200, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_Location) == 0x000208, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_ImpactPoint) == 0x000220, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_Normal) == 0x000238, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_ImpactNormal) == 0x000250, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_PhysMat) == 0x000268, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_HitActor) == 0x000270, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_HitComponent) == 0x000278, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_HitBoneName) == 0x000280, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_BoneName) == 0x000288, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_HitItem) == 0x000290, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_ElementIndex) == 0x000294, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_FaceIndex) == 0x000298, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_TraceStart) == 0x0002A0, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_BreakHitResult_TraceEnd) == 0x0002B8, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_Vector_Distance_ReturnValue) == 0x0002D0, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0002D8, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_Not_PreBool_ReturnValue) == 0x0002D9, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_SuggestProjectileVelocity_CustomArc_ArcParam_ImplicitCast) == 0x0002DC, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_SuggestProjectileVelocity_CustomArc_ArcParam_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x0002E0, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Calculate_Jump, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x0002E8, "Member 'AIJumpNavComponent_C_Calculate_Jump::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function AIJumpNavComponent.AIJumpNavComponent_C.ExecuteUbergraph_AIJumpNavComponent
// 0x0018 (0x0018 - 0x0000)
struct AIJumpNavComponent_C_ExecuteUbergraph_AIJumpNavComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_347D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_Get_Owning_Character_Character;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIJumpNavComponent_C_ExecuteUbergraph_AIJumpNavComponent) == 0x000008, "Wrong alignment on AIJumpNavComponent_C_ExecuteUbergraph_AIJumpNavComponent");
static_assert(sizeof(AIJumpNavComponent_C_ExecuteUbergraph_AIJumpNavComponent) == 0x000018, "Wrong size on AIJumpNavComponent_C_ExecuteUbergraph_AIJumpNavComponent");
static_assert(offsetof(AIJumpNavComponent_C_ExecuteUbergraph_AIJumpNavComponent, EntryPoint) == 0x000000, "Member 'AIJumpNavComponent_C_ExecuteUbergraph_AIJumpNavComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_ExecuteUbergraph_AIJumpNavComponent, CallFunc_Get_Owning_Character_Character) == 0x000008, "Member 'AIJumpNavComponent_C_ExecuteUbergraph_AIJumpNavComponent::CallFunc_Get_Owning_Character_Character' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_ExecuteUbergraph_AIJumpNavComponent, CallFunc_GetAIController_ReturnValue) == 0x000010, "Member 'AIJumpNavComponent_C_ExecuteUbergraph_AIJumpNavComponent::CallFunc_GetAIController_ReturnValue' has a wrong offset!");

// Function AIJumpNavComponent.AIJumpNavComponent_C.Get Owning Character
// 0x0020 (0x0020 - 0x0000)
struct AIJumpNavComponent_C_Get_Owning_Character final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_As___;                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIJumpNavComponent_C_Get_Owning_Character) == 0x000008, "Wrong alignment on AIJumpNavComponent_C_Get_Owning_Character");
static_assert(sizeof(AIJumpNavComponent_C_Get_Owning_Character) == 0x000020, "Wrong size on AIJumpNavComponent_C_Get_Owning_Character");
static_assert(offsetof(AIJumpNavComponent_C_Get_Owning_Character, Character) == 0x000000, "Member 'AIJumpNavComponent_C_Get_Owning_Character::Character' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Get_Owning_Character, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'AIJumpNavComponent_C_Get_Owning_Character::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Get_Owning_Character, K2Node_DynamicCast_As___) == 0x000010, "Member 'AIJumpNavComponent_C_Get_Owning_Character::K2Node_DynamicCast_As___' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Get_Owning_Character, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AIJumpNavComponent_C_Get_Owning_Character::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AIJumpNavComponent.AIJumpNavComponent_C.Jump Character To
// 0x00D0 (0x00D0 - 0x0000)
struct AIJumpNavComponent_C_Jump_Character_To final
{
public:
	struct FVector                                EndPos;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ArcParam;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NavLink_Automatic_Jump_Arc;                        // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_347E[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Number_of_Automatic_Attempts;                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_347F[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_Get_Owning_Character_Character;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3480[0x1];                                     // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3481[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_Get_Owning_Character_Character_1;         // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)> K2Node_CreateDelegate_OutputDelegate;              // 0x0058(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_Get_Owning_Character_Character_2;         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3482[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3483[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Calculate_Jump_OutLaunchVelocity;         // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Calculate_Jump_Obstructed;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3484[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3485[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_Get_Owning_Character_Character_3;         // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIJumpNavComponent_C_Jump_Character_To) == 0x000008, "Wrong alignment on AIJumpNavComponent_C_Jump_Character_To");
static_assert(sizeof(AIJumpNavComponent_C_Jump_Character_To) == 0x0000D0, "Wrong size on AIJumpNavComponent_C_Jump_Character_To");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, EndPos) == 0x000000, "Member 'AIJumpNavComponent_C_Jump_Character_To::EndPos' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, ArcParam) == 0x000018, "Member 'AIJumpNavComponent_C_Jump_Character_To::ArcParam' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, NavLink_Automatic_Jump_Arc) == 0x000020, "Member 'AIJumpNavComponent_C_Jump_Character_To::NavLink_Automatic_Jump_Arc' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, Number_of_Automatic_Attempts) == 0x000024, "Member 'AIJumpNavComponent_C_Jump_Character_To::Number_of_Automatic_Attempts' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, Temp_bool_Variable) == 0x000028, "Member 'AIJumpNavComponent_C_Jump_Character_To::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_Get_Owning_Character_Character) == 0x000030, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_Get_Owning_Character_Character' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_GetAIController_ReturnValue) == 0x000038, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, Temp_bool_Variable_1) == 0x000040, "Member 'AIJumpNavComponent_C_Jump_Character_To::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, Temp_bool_Variable_2) == 0x000041, "Member 'AIJumpNavComponent_C_Jump_Character_To::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, K2Node_Select_Default) == 0x000042, "Member 'AIJumpNavComponent_C_Jump_Character_To::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_SelectInt_ReturnValue) == 0x000044, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, Temp_bool_Variable_3) == 0x000048, "Member 'AIJumpNavComponent_C_Jump_Character_To::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_Get_Owning_Character_Character_1) == 0x000050, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_Get_Owning_Character_Character_1' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, K2Node_CreateDelegate_OutputDelegate) == 0x000058, "Member 'AIJumpNavComponent_C_Jump_Character_To::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_Get_Owning_Character_Character_2) == 0x000068, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_Get_Owning_Character_Character_2' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, Temp_int_Variable) == 0x000070, "Member 'AIJumpNavComponent_C_Jump_Character_To::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000078, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_BooleanAND_ReturnValue) == 0x000080, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_MapRangeClamped_ReturnValue) == 0x000088, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_SelectFloat_ReturnValue) == 0x000090, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_Calculate_Jump_OutLaunchVelocity) == 0x000098, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_Calculate_Jump_OutLaunchVelocity' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_Calculate_Jump_Obstructed) == 0x0000B0, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_Calculate_Jump_Obstructed' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_Add_IntInt_ReturnValue) == 0x0000B4, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, K2Node_Select_Default_1) == 0x0000B8, "Member 'AIJumpNavComponent_C_Jump_Character_To::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000B9, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_Get_Owning_Character_Character_3) == 0x0000C0, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_Get_Owning_Character_Character_3' has a wrong offset!");
static_assert(offsetof(AIJumpNavComponent_C_Jump_Character_To, CallFunc_BooleanAND_ReturnValue_1) == 0x0000C8, "Member 'AIJumpNavComponent_C_Jump_Character_To::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

}

