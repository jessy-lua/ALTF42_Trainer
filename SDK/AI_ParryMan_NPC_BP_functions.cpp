#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AI_ParryMan_NPC_BP

#include "Basic.hpp"

#include "AI_ParryMan_NPC_BP_classes.hpp"
#include "AI_ParryMan_NPC_BP_parameters.hpp"


namespace SDK
{

// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.AttachToHand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMesh*                      NewStaticMesh                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USkeletalMesh*                    NewSkeletalMesh                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           NewAnimClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    LeftHand                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAI_ParryMan_NPC_BP_C::AttachToHand(class UStaticMesh* NewStaticMesh, class USkeletalMesh* NewSkeletalMesh, class UClass* NewAnimClass, bool LeftHand, const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "AttachToHand");

	Params::AI_ParryMan_NPC_BP_C_AttachToHand Parms{};

	Parms.NewStaticMesh = NewStaticMesh;
	Parms.NewSkeletalMesh = NewSkeletalMesh;
	Parms.NewAnimClass = NewAnimClass;
	Parms.LeftHand = LeftHand;
	Parms.Offset = std::move(Offset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.BndEvt__AI_Mage_NPC_BP_Char_TalkOverlap_Check_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAI_ParryMan_NPC_BP_C::BndEvt__AI_Mage_NPC_BP_Char_TalkOverlap_Check_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "BndEvt__AI_Mage_NPC_BP_Char_TalkOverlap_Check_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::AI_ParryMan_NPC_BP_C_BndEvt__AI_Mage_NPC_BP_Char_TalkOverlap_Check_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.BndEvt__AI_MH_Default_Char_Foot_Block_SM_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAI_ParryMan_NPC_BP_C::BndEvt__AI_MH_Default_Char_Foot_Block_SM_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "BndEvt__AI_MH_Default_Char_Foot_Block_SM_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature");

	Params::AI_ParryMan_NPC_BP_C_BndEvt__AI_MH_Default_Char_Foot_Block_SM_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.BndEvt__AI_MH_Default_Char_Hit_Detect_Coillsion_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAI_ParryMan_NPC_BP_C::BndEvt__AI_MH_Default_Char_Hit_Detect_Coillsion_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "BndEvt__AI_MH_Default_Char_Hit_Detect_Coillsion_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature");

	Params::AI_ParryMan_NPC_BP_C_BndEvt__AI_MH_Default_Char_Hit_Detect_Coillsion_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.BndEvt__AI_MH_Default_Char_Hit_Head_Coillsion_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAI_ParryMan_NPC_BP_C::BndEvt__AI_MH_Default_Char_Hit_Head_Coillsion_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "BndEvt__AI_MH_Default_Char_Hit_Head_Coillsion_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature");

	Params::AI_ParryMan_NPC_BP_C_BndEvt__AI_MH_Default_Char_Hit_Head_Coillsion_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.ClearHeldObject
// (Public, BlueprintCallable, BlueprintEvent)

void AAI_ParryMan_NPC_BP_C::ClearHeldObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "ClearHeldObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.ExecuteUbergraph_AI_ParryMan_NPC_BP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAI_ParryMan_NPC_BP_C::ExecuteUbergraph_AI_ParryMan_NPC_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "ExecuteUbergraph_AI_ParryMan_NPC_BP");

	Params::AI_ParryMan_NPC_BP_C_ExecuteUbergraph_AI_ParryMan_NPC_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.Hit_Event
// (BlueprintCallable, BlueprintEvent)

void AAI_ParryMan_NPC_BP_C::Hit_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "Hit_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.Hit_Reset
// (BlueprintCallable, BlueprintEvent)

void AAI_ParryMan_NPC_BP_C::Hit_Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "Hit_Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.NextSkip_Active
// (BlueprintCallable, BlueprintEvent)

void AAI_ParryMan_NPC_BP_C::NextSkip_Active()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "NextSkip_Active");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.NextTalk
// (BlueprintCallable, BlueprintEvent)

void AAI_ParryMan_NPC_BP_C::NextTalk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "NextTalk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.NPC_Acting_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_NPC_ActionMode                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_Loop_Active                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAI_ParryMan_NPC_BP_C::NPC_Acting_Event(bool Param_NPC_ActionMode, bool Param_Loop_Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "NPC_Acting_Event");

	Params::AI_ParryMan_NPC_BP_C_NPC_Acting_Event Parms{};

	Parms.Param_NPC_ActionMode = Param_NPC_ActionMode;
	Parms.Param_Loop_Active = Param_Loop_Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.Talk_End_Event
// (BlueprintCallable, BlueprintEvent)

void AAI_ParryMan_NPC_BP_C::Talk_End_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "Talk_End_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.UpdateHeldObject
// (Public, BlueprintCallable, BlueprintEvent)

void AAI_ParryMan_NPC_BP_C::UpdateHeldObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "UpdateHeldObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.UpdateHeldObjectAnimations
// (Public, BlueprintCallable, BlueprintEvent)

void AAI_ParryMan_NPC_BP_C::UpdateHeldObjectAnimations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "UpdateHeldObjectAnimations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.BPI_Get_3P_PivotTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform AAI_ParryMan_NPC_BP_C::BPI_Get_3P_PivotTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "BPI_Get_3P_PivotTarget");

	Params::AI_ParryMan_NPC_BP_C_BPI_Get_3P_PivotTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.BPI_Get_3P_TraceParams
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TraceOrigin                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TraceRadius                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         TraceChannel                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAI_ParryMan_NPC_BP_C::BPI_Get_3P_TraceParams(struct FVector* TraceOrigin, double* TraceRadius, ETraceTypeQuery* TraceChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "BPI_Get_3P_TraceParams");

	Params::AI_ParryMan_NPC_BP_C_BPI_Get_3P_TraceParams Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TraceOrigin != nullptr)
		*TraceOrigin = std::move(Parms.TraceOrigin);

	if (TraceRadius != nullptr)
		*TraceRadius = Parms.TraceRadius;

	if (TraceChannel != nullptr)
		*TraceChannel = Parms.TraceChannel;
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.BPI_Get_FP_CameraTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AAI_ParryMan_NPC_BP_C::BPI_Get_FP_CameraTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "BPI_Get_FP_CameraTarget");

	Params::AI_ParryMan_NPC_BP_C_BPI_Get_FP_CameraTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.BPI_GetAI_NPC_ActionMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_NPC_ActionMode                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ActionStartTime                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimSequenceBase*                NPC_ActionAnim                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    LoopActive                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAI_StepTalk_WhoOrWhere                 Param_Who_NPC                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_Hit_                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAI_ParryMan_NPC_BP_C::BPI_GetAI_NPC_ActionMode(bool* Param_NPC_ActionMode, double* ActionStartTime, class UAnimSequenceBase** NPC_ActionAnim, bool* LoopActive, EAI_StepTalk_WhoOrWhere* Param_Who_NPC, bool* Param_Hit_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "BPI_GetAI_NPC_ActionMode");

	Params::AI_ParryMan_NPC_BP_C_BPI_GetAI_NPC_ActionMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_NPC_ActionMode != nullptr)
		*Param_NPC_ActionMode = Parms.Param_NPC_ActionMode;

	if (ActionStartTime != nullptr)
		*ActionStartTime = Parms.ActionStartTime;

	if (NPC_ActionAnim != nullptr)
		*NPC_ActionAnim = Parms.NPC_ActionAnim;

	if (LoopActive != nullptr)
		*LoopActive = Parms.LoopActive;

	if (Param_Who_NPC != nullptr)
		*Param_Who_NPC = Parms.Param_Who_NPC;

	if (Param_Hit_ != nullptr)
		*Param_Hit_ = Parms.Param_Hit_;
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.GetGetUpAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_RagdollFaceUp                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UAnimMontage* AAI_ParryMan_NPC_BP_C::GetGetUpAnimation(bool Param_RagdollFaceUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "GetGetUpAnimation");

	Params::AI_ParryMan_NPC_BP_C_GetGetUpAnimation Parms{};

	Parms.Param_RagdollFaceUp = Param_RagdollFaceUp;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.GetMantleAsset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EMantleType                             MantleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMantle_Asset                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

struct FMantle_Asset AAI_ParryMan_NPC_BP_C::GetMantleAsset(EMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "GetMantleAsset");

	Params::AI_ParryMan_NPC_BP_C_GetMantleAsset Parms{};

	Parms.MantleType = MantleType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.GetRollAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UAnimMontage* AAI_ParryMan_NPC_BP_C::GetRollAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "GetRollAnimation");

	Params::AI_ParryMan_NPC_BP_C_GetRollAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.MantleEnd
// (Public, BlueprintCallable, BlueprintEvent)

void AAI_ParryMan_NPC_BP_C::MantleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "MantleEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.MantleStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MantleHeight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FALS_ComponentAndTransform       MantleLedgeWS                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// EMantleType                             MantleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAI_ParryMan_NPC_BP_C::MantleStart(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "MantleStart");

	Params::AI_ParryMan_NPC_BP_C_MantleStart Parms{};

	Parms.MantleHeight = MantleHeight;
	Parms.MantleLedgeWS = std::move(MantleLedgeWS);
	Parms.MantleType = MantleType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.OnOverlayStateChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       NewOverlayState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAI_ParryMan_NPC_BP_C::OnOverlayStateChanged(EALS_OverlayState NewOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "OnOverlayStateChanged");

	Params::AI_ParryMan_NPC_BP_C_OnOverlayStateChanged Parms{};

	Parms.NewOverlayState = NewOverlayState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.RagdollEnd
// (Public, BlueprintCallable, BlueprintEvent)

void AAI_ParryMan_NPC_BP_C::RagdollEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "RagdollEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.RagdollStart
// (Public, BlueprintCallable, BlueprintEvent)

void AAI_ParryMan_NPC_BP_C::RagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "RagdollStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AAI_ParryMan_NPC_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AI_ParryMan_NPC_BP.AI_ParryMan_NPC_BP_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAI_ParryMan_NPC_BP_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AI_ParryMan_NPC_BP_C", "ReceiveTick");

	Params::AI_ParryMan_NPC_BP_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}

}

