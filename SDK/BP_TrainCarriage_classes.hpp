#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TrainCarriage

#include "Basic.hpp"

#include "E_TrackObstacleResponse_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_BogieDirectionOfTravel_structs.hpp"
#include "E_CarriageState_structs.hpp"
#include "E_EndOfTrackOption_structs.hpp"
#include "S_TrackTimedIgnore_structs.hpp"
#include "E_CarriageType_structs.hpp"
#include "E_RollCheckEval_structs.hpp"
#include "E_TrackSplineLocation_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TrainCarriage.BP_TrainCarriage_C
// 0x0478 (0x0710 - 0x0298)
class ABP_TrainCarriage_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       RearHitch;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       FrontHitch;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        RearBogieArrow;                                    // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FrontBogieArrow;                                   // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_Bogie_C*                            SensorBogie;                                       // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_Bogie_C*                            RearBogie;                                         // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 RearBogieMesh;                                     // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FrontBogieMesh;                                    // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CarriageBodyMesh;                                  // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_Bogie_C*                            FrontBogie;                                        // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            BodyMesh;                                          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_TrainTrack_C*                       AttachedTrack;                                     // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Velocity;                                          // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Friction;                                          // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Gravity;                                           // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mass;                                              // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinSpeed;                                          // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentSpeed;                                      // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CarriageState                               CarriageState;                                     // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_400F[0x7];                                     // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          BogieMesh;                                         // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        BogieDistance;                                     // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BodyOffset;                                        // 0x0358(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BogieOffset;                                       // 0x0370(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AttachedTrackSplineIndex;                          // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4010[0x4];                                     // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StartingDistanceOnTrack;                           // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManuallySetDistanceOnTrack;                        // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_EndOfTrackOption                            EndOfTrackOption;                                  // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4011[0x6];                                     // 0x039A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FrontBogieTransformLastTick;                       // 0x03A0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAC_Bogie_C*>                    TriggerBogies;                                     // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FTransform                             FrontBogieTransform;                               // 0x0410(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAC_Bogie_C*>                    Bogies;                                            // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          DisableRearBogie;                                  // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4012[0x7];                                     // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Acceleration;                                      // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deceleration;                                      // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BogieDirectionOfTravel                      StartingDirectionOfTravel;                         // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ImpactCollisionEnabled;                            // 0x0499(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableSensorBogie;                                // 0x049A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4013[0x5];                                     // 0x049B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SensorBogieDistance;                               // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SensorOffset;                                      // 0x04A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SensorBoxSize;                                     // 0x04C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinObstacleSize;                                   // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TrackObstacleResponse                       ObstacleResponse;                                  // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasActiveObstacle;                                 // 0x04E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4014[0x6];                                     // 0x04E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeBetweenObstaclePulses;                         // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeToNextPulse;                                   // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FrontColBogieOffset;                               // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RearColBogieOffset;                                // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAC_Bogie_C*>                    CollisionBogies;                                   // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<EObjectTypeQuery>                      CollisionQueryTypes;                               // 0x0518(0x0010)(Edit, BlueprintVisible)
	double                                        PlowImpactStrength;                                // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlowImpactThreshold;                               // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeverDerail;                                       // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4015[0x7];                                     // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DerailForce;                                       // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseConstantSpeeds;                                 // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBraking;                                         // 0x0549(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4016[0x6];                                     // 0x054A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TrainCarriage_C*                    ParentCarriage;                                    // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ABP_TrainCarriage_C*                    ChildCarriage;                                     // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceFromParent;                                // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AttachDistanceSampleCount;                         // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GracefulStopForEOT;                                // 0x056C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SensorTriggeredEOT;                                // 0x056D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartInverted;                                     // 0x056E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLeanEffect;                                     // 0x056F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeanMaxYawDelta;                                   // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentLeanAmount;                                 // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetLeanAmount;                                  // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeanIgnoreDelta;                                   // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeanLerpAmount;                                    // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyLeanToBogies;                                 // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4017[0x7];                                     // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LeanReturnToRestMultiplier;                        // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeanMinSpeedPrecentage;                            // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeanAmount;                                        // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRollCheck;                                      // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4018[0x7];                                     // 0x05B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeBetweenRollChecks;                             // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeToNextRollCheck;                               // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastRollingSample;                                 // 0x05D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RollDeltaThresholdsRPY;                            // 0x05E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        RollDerailForce;                                   // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDistanceFromParent;                             // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChildPlacedBehindCarriage;                         // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDistanceLimitChecks;                            // 0x0611(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4019[0x6];                                     // 0x0612(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_TrackTimedIgnore>            TimedIgnoreList;                                   // 0x0618(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        TimeBetweenDistanceChecks;                         // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeToNextDistanceCheck;                           // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SnapToTrack;                                       // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401A[0x7];                                     // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       ConnectedParentHitch;                              // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       ConnectedChildHitch;                               // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_CarriageType                                CarriageType;                                      // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401B[0x7];                                     // 0x0651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ParentSpeedLerp;                                   // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisconnectedFromParent;                            // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401C[0x7];                                     // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InternalAcceleration;                              // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseBogieRollOnBody;                                // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401D[0x7];                                     // 0x0671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WheelAnimSpeedScale;                               // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 BogieAnimClass;                                    // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          InheritParentSettings;                             // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401E[0x7];                                     // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ChildDerailDampen;                                 // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_RollCheckEval                               RollThresholdEval;                                 // 0x0698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401F[0x7];                                     // 0x0699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AutoFilled_ActorScale;                             // 0x06A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrintDebugStrings;                                 // 0x06B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseConstantDeltaTime;                              // 0x06B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4020[0x6];                                     // 0x06BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ConstantDeltaTime;                                 // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CarriageUpdateID;                                  // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableMovementSmoothing;                           // 0x06CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4021[0x3];                                     // 0x06CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        PreUpdateBogiePositions;                           // 0x06D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        SmoothDistanceErrorTolerance;                      // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SmoothDistanceDeltaLimit;                          // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SmoothAttemptsPerBogie;                            // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoNotSmoothHelperOrSensorBogies;                   // 0x06F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTrackRotaionToScaleErrorTolerance;              // 0x06F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4022[0x2];                                     // 0x06F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TrackRotationScaleAmount;                          // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BodyIgnoresPitch;                                  // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddActorToCollisionIgnoreList(class AActor* ActorToIgnore, double IgnoreTime, bool NeverExpire);
	void ApplyOrReleaseBrakes(bool Param_IsBraking);
	void AttachToTrack();
	void BogieChangeTracks(struct FS_TrackConnection& TrackConnection, class UAC_Bogie_C* Bogie, double& Speed, double& DistanceToEnd);
	void CalculateSpeed(double& DeltaSeconds, bool IgnoreLerp);
	void CheckDistanceToParent(double& DeltaSeconds);
	void ConnectToParent(class USphereComponent* ParentHitch, class USphereComponent* ChildHitch);
	void DerailCarriage(const struct FVector& ImpactLocation, const struct FVector& ImpactForce);
	void DisconnectChild();
	void DisconnectFromParent(bool AddToTimedIgnoreList);
	void ExecuteUbergraph_BP_TrainCarriage(int32 EntryPoint);
	void GetRotationBasedSmoothErrorTolerance(struct FRotator& SourceRotator, double* ErrorTolerance);
	void HandleActiveObstacle(double& DeltaSeconds);
	void HandleEndOfTrack(bool HitByHelperBogie, class ABP_TrainCarriage_C* InstantiatingCarriage);
	void InitalizeMesh();
	void InitalizeTrainCarriage();
	void LeanCarriage();
	void ManuallySetupCarriage();
	void NotifyAboutTrackUpdate(class ABP_TrainTrack_C* UpdatedTrack);
	void PerformRollCheck(double& DeltaSeconds);
	void PostMoveUpdate();
	void PutSensorBogieOutFront();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RefreshPositionOnTrack();
	void ResetCarriage(bool ResetChildren);
	void RevertDistances();
	void SensorPulse(class UAC_Bogie_C* StartBogie, bool* SensorHitSomething);
	void SetCarriageDirection(E_BogieDirectionOfTravel DirOfTravel);
	void SetCarriageState(E_CarriageState NewCarriageState, bool PassToChildren);
	void SetChildCarriage(class ABP_TrainCarriage_C* NewChild);
	void SetParentCarriage(class ABP_TrainCarriage_C* NewParent, bool RefreshPosition);
	void SetupAnimations();
	void SetupBogies();
	void SetupCollision();
	void SmoothOutBogieDistance(class UAC_Bogie_C* Bogie, double TargetDistance, const struct FVector& PreviousLocation);
	void StopCarriage();
	void TickBogieMovement(class UAC_Bogie_C* Bogie, double& Speed, bool IgnoreEndOfTrack, bool* HitEOT);
	void TickCarriageMovement(double& DeltaSeconds, bool* SuccessfulUpdate, bool* UpdateAborted);
	void TickCollision(double& DeltaSeconds);
	void ToggleCarriageDirection();
	void UpdateAnimations();
	void UpdateBogieDistances(double& StartingTrackDistance, class ABP_TrainTrack_C* Track, int32& TrackSplineIndex, bool SkipAlignedBogies, TArray<class UAC_Bogie_C*>& Param_Bogies, bool Invert);
	void UpdateCarriageMeshLocations();
	void UpdateSettingsFromParent();
	void UpdateStartingDistanceRelativeToParent();
	void UserConstructionScript();
	void WarpCarriageToStartingPoint(bool WarpChildren);

	void GetWheelSpeed(double* WheelSpeed) const;
	void IsActorOnIgnoreList(class AActor* ActorToCheck, bool* IsOnIgnoreList) const;
	void IsDirectionOfTravelInverted(E_TrackSplineLocation& ConnectionLocation, double& Speed, bool* IsInverted) const;
	void PrintDebugString(class FString& InfoString) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TrainCarriage_C">();
	}
	static class ABP_TrainCarriage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TrainCarriage_C>();
	}
};
static_assert(alignof(ABP_TrainCarriage_C) == 0x000010, "Wrong alignment on ABP_TrainCarriage_C");
static_assert(sizeof(ABP_TrainCarriage_C) == 0x000710, "Wrong size on ABP_TrainCarriage_C");
static_assert(offsetof(ABP_TrainCarriage_C, UberGraphFrame) == 0x000298, "Member 'ABP_TrainCarriage_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, RearHitch) == 0x0002A0, "Member 'ABP_TrainCarriage_C::RearHitch' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, FrontHitch) == 0x0002A8, "Member 'ABP_TrainCarriage_C::FrontHitch' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, RearBogieArrow) == 0x0002B0, "Member 'ABP_TrainCarriage_C::RearBogieArrow' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, FrontBogieArrow) == 0x0002B8, "Member 'ABP_TrainCarriage_C::FrontBogieArrow' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, SensorBogie) == 0x0002C0, "Member 'ABP_TrainCarriage_C::SensorBogie' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, RearBogie) == 0x0002C8, "Member 'ABP_TrainCarriage_C::RearBogie' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, RearBogieMesh) == 0x0002D0, "Member 'ABP_TrainCarriage_C::RearBogieMesh' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, FrontBogieMesh) == 0x0002D8, "Member 'ABP_TrainCarriage_C::FrontBogieMesh' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, CarriageBodyMesh) == 0x0002E0, "Member 'ABP_TrainCarriage_C::CarriageBodyMesh' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, FrontBogie) == 0x0002E8, "Member 'ABP_TrainCarriage_C::FrontBogie' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, DefaultSceneRoot) == 0x0002F0, "Member 'ABP_TrainCarriage_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, BodyMesh) == 0x0002F8, "Member 'ABP_TrainCarriage_C::BodyMesh' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, AttachedTrack) == 0x000300, "Member 'ABP_TrainCarriage_C::AttachedTrack' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, Velocity) == 0x000308, "Member 'ABP_TrainCarriage_C::Velocity' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, Friction) == 0x000310, "Member 'ABP_TrainCarriage_C::Friction' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, Gravity) == 0x000318, "Member 'ABP_TrainCarriage_C::Gravity' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, MaxSpeed) == 0x000320, "Member 'ABP_TrainCarriage_C::MaxSpeed' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, Mass) == 0x000328, "Member 'ABP_TrainCarriage_C::Mass' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, MinSpeed) == 0x000330, "Member 'ABP_TrainCarriage_C::MinSpeed' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, CurrentSpeed) == 0x000338, "Member 'ABP_TrainCarriage_C::CurrentSpeed' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, CarriageState) == 0x000340, "Member 'ABP_TrainCarriage_C::CarriageState' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, BogieMesh) == 0x000348, "Member 'ABP_TrainCarriage_C::BogieMesh' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, BogieDistance) == 0x000350, "Member 'ABP_TrainCarriage_C::BogieDistance' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, BodyOffset) == 0x000358, "Member 'ABP_TrainCarriage_C::BodyOffset' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, BogieOffset) == 0x000370, "Member 'ABP_TrainCarriage_C::BogieOffset' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, AttachedTrackSplineIndex) == 0x000388, "Member 'ABP_TrainCarriage_C::AttachedTrackSplineIndex' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, StartingDistanceOnTrack) == 0x000390, "Member 'ABP_TrainCarriage_C::StartingDistanceOnTrack' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, ManuallySetDistanceOnTrack) == 0x000398, "Member 'ABP_TrainCarriage_C::ManuallySetDistanceOnTrack' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, EndOfTrackOption) == 0x000399, "Member 'ABP_TrainCarriage_C::EndOfTrackOption' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, FrontBogieTransformLastTick) == 0x0003A0, "Member 'ABP_TrainCarriage_C::FrontBogieTransformLastTick' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, TriggerBogies) == 0x000400, "Member 'ABP_TrainCarriage_C::TriggerBogies' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, FrontBogieTransform) == 0x000410, "Member 'ABP_TrainCarriage_C::FrontBogieTransform' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, Bogies) == 0x000470, "Member 'ABP_TrainCarriage_C::Bogies' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, DisableRearBogie) == 0x000480, "Member 'ABP_TrainCarriage_C::DisableRearBogie' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, Acceleration) == 0x000488, "Member 'ABP_TrainCarriage_C::Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, Deceleration) == 0x000490, "Member 'ABP_TrainCarriage_C::Deceleration' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, StartingDirectionOfTravel) == 0x000498, "Member 'ABP_TrainCarriage_C::StartingDirectionOfTravel' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, ImpactCollisionEnabled) == 0x000499, "Member 'ABP_TrainCarriage_C::ImpactCollisionEnabled' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, DisableSensorBogie) == 0x00049A, "Member 'ABP_TrainCarriage_C::DisableSensorBogie' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, SensorBogieDistance) == 0x0004A0, "Member 'ABP_TrainCarriage_C::SensorBogieDistance' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, SensorOffset) == 0x0004A8, "Member 'ABP_TrainCarriage_C::SensorOffset' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, SensorBoxSize) == 0x0004C0, "Member 'ABP_TrainCarriage_C::SensorBoxSize' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, MinObstacleSize) == 0x0004D8, "Member 'ABP_TrainCarriage_C::MinObstacleSize' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, ObstacleResponse) == 0x0004E0, "Member 'ABP_TrainCarriage_C::ObstacleResponse' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, HasActiveObstacle) == 0x0004E1, "Member 'ABP_TrainCarriage_C::HasActiveObstacle' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, TimeBetweenObstaclePulses) == 0x0004E8, "Member 'ABP_TrainCarriage_C::TimeBetweenObstaclePulses' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, TimeToNextPulse) == 0x0004F0, "Member 'ABP_TrainCarriage_C::TimeToNextPulse' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, FrontColBogieOffset) == 0x0004F8, "Member 'ABP_TrainCarriage_C::FrontColBogieOffset' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, RearColBogieOffset) == 0x000500, "Member 'ABP_TrainCarriage_C::RearColBogieOffset' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, CollisionBogies) == 0x000508, "Member 'ABP_TrainCarriage_C::CollisionBogies' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, CollisionQueryTypes) == 0x000518, "Member 'ABP_TrainCarriage_C::CollisionQueryTypes' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, PlowImpactStrength) == 0x000528, "Member 'ABP_TrainCarriage_C::PlowImpactStrength' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, PlowImpactThreshold) == 0x000530, "Member 'ABP_TrainCarriage_C::PlowImpactThreshold' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, NeverDerail) == 0x000538, "Member 'ABP_TrainCarriage_C::NeverDerail' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, DerailForce) == 0x000540, "Member 'ABP_TrainCarriage_C::DerailForce' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, UseConstantSpeeds) == 0x000548, "Member 'ABP_TrainCarriage_C::UseConstantSpeeds' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, IsBraking) == 0x000549, "Member 'ABP_TrainCarriage_C::IsBraking' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, ParentCarriage) == 0x000550, "Member 'ABP_TrainCarriage_C::ParentCarriage' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, ChildCarriage) == 0x000558, "Member 'ABP_TrainCarriage_C::ChildCarriage' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, DistanceFromParent) == 0x000560, "Member 'ABP_TrainCarriage_C::DistanceFromParent' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, AttachDistanceSampleCount) == 0x000568, "Member 'ABP_TrainCarriage_C::AttachDistanceSampleCount' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, GracefulStopForEOT) == 0x00056C, "Member 'ABP_TrainCarriage_C::GracefulStopForEOT' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, SensorTriggeredEOT) == 0x00056D, "Member 'ABP_TrainCarriage_C::SensorTriggeredEOT' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, StartInverted) == 0x00056E, "Member 'ABP_TrainCarriage_C::StartInverted' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, UseLeanEffect) == 0x00056F, "Member 'ABP_TrainCarriage_C::UseLeanEffect' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, LeanMaxYawDelta) == 0x000570, "Member 'ABP_TrainCarriage_C::LeanMaxYawDelta' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, CurrentLeanAmount) == 0x000578, "Member 'ABP_TrainCarriage_C::CurrentLeanAmount' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, TargetLeanAmount) == 0x000580, "Member 'ABP_TrainCarriage_C::TargetLeanAmount' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, LeanIgnoreDelta) == 0x000588, "Member 'ABP_TrainCarriage_C::LeanIgnoreDelta' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, LeanLerpAmount) == 0x000590, "Member 'ABP_TrainCarriage_C::LeanLerpAmount' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, ApplyLeanToBogies) == 0x000598, "Member 'ABP_TrainCarriage_C::ApplyLeanToBogies' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, LeanReturnToRestMultiplier) == 0x0005A0, "Member 'ABP_TrainCarriage_C::LeanReturnToRestMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, LeanMinSpeedPrecentage) == 0x0005A8, "Member 'ABP_TrainCarriage_C::LeanMinSpeedPrecentage' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, LeanAmount) == 0x0005B0, "Member 'ABP_TrainCarriage_C::LeanAmount' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, UseRollCheck) == 0x0005B8, "Member 'ABP_TrainCarriage_C::UseRollCheck' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, TimeBetweenRollChecks) == 0x0005C0, "Member 'ABP_TrainCarriage_C::TimeBetweenRollChecks' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, TimeToNextRollCheck) == 0x0005C8, "Member 'ABP_TrainCarriage_C::TimeToNextRollCheck' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, LastRollingSample) == 0x0005D0, "Member 'ABP_TrainCarriage_C::LastRollingSample' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, RollDeltaThresholdsRPY) == 0x0005E8, "Member 'ABP_TrainCarriage_C::RollDeltaThresholdsRPY' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, RollDerailForce) == 0x000600, "Member 'ABP_TrainCarriage_C::RollDerailForce' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, MaxDistanceFromParent) == 0x000608, "Member 'ABP_TrainCarriage_C::MaxDistanceFromParent' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, ChildPlacedBehindCarriage) == 0x000610, "Member 'ABP_TrainCarriage_C::ChildPlacedBehindCarriage' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, UseDistanceLimitChecks) == 0x000611, "Member 'ABP_TrainCarriage_C::UseDistanceLimitChecks' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, TimedIgnoreList) == 0x000618, "Member 'ABP_TrainCarriage_C::TimedIgnoreList' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, TimeBetweenDistanceChecks) == 0x000628, "Member 'ABP_TrainCarriage_C::TimeBetweenDistanceChecks' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, TimeToNextDistanceCheck) == 0x000630, "Member 'ABP_TrainCarriage_C::TimeToNextDistanceCheck' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, SnapToTrack) == 0x000638, "Member 'ABP_TrainCarriage_C::SnapToTrack' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, ConnectedParentHitch) == 0x000640, "Member 'ABP_TrainCarriage_C::ConnectedParentHitch' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, ConnectedChildHitch) == 0x000648, "Member 'ABP_TrainCarriage_C::ConnectedChildHitch' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, CarriageType) == 0x000650, "Member 'ABP_TrainCarriage_C::CarriageType' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, ParentSpeedLerp) == 0x000658, "Member 'ABP_TrainCarriage_C::ParentSpeedLerp' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, DisconnectedFromParent) == 0x000660, "Member 'ABP_TrainCarriage_C::DisconnectedFromParent' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, InternalAcceleration) == 0x000668, "Member 'ABP_TrainCarriage_C::InternalAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, UseBogieRollOnBody) == 0x000670, "Member 'ABP_TrainCarriage_C::UseBogieRollOnBody' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, WheelAnimSpeedScale) == 0x000678, "Member 'ABP_TrainCarriage_C::WheelAnimSpeedScale' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, BogieAnimClass) == 0x000680, "Member 'ABP_TrainCarriage_C::BogieAnimClass' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, InheritParentSettings) == 0x000688, "Member 'ABP_TrainCarriage_C::InheritParentSettings' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, ChildDerailDampen) == 0x000690, "Member 'ABP_TrainCarriage_C::ChildDerailDampen' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, RollThresholdEval) == 0x000698, "Member 'ABP_TrainCarriage_C::RollThresholdEval' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, AutoFilled_ActorScale) == 0x0006A0, "Member 'ABP_TrainCarriage_C::AutoFilled_ActorScale' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, PrintDebugStrings) == 0x0006B8, "Member 'ABP_TrainCarriage_C::PrintDebugStrings' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, UseConstantDeltaTime) == 0x0006B9, "Member 'ABP_TrainCarriage_C::UseConstantDeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, ConstantDeltaTime) == 0x0006C0, "Member 'ABP_TrainCarriage_C::ConstantDeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, CarriageUpdateID) == 0x0006C8, "Member 'ABP_TrainCarriage_C::CarriageUpdateID' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, EnableMovementSmoothing) == 0x0006CC, "Member 'ABP_TrainCarriage_C::EnableMovementSmoothing' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, PreUpdateBogiePositions) == 0x0006D0, "Member 'ABP_TrainCarriage_C::PreUpdateBogiePositions' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, SmoothDistanceErrorTolerance) == 0x0006E0, "Member 'ABP_TrainCarriage_C::SmoothDistanceErrorTolerance' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, SmoothDistanceDeltaLimit) == 0x0006E8, "Member 'ABP_TrainCarriage_C::SmoothDistanceDeltaLimit' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, SmoothAttemptsPerBogie) == 0x0006F0, "Member 'ABP_TrainCarriage_C::SmoothAttemptsPerBogie' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, DoNotSmoothHelperOrSensorBogies) == 0x0006F4, "Member 'ABP_TrainCarriage_C::DoNotSmoothHelperOrSensorBogies' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, UseTrackRotaionToScaleErrorTolerance) == 0x0006F5, "Member 'ABP_TrainCarriage_C::UseTrackRotaionToScaleErrorTolerance' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, TrackRotationScaleAmount) == 0x0006F8, "Member 'ABP_TrainCarriage_C::TrackRotationScaleAmount' has a wrong offset!");
static_assert(offsetof(ABP_TrainCarriage_C, BodyIgnoresPitch) == 0x000700, "Member 'ABP_TrainCarriage_C::BodyIgnoresPitch' has a wrong offset!");

}

