#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TrainTrack

#include "Basic.hpp"

#include "E_TrackMeshSpacingAxis_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_TrackSpline_structs.hpp"
#include "S_TrackTriggerRegion_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TrainTrack.BP_TrainTrack_C
// 0x0110 (0x03A8 - 0x0298)
class ABP_TrainTrack_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       DefaultTrackSpline;                                // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            TrackMesh;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      TrackMaterial;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        MaxConnectionDistance;                             // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableMeshBuilding;                               // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41CC[0x7];                                     // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_TrackSpline>                 TrackSplines;                                      // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        TangentScale;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxTangentLength;                                  // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableConnectionBuilding;                         // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41CD[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_TrackTrigger_C*>             Triggers;                                          // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FS_TrackTriggerRegion>          TriggerRegions;                                    // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DisableCarriageNotifyOnEdit;                       // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysShowConnectionArrows;                        // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41CE[0x6];                                     // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                UpDirection;                                       // 0x0320(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_TrainTrack_C*>               TracksToIgnore;                                    // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          SetUpDirForAllSplinePoints;                        // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41CF[0x7];                                     // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ArrowOffset;                                       // 0x0350(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          End_UseRandomConnection;                           // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          End_UseActiveConnection;                           // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41D0[0x6];                                     // 0x036A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TrainTrack_C*                       End_ActiveConnection;                              // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          Start_UseRandomConnection;                         // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Start_UseActiveConnection;                         // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41D1[0x6];                                     // 0x037A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TrainTrack_C*                       Start_ActiveConnection;                            // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowUpDir;                                         // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowUpDirForAllPoints;                             // 0x0389(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceMeshToMatchSplineLength;                      // 0x038A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TrackMeshSpacingAxis                        MeshSpacingAxis;                                   // 0x038B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41D2[0x4];                                     // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MeshSpacingMultiplier;                             // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_TrainTrack_C*                       BakingSourceTrack;                                 // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnToOriginalLocation;                          // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplySplineRollToMesh;                             // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddConnectionArrow(const struct FRotator& Rotation, const struct FLinearColor& Colour, class USplineComponent* Spline, int32 SplinePoint);
	void AddTriggerRegion(const struct FS_TrackTriggerRegion& NewTriggerRegion);
	void AddUpDirArrow(struct FVector& ArrowLocation, struct FVector& UpDirForArrow);
	void BuildSplineFromBakingSource();
	void BuildTrackConnections(bool DoNotRefreshOtherTracks);
	void BuildTrackMesh();
	void CarriageEnteredTrack(class UAC_Bogie_C* Bogie, class ABP_TrainCarriage_C* Carriage);
	void CarriageExitedTrack(class UAC_Bogie_C* Bogie, class ABP_TrainCarriage_C* Carriage);
	void CheckForRegionOverlap(class UAC_Bogie_C* Bogie, class ABP_TrainCarriage_C* TrainCarriage);
	void ClearTriggerRegions(class ABP_TrackTrigger_C* Trigger, bool WipeAllRegions);
	void ExecuteUbergraph_BP_TrainTrack(int32 EntryPoint);
	void GetSplineByIndex(int32& SplineIndex, class USplineComponent** Spline);
	void GetTrackSplineByIndex(int32& SplineIndex, struct FS_TrackSpline* TrackSpline, bool* ValidTrackSpline);
	void InitalizeTrackSplines();
	void InitalizeTrainTrack();
	void NotifyCarriagesAboutTrackUpdate();
	void PickConnectionToUse(struct FS_TrackConnectionPoint& ConnectionPoint, bool ConnPointAtEOT, struct FS_TrackConnection* Connection, bool* ConnectionFound);
	void RebuildTrackConnections();
	void ReceiveBeginPlay();
	void RegisterTrackTrigger(class ABP_TrackTrigger_C* NewTrigger, bool* TriggerAdded);
	void SetupArrows();
	void UserConstructionScript();
	void ValidateTriggers();

	void GetSplineIndex(class USplineComponent* Spline, int32* SplineIndex) const;
	void GetTrackSplineCount(int32* NumTrackSplines) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TrainTrack_C">();
	}
	static class ABP_TrainTrack_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TrainTrack_C>();
	}
};
static_assert(alignof(ABP_TrainTrack_C) == 0x000008, "Wrong alignment on ABP_TrainTrack_C");
static_assert(sizeof(ABP_TrainTrack_C) == 0x0003A8, "Wrong size on ABP_TrainTrack_C");
static_assert(offsetof(ABP_TrainTrack_C, UberGraphFrame) == 0x000298, "Member 'ABP_TrainTrack_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, DefaultTrackSpline) == 0x0002A0, "Member 'ABP_TrainTrack_C::DefaultTrackSpline' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, Scene) == 0x0002A8, "Member 'ABP_TrainTrack_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, TrackMesh) == 0x0002B0, "Member 'ABP_TrainTrack_C::TrackMesh' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, TrackMaterial) == 0x0002B8, "Member 'ABP_TrainTrack_C::TrackMaterial' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, MaxConnectionDistance) == 0x0002C0, "Member 'ABP_TrainTrack_C::MaxConnectionDistance' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, DisableMeshBuilding) == 0x0002C8, "Member 'ABP_TrainTrack_C::DisableMeshBuilding' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, TrackSplines) == 0x0002D0, "Member 'ABP_TrainTrack_C::TrackSplines' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, TangentScale) == 0x0002E0, "Member 'ABP_TrainTrack_C::TangentScale' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, MaxTangentLength) == 0x0002E8, "Member 'ABP_TrainTrack_C::MaxTangentLength' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, DisableConnectionBuilding) == 0x0002F0, "Member 'ABP_TrainTrack_C::DisableConnectionBuilding' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, Triggers) == 0x0002F8, "Member 'ABP_TrainTrack_C::Triggers' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, TriggerRegions) == 0x000308, "Member 'ABP_TrainTrack_C::TriggerRegions' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, DisableCarriageNotifyOnEdit) == 0x000318, "Member 'ABP_TrainTrack_C::DisableCarriageNotifyOnEdit' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, AlwaysShowConnectionArrows) == 0x000319, "Member 'ABP_TrainTrack_C::AlwaysShowConnectionArrows' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, UpDirection) == 0x000320, "Member 'ABP_TrainTrack_C::UpDirection' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, TracksToIgnore) == 0x000338, "Member 'ABP_TrainTrack_C::TracksToIgnore' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, SetUpDirForAllSplinePoints) == 0x000348, "Member 'ABP_TrainTrack_C::SetUpDirForAllSplinePoints' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, ArrowOffset) == 0x000350, "Member 'ABP_TrainTrack_C::ArrowOffset' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, End_UseRandomConnection) == 0x000368, "Member 'ABP_TrainTrack_C::End_UseRandomConnection' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, End_UseActiveConnection) == 0x000369, "Member 'ABP_TrainTrack_C::End_UseActiveConnection' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, End_ActiveConnection) == 0x000370, "Member 'ABP_TrainTrack_C::End_ActiveConnection' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, Start_UseRandomConnection) == 0x000378, "Member 'ABP_TrainTrack_C::Start_UseRandomConnection' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, Start_UseActiveConnection) == 0x000379, "Member 'ABP_TrainTrack_C::Start_UseActiveConnection' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, Start_ActiveConnection) == 0x000380, "Member 'ABP_TrainTrack_C::Start_ActiveConnection' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, ShowUpDir) == 0x000388, "Member 'ABP_TrainTrack_C::ShowUpDir' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, ShowUpDirForAllPoints) == 0x000389, "Member 'ABP_TrainTrack_C::ShowUpDirForAllPoints' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, ForceMeshToMatchSplineLength) == 0x00038A, "Member 'ABP_TrainTrack_C::ForceMeshToMatchSplineLength' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, MeshSpacingAxis) == 0x00038B, "Member 'ABP_TrainTrack_C::MeshSpacingAxis' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, MeshSpacingMultiplier) == 0x000390, "Member 'ABP_TrainTrack_C::MeshSpacingMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, BakingSourceTrack) == 0x000398, "Member 'ABP_TrainTrack_C::BakingSourceTrack' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, ReturnToOriginalLocation) == 0x0003A0, "Member 'ABP_TrainTrack_C::ReturnToOriginalLocation' has a wrong offset!");
static_assert(offsetof(ABP_TrainTrack_C, ApplySplineRollToMesh) == 0x0003A1, "Member 'ABP_TrainTrack_C::ApplySplineRollToMesh' has a wrong offset!");

}

