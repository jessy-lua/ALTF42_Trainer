#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GlobalInteractableUserWidget

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass GlobalInteractableUserWidget.GlobalInteractableUserWidget_C
// 0x03E8 (0x06A8 - 0x02C0)
class UGlobalInteractableUserWidget_C : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       DelayAnimation500ms;                               // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DelayAnimation100ms;                               // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DelayAnimation300ms;                               // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DelayAnimation1000ms;                              // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DelayAnimation200ms;                               // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DelayAnimation70ms;                                // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MainColor;                                         // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HighlightColor;                                    // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         MainFont;                                          // 0x0318(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSlateFontInfo                         SmallTitleFont;                                    // 0x0370(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class USoundCue*                              SelectSound;                                       // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              BackSound;                                         // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              HoverSound;                                        // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ChangeSound;                                       // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              SliderSound;                                       // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HighlightExtraColor;                               // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         MediumTitleFont;                                   // 0x0400(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSlateFontInfo                         LargeTitleFont;                                    // 0x0458(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSlateFontInfo                         ValueFont;                                         // 0x04B0(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          OnlyUppercase;                                     // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_332E[0x3];                                     // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           MenuBackgroundColor;                               // 0x050C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           WidgetBackgroundColor;                             // 0x051C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SymbolColor;                                       // 0x052C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_332F[0x4];                                     // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              BackgroundMusic;                                   // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsGamepadBeingUsed;                               // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3330[0x7];                                     // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChangeInputDeviceUI;                             // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsMenu;                                           // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsActiveMenu;                                     // 0x0561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3331[0x6];                                     // 0x0562(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           KeybindingsUp;                                     // 0x0568(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           KeybindingsDown;                                   // 0x0578(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           KeybindingsLeft;                                   // 0x0588(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           KeybindingsRight;                                  // 0x0598(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           KeybindingsSelect;                                 // 0x05A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           KeybindingsBack;                                   // 0x05B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bAllowNavigation;                                  // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsNavigationCooledDown;                           // 0x05C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3332[0x6];                                     // 0x05CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   PressedKey;                                        // 0x05D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bPlayFadeAnimations;                               // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3333[0x7];                                     // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlayFadeAnimationLength;                           // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SubtleColor;                                       // 0x05F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKey>                           KeybindingsReset;                                  // 0x0608(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           KeybindingsExtra;                                  // 0x0618(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIntroLogosSkippable;                              // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3334[0x3];                                     // 0x0629(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DecisionButtonColor;                               // 0x062C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SliderBackgroundColor;                             // 0x063C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3335[0x4];                                     // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              CreditsMusic;                                      // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSelectCooledDown;                                // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBackCooledDown;                                  // 0x0659(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsResetCooledDown;                                 // 0x065A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExtraCooledDown;                                 // 0x065B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIntroEnabled;                                     // 0x065C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHoldCooledDown;                                  // 0x065D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReleasedCooledDown;                              // 0x065E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3336[0x1];                                     // 0x065F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x0660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3337[0x4];                                     // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           Keybindings_MenuLeft;                              // 0x0668(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           Keybindings_MenuRight;                             // 0x0678(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           Keybindings_PadLeft;                               // 0x0688(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           Keybindings_PadRight;                              // 0x0698(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void DelayAnimation(class UWidgetAnimation* Param_DelayAnimation, TDelegate<void()> Delegate);
	void ExecuteUbergraph_GlobalInteractableUserWidget(int32 EntryPoint);
	void GetAllowNavigation(bool* Param_bAllowNavigation);
	void GetCurrentInputDeviceUI(bool* Param_bIsGamepadBeingUsed);
	void GetGlobalColors(struct FLinearColor* Param_MainColor, struct FLinearColor* Param_HighlightColor, struct FLinearColor* Param_HighlightExtraColor, struct FLinearColor* Param_MenuBackgroundColor, struct FLinearColor* Param_WidgetBackgroundColor, struct FLinearColor* Param_SymbolColor, struct FLinearColor* Param_SubtleColor, struct FLinearColor* Param_DecisionButtonColor, struct FLinearColor* Param_SliderBackgroundColor);
	void GetGlobalFonts(struct FSlateFontInfo* Param_MainFont, struct FSlateFontInfo* Param_SmallTitleFont, struct FSlateFontInfo* Param_MediumTitleFont, struct FSlateFontInfo* Param_LargeTitleFont, struct FSlateFontInfo* Param_ValueFont, bool* Param_OnlyUppercase);
	void GetGlobalGeneralData(bool* Param_bPlayFadeAnimations, double* Param_PlayFadeAnimationLength, bool* Param_bIntroLogosSkippable, bool* Param_bIntroEnabled);
	void GetGlobalSounds(class USoundCue** Param_SelectSound, class USoundCue** Param_BackSound, class USoundCue** Param_HoverSound, class USoundCue** Param_ChangeSound, class USoundCue** Param_SliderSound, class USoundCue** Param_BackgroundMusic, class USoundCue** Param_CreditsMusic);
	void GetIsActiveMenu(bool* Param_bIsActiveMenu);
	void GetIsGamepadBeingUsed(bool* Param_bIsGamepadBeingUsed);
	void GetIsMenu(bool* Param_bIsMenu);
	void OnChangeInputDeviceUI__DelegateSignature(bool Param_bIsGamepadBeingUsed);
	void OnGlobalSettingsApply();
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnNavigationCooldownStart();
	void OnPressedAnyKey();
	void OnPressedBack();
	void OnPressedDown();
	void OnPressedExtra();
	void OnPressedHold();
	void OnPressedLeft();
	void OnPressedMenuLeft();
	void OnPressedMenuRight();
	void OnPressedReleased();
	void OnPressedReset();
	void OnPressedRight();
	void OnPressedSelect();
	void OnPressedUp();
	void PreConstruct(bool IsDesignTime);
	void Set_Current_Input_Device_UI(const struct FKey& InKey, bool bIsMouseInput);
	void SetActiveMenu(bool Param_bIsActiveMenu);
	void SetAllowNavigation(bool Param_bAllowNavigation);
	void SetEditableTextAppearence(class UEditableText* EditableText, const struct FSlateFontInfo& Font, const struct FLinearColor& Color);
	void SetGlobalSettingsColors();
	void SetGlobalSettingsFonts();
	void SetGlobalSettingsGeneral();
	void SetGlobalSettingsMenuKeybindings();
	void SetGlobalSettingsSounds();
	void SetGlobalVariableValues();
	void SetIsGamepadBeingUsed(bool Param_bIsGamepadBeingUsed);
	void SetIsMenu(bool Param_bIsMenu);
	void SetTextAppearence(class UTextBlock* TextObject, const struct FSlateFontInfo& Font, const struct FLinearColor& Color);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GlobalInteractableUserWidget_C">();
	}
	static class UGlobalInteractableUserWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalInteractableUserWidget_C>();
	}
};
static_assert(alignof(UGlobalInteractableUserWidget_C) == 0x000008, "Wrong alignment on UGlobalInteractableUserWidget_C");
static_assert(sizeof(UGlobalInteractableUserWidget_C) == 0x0006A8, "Wrong size on UGlobalInteractableUserWidget_C");
static_assert(offsetof(UGlobalInteractableUserWidget_C, UberGraphFrame) == 0x0002C0, "Member 'UGlobalInteractableUserWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DelayAnimation500ms) == 0x0002C8, "Member 'UGlobalInteractableUserWidget_C::DelayAnimation500ms' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DelayAnimation100ms) == 0x0002D0, "Member 'UGlobalInteractableUserWidget_C::DelayAnimation100ms' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DelayAnimation300ms) == 0x0002D8, "Member 'UGlobalInteractableUserWidget_C::DelayAnimation300ms' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DelayAnimation1000ms) == 0x0002E0, "Member 'UGlobalInteractableUserWidget_C::DelayAnimation1000ms' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DelayAnimation200ms) == 0x0002E8, "Member 'UGlobalInteractableUserWidget_C::DelayAnimation200ms' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DelayAnimation70ms) == 0x0002F0, "Member 'UGlobalInteractableUserWidget_C::DelayAnimation70ms' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, MainColor) == 0x0002F8, "Member 'UGlobalInteractableUserWidget_C::MainColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, HighlightColor) == 0x000308, "Member 'UGlobalInteractableUserWidget_C::HighlightColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, MainFont) == 0x000318, "Member 'UGlobalInteractableUserWidget_C::MainFont' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, SmallTitleFont) == 0x000370, "Member 'UGlobalInteractableUserWidget_C::SmallTitleFont' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, SelectSound) == 0x0003C8, "Member 'UGlobalInteractableUserWidget_C::SelectSound' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, BackSound) == 0x0003D0, "Member 'UGlobalInteractableUserWidget_C::BackSound' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, HoverSound) == 0x0003D8, "Member 'UGlobalInteractableUserWidget_C::HoverSound' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, ChangeSound) == 0x0003E0, "Member 'UGlobalInteractableUserWidget_C::ChangeSound' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, SliderSound) == 0x0003E8, "Member 'UGlobalInteractableUserWidget_C::SliderSound' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, HighlightExtraColor) == 0x0003F0, "Member 'UGlobalInteractableUserWidget_C::HighlightExtraColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, MediumTitleFont) == 0x000400, "Member 'UGlobalInteractableUserWidget_C::MediumTitleFont' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, LargeTitleFont) == 0x000458, "Member 'UGlobalInteractableUserWidget_C::LargeTitleFont' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, ValueFont) == 0x0004B0, "Member 'UGlobalInteractableUserWidget_C::ValueFont' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, OnlyUppercase) == 0x000508, "Member 'UGlobalInteractableUserWidget_C::OnlyUppercase' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, MenuBackgroundColor) == 0x00050C, "Member 'UGlobalInteractableUserWidget_C::MenuBackgroundColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, WidgetBackgroundColor) == 0x00051C, "Member 'UGlobalInteractableUserWidget_C::WidgetBackgroundColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, SymbolColor) == 0x00052C, "Member 'UGlobalInteractableUserWidget_C::SymbolColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, BackgroundMusic) == 0x000540, "Member 'UGlobalInteractableUserWidget_C::BackgroundMusic' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bIsGamepadBeingUsed) == 0x000548, "Member 'UGlobalInteractableUserWidget_C::bIsGamepadBeingUsed' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, OnChangeInputDeviceUI) == 0x000550, "Member 'UGlobalInteractableUserWidget_C::OnChangeInputDeviceUI' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bIsMenu) == 0x000560, "Member 'UGlobalInteractableUserWidget_C::bIsMenu' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bIsActiveMenu) == 0x000561, "Member 'UGlobalInteractableUserWidget_C::bIsActiveMenu' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsUp) == 0x000568, "Member 'UGlobalInteractableUserWidget_C::KeybindingsUp' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsDown) == 0x000578, "Member 'UGlobalInteractableUserWidget_C::KeybindingsDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsLeft) == 0x000588, "Member 'UGlobalInteractableUserWidget_C::KeybindingsLeft' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsRight) == 0x000598, "Member 'UGlobalInteractableUserWidget_C::KeybindingsRight' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsSelect) == 0x0005A8, "Member 'UGlobalInteractableUserWidget_C::KeybindingsSelect' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsBack) == 0x0005B8, "Member 'UGlobalInteractableUserWidget_C::KeybindingsBack' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bAllowNavigation) == 0x0005C8, "Member 'UGlobalInteractableUserWidget_C::bAllowNavigation' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bIsNavigationCooledDown) == 0x0005C9, "Member 'UGlobalInteractableUserWidget_C::bIsNavigationCooledDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, PressedKey) == 0x0005D0, "Member 'UGlobalInteractableUserWidget_C::PressedKey' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bPlayFadeAnimations) == 0x0005E8, "Member 'UGlobalInteractableUserWidget_C::bPlayFadeAnimations' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, PlayFadeAnimationLength) == 0x0005F0, "Member 'UGlobalInteractableUserWidget_C::PlayFadeAnimationLength' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, SubtleColor) == 0x0005F8, "Member 'UGlobalInteractableUserWidget_C::SubtleColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsReset) == 0x000608, "Member 'UGlobalInteractableUserWidget_C::KeybindingsReset' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsExtra) == 0x000618, "Member 'UGlobalInteractableUserWidget_C::KeybindingsExtra' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bIntroLogosSkippable) == 0x000628, "Member 'UGlobalInteractableUserWidget_C::bIntroLogosSkippable' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DecisionButtonColor) == 0x00062C, "Member 'UGlobalInteractableUserWidget_C::DecisionButtonColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, SliderBackgroundColor) == 0x00063C, "Member 'UGlobalInteractableUserWidget_C::SliderBackgroundColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, CreditsMusic) == 0x000650, "Member 'UGlobalInteractableUserWidget_C::CreditsMusic' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, IsSelectCooledDown) == 0x000658, "Member 'UGlobalInteractableUserWidget_C::IsSelectCooledDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, IsBackCooledDown) == 0x000659, "Member 'UGlobalInteractableUserWidget_C::IsBackCooledDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, IsResetCooledDown) == 0x00065A, "Member 'UGlobalInteractableUserWidget_C::IsResetCooledDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, IsExtraCooledDown) == 0x00065B, "Member 'UGlobalInteractableUserWidget_C::IsExtraCooledDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bIntroEnabled) == 0x00065C, "Member 'UGlobalInteractableUserWidget_C::bIntroEnabled' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, IsHoldCooledDown) == 0x00065D, "Member 'UGlobalInteractableUserWidget_C::IsHoldCooledDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, IsReleasedCooledDown) == 0x00065E, "Member 'UGlobalInteractableUserWidget_C::IsReleasedCooledDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, PlayerIndex) == 0x000660, "Member 'UGlobalInteractableUserWidget_C::PlayerIndex' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, Keybindings_MenuLeft) == 0x000668, "Member 'UGlobalInteractableUserWidget_C::Keybindings_MenuLeft' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, Keybindings_MenuRight) == 0x000678, "Member 'UGlobalInteractableUserWidget_C::Keybindings_MenuRight' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, Keybindings_PadLeft) == 0x000688, "Member 'UGlobalInteractableUserWidget_C::Keybindings_PadLeft' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, Keybindings_PadRight) == 0x000698, "Member 'UGlobalInteractableUserWidget_C::Keybindings_PadRight' has a wrong offset!");

}

