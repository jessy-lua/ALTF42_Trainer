#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_Bogie

#include "Basic.hpp"

#include "AC_Bogie_classes.hpp"
#include "AC_Bogie_parameters.hpp"


namespace SDK
{

// Function AC_Bogie.AC_Bogie_C.ChangeTrack
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_TrainTrack_C*                 Param_Track                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   TrackSplineIndex                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DistanceOnTrack                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Bogie_C::ChangeTrack(class ABP_TrainTrack_C* Param_Track, int32 TrackSplineIndex, double DistanceOnTrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Bogie_C", "ChangeTrack");

	Params::AC_Bogie_C_ChangeTrack Parms{};

	Parms.Param_Track = Param_Track;
	Parms.TrackSplineIndex = TrackSplineIndex;
	Parms.DistanceOnTrack = DistanceOnTrack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Bogie.AC_Bogie_C.GetConnectionPoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    GetEndPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_TrackConnectionPoint          ConnectionPoint                                        (Parm, OutParm, HasGetValueTypeHash)
// bool                                    IsEndPoint                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Bogie_C::GetConnectionPoint(bool& GetEndPoint, struct FS_TrackConnectionPoint* ConnectionPoint, bool* IsEndPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Bogie_C", "GetConnectionPoint");

	Params::AC_Bogie_C_GetConnectionPoint Parms{};

	Parms.GetEndPoint = GetEndPoint;

	UObject::ProcessEvent(Func, &Parms);

	GetEndPoint = Parms.GetEndPoint;

	if (ConnectionPoint != nullptr)
		*ConnectionPoint = std::move(Parms.ConnectionPoint);

	if (IsEndPoint != nullptr)
		*IsEndPoint = Parms.IsEndPoint;
}


// Function AC_Bogie.AC_Bogie_C.GetLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Bogie_C::GetLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Bogie_C", "GetLocation");

	Params::AC_Bogie_C_GetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function AC_Bogie.AC_Bogie_C.GetRotation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UAC_Bogie_C::GetRotation(struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Bogie_C", "GetRotation");

	Params::AC_Bogie_C_GetRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function AC_Bogie.AC_Bogie_C.GetTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       BogieTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Bogie_C::GetTransform(struct FTransform* BogieTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Bogie_C", "GetTransform");

	Params::AC_Bogie_C_GetTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BogieTransform != nullptr)
		*BogieTransform = std::move(Parms.BogieTransform);
}


// Function AC_Bogie.AC_Bogie_C.RestorePreviousDistance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   UpdateReverseID                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Bogie_C::RestorePreviousDistance(int32 UpdateReverseID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Bogie_C", "RestorePreviousDistance");

	Params::AC_Bogie_C_RestorePreviousDistance Parms{};

	Parms.UpdateReverseID = UpdateReverseID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Bogie.AC_Bogie_C.TickMovement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_UpdateID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Bogie_C::TickMovement(double& Speed, int32 Param_UpdateID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Bogie_C", "TickMovement");

	Params::AC_Bogie_C_TickMovement Parms{};

	Parms.Speed = Speed;
	Parms.Param_UpdateID = Param_UpdateID;

	UObject::ProcessEvent(Func, &Parms);

	Speed = Parms.Speed;
}


// Function AC_Bogie.AC_Bogie_C.UpdateDistanceForEndOfClosedLoop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Bogie_C::UpdateDistanceForEndOfClosedLoop(double& Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Bogie_C", "UpdateDistanceForEndOfClosedLoop");

	Params::AC_Bogie_C_UpdateDistanceForEndOfClosedLoop Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);

	Speed = Parms.Speed;
}


// Function AC_Bogie.AC_Bogie_C.GetDistanceToEndOfTrack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AtSplineEnd                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Bogie_C::GetDistanceToEndOfTrack(double& Speed, double* Distance, bool* AtSplineEnd) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Bogie_C", "GetDistanceToEndOfTrack");

	Params::AC_Bogie_C_GetDistanceToEndOfTrack Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);

	Speed = Parms.Speed;

	if (Distance != nullptr)
		*Distance = Parms.Distance;

	if (AtSplineEnd != nullptr)
		*AtSplineEnd = Parms.AtSplineEnd;
}

}

