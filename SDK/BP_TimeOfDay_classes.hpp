#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TimeOfDay

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ETimeOfDayModes_structs.hpp"
#include "TimeOfDayModifierStructure_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TimeOfDay.BP_TimeOfDay_C
// 0x01D0 (0x0468 - 0x0298)
class ABP_TimeOfDay_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  OverlayPostProcess;                                // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ClockBack;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        HourHand;                                          // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        MinuteHand;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ClockRoot;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        SunDirectionArrow;                                 // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SunOrbit;                                          // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ADirectionalLight>       SunLight;                                          // 0x02E0(0x0028)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TSoftObjectPtr<class ASkyLight>               SkyLight;                                          // 0x0308(0x0028)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	double                                        Time;                                              // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class AExponentialHeightFog>   HeightFog;                                         // 0x0338(0x0028)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	TSoftObjectPtr<class APostProcessVolume>      PostProcess;                                       // 0x0360(0x0028)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	double                                        NormalizedTime;                                    // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, struct FTimeOfDayModifierStructure> ActorSettingsMap;                                  // 0x0390(0x0050)(Edit, BlueprintVisible)
	FMulticastInlineDelegateProperty_             TimeHasChanged;                                    // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	ETimeOfDayModes                               InterpToDesiredTimeOfDay;                          // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40DA[0x7];                                     // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeScale;                                         // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DesiredTime;                                       // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ASkyAtmosphere>          SkyAtmosphere;                                     // 0x0408(0x0028)(Edit, BlueprintVisible, DisableEditOnTemplate, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Morning;                                           // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Dusk;                                              // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UMaterialParameterCollection*           CloudMaterialParameterCollection;                  // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        StartTime;                                         // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStartTimeOverride;                              // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Capture_Float_MPCValues_at_Current_Time(TMap<class FName, double>* MPCFloats);
	void CaptureActorsAsDefault();
	void CaptureSettingsAsCurrentTime();
	void CaptureVectorMPCValues_at_Current_Time(TMap<class FName, struct FLinearColor>* MPCVectorMap);
	void CurrentTimeAsMinutes(double* Param_Time);
	void Dusk__DelegateSignature();
	void ExecuteUbergraph_BP_TimeOfDay(int32 EntryPoint);
	void GetAllFloatMPCNamesInUse(TSet<class FName>* FloatNames);
	void GetAllVectorMPCNamesInUse(TSet<class FName>* FloatNames);
	void GetCurrentKey(int32* CurrentKey);
	void GetNextKey(int32* NextKey);
	void GetPreviousKey(int32* PreviousKey);
	void LerpFloatMap(const TMap<class FName, double>& One, const TMap<class FName, double>& Two, double Alpha, TMap<class FName, double>* LerpedMap);
	void LerpVectorMap(const TMap<class FName, struct FLinearColor>& One, const TMap<class FName, struct FLinearColor>& Two, double Alpha, TMap<class FName, struct FLinearColor>* LerpedMap);
	void MakeTimeOfDayAtCurrentTime(struct FTimeOfDayModifierStructure* CurrentTOD, double* Alpha);
	void Morning__DelegateSignature();
	void PropagateMPCValues();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ResetTOD();
	void SetCurrentTimeSettings();
	void SetNewDesiredTime(double NewDesiredTime, double AdjustTimeScale, bool ShouldAdjustTimeScale);
	void SetNewTime(double NewTime);
	void SkipToNextKey();
	void SkipToPreviousKey();
	void TimeHasChanged__DelegateSignature();
	void UpdateSunDirection();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TimeOfDay_C">();
	}
	static class ABP_TimeOfDay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TimeOfDay_C>();
	}
};
static_assert(alignof(ABP_TimeOfDay_C) == 0x000008, "Wrong alignment on ABP_TimeOfDay_C");
static_assert(sizeof(ABP_TimeOfDay_C) == 0x000468, "Wrong size on ABP_TimeOfDay_C");
static_assert(offsetof(ABP_TimeOfDay_C, UberGraphFrame) == 0x000298, "Member 'ABP_TimeOfDay_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, OverlayPostProcess) == 0x0002A0, "Member 'ABP_TimeOfDay_C::OverlayPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, ClockBack) == 0x0002A8, "Member 'ABP_TimeOfDay_C::ClockBack' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, HourHand) == 0x0002B0, "Member 'ABP_TimeOfDay_C::HourHand' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, MinuteHand) == 0x0002B8, "Member 'ABP_TimeOfDay_C::MinuteHand' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, ClockRoot) == 0x0002C0, "Member 'ABP_TimeOfDay_C::ClockRoot' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, SunDirectionArrow) == 0x0002C8, "Member 'ABP_TimeOfDay_C::SunDirectionArrow' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, SunOrbit) == 0x0002D0, "Member 'ABP_TimeOfDay_C::SunOrbit' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, DefaultSceneRoot) == 0x0002D8, "Member 'ABP_TimeOfDay_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, SunLight) == 0x0002E0, "Member 'ABP_TimeOfDay_C::SunLight' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, SkyLight) == 0x000308, "Member 'ABP_TimeOfDay_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, Time) == 0x000330, "Member 'ABP_TimeOfDay_C::Time' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, HeightFog) == 0x000338, "Member 'ABP_TimeOfDay_C::HeightFog' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, PostProcess) == 0x000360, "Member 'ABP_TimeOfDay_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, NormalizedTime) == 0x000388, "Member 'ABP_TimeOfDay_C::NormalizedTime' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, ActorSettingsMap) == 0x000390, "Member 'ABP_TimeOfDay_C::ActorSettingsMap' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, TimeHasChanged) == 0x0003E0, "Member 'ABP_TimeOfDay_C::TimeHasChanged' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, InterpToDesiredTimeOfDay) == 0x0003F0, "Member 'ABP_TimeOfDay_C::InterpToDesiredTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, TimeScale) == 0x0003F8, "Member 'ABP_TimeOfDay_C::TimeScale' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, DesiredTime) == 0x000400, "Member 'ABP_TimeOfDay_C::DesiredTime' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, SkyAtmosphere) == 0x000408, "Member 'ABP_TimeOfDay_C::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, Morning) == 0x000430, "Member 'ABP_TimeOfDay_C::Morning' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, Dusk) == 0x000440, "Member 'ABP_TimeOfDay_C::Dusk' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, CloudMaterialParameterCollection) == 0x000450, "Member 'ABP_TimeOfDay_C::CloudMaterialParameterCollection' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, StartTime) == 0x000458, "Member 'ABP_TimeOfDay_C::StartTime' has a wrong offset!");
static_assert(offsetof(ABP_TimeOfDay_C, UseStartTimeOverride) == 0x000460, "Member 'ABP_TimeOfDay_C::UseStartTimeOverride' has a wrong offset!");

}

