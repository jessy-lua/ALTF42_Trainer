#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicLeaderboard

#include "Basic.hpp"


namespace SDK::Params
{

// Function EpicLeaderboard.EpicLeaderboardObject.CleanupName
// 0x0020 (0x0020 - 0x0000)
struct EpicLeaderboardObject_CleanupName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicLeaderboardObject_CleanupName) == 0x000008, "Wrong alignment on EpicLeaderboardObject_CleanupName");
static_assert(sizeof(EpicLeaderboardObject_CleanupName) == 0x000020, "Wrong size on EpicLeaderboardObject_CleanupName");
static_assert(offsetof(EpicLeaderboardObject_CleanupName, Param_Name) == 0x000000, "Member 'EpicLeaderboardObject_CleanupName::Param_Name' has a wrong offset!");
static_assert(offsetof(EpicLeaderboardObject_CleanupName, ReturnValue) == 0x000010, "Member 'EpicLeaderboardObject_CleanupName::ReturnValue' has a wrong offset!");

// Function EpicLeaderboard.EpicLeaderboardObject.GetEpicLeaderboard
// 0x0028 (0x0028 - 0x0000)
struct EpicLeaderboardObject_GetEpicLeaderboard final
{
public:
	class FString                                 LeaderboardID;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardKey;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEpicLeaderboardObject*                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicLeaderboardObject_GetEpicLeaderboard) == 0x000008, "Wrong alignment on EpicLeaderboardObject_GetEpicLeaderboard");
static_assert(sizeof(EpicLeaderboardObject_GetEpicLeaderboard) == 0x000028, "Wrong size on EpicLeaderboardObject_GetEpicLeaderboard");
static_assert(offsetof(EpicLeaderboardObject_GetEpicLeaderboard, LeaderboardID) == 0x000000, "Member 'EpicLeaderboardObject_GetEpicLeaderboard::LeaderboardID' has a wrong offset!");
static_assert(offsetof(EpicLeaderboardObject_GetEpicLeaderboard, LeaderboardKey) == 0x000010, "Member 'EpicLeaderboardObject_GetEpicLeaderboard::LeaderboardKey' has a wrong offset!");
static_assert(offsetof(EpicLeaderboardObject_GetEpicLeaderboard, ReturnValue) == 0x000020, "Member 'EpicLeaderboardObject_GetEpicLeaderboard::ReturnValue' has a wrong offset!");

// Function EpicLeaderboard.EpicLeaderboardObject.GetLeaderboardEntries
// 0x0018 (0x0018 - 0x0000)
struct EpicLeaderboardObject_GetLeaderboardEntries final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AroundPlayer;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E2[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicLeaderboardObject_GetLeaderboardEntries) == 0x000008, "Wrong alignment on EpicLeaderboardObject_GetLeaderboardEntries");
static_assert(sizeof(EpicLeaderboardObject_GetLeaderboardEntries) == 0x000018, "Wrong size on EpicLeaderboardObject_GetLeaderboardEntries");
static_assert(offsetof(EpicLeaderboardObject_GetLeaderboardEntries, PlayerName) == 0x000000, "Member 'EpicLeaderboardObject_GetLeaderboardEntries::PlayerName' has a wrong offset!");
static_assert(offsetof(EpicLeaderboardObject_GetLeaderboardEntries, AroundPlayer) == 0x000010, "Member 'EpicLeaderboardObject_GetLeaderboardEntries::AroundPlayer' has a wrong offset!");

// Function EpicLeaderboard.EpicLeaderboardObject.SubmitEntry
// 0x0018 (0x0018 - 0x0000)
struct EpicLeaderboardObject_SubmitEntry final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerScore;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E3[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicLeaderboardObject_SubmitEntry) == 0x000008, "Wrong alignment on EpicLeaderboardObject_SubmitEntry");
static_assert(sizeof(EpicLeaderboardObject_SubmitEntry) == 0x000018, "Wrong size on EpicLeaderboardObject_SubmitEntry");
static_assert(offsetof(EpicLeaderboardObject_SubmitEntry, PlayerName) == 0x000000, "Member 'EpicLeaderboardObject_SubmitEntry::PlayerName' has a wrong offset!");
static_assert(offsetof(EpicLeaderboardObject_SubmitEntry, PlayerScore) == 0x000010, "Member 'EpicLeaderboardObject_SubmitEntry::PlayerScore' has a wrong offset!");

// Function EpicLeaderboard.EpicLeaderboardObject.SubmitEntryWithMetadata
// 0x0068 (0x0068 - 0x0000)
struct EpicLeaderboardObject_SubmitEntryWithMetadata final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerScore;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            MetaData;                                          // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicLeaderboardObject_SubmitEntryWithMetadata) == 0x000008, "Wrong alignment on EpicLeaderboardObject_SubmitEntryWithMetadata");
static_assert(sizeof(EpicLeaderboardObject_SubmitEntryWithMetadata) == 0x000068, "Wrong size on EpicLeaderboardObject_SubmitEntryWithMetadata");
static_assert(offsetof(EpicLeaderboardObject_SubmitEntryWithMetadata, PlayerName) == 0x000000, "Member 'EpicLeaderboardObject_SubmitEntryWithMetadata::PlayerName' has a wrong offset!");
static_assert(offsetof(EpicLeaderboardObject_SubmitEntryWithMetadata, PlayerScore) == 0x000010, "Member 'EpicLeaderboardObject_SubmitEntryWithMetadata::PlayerScore' has a wrong offset!");
static_assert(offsetof(EpicLeaderboardObject_SubmitEntryWithMetadata, MetaData) == 0x000018, "Member 'EpicLeaderboardObject_SubmitEntryWithMetadata::MetaData' has a wrong offset!");

}

