#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_Character_BPI

#include "Basic.hpp"

#include "ALS_RotationMode_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "AI_StepTalk_WhoOrWhere_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "ALS_MovementAction_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "Engine_structs.hpp"
#include "ALS_Stance_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ALS_Character_BPI.ALS_Character_BPI_C
// 0x0000 (0x0028 - 0x0028)
class IALS_Character_BPI_C final : public IInterface
{
public:
	void BPI_Get_CaptainKnight_Attack(bool* SimpleAttack_);
	void BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* MovementState, EALS_MovementState* PrevMovementState, EALS_MovementAction* MovementAction, EALS_RotationMode* RotationMode, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* ViewMode, EALS_OverlayState* OverlayState);
	void BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Acceleration, struct FVector* MovementInput, bool* IsMoving, bool* IK_Possible, bool* SprintJUMP_, bool* HasMovementInput, double* Speed, double* MovementInputAmount, struct FRotator* AimingRotation, double* AimYawRate);
	void BPI_Get_PlayerbleChar_Status(double* ChickThrowAnimBP, bool* TubeIdleON, bool* Flamingo_, bool* AgingMode_, class UAnimSequenceBase** CostumeDanceAnim, bool* CostumeDanceTime_, bool* TimeSlowMode_Active_, double* TimeSlow_SelfCustom_Value, double* TimeSlow_CameraAlpha);
	void BPI_Get_RagdollFalling_FlailOnOFF(bool* RagdollFlail_Off, double* RagdollFlail_Value);
	void BPI_GetAI_NPC_ActionMode(bool* NPC_ActionMode, double* ActionStartTime, class UAnimSequenceBase** NPC_ActionAnim, bool* LoopActive, EAI_StepTalk_WhoOrWhere* Who_NPC, bool* Hit_);
	void BPI_Set_Gait(EALS_Gait NewGait);
	void BPI_Set_MovementAction(EALS_MovementAction NewMovementAction);
	void BPI_Set_MovementState(EALS_MovementState NewMovementState);
	void BPI_Set_OverlayState(EALS_OverlayState NewOverlayState);
	void BPI_Set_RotationMode(EALS_RotationMode NewRotationMode);
	void BPI_Set_ViewMode(EALS_ViewMode NewViewMode);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ALS_Character_BPI_C">();
	}
	static class IALS_Character_BPI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IALS_Character_BPI_C>();
	}
};
static_assert(alignof(IALS_Character_BPI_C) == 0x000008, "Wrong alignment on IALS_Character_BPI_C");
static_assert(sizeof(IALS_Character_BPI_C) == 0x000028, "Wrong size on IALS_Character_BPI_C");

}

