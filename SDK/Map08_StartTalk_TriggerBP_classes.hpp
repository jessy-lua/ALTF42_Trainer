#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Map08_StartTalk_TriggerBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Map08_StartTalk_TriggerBP.Map08_StartTalk_TriggerBP_C
// 0x0068 (0x0300 - 0x0298)
class AMap08_StartTalk_TriggerBP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Overlap;                                           // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FText                                   Talk_Npc_Name;                                     // 0x02B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UObject*                                Talk_NPC_Image;                                    // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FText                                   Talk_Speak_Text_;                                  // 0x02D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AALTF4_Loco_BP_C*                       ALTF42_Char;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Talk_Integer;                                      // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxTalk;                                           // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TextJumpPossible;                                  // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TalkStart_;                                        // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Map08_StartTalk_TriggerBP_Overlap_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ExecuteUbergraph_Map08_StartTalk_TriggerBP(int32 EntryPoint);
	void Map08_TalkEnd();
	void NextTalk();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Map08_StartTalk_TriggerBP_C">();
	}
	static class AMap08_StartTalk_TriggerBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMap08_StartTalk_TriggerBP_C>();
	}
};
static_assert(alignof(AMap08_StartTalk_TriggerBP_C) == 0x000008, "Wrong alignment on AMap08_StartTalk_TriggerBP_C");
static_assert(sizeof(AMap08_StartTalk_TriggerBP_C) == 0x000300, "Wrong size on AMap08_StartTalk_TriggerBP_C");
static_assert(offsetof(AMap08_StartTalk_TriggerBP_C, UberGraphFrame) == 0x000298, "Member 'AMap08_StartTalk_TriggerBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMap08_StartTalk_TriggerBP_C, Overlap) == 0x0002A0, "Member 'AMap08_StartTalk_TriggerBP_C::Overlap' has a wrong offset!");
static_assert(offsetof(AMap08_StartTalk_TriggerBP_C, DefaultSceneRoot) == 0x0002A8, "Member 'AMap08_StartTalk_TriggerBP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMap08_StartTalk_TriggerBP_C, Talk_Npc_Name) == 0x0002B0, "Member 'AMap08_StartTalk_TriggerBP_C::Talk_Npc_Name' has a wrong offset!");
static_assert(offsetof(AMap08_StartTalk_TriggerBP_C, Talk_NPC_Image) == 0x0002C8, "Member 'AMap08_StartTalk_TriggerBP_C::Talk_NPC_Image' has a wrong offset!");
static_assert(offsetof(AMap08_StartTalk_TriggerBP_C, Talk_Speak_Text_) == 0x0002D0, "Member 'AMap08_StartTalk_TriggerBP_C::Talk_Speak_Text_' has a wrong offset!");
static_assert(offsetof(AMap08_StartTalk_TriggerBP_C, ALTF42_Char) == 0x0002E8, "Member 'AMap08_StartTalk_TriggerBP_C::ALTF42_Char' has a wrong offset!");
static_assert(offsetof(AMap08_StartTalk_TriggerBP_C, Talk_Integer) == 0x0002F0, "Member 'AMap08_StartTalk_TriggerBP_C::Talk_Integer' has a wrong offset!");
static_assert(offsetof(AMap08_StartTalk_TriggerBP_C, MaxTalk) == 0x0002F4, "Member 'AMap08_StartTalk_TriggerBP_C::MaxTalk' has a wrong offset!");
static_assert(offsetof(AMap08_StartTalk_TriggerBP_C, TextJumpPossible) == 0x0002F8, "Member 'AMap08_StartTalk_TriggerBP_C::TextJumpPossible' has a wrong offset!");
static_assert(offsetof(AMap08_StartTalk_TriggerBP_C, TalkStart_) == 0x0002F9, "Member 'AMap08_StartTalk_TriggerBP_C::TalkStart_' has a wrong offset!");

}

