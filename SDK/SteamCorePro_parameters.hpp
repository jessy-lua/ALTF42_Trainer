#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamCorePro

#include "Basic.hpp"

#include "OnlineSubsystemUtils_structs.hpp"
#include "SteamCoreShared_structs.hpp"
#include "SteamCorePro_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function SteamCorePro.SteamCoreProAppsAsyncActionGetFileDetails.GetFileDetailsAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229F[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProAppsAsyncActionGetFileDetails* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync) == 0x000008, "Wrong alignment on SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync");
static_assert(sizeof(SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync) == 0x000028, "Wrong size on SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync");
static_assert(offsetof(SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync, Filename) == 0x000008, "Member 'SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync::Filename' has a wrong offset!");
static_assert(offsetof(SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync, Timeout) == 0x000018, "Member 'SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProAppsAsyncActionGetFileDetails_GetFileDetailsAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProAppsAsyncActionGetFileDetails.HandleCallback
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreProAppsAsyncActionGetFileDetails_HandleCallback final
{
public:
	struct FFileDetailsResult                     Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A0[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProAppsAsyncActionGetFileDetails_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProAppsAsyncActionGetFileDetails_HandleCallback");
static_assert(sizeof(SteamCoreProAppsAsyncActionGetFileDetails_HandleCallback) == 0x000030, "Wrong size on SteamCoreProAppsAsyncActionGetFileDetails_HandleCallback");
static_assert(offsetof(SteamCoreProAppsAsyncActionGetFileDetails_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProAppsAsyncActionGetFileDetails_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProAppsAsyncActionGetFileDetails_HandleCallback, bWasSuccessful) == 0x000028, "Member 'SteamCoreProAppsAsyncActionGetFileDetails_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.ActivateGameOverlay
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_ActivateGameOverlay final
{
public:
	class FString                                 Dialog;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_ActivateGameOverlay) == 0x000008, "Wrong alignment on SteamProFriends_ActivateGameOverlay");
static_assert(sizeof(SteamProFriends_ActivateGameOverlay) == 0x000010, "Wrong size on SteamProFriends_ActivateGameOverlay");
static_assert(offsetof(SteamProFriends_ActivateGameOverlay, Dialog) == 0x000000, "Member 'SteamProFriends_ActivateGameOverlay::Dialog' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.ActivateGameOverlayInvitedialog
// 0x0008 (0x0008 - 0x0000)
struct SteamProFriends_ActivateGameOverlayInvitedialog final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_ActivateGameOverlayInvitedialog) == 0x000008, "Wrong alignment on SteamProFriends_ActivateGameOverlayInvitedialog");
static_assert(sizeof(SteamProFriends_ActivateGameOverlayInvitedialog) == 0x000008, "Wrong size on SteamProFriends_ActivateGameOverlayInvitedialog");
static_assert(offsetof(SteamProFriends_ActivateGameOverlayInvitedialog, SteamIDLobby) == 0x000000, "Member 'SteamProFriends_ActivateGameOverlayInvitedialog::SteamIDLobby' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.ActivateGameOverlayInviteDialogConnectString
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_ActivateGameOverlayInviteDialogConnectString final
{
public:
	class FString                                 ConnectString;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_ActivateGameOverlayInviteDialogConnectString) == 0x000008, "Wrong alignment on SteamProFriends_ActivateGameOverlayInviteDialogConnectString");
static_assert(sizeof(SteamProFriends_ActivateGameOverlayInviteDialogConnectString) == 0x000010, "Wrong size on SteamProFriends_ActivateGameOverlayInviteDialogConnectString");
static_assert(offsetof(SteamProFriends_ActivateGameOverlayInviteDialogConnectString, ConnectString) == 0x000000, "Member 'SteamProFriends_ActivateGameOverlayInviteDialogConnectString::ConnectString' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.ActivateGameOverlayToStore
// 0x0008 (0x0008 - 0x0000)
struct SteamProFriends_ActivateGameOverlayToStore final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamOverlayToStoreFlag                      Flag;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A7[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_ActivateGameOverlayToStore) == 0x000004, "Wrong alignment on SteamProFriends_ActivateGameOverlayToStore");
static_assert(sizeof(SteamProFriends_ActivateGameOverlayToStore) == 0x000008, "Wrong size on SteamProFriends_ActivateGameOverlayToStore");
static_assert(offsetof(SteamProFriends_ActivateGameOverlayToStore, AppID) == 0x000000, "Member 'SteamProFriends_ActivateGameOverlayToStore::AppID' has a wrong offset!");
static_assert(offsetof(SteamProFriends_ActivateGameOverlayToStore, Flag) == 0x000004, "Member 'SteamProFriends_ActivateGameOverlayToStore::Flag' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.ActivateGameOverlayToUser
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_ActivateGameOverlayToUser final
{
public:
	class FString                                 Dialog;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_ActivateGameOverlayToUser) == 0x000008, "Wrong alignment on SteamProFriends_ActivateGameOverlayToUser");
static_assert(sizeof(SteamProFriends_ActivateGameOverlayToUser) == 0x000018, "Wrong size on SteamProFriends_ActivateGameOverlayToUser");
static_assert(offsetof(SteamProFriends_ActivateGameOverlayToUser, Dialog) == 0x000000, "Member 'SteamProFriends_ActivateGameOverlayToUser::Dialog' has a wrong offset!");
static_assert(offsetof(SteamProFriends_ActivateGameOverlayToUser, SteamID) == 0x000010, "Member 'SteamProFriends_ActivateGameOverlayToUser::SteamID' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.ActivateGameOverlayToWebPage
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_ActivateGameOverlayToWebPage final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamActivateGameOverlayToWebPageMode        Mode;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_ActivateGameOverlayToWebPage) == 0x000008, "Wrong alignment on SteamProFriends_ActivateGameOverlayToWebPage");
static_assert(sizeof(SteamProFriends_ActivateGameOverlayToWebPage) == 0x000018, "Wrong size on SteamProFriends_ActivateGameOverlayToWebPage");
static_assert(offsetof(SteamProFriends_ActivateGameOverlayToWebPage, URL) == 0x000000, "Member 'SteamProFriends_ActivateGameOverlayToWebPage::URL' has a wrong offset!");
static_assert(offsetof(SteamProFriends_ActivateGameOverlayToWebPage, Mode) == 0x000010, "Member 'SteamProFriends_ActivateGameOverlayToWebPage::Mode' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.BHasEquippedProfileItem
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_BHasEquippedProfileItem final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCommunityProfileItemType                ItemType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A9[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_BHasEquippedProfileItem) == 0x000008, "Wrong alignment on SteamProFriends_BHasEquippedProfileItem");
static_assert(sizeof(SteamProFriends_BHasEquippedProfileItem) == 0x000010, "Wrong size on SteamProFriends_BHasEquippedProfileItem");
static_assert(offsetof(SteamProFriends_BHasEquippedProfileItem, SteamID) == 0x000000, "Member 'SteamProFriends_BHasEquippedProfileItem::SteamID' has a wrong offset!");
static_assert(offsetof(SteamProFriends_BHasEquippedProfileItem, ItemType) == 0x000008, "Member 'SteamProFriends_BHasEquippedProfileItem::ItemType' has a wrong offset!");
static_assert(offsetof(SteamProFriends_BHasEquippedProfileItem, ReturnValue) == 0x000009, "Member 'SteamProFriends_BHasEquippedProfileItem::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.CloseClanChatWindowInSteam
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_CloseClanChatWindowInSteam final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AA[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_CloseClanChatWindowInSteam) == 0x000008, "Wrong alignment on SteamProFriends_CloseClanChatWindowInSteam");
static_assert(sizeof(SteamProFriends_CloseClanChatWindowInSteam) == 0x000010, "Wrong size on SteamProFriends_CloseClanChatWindowInSteam");
static_assert(offsetof(SteamProFriends_CloseClanChatWindowInSteam, SteamIDClanChat) == 0x000000, "Member 'SteamProFriends_CloseClanChatWindowInSteam::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(SteamProFriends_CloseClanChatWindowInSteam, ReturnValue) == 0x000008, "Member 'SteamProFriends_CloseClanChatWindowInSteam::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetChatMemberByIndex
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_GetChatMemberByIndex final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         User;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetChatMemberByIndex) == 0x000008, "Wrong alignment on SteamProFriends_GetChatMemberByIndex");
static_assert(sizeof(SteamProFriends_GetChatMemberByIndex) == 0x000018, "Wrong size on SteamProFriends_GetChatMemberByIndex");
static_assert(offsetof(SteamProFriends_GetChatMemberByIndex, SteamIDClan) == 0x000000, "Member 'SteamProFriends_GetChatMemberByIndex::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetChatMemberByIndex, User) == 0x000008, "Member 'SteamProFriends_GetChatMemberByIndex::User' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetChatMemberByIndex, ReturnValue) == 0x000010, "Member 'SteamProFriends_GetChatMemberByIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetClanActivityCounts
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_GetClanActivityCounts final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Online;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGame;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chatting;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AC[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetClanActivityCounts) == 0x000008, "Wrong alignment on SteamProFriends_GetClanActivityCounts");
static_assert(sizeof(SteamProFriends_GetClanActivityCounts) == 0x000018, "Wrong size on SteamProFriends_GetClanActivityCounts");
static_assert(offsetof(SteamProFriends_GetClanActivityCounts, SteamIDClan) == 0x000000, "Member 'SteamProFriends_GetClanActivityCounts::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanActivityCounts, Online) == 0x000008, "Member 'SteamProFriends_GetClanActivityCounts::Online' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanActivityCounts, InGame) == 0x00000C, "Member 'SteamProFriends_GetClanActivityCounts::InGame' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanActivityCounts, Chatting) == 0x000010, "Member 'SteamProFriends_GetClanActivityCounts::Chatting' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanActivityCounts, ReturnValue) == 0x000014, "Member 'SteamProFriends_GetClanActivityCounts::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetClanByIndex
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetClanByIndex final
{
public:
	int32                                         Clan;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetClanByIndex) == 0x000008, "Wrong alignment on SteamProFriends_GetClanByIndex");
static_assert(sizeof(SteamProFriends_GetClanByIndex) == 0x000010, "Wrong size on SteamProFriends_GetClanByIndex");
static_assert(offsetof(SteamProFriends_GetClanByIndex, Clan) == 0x000000, "Member 'SteamProFriends_GetClanByIndex::Clan' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanByIndex, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetClanByIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetClanChatMemberCount
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetClanChatMemberCount final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AE[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetClanChatMemberCount) == 0x000008, "Wrong alignment on SteamProFriends_GetClanChatMemberCount");
static_assert(sizeof(SteamProFriends_GetClanChatMemberCount) == 0x000010, "Wrong size on SteamProFriends_GetClanChatMemberCount");
static_assert(offsetof(SteamProFriends_GetClanChatMemberCount, SteamIDClan) == 0x000000, "Member 'SteamProFriends_GetClanChatMemberCount::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanChatMemberCount, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetClanChatMemberCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetClanChatMessage
// 0x0038 (0x0038 - 0x0000)
struct SteamProFriends_GetClanChatMessage final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MessageID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AF[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamChatEntryType                           ChatEntryType;                                     // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B0[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDChatter;                                    // 0x0028(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B1[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetClanChatMessage) == 0x000008, "Wrong alignment on SteamProFriends_GetClanChatMessage");
static_assert(sizeof(SteamProFriends_GetClanChatMessage) == 0x000038, "Wrong size on SteamProFriends_GetClanChatMessage");
static_assert(offsetof(SteamProFriends_GetClanChatMessage, SteamIDClanChat) == 0x000000, "Member 'SteamProFriends_GetClanChatMessage::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanChatMessage, MessageID) == 0x000008, "Member 'SteamProFriends_GetClanChatMessage::MessageID' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanChatMessage, Text) == 0x000010, "Member 'SteamProFriends_GetClanChatMessage::Text' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanChatMessage, ChatEntryType) == 0x000020, "Member 'SteamProFriends_GetClanChatMessage::ChatEntryType' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanChatMessage, SteamIDChatter) == 0x000028, "Member 'SteamProFriends_GetClanChatMessage::SteamIDChatter' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanChatMessage, ReturnValue) == 0x000030, "Member 'SteamProFriends_GetClanChatMessage::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetClanCount
// 0x0004 (0x0004 - 0x0000)
struct SteamProFriends_GetClanCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetClanCount) == 0x000004, "Wrong alignment on SteamProFriends_GetClanCount");
static_assert(sizeof(SteamProFriends_GetClanCount) == 0x000004, "Wrong size on SteamProFriends_GetClanCount");
static_assert(offsetof(SteamProFriends_GetClanCount, ReturnValue) == 0x000000, "Member 'SteamProFriends_GetClanCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetClanName
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_GetClanName final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetClanName) == 0x000008, "Wrong alignment on SteamProFriends_GetClanName");
static_assert(sizeof(SteamProFriends_GetClanName) == 0x000018, "Wrong size on SteamProFriends_GetClanName");
static_assert(offsetof(SteamProFriends_GetClanName, SteamIDClan) == 0x000000, "Member 'SteamProFriends_GetClanName::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanName, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetClanName::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetClanOfficerByIndex
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_GetClanOfficerByIndex final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Officer;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B2[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetClanOfficerByIndex) == 0x000008, "Wrong alignment on SteamProFriends_GetClanOfficerByIndex");
static_assert(sizeof(SteamProFriends_GetClanOfficerByIndex) == 0x000018, "Wrong size on SteamProFriends_GetClanOfficerByIndex");
static_assert(offsetof(SteamProFriends_GetClanOfficerByIndex, SteamIDClan) == 0x000000, "Member 'SteamProFriends_GetClanOfficerByIndex::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanOfficerByIndex, Officer) == 0x000008, "Member 'SteamProFriends_GetClanOfficerByIndex::Officer' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanOfficerByIndex, ReturnValue) == 0x000010, "Member 'SteamProFriends_GetClanOfficerByIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetClanOfficerCount
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetClanOfficerCount final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B3[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetClanOfficerCount) == 0x000008, "Wrong alignment on SteamProFriends_GetClanOfficerCount");
static_assert(sizeof(SteamProFriends_GetClanOfficerCount) == 0x000010, "Wrong size on SteamProFriends_GetClanOfficerCount");
static_assert(offsetof(SteamProFriends_GetClanOfficerCount, SteamIDClan) == 0x000000, "Member 'SteamProFriends_GetClanOfficerCount::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanOfficerCount, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetClanOfficerCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetClanOwner
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetClanOwner final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetClanOwner) == 0x000008, "Wrong alignment on SteamProFriends_GetClanOwner");
static_assert(sizeof(SteamProFriends_GetClanOwner) == 0x000010, "Wrong size on SteamProFriends_GetClanOwner");
static_assert(offsetof(SteamProFriends_GetClanOwner, SteamIDClan) == 0x000000, "Member 'SteamProFriends_GetClanOwner::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanOwner, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetClanOwner::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetClanTag
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_GetClanTag final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetClanTag) == 0x000008, "Wrong alignment on SteamProFriends_GetClanTag");
static_assert(sizeof(SteamProFriends_GetClanTag) == 0x000018, "Wrong size on SteamProFriends_GetClanTag");
static_assert(offsetof(SteamProFriends_GetClanTag, SteamIDClan) == 0x000000, "Member 'SteamProFriends_GetClanTag::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetClanTag, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetClanTag::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetCoplayFriend
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetCoplayFriend final
{
public:
	int32                                         CoplayFriend;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetCoplayFriend) == 0x000008, "Wrong alignment on SteamProFriends_GetCoplayFriend");
static_assert(sizeof(SteamProFriends_GetCoplayFriend) == 0x000010, "Wrong size on SteamProFriends_GetCoplayFriend");
static_assert(offsetof(SteamProFriends_GetCoplayFriend, CoplayFriend) == 0x000000, "Member 'SteamProFriends_GetCoplayFriend::CoplayFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetCoplayFriend, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetCoplayFriend::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetCoplayFriendCount
// 0x0004 (0x0004 - 0x0000)
struct SteamProFriends_GetCoplayFriendCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetCoplayFriendCount) == 0x000004, "Wrong alignment on SteamProFriends_GetCoplayFriendCount");
static_assert(sizeof(SteamProFriends_GetCoplayFriendCount) == 0x000004, "Wrong size on SteamProFriends_GetCoplayFriendCount");
static_assert(offsetof(SteamProFriends_GetCoplayFriendCount, ReturnValue) == 0x000000, "Member 'SteamProFriends_GetCoplayFriendCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendByIndex
// 0x0020 (0x0020 - 0x0000)
struct SteamProFriends_GetFriendByIndex final
{
public:
	int32                                         Ifriend;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESteamFriendFlags>                     Param_Flags;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamID                               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetFriendByIndex) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendByIndex");
static_assert(sizeof(SteamProFriends_GetFriendByIndex) == 0x000020, "Wrong size on SteamProFriends_GetFriendByIndex");
static_assert(offsetof(SteamProFriends_GetFriendByIndex, Ifriend) == 0x000000, "Member 'SteamProFriends_GetFriendByIndex::Ifriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendByIndex, Param_Flags) == 0x000008, "Member 'SteamProFriends_GetFriendByIndex::Param_Flags' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendByIndex, ReturnValue) == 0x000018, "Member 'SteamProFriends_GetFriendByIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendCoplayGame
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetFriendCoplayGame final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B6[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetFriendCoplayGame) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendCoplayGame");
static_assert(sizeof(SteamProFriends_GetFriendCoplayGame) == 0x000010, "Wrong size on SteamProFriends_GetFriendCoplayGame");
static_assert(offsetof(SteamProFriends_GetFriendCoplayGame, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetFriendCoplayGame::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendCoplayGame, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetFriendCoplayGame::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendCoplayTime
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetFriendCoplayTime final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B7[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetFriendCoplayTime) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendCoplayTime");
static_assert(sizeof(SteamProFriends_GetFriendCoplayTime) == 0x000010, "Wrong size on SteamProFriends_GetFriendCoplayTime");
static_assert(offsetof(SteamProFriends_GetFriendCoplayTime, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetFriendCoplayTime::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendCoplayTime, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetFriendCoplayTime::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendCount
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_GetFriendCount final
{
public:
	TArray<ESteamFriendFlags>                     Param_Flags;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B8[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetFriendCount) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendCount");
static_assert(sizeof(SteamProFriends_GetFriendCount) == 0x000018, "Wrong size on SteamProFriends_GetFriendCount");
static_assert(offsetof(SteamProFriends_GetFriendCount, Param_Flags) == 0x000000, "Member 'SteamProFriends_GetFriendCount::Param_Flags' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendCount, ReturnValue) == 0x000010, "Member 'SteamProFriends_GetFriendCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendCountFromSource
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetFriendCountFromSource final
{
public:
	struct FSteamID                               SteamIDSource;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B9[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetFriendCountFromSource) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendCountFromSource");
static_assert(sizeof(SteamProFriends_GetFriendCountFromSource) == 0x000010, "Wrong size on SteamProFriends_GetFriendCountFromSource");
static_assert(offsetof(SteamProFriends_GetFriendCountFromSource, SteamIDSource) == 0x000000, "Member 'SteamProFriends_GetFriendCountFromSource::SteamIDSource' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendCountFromSource, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetFriendCountFromSource::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendFromSourceByIndex
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_GetFriendFromSourceByIndex final
{
public:
	struct FSteamID                               SteamIDSource;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Ifriend;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetFriendFromSourceByIndex) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendFromSourceByIndex");
static_assert(sizeof(SteamProFriends_GetFriendFromSourceByIndex) == 0x000018, "Wrong size on SteamProFriends_GetFriendFromSourceByIndex");
static_assert(offsetof(SteamProFriends_GetFriendFromSourceByIndex, SteamIDSource) == 0x000000, "Member 'SteamProFriends_GetFriendFromSourceByIndex::SteamIDSource' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendFromSourceByIndex, Ifriend) == 0x000008, "Member 'SteamProFriends_GetFriendFromSourceByIndex::Ifriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendFromSourceByIndex, ReturnValue) == 0x000010, "Member 'SteamProFriends_GetFriendFromSourceByIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendGamePlayed
// 0x0038 (0x0038 - 0x0000)
struct SteamProFriends_GetFriendGamePlayed final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamGameID                           GameId;                                            // 0x0008(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 GameIP;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDLobby;                                      // 0x0028(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BB[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetFriendGamePlayed) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendGamePlayed");
static_assert(sizeof(SteamProFriends_GetFriendGamePlayed) == 0x000038, "Wrong size on SteamProFriends_GetFriendGamePlayed");
static_assert(offsetof(SteamProFriends_GetFriendGamePlayed, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetFriendGamePlayed::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendGamePlayed, GameId) == 0x000008, "Member 'SteamProFriends_GetFriendGamePlayed::GameId' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendGamePlayed, GameIP) == 0x000010, "Member 'SteamProFriends_GetFriendGamePlayed::GameIP' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendGamePlayed, ConnectionPort) == 0x000020, "Member 'SteamProFriends_GetFriendGamePlayed::ConnectionPort' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendGamePlayed, QueryPort) == 0x000024, "Member 'SteamProFriends_GetFriendGamePlayed::QueryPort' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendGamePlayed, SteamIDLobby) == 0x000028, "Member 'SteamProFriends_GetFriendGamePlayed::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendGamePlayed, ReturnValue) == 0x000030, "Member 'SteamProFriends_GetFriendGamePlayed::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendMessage
// 0x0028 (0x0028 - 0x0000)
struct SteamProFriends_GetFriendMessage final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MessageID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BC[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamChatEntryType                           ChatEntryType;                                     // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BD[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetFriendMessage) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendMessage");
static_assert(sizeof(SteamProFriends_GetFriendMessage) == 0x000028, "Wrong size on SteamProFriends_GetFriendMessage");
static_assert(offsetof(SteamProFriends_GetFriendMessage, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetFriendMessage::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendMessage, MessageID) == 0x000008, "Member 'SteamProFriends_GetFriendMessage::MessageID' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendMessage, Text) == 0x000010, "Member 'SteamProFriends_GetFriendMessage::Text' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendMessage, ChatEntryType) == 0x000020, "Member 'SteamProFriends_GetFriendMessage::ChatEntryType' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendMessage, ReturnValue) == 0x000024, "Member 'SteamProFriends_GetFriendMessage::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendPersonaName
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_GetFriendPersonaName final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetFriendPersonaName) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendPersonaName");
static_assert(sizeof(SteamProFriends_GetFriendPersonaName) == 0x000018, "Wrong size on SteamProFriends_GetFriendPersonaName");
static_assert(offsetof(SteamProFriends_GetFriendPersonaName, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetFriendPersonaName::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendPersonaName, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetFriendPersonaName::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendPersonaNameHistory
// 0x0020 (0x0020 - 0x0000)
struct SteamProFriends_GetFriendPersonaNameHistory final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PersonaName;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BE[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetFriendPersonaNameHistory) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendPersonaNameHistory");
static_assert(sizeof(SteamProFriends_GetFriendPersonaNameHistory) == 0x000020, "Wrong size on SteamProFriends_GetFriendPersonaNameHistory");
static_assert(offsetof(SteamProFriends_GetFriendPersonaNameHistory, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetFriendPersonaNameHistory::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendPersonaNameHistory, PersonaName) == 0x000008, "Member 'SteamProFriends_GetFriendPersonaNameHistory::PersonaName' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendPersonaNameHistory, ReturnValue) == 0x000010, "Member 'SteamProFriends_GetFriendPersonaNameHistory::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendPersonaState
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetFriendPersonaState final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamPersonaState                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetFriendPersonaState) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendPersonaState");
static_assert(sizeof(SteamProFriends_GetFriendPersonaState) == 0x000010, "Wrong size on SteamProFriends_GetFriendPersonaState");
static_assert(offsetof(SteamProFriends_GetFriendPersonaState, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetFriendPersonaState::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendPersonaState, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetFriendPersonaState::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendRelationship
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetFriendRelationship final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamFriendRelationship                      ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetFriendRelationship) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendRelationship");
static_assert(sizeof(SteamProFriends_GetFriendRelationship) == 0x000010, "Wrong size on SteamProFriends_GetFriendRelationship");
static_assert(offsetof(SteamProFriends_GetFriendRelationship, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetFriendRelationship::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendRelationship, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetFriendRelationship::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendRichPresence
// 0x0028 (0x0028 - 0x0000)
struct SteamProFriends_GetFriendRichPresence final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetFriendRichPresence) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendRichPresence");
static_assert(sizeof(SteamProFriends_GetFriendRichPresence) == 0x000028, "Wrong size on SteamProFriends_GetFriendRichPresence");
static_assert(offsetof(SteamProFriends_GetFriendRichPresence, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetFriendRichPresence::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendRichPresence, Key) == 0x000008, "Member 'SteamProFriends_GetFriendRichPresence::Key' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendRichPresence, ReturnValue) == 0x000018, "Member 'SteamProFriends_GetFriendRichPresence::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendRichPresenceKeyByIndex
// 0x0020 (0x0020 - 0x0000)
struct SteamProFriends_GetFriendRichPresenceKeyByIndex final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Key;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetFriendRichPresenceKeyByIndex) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendRichPresenceKeyByIndex");
static_assert(sizeof(SteamProFriends_GetFriendRichPresenceKeyByIndex) == 0x000020, "Wrong size on SteamProFriends_GetFriendRichPresenceKeyByIndex");
static_assert(offsetof(SteamProFriends_GetFriendRichPresenceKeyByIndex, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetFriendRichPresenceKeyByIndex::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendRichPresenceKeyByIndex, Key) == 0x000008, "Member 'SteamProFriends_GetFriendRichPresenceKeyByIndex::Key' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendRichPresenceKeyByIndex, ReturnValue) == 0x000010, "Member 'SteamProFriends_GetFriendRichPresenceKeyByIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendRichPresenceKeyCount
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetFriendRichPresenceKeyCount final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C2[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetFriendRichPresenceKeyCount) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendRichPresenceKeyCount");
static_assert(sizeof(SteamProFriends_GetFriendRichPresenceKeyCount) == 0x000010, "Wrong size on SteamProFriends_GetFriendRichPresenceKeyCount");
static_assert(offsetof(SteamProFriends_GetFriendRichPresenceKeyCount, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetFriendRichPresenceKeyCount::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendRichPresenceKeyCount, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetFriendRichPresenceKeyCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendsGroupCount
// 0x0004 (0x0004 - 0x0000)
struct SteamProFriends_GetFriendsGroupCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetFriendsGroupCount) == 0x000004, "Wrong alignment on SteamProFriends_GetFriendsGroupCount");
static_assert(sizeof(SteamProFriends_GetFriendsGroupCount) == 0x000004, "Wrong size on SteamProFriends_GetFriendsGroupCount");
static_assert(offsetof(SteamProFriends_GetFriendsGroupCount, ReturnValue) == 0x000000, "Member 'SteamProFriends_GetFriendsGroupCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendsGroupIDByIndex
// 0x0008 (0x0008 - 0x0000)
struct SteamProFriends_GetFriendsGroupIDByIndex final
{
public:
	int32                                         FriendGroup;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamFriendsGroupID                   ReturnValue;                                       // 0x0004(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C3[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetFriendsGroupIDByIndex) == 0x000004, "Wrong alignment on SteamProFriends_GetFriendsGroupIDByIndex");
static_assert(sizeof(SteamProFriends_GetFriendsGroupIDByIndex) == 0x000008, "Wrong size on SteamProFriends_GetFriendsGroupIDByIndex");
static_assert(offsetof(SteamProFriends_GetFriendsGroupIDByIndex, FriendGroup) == 0x000000, "Member 'SteamProFriends_GetFriendsGroupIDByIndex::FriendGroup' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendsGroupIDByIndex, ReturnValue) == 0x000004, "Member 'SteamProFriends_GetFriendsGroupIDByIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendsGroupMembersCount
// 0x0008 (0x0008 - 0x0000)
struct SteamProFriends_GetFriendsGroupMembersCount final
{
public:
	struct FSteamFriendsGroupID                   FriendsGroupID;                                    // 0x0000(0x0002)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C4[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetFriendsGroupMembersCount) == 0x000004, "Wrong alignment on SteamProFriends_GetFriendsGroupMembersCount");
static_assert(sizeof(SteamProFriends_GetFriendsGroupMembersCount) == 0x000008, "Wrong size on SteamProFriends_GetFriendsGroupMembersCount");
static_assert(offsetof(SteamProFriends_GetFriendsGroupMembersCount, FriendsGroupID) == 0x000000, "Member 'SteamProFriends_GetFriendsGroupMembersCount::FriendsGroupID' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendsGroupMembersCount, ReturnValue) == 0x000004, "Member 'SteamProFriends_GetFriendsGroupMembersCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendsGroupMembersList
// 0x0020 (0x0020 - 0x0000)
struct SteamProFriends_GetFriendsGroupMembersList final
{
public:
	struct FSteamFriendsGroupID                   FriendsGroupID;                                    // 0x0000(0x0002)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C5[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamID>                       SteamIDMembers;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MembersCount;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C6[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetFriendsGroupMembersList) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendsGroupMembersList");
static_assert(sizeof(SteamProFriends_GetFriendsGroupMembersList) == 0x000020, "Wrong size on SteamProFriends_GetFriendsGroupMembersList");
static_assert(offsetof(SteamProFriends_GetFriendsGroupMembersList, FriendsGroupID) == 0x000000, "Member 'SteamProFriends_GetFriendsGroupMembersList::FriendsGroupID' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendsGroupMembersList, SteamIDMembers) == 0x000008, "Member 'SteamProFriends_GetFriendsGroupMembersList::SteamIDMembers' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendsGroupMembersList, MembersCount) == 0x000018, "Member 'SteamProFriends_GetFriendsGroupMembersList::MembersCount' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendsGroupName
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_GetFriendsGroupName final
{
public:
	struct FSteamFriendsGroupID                   FriendsGroupID;                                    // 0x0000(0x0002)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C7[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetFriendsGroupName) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendsGroupName");
static_assert(sizeof(SteamProFriends_GetFriendsGroupName) == 0x000018, "Wrong size on SteamProFriends_GetFriendsGroupName");
static_assert(offsetof(SteamProFriends_GetFriendsGroupName, FriendsGroupID) == 0x000000, "Member 'SteamProFriends_GetFriendsGroupName::FriendsGroupID' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendsGroupName, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetFriendsGroupName::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFriendSteamLevel
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetFriendSteamLevel final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C8[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_GetFriendSteamLevel) == 0x000008, "Wrong alignment on SteamProFriends_GetFriendSteamLevel");
static_assert(sizeof(SteamProFriends_GetFriendSteamLevel) == 0x000010, "Wrong size on SteamProFriends_GetFriendSteamLevel");
static_assert(offsetof(SteamProFriends_GetFriendSteamLevel, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetFriendSteamLevel::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFriendSteamLevel, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetFriendSteamLevel::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetLargeFriendAvatar
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetLargeFriendAvatar final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetLargeFriendAvatar) == 0x000008, "Wrong alignment on SteamProFriends_GetLargeFriendAvatar");
static_assert(sizeof(SteamProFriends_GetLargeFriendAvatar) == 0x000010, "Wrong size on SteamProFriends_GetLargeFriendAvatar");
static_assert(offsetof(SteamProFriends_GetLargeFriendAvatar, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetLargeFriendAvatar::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetLargeFriendAvatar, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetLargeFriendAvatar::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetMediumFriendAvatar
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetMediumFriendAvatar final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetMediumFriendAvatar) == 0x000008, "Wrong alignment on SteamProFriends_GetMediumFriendAvatar");
static_assert(sizeof(SteamProFriends_GetMediumFriendAvatar) == 0x000010, "Wrong size on SteamProFriends_GetMediumFriendAvatar");
static_assert(offsetof(SteamProFriends_GetMediumFriendAvatar, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetMediumFriendAvatar::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetMediumFriendAvatar, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetMediumFriendAvatar::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetPersonaName
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetPersonaName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetPersonaName) == 0x000008, "Wrong alignment on SteamProFriends_GetPersonaName");
static_assert(sizeof(SteamProFriends_GetPersonaName) == 0x000010, "Wrong size on SteamProFriends_GetPersonaName");
static_assert(offsetof(SteamProFriends_GetPersonaName, ReturnValue) == 0x000000, "Member 'SteamProFriends_GetPersonaName::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetPersonaName_Pure
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetPersonaName_Pure final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetPersonaName_Pure) == 0x000008, "Wrong alignment on SteamProFriends_GetPersonaName_Pure");
static_assert(sizeof(SteamProFriends_GetPersonaName_Pure) == 0x000010, "Wrong size on SteamProFriends_GetPersonaName_Pure");
static_assert(offsetof(SteamProFriends_GetPersonaName_Pure, ReturnValue) == 0x000000, "Member 'SteamProFriends_GetPersonaName_Pure::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetPersonaState
// 0x0001 (0x0001 - 0x0000)
struct SteamProFriends_GetPersonaState final
{
public:
	ESteamPersonaState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetPersonaState) == 0x000001, "Wrong alignment on SteamProFriends_GetPersonaState");
static_assert(sizeof(SteamProFriends_GetPersonaState) == 0x000001, "Wrong size on SteamProFriends_GetPersonaState");
static_assert(offsetof(SteamProFriends_GetPersonaState, ReturnValue) == 0x000000, "Member 'SteamProFriends_GetPersonaState::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetPersonaState_Pure
// 0x0001 (0x0001 - 0x0000)
struct SteamProFriends_GetPersonaState_Pure final
{
public:
	ESteamPersonaState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetPersonaState_Pure) == 0x000001, "Wrong alignment on SteamProFriends_GetPersonaState_Pure");
static_assert(sizeof(SteamProFriends_GetPersonaState_Pure) == 0x000001, "Wrong size on SteamProFriends_GetPersonaState_Pure");
static_assert(offsetof(SteamProFriends_GetPersonaState_Pure, ReturnValue) == 0x000000, "Member 'SteamProFriends_GetPersonaState_Pure::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetPlayerNickname
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_GetPlayerNickname final
{
public:
	struct FSteamID                               SteamIDPlayer;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetPlayerNickname) == 0x000008, "Wrong alignment on SteamProFriends_GetPlayerNickname");
static_assert(sizeof(SteamProFriends_GetPlayerNickname) == 0x000018, "Wrong size on SteamProFriends_GetPlayerNickname");
static_assert(offsetof(SteamProFriends_GetPlayerNickname, SteamIDPlayer) == 0x000000, "Member 'SteamProFriends_GetPlayerNickname::SteamIDPlayer' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetPlayerNickname, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetPlayerNickname::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetPlayerNickname_Pure
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_GetPlayerNickname_Pure final
{
public:
	struct FSteamID                               SteamIDPlayer;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetPlayerNickname_Pure) == 0x000008, "Wrong alignment on SteamProFriends_GetPlayerNickname_Pure");
static_assert(sizeof(SteamProFriends_GetPlayerNickname_Pure) == 0x000018, "Wrong size on SteamProFriends_GetPlayerNickname_Pure");
static_assert(offsetof(SteamProFriends_GetPlayerNickname_Pure, SteamIDPlayer) == 0x000000, "Member 'SteamProFriends_GetPlayerNickname_Pure::SteamIDPlayer' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetPlayerNickname_Pure, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetPlayerNickname_Pure::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetProfileItemPropertyString
// 0x0020 (0x0020 - 0x0000)
struct SteamProFriends_GetProfileItemPropertyString final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCommunityProfileItemType                ItemType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCommunityProfileItemProperty            Prop;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C9[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetProfileItemPropertyString) == 0x000008, "Wrong alignment on SteamProFriends_GetProfileItemPropertyString");
static_assert(sizeof(SteamProFriends_GetProfileItemPropertyString) == 0x000020, "Wrong size on SteamProFriends_GetProfileItemPropertyString");
static_assert(offsetof(SteamProFriends_GetProfileItemPropertyString, SteamID) == 0x000000, "Member 'SteamProFriends_GetProfileItemPropertyString::SteamID' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetProfileItemPropertyString, ItemType) == 0x000008, "Member 'SteamProFriends_GetProfileItemPropertyString::ItemType' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetProfileItemPropertyString, Prop) == 0x000009, "Member 'SteamProFriends_GetProfileItemPropertyString::Prop' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetProfileItemPropertyString, ReturnValue) == 0x000010, "Member 'SteamProFriends_GetProfileItemPropertyString::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetProfileItemPropertyUint
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetProfileItemPropertyUint final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCommunityProfileItemType                ItemType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCommunityProfileItemProperty            Prop;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CA[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetProfileItemPropertyUint) == 0x000008, "Wrong alignment on SteamProFriends_GetProfileItemPropertyUint");
static_assert(sizeof(SteamProFriends_GetProfileItemPropertyUint) == 0x000010, "Wrong size on SteamProFriends_GetProfileItemPropertyUint");
static_assert(offsetof(SteamProFriends_GetProfileItemPropertyUint, SteamID) == 0x000000, "Member 'SteamProFriends_GetProfileItemPropertyUint::SteamID' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetProfileItemPropertyUint, ItemType) == 0x000008, "Member 'SteamProFriends_GetProfileItemPropertyUint::ItemType' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetProfileItemPropertyUint, Prop) == 0x000009, "Member 'SteamProFriends_GetProfileItemPropertyUint::Prop' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetProfileItemPropertyUint, ReturnValue) == 0x00000C, "Member 'SteamProFriends_GetProfileItemPropertyUint::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetSmallFriendAvatar
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetSmallFriendAvatar final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetSmallFriendAvatar) == 0x000008, "Wrong alignment on SteamProFriends_GetSmallFriendAvatar");
static_assert(sizeof(SteamProFriends_GetSmallFriendAvatar) == 0x000010, "Wrong size on SteamProFriends_GetSmallFriendAvatar");
static_assert(offsetof(SteamProFriends_GetSmallFriendAvatar, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_GetSmallFriendAvatar::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetSmallFriendAvatar, ReturnValue) == 0x000008, "Member 'SteamProFriends_GetSmallFriendAvatar::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetSteamFriends
// 0x0008 (0x0008 - 0x0000)
struct SteamProFriends_GetSteamFriends final
{
public:
	class USteamProFriends*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetSteamFriends) == 0x000008, "Wrong alignment on SteamProFriends_GetSteamFriends");
static_assert(sizeof(SteamProFriends_GetSteamFriends) == 0x000008, "Wrong size on SteamProFriends_GetSteamFriends");
static_assert(offsetof(SteamProFriends_GetSteamFriends, ReturnValue) == 0x000000, "Member 'SteamProFriends_GetSteamFriends::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetUserRestrictions
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_GetUserRestrictions final
{
public:
	TArray<ESteamUserRestriction>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetUserRestrictions) == 0x000008, "Wrong alignment on SteamProFriends_GetUserRestrictions");
static_assert(sizeof(SteamProFriends_GetUserRestrictions) == 0x000010, "Wrong size on SteamProFriends_GetUserRestrictions");
static_assert(offsetof(SteamProFriends_GetUserRestrictions, ReturnValue) == 0x000000, "Member 'SteamProFriends_GetUserRestrictions::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.HasFriend
// 0x0020 (0x0020 - 0x0000)
struct SteamProFriends_HasFriend final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<ESteamFriendFlags>                     Param_Flags;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CB[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_HasFriend) == 0x000008, "Wrong alignment on SteamProFriends_HasFriend");
static_assert(sizeof(SteamProFriends_HasFriend) == 0x000020, "Wrong size on SteamProFriends_HasFriend");
static_assert(offsetof(SteamProFriends_HasFriend, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_HasFriend::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_HasFriend, Param_Flags) == 0x000008, "Member 'SteamProFriends_HasFriend::Param_Flags' has a wrong offset!");
static_assert(offsetof(SteamProFriends_HasFriend, ReturnValue) == 0x000018, "Member 'SteamProFriends_HasFriend::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.InviteUserToGame
// 0x0020 (0x0020 - 0x0000)
struct SteamProFriends_InviteUserToGame final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ConnectString;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CC[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_InviteUserToGame) == 0x000008, "Wrong alignment on SteamProFriends_InviteUserToGame");
static_assert(sizeof(SteamProFriends_InviteUserToGame) == 0x000020, "Wrong size on SteamProFriends_InviteUserToGame");
static_assert(offsetof(SteamProFriends_InviteUserToGame, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_InviteUserToGame::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_InviteUserToGame, ConnectString) == 0x000008, "Member 'SteamProFriends_InviteUserToGame::ConnectString' has a wrong offset!");
static_assert(offsetof(SteamProFriends_InviteUserToGame, ReturnValue) == 0x000018, "Member 'SteamProFriends_InviteUserToGame::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.IsClanChatAdmin
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_IsClanChatAdmin final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_IsClanChatAdmin) == 0x000008, "Wrong alignment on SteamProFriends_IsClanChatAdmin");
static_assert(sizeof(SteamProFriends_IsClanChatAdmin) == 0x000018, "Wrong size on SteamProFriends_IsClanChatAdmin");
static_assert(offsetof(SteamProFriends_IsClanChatAdmin, SteamIDClanChat) == 0x000000, "Member 'SteamProFriends_IsClanChatAdmin::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(SteamProFriends_IsClanChatAdmin, SteamIDUser) == 0x000008, "Member 'SteamProFriends_IsClanChatAdmin::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProFriends_IsClanChatAdmin, ReturnValue) == 0x000010, "Member 'SteamProFriends_IsClanChatAdmin::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.IsClanChatWindowOpenInSteam
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_IsClanChatWindowOpenInSteam final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_IsClanChatWindowOpenInSteam) == 0x000008, "Wrong alignment on SteamProFriends_IsClanChatWindowOpenInSteam");
static_assert(sizeof(SteamProFriends_IsClanChatWindowOpenInSteam) == 0x000010, "Wrong size on SteamProFriends_IsClanChatWindowOpenInSteam");
static_assert(offsetof(SteamProFriends_IsClanChatWindowOpenInSteam, SteamIDClanChat) == 0x000000, "Member 'SteamProFriends_IsClanChatWindowOpenInSteam::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(SteamProFriends_IsClanChatWindowOpenInSteam, ReturnValue) == 0x000008, "Member 'SteamProFriends_IsClanChatWindowOpenInSteam::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.IsClanOfficialGameGroup
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_IsClanOfficialGameGroup final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_IsClanOfficialGameGroup) == 0x000008, "Wrong alignment on SteamProFriends_IsClanOfficialGameGroup");
static_assert(sizeof(SteamProFriends_IsClanOfficialGameGroup) == 0x000010, "Wrong size on SteamProFriends_IsClanOfficialGameGroup");
static_assert(offsetof(SteamProFriends_IsClanOfficialGameGroup, SteamIDClan) == 0x000000, "Member 'SteamProFriends_IsClanOfficialGameGroup::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamProFriends_IsClanOfficialGameGroup, ReturnValue) == 0x000008, "Member 'SteamProFriends_IsClanOfficialGameGroup::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.IsClanPublic
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_IsClanPublic final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_IsClanPublic) == 0x000008, "Wrong alignment on SteamProFriends_IsClanPublic");
static_assert(sizeof(SteamProFriends_IsClanPublic) == 0x000010, "Wrong size on SteamProFriends_IsClanPublic");
static_assert(offsetof(SteamProFriends_IsClanPublic, SteamIDClan) == 0x000000, "Member 'SteamProFriends_IsClanPublic::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamProFriends_IsClanPublic, ReturnValue) == 0x000008, "Member 'SteamProFriends_IsClanPublic::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.IsUserInSource
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_IsUserInSource final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDSource;                                     // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D1[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_IsUserInSource) == 0x000008, "Wrong alignment on SteamProFriends_IsUserInSource");
static_assert(sizeof(SteamProFriends_IsUserInSource) == 0x000018, "Wrong size on SteamProFriends_IsUserInSource");
static_assert(offsetof(SteamProFriends_IsUserInSource, SteamIDUser) == 0x000000, "Member 'SteamProFriends_IsUserInSource::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProFriends_IsUserInSource, SteamIDSource) == 0x000008, "Member 'SteamProFriends_IsUserInSource::SteamIDSource' has a wrong offset!");
static_assert(offsetof(SteamProFriends_IsUserInSource, ReturnValue) == 0x000010, "Member 'SteamProFriends_IsUserInSource::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.LeaveClanChatRoom
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_LeaveClanChatRoom final
{
public:
	struct FSteamID                               SteamIDClan;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_LeaveClanChatRoom) == 0x000008, "Wrong alignment on SteamProFriends_LeaveClanChatRoom");
static_assert(sizeof(SteamProFriends_LeaveClanChatRoom) == 0x000010, "Wrong size on SteamProFriends_LeaveClanChatRoom");
static_assert(offsetof(SteamProFriends_LeaveClanChatRoom, SteamIDClan) == 0x000000, "Member 'SteamProFriends_LeaveClanChatRoom::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamProFriends_LeaveClanChatRoom, ReturnValue) == 0x000008, "Member 'SteamProFriends_LeaveClanChatRoom::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.OpenClanChatWindowInSteam
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_OpenClanChatWindowInSteam final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_OpenClanChatWindowInSteam) == 0x000008, "Wrong alignment on SteamProFriends_OpenClanChatWindowInSteam");
static_assert(sizeof(SteamProFriends_OpenClanChatWindowInSteam) == 0x000010, "Wrong size on SteamProFriends_OpenClanChatWindowInSteam");
static_assert(offsetof(SteamProFriends_OpenClanChatWindowInSteam, SteamIDClanChat) == 0x000000, "Member 'SteamProFriends_OpenClanChatWindowInSteam::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(SteamProFriends_OpenClanChatWindowInSteam, ReturnValue) == 0x000008, "Member 'SteamProFriends_OpenClanChatWindowInSteam::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.RegisterProtocolInOverlayBrowser
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_RegisterProtocolInOverlayBrowser final
{
public:
	class FString                                 Protocol;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D4[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_RegisterProtocolInOverlayBrowser) == 0x000008, "Wrong alignment on SteamProFriends_RegisterProtocolInOverlayBrowser");
static_assert(sizeof(SteamProFriends_RegisterProtocolInOverlayBrowser) == 0x000018, "Wrong size on SteamProFriends_RegisterProtocolInOverlayBrowser");
static_assert(offsetof(SteamProFriends_RegisterProtocolInOverlayBrowser, Protocol) == 0x000000, "Member 'SteamProFriends_RegisterProtocolInOverlayBrowser::Protocol' has a wrong offset!");
static_assert(offsetof(SteamProFriends_RegisterProtocolInOverlayBrowser, ReturnValue) == 0x000010, "Member 'SteamProFriends_RegisterProtocolInOverlayBrowser::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.ReplyToFriendMessage
// 0x0020 (0x0020 - 0x0000)
struct SteamProFriends_ReplyToFriendMessage final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 MsgToSend;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D5[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_ReplyToFriendMessage) == 0x000008, "Wrong alignment on SteamProFriends_ReplyToFriendMessage");
static_assert(sizeof(SteamProFriends_ReplyToFriendMessage) == 0x000020, "Wrong size on SteamProFriends_ReplyToFriendMessage");
static_assert(offsetof(SteamProFriends_ReplyToFriendMessage, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_ReplyToFriendMessage::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_ReplyToFriendMessage, MsgToSend) == 0x000008, "Member 'SteamProFriends_ReplyToFriendMessage::MsgToSend' has a wrong offset!");
static_assert(offsetof(SteamProFriends_ReplyToFriendMessage, ReturnValue) == 0x000018, "Member 'SteamProFriends_ReplyToFriendMessage::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.RequestFriendRichPresence
// 0x0008 (0x0008 - 0x0000)
struct SteamProFriends_RequestFriendRichPresence final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_RequestFriendRichPresence) == 0x000008, "Wrong alignment on SteamProFriends_RequestFriendRichPresence");
static_assert(sizeof(SteamProFriends_RequestFriendRichPresence) == 0x000008, "Wrong size on SteamProFriends_RequestFriendRichPresence");
static_assert(offsetof(SteamProFriends_RequestFriendRichPresence, SteamIDFriend) == 0x000000, "Member 'SteamProFriends_RequestFriendRichPresence::SteamIDFriend' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.RequestUserInformation
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_RequestUserInformation final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRequireNameOnly;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D6[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_RequestUserInformation) == 0x000008, "Wrong alignment on SteamProFriends_RequestUserInformation");
static_assert(sizeof(SteamProFriends_RequestUserInformation) == 0x000010, "Wrong size on SteamProFriends_RequestUserInformation");
static_assert(offsetof(SteamProFriends_RequestUserInformation, SteamIDUser) == 0x000000, "Member 'SteamProFriends_RequestUserInformation::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProFriends_RequestUserInformation, bRequireNameOnly) == 0x000008, "Member 'SteamProFriends_RequestUserInformation::bRequireNameOnly' has a wrong offset!");
static_assert(offsetof(SteamProFriends_RequestUserInformation, ReturnValue) == 0x000009, "Member 'SteamProFriends_RequestUserInformation::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.SendClanChatMessage
// 0x0020 (0x0020 - 0x0000)
struct SteamProFriends_SendClanChatMessage final
{
public:
	struct FSteamID                               SteamIDClanChat;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D7[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_SendClanChatMessage) == 0x000008, "Wrong alignment on SteamProFriends_SendClanChatMessage");
static_assert(sizeof(SteamProFriends_SendClanChatMessage) == 0x000020, "Wrong size on SteamProFriends_SendClanChatMessage");
static_assert(offsetof(SteamProFriends_SendClanChatMessage, SteamIDClanChat) == 0x000000, "Member 'SteamProFriends_SendClanChatMessage::SteamIDClanChat' has a wrong offset!");
static_assert(offsetof(SteamProFriends_SendClanChatMessage, Text) == 0x000008, "Member 'SteamProFriends_SendClanChatMessage::Text' has a wrong offset!");
static_assert(offsetof(SteamProFriends_SendClanChatMessage, ReturnValue) == 0x000018, "Member 'SteamProFriends_SendClanChatMessage::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.SetInGameVoiceSpeaking
// 0x0010 (0x0010 - 0x0000)
struct SteamProFriends_SetInGameVoiceSpeaking final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSpeaking;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_SetInGameVoiceSpeaking) == 0x000008, "Wrong alignment on SteamProFriends_SetInGameVoiceSpeaking");
static_assert(sizeof(SteamProFriends_SetInGameVoiceSpeaking) == 0x000010, "Wrong size on SteamProFriends_SetInGameVoiceSpeaking");
static_assert(offsetof(SteamProFriends_SetInGameVoiceSpeaking, SteamIDUser) == 0x000000, "Member 'SteamProFriends_SetInGameVoiceSpeaking::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProFriends_SetInGameVoiceSpeaking, bSpeaking) == 0x000008, "Member 'SteamProFriends_SetInGameVoiceSpeaking::bSpeaking' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.SetListenForFriendsMessages
// 0x0002 (0x0002 - 0x0000)
struct SteamProFriends_SetListenForFriendsMessages final
{
public:
	bool                                          bInterceptEnabled;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_SetListenForFriendsMessages) == 0x000001, "Wrong alignment on SteamProFriends_SetListenForFriendsMessages");
static_assert(sizeof(SteamProFriends_SetListenForFriendsMessages) == 0x000002, "Wrong size on SteamProFriends_SetListenForFriendsMessages");
static_assert(offsetof(SteamProFriends_SetListenForFriendsMessages, bInterceptEnabled) == 0x000000, "Member 'SteamProFriends_SetListenForFriendsMessages::bInterceptEnabled' has a wrong offset!");
static_assert(offsetof(SteamProFriends_SetListenForFriendsMessages, ReturnValue) == 0x000001, "Member 'SteamProFriends_SetListenForFriendsMessages::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.SetPlayedWith
// 0x0008 (0x0008 - 0x0000)
struct SteamProFriends_SetPlayedWith final
{
public:
	struct FSteamID                               SteamIDUserPlayedWith;                             // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_SetPlayedWith) == 0x000008, "Wrong alignment on SteamProFriends_SetPlayedWith");
static_assert(sizeof(SteamProFriends_SetPlayedWith) == 0x000008, "Wrong size on SteamProFriends_SetPlayedWith");
static_assert(offsetof(SteamProFriends_SetPlayedWith, SteamIDUserPlayedWith) == 0x000000, "Member 'SteamProFriends_SetPlayedWith::SteamIDUserPlayedWith' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.SetRichPresence
// 0x0028 (0x0028 - 0x0000)
struct SteamProFriends_SetRichPresence final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D9[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProFriends_SetRichPresence) == 0x000008, "Wrong alignment on SteamProFriends_SetRichPresence");
static_assert(sizeof(SteamProFriends_SetRichPresence) == 0x000028, "Wrong size on SteamProFriends_SetRichPresence");
static_assert(offsetof(SteamProFriends_SetRichPresence, Key) == 0x000000, "Member 'SteamProFriends_SetRichPresence::Key' has a wrong offset!");
static_assert(offsetof(SteamProFriends_SetRichPresence, Value) == 0x000010, "Member 'SteamProFriends_SetRichPresence::Value' has a wrong offset!");
static_assert(offsetof(SteamProFriends_SetRichPresence, ReturnValue) == 0x000020, "Member 'SteamProFriends_SetRichPresence::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.DownloadClanActivityCounts
// 0x0020 (0x0020 - 0x0000)
struct SteamProFriends_DownloadClanActivityCounts final
{
public:
	TDelegate<void(struct FDownloadClanActivityCountsResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSteamID>                       SteamIDClans;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_DownloadClanActivityCounts) == 0x000008, "Wrong alignment on SteamProFriends_DownloadClanActivityCounts");
static_assert(sizeof(SteamProFriends_DownloadClanActivityCounts) == 0x000020, "Wrong size on SteamProFriends_DownloadClanActivityCounts");
static_assert(offsetof(SteamProFriends_DownloadClanActivityCounts, Callback) == 0x000000, "Member 'SteamProFriends_DownloadClanActivityCounts::Callback' has a wrong offset!");
static_assert(offsetof(SteamProFriends_DownloadClanActivityCounts, SteamIDClans) == 0x000010, "Member 'SteamProFriends_DownloadClanActivityCounts::SteamIDClans' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.EnumerateFollowingList
// 0x0014 (0x0014 - 0x0000)
struct SteamProFriends_EnumerateFollowingList final
{
public:
	TDelegate<void(struct FFriendsEnumerateFollowingList& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_EnumerateFollowingList) == 0x000004, "Wrong alignment on SteamProFriends_EnumerateFollowingList");
static_assert(sizeof(SteamProFriends_EnumerateFollowingList) == 0x000014, "Wrong size on SteamProFriends_EnumerateFollowingList");
static_assert(offsetof(SteamProFriends_EnumerateFollowingList, Callback) == 0x000000, "Member 'SteamProFriends_EnumerateFollowingList::Callback' has a wrong offset!");
static_assert(offsetof(SteamProFriends_EnumerateFollowingList, StartIndex) == 0x000010, "Member 'SteamProFriends_EnumerateFollowingList::StartIndex' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.GetFollowerCount
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_GetFollowerCount final
{
public:
	TDelegate<void(struct FFriendsGetFollowerCount& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_GetFollowerCount) == 0x000008, "Wrong alignment on SteamProFriends_GetFollowerCount");
static_assert(sizeof(SteamProFriends_GetFollowerCount) == 0x000018, "Wrong size on SteamProFriends_GetFollowerCount");
static_assert(offsetof(SteamProFriends_GetFollowerCount, Callback) == 0x000000, "Member 'SteamProFriends_GetFollowerCount::Callback' has a wrong offset!");
static_assert(offsetof(SteamProFriends_GetFollowerCount, SteamID) == 0x000010, "Member 'SteamProFriends_GetFollowerCount::SteamID' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.IsFollowing
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_IsFollowing final
{
public:
	TDelegate<void(struct FFriendsIsFollowing& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_IsFollowing) == 0x000008, "Wrong alignment on SteamProFriends_IsFollowing");
static_assert(sizeof(SteamProFriends_IsFollowing) == 0x000018, "Wrong size on SteamProFriends_IsFollowing");
static_assert(offsetof(SteamProFriends_IsFollowing, Callback) == 0x000000, "Member 'SteamProFriends_IsFollowing::Callback' has a wrong offset!");
static_assert(offsetof(SteamProFriends_IsFollowing, SteamID) == 0x000010, "Member 'SteamProFriends_IsFollowing::SteamID' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.JoinClanChatRoom
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_JoinClanChatRoom final
{
public:
	TDelegate<void(struct FJoinClanChatRoomCompletionResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDClan;                                       // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_JoinClanChatRoom) == 0x000008, "Wrong alignment on SteamProFriends_JoinClanChatRoom");
static_assert(sizeof(SteamProFriends_JoinClanChatRoom) == 0x000018, "Wrong size on SteamProFriends_JoinClanChatRoom");
static_assert(offsetof(SteamProFriends_JoinClanChatRoom, Callback) == 0x000000, "Member 'SteamProFriends_JoinClanChatRoom::Callback' has a wrong offset!");
static_assert(offsetof(SteamProFriends_JoinClanChatRoom, SteamIDClan) == 0x000010, "Member 'SteamProFriends_JoinClanChatRoom::SteamIDClan' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.RequestClanOfficerList
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_RequestClanOfficerList final
{
public:
	TDelegate<void(struct FClanOfficerListResponse& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDClan;                                       // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_RequestClanOfficerList) == 0x000008, "Wrong alignment on SteamProFriends_RequestClanOfficerList");
static_assert(sizeof(SteamProFriends_RequestClanOfficerList) == 0x000018, "Wrong size on SteamProFriends_RequestClanOfficerList");
static_assert(offsetof(SteamProFriends_RequestClanOfficerList, Callback) == 0x000000, "Member 'SteamProFriends_RequestClanOfficerList::Callback' has a wrong offset!");
static_assert(offsetof(SteamProFriends_RequestClanOfficerList, SteamIDClan) == 0x000010, "Member 'SteamProFriends_RequestClanOfficerList::SteamIDClan' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.RequestEquippedProfileItems
// 0x0018 (0x0018 - 0x0000)
struct SteamProFriends_RequestEquippedProfileItems final
{
public:
	TDelegate<void(struct FEquippedProfileItems& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_RequestEquippedProfileItems) == 0x000008, "Wrong alignment on SteamProFriends_RequestEquippedProfileItems");
static_assert(sizeof(SteamProFriends_RequestEquippedProfileItems) == 0x000018, "Wrong size on SteamProFriends_RequestEquippedProfileItems");
static_assert(offsetof(SteamProFriends_RequestEquippedProfileItems, Callback) == 0x000000, "Member 'SteamProFriends_RequestEquippedProfileItems::Callback' has a wrong offset!");
static_assert(offsetof(SteamProFriends_RequestEquippedProfileItems, SteamID) == 0x000010, "Member 'SteamProFriends_RequestEquippedProfileItems::SteamID' has a wrong offset!");

// Function SteamCorePro.SteamProFriends.SetPersonaName
// 0x0020 (0x0020 - 0x0000)
struct SteamProFriends_SetPersonaName final
{
public:
	TDelegate<void(struct FSetPersonaNameResponse& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProFriends_SetPersonaName) == 0x000008, "Wrong alignment on SteamProFriends_SetPersonaName");
static_assert(sizeof(SteamProFriends_SetPersonaName) == 0x000020, "Wrong size on SteamProFriends_SetPersonaName");
static_assert(offsetof(SteamProFriends_SetPersonaName, Callback) == 0x000000, "Member 'SteamProFriends_SetPersonaName::Callback' has a wrong offset!");
static_assert(offsetof(SteamProFriends_SetPersonaName, Param_Name) == 0x000010, "Member 'SteamProFriends_SetPersonaName::Param_Name' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionSetPersonaName.SetPersonaNameAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DA[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProFriendsAsyncActionSetPersonaName* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync");
static_assert(sizeof(SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync) == 0x000028, "Wrong size on SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync");
static_assert(offsetof(SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync, Param_Name) == 0x000008, "Member 'SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync, Timeout) == 0x000018, "Member 'SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProFriendsAsyncActionSetPersonaName_SetPersonaNameAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionSetPersonaName.HandleCallback
// 0x0004 (0x0004 - 0x0000)
struct SteamCoreProFriendsAsyncActionSetPersonaName_HandleCallback final
{
public:
	struct FSetPersonaNameResponse                Data;                                              // 0x0000(0x0003)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProFriendsAsyncActionSetPersonaName_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreProFriendsAsyncActionSetPersonaName_HandleCallback");
static_assert(sizeof(SteamCoreProFriendsAsyncActionSetPersonaName_HandleCallback) == 0x000004, "Wrong size on SteamCoreProFriendsAsyncActionSetPersonaName_HandleCallback");
static_assert(offsetof(SteamCoreProFriendsAsyncActionSetPersonaName_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionSetPersonaName_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionSetPersonaName_HandleCallback, bWasSuccessful) == 0x000003, "Member 'SteamCoreProFriendsAsyncActionSetPersonaName_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionDownloadClanActivityCounts.DownloadClanActivityCountsAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSteamID>                       SteamIDClans;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DB[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProFriendsAsyncActionDownloadClanActivityCounts* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync");
static_assert(sizeof(SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync) == 0x000028, "Wrong size on SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync");
static_assert(offsetof(SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync, SteamIDClans) == 0x000008, "Member 'SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync::SteamIDClans' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync, Timeout) == 0x000018, "Member 'SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_DownloadClanActivityCountsAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionDownloadClanActivityCounts.HandleCallback
// 0x0002 (0x0002 - 0x0000)
struct SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_HandleCallback final
{
public:
	struct FDownloadClanActivityCountsResult      Data;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_HandleCallback");
static_assert(sizeof(SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_HandleCallback) == 0x000002, "Wrong size on SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_HandleCallback");
static_assert(offsetof(SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_HandleCallback, bWasSuccessful) == 0x000001, "Member 'SteamCoreProFriendsAsyncActionDownloadClanActivityCounts_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionRequestClanOfficerList.RequestClanOfficerListAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDClan;                                       // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DC[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProFriendsAsyncActionRequestClanOfficerList* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync");
static_assert(sizeof(SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync) == 0x000020, "Wrong size on SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync");
static_assert(offsetof(SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync, SteamIDClan) == 0x000008, "Member 'SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync, Timeout) == 0x000010, "Member 'SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProFriendsAsyncActionRequestClanOfficerList_RequestClanOfficerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionRequestClanOfficerList.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProFriendsAsyncActionRequestClanOfficerList_HandleCallback final
{
public:
	struct FClanOfficerListResponse               Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProFriendsAsyncActionRequestClanOfficerList_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionRequestClanOfficerList_HandleCallback");
static_assert(sizeof(SteamCoreProFriendsAsyncActionRequestClanOfficerList_HandleCallback) == 0x000018, "Wrong size on SteamCoreProFriendsAsyncActionRequestClanOfficerList_HandleCallback");
static_assert(offsetof(SteamCoreProFriendsAsyncActionRequestClanOfficerList_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionRequestClanOfficerList_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionRequestClanOfficerList_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProFriendsAsyncActionRequestClanOfficerList_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionJoinClanChatRoom.JoinClanChatRoomAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDClan;                                       // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DE[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProFriendsAsyncActionJoinClanChatRoom* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync");
static_assert(sizeof(SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync) == 0x000020, "Wrong size on SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync");
static_assert(offsetof(SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync, SteamIDClan) == 0x000008, "Member 'SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync::SteamIDClan' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync, Timeout) == 0x000010, "Member 'SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProFriendsAsyncActionJoinClanChatRoom_JoinClanChatRoomAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionJoinClanChatRoom.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProFriendsAsyncActionJoinClanChatRoom_HandleCallback final
{
public:
	struct FJoinClanChatRoomCompletionResult      Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DF[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProFriendsAsyncActionJoinClanChatRoom_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionJoinClanChatRoom_HandleCallback");
static_assert(sizeof(SteamCoreProFriendsAsyncActionJoinClanChatRoom_HandleCallback) == 0x000018, "Wrong size on SteamCoreProFriendsAsyncActionJoinClanChatRoom_HandleCallback");
static_assert(offsetof(SteamCoreProFriendsAsyncActionJoinClanChatRoom_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionJoinClanChatRoom_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionJoinClanChatRoom_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProFriendsAsyncActionJoinClanChatRoom_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionEnumerateFollowingList.EnumerateFollowingListAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProFriendsAsyncActionEnumerateFollowingList* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync");
static_assert(sizeof(SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync) == 0x000018, "Wrong size on SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync");
static_assert(offsetof(SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync, StartIndex) == 0x000008, "Member 'SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync::StartIndex' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync, Timeout) == 0x00000C, "Member 'SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync, ReturnValue) == 0x000010, "Member 'SteamCoreProFriendsAsyncActionEnumerateFollowingList_EnumerateFollowingListAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionEnumerateFollowingList.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProFriendsAsyncActionEnumerateFollowingList_HandleCallback final
{
public:
	struct FFriendsEnumerateFollowingList         Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E0[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProFriendsAsyncActionEnumerateFollowingList_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionEnumerateFollowingList_HandleCallback");
static_assert(sizeof(SteamCoreProFriendsAsyncActionEnumerateFollowingList_HandleCallback) == 0x000028, "Wrong size on SteamCoreProFriendsAsyncActionEnumerateFollowingList_HandleCallback");
static_assert(offsetof(SteamCoreProFriendsAsyncActionEnumerateFollowingList_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionEnumerateFollowingList_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionEnumerateFollowingList_HandleCallback, bWasSuccessful) == 0x000020, "Member 'SteamCoreProFriendsAsyncActionEnumerateFollowingList_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionIsFollowing.IsFollowingAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E1[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProFriendsAsyncActionIsFollowing* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync");
static_assert(sizeof(SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync) == 0x000020, "Wrong size on SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync");
static_assert(offsetof(SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync, SteamID) == 0x000008, "Member 'SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync, Timeout) == 0x000010, "Member 'SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProFriendsAsyncActionIsFollowing_IsFollowingAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionIsFollowing.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProFriendsAsyncActionIsFollowing_HandleCallback final
{
public:
	struct FFriendsIsFollowing                    Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E2[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProFriendsAsyncActionIsFollowing_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionIsFollowing_HandleCallback");
static_assert(sizeof(SteamCoreProFriendsAsyncActionIsFollowing_HandleCallback) == 0x000020, "Wrong size on SteamCoreProFriendsAsyncActionIsFollowing_HandleCallback");
static_assert(offsetof(SteamCoreProFriendsAsyncActionIsFollowing_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionIsFollowing_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionIsFollowing_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProFriendsAsyncActionIsFollowing_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionGetFollowerCount.GetFollowerCountAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E3[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProFriendsAsyncActionGetFollowerCount* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync");
static_assert(sizeof(SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync) == 0x000020, "Wrong size on SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync");
static_assert(offsetof(SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync, SteamID) == 0x000008, "Member 'SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync, Timeout) == 0x000010, "Member 'SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProFriendsAsyncActionGetFollowerCount_GetFollowerCountAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionGetFollowerCount.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProFriendsAsyncActionGetFollowerCount_HandleCallback final
{
public:
	struct FFriendsGetFollowerCount               Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E4[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProFriendsAsyncActionGetFollowerCount_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionGetFollowerCount_HandleCallback");
static_assert(sizeof(SteamCoreProFriendsAsyncActionGetFollowerCount_HandleCallback) == 0x000020, "Wrong size on SteamCoreProFriendsAsyncActionGetFollowerCount_HandleCallback");
static_assert(offsetof(SteamCoreProFriendsAsyncActionGetFollowerCount_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionGetFollowerCount_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionGetFollowerCount_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProFriendsAsyncActionGetFollowerCount_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFriendsAsyncActionRequestUserInformation.RequestUserInformationAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRequireNameOnly;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E6[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProFriendsAsyncActionRequestUserInformation* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync) == 0x000008, "Wrong alignment on SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync");
static_assert(sizeof(SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync) == 0x000020, "Wrong size on SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync");
static_assert(offsetof(SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync, SteamIDUser) == 0x000008, "Member 'SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync, bRequireNameOnly) == 0x000010, "Member 'SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync::bRequireNameOnly' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync, Timeout) == 0x000014, "Member 'SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProFriendsAsyncActionRequestUserInformation_RequestUserInformationAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServerStats.GetSteamGameServerStats
// 0x0008 (0x0008 - 0x0000)
struct SteamProGameServerStats_GetSteamGameServerStats final
{
public:
	class USteamProGameServerStats*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServerStats_GetSteamGameServerStats) == 0x000008, "Wrong alignment on SteamProGameServerStats_GetSteamGameServerStats");
static_assert(sizeof(SteamProGameServerStats_GetSteamGameServerStats) == 0x000008, "Wrong size on SteamProGameServerStats_GetSteamGameServerStats");
static_assert(offsetof(SteamProGameServerStats_GetSteamGameServerStats, ReturnValue) == 0x000000, "Member 'SteamProGameServerStats_GetSteamGameServerStats::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServerStats.ClearUserAchievement
// 0x0020 (0x0020 - 0x0000)
struct SteamProGameServerStats_ClearUserAchievement final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E8[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServerStats_ClearUserAchievement) == 0x000008, "Wrong alignment on SteamProGameServerStats_ClearUserAchievement");
static_assert(sizeof(SteamProGameServerStats_ClearUserAchievement) == 0x000020, "Wrong size on SteamProGameServerStats_ClearUserAchievement");
static_assert(offsetof(SteamProGameServerStats_ClearUserAchievement, SteamIDUser) == 0x000000, "Member 'SteamProGameServerStats_ClearUserAchievement::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_ClearUserAchievement, Param_Name) == 0x000008, "Member 'SteamProGameServerStats_ClearUserAchievement::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_ClearUserAchievement, ReturnValue) == 0x000018, "Member 'SteamProGameServerStats_ClearUserAchievement::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServerStats.GetUserAchievement
// 0x0020 (0x0020 - 0x0000)
struct SteamProGameServerStats_GetUserAchievement final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E9[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServerStats_GetUserAchievement) == 0x000008, "Wrong alignment on SteamProGameServerStats_GetUserAchievement");
static_assert(sizeof(SteamProGameServerStats_GetUserAchievement) == 0x000020, "Wrong size on SteamProGameServerStats_GetUserAchievement");
static_assert(offsetof(SteamProGameServerStats_GetUserAchievement, SteamIDUser) == 0x000000, "Member 'SteamProGameServerStats_GetUserAchievement::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_GetUserAchievement, Param_Name) == 0x000008, "Member 'SteamProGameServerStats_GetUserAchievement::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_GetUserAchievement, bAchieved) == 0x000018, "Member 'SteamProGameServerStats_GetUserAchievement::bAchieved' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_GetUserAchievement, ReturnValue) == 0x000019, "Member 'SteamProGameServerStats_GetUserAchievement::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServerStats.GetUserStatFloat
// 0x0020 (0x0020 - 0x0000)
struct SteamProGameServerStats_GetUserStatFloat final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22EA[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServerStats_GetUserStatFloat) == 0x000008, "Wrong alignment on SteamProGameServerStats_GetUserStatFloat");
static_assert(sizeof(SteamProGameServerStats_GetUserStatFloat) == 0x000020, "Wrong size on SteamProGameServerStats_GetUserStatFloat");
static_assert(offsetof(SteamProGameServerStats_GetUserStatFloat, SteamIDUser) == 0x000000, "Member 'SteamProGameServerStats_GetUserStatFloat::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_GetUserStatFloat, Param_Name) == 0x000008, "Member 'SteamProGameServerStats_GetUserStatFloat::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_GetUserStatFloat, Data) == 0x000018, "Member 'SteamProGameServerStats_GetUserStatFloat::Data' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_GetUserStatFloat, ReturnValue) == 0x00001C, "Member 'SteamProGameServerStats_GetUserStatFloat::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServerStats.GetUserStatInt
// 0x0020 (0x0020 - 0x0000)
struct SteamProGameServerStats_GetUserStatInt final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22EB[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServerStats_GetUserStatInt) == 0x000008, "Wrong alignment on SteamProGameServerStats_GetUserStatInt");
static_assert(sizeof(SteamProGameServerStats_GetUserStatInt) == 0x000020, "Wrong size on SteamProGameServerStats_GetUserStatInt");
static_assert(offsetof(SteamProGameServerStats_GetUserStatInt, SteamIDUser) == 0x000000, "Member 'SteamProGameServerStats_GetUserStatInt::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_GetUserStatInt, Param_Name) == 0x000008, "Member 'SteamProGameServerStats_GetUserStatInt::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_GetUserStatInt, Data) == 0x000018, "Member 'SteamProGameServerStats_GetUserStatInt::Data' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_GetUserStatInt, ReturnValue) == 0x00001C, "Member 'SteamProGameServerStats_GetUserStatInt::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServerStats.ServerRequestUserStats
// 0x0018 (0x0018 - 0x0000)
struct SteamProGameServerStats_ServerRequestUserStats final
{
public:
	TDelegate<void(struct FGSStatsReceived& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServerStats_ServerRequestUserStats) == 0x000008, "Wrong alignment on SteamProGameServerStats_ServerRequestUserStats");
static_assert(sizeof(SteamProGameServerStats_ServerRequestUserStats) == 0x000018, "Wrong size on SteamProGameServerStats_ServerRequestUserStats");
static_assert(offsetof(SteamProGameServerStats_ServerRequestUserStats, Callback) == 0x000000, "Member 'SteamProGameServerStats_ServerRequestUserStats::Callback' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_ServerRequestUserStats, SteamIDUser) == 0x000010, "Member 'SteamProGameServerStats_ServerRequestUserStats::SteamIDUser' has a wrong offset!");

// Function SteamCorePro.SteamProGameServerStats.ServerStoreUserStats
// 0x0018 (0x0018 - 0x0000)
struct SteamProGameServerStats_ServerStoreUserStats final
{
public:
	TDelegate<void(struct FGSStatsStored& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServerStats_ServerStoreUserStats) == 0x000008, "Wrong alignment on SteamProGameServerStats_ServerStoreUserStats");
static_assert(sizeof(SteamProGameServerStats_ServerStoreUserStats) == 0x000018, "Wrong size on SteamProGameServerStats_ServerStoreUserStats");
static_assert(offsetof(SteamProGameServerStats_ServerStoreUserStats, Callback) == 0x000000, "Member 'SteamProGameServerStats_ServerStoreUserStats::Callback' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_ServerStoreUserStats, SteamIDUser) == 0x000010, "Member 'SteamProGameServerStats_ServerStoreUserStats::SteamIDUser' has a wrong offset!");

// Function SteamCorePro.SteamProGameServerStats.SetUserAchievement
// 0x0020 (0x0020 - 0x0000)
struct SteamProGameServerStats_SetUserAchievement final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22EC[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServerStats_SetUserAchievement) == 0x000008, "Wrong alignment on SteamProGameServerStats_SetUserAchievement");
static_assert(sizeof(SteamProGameServerStats_SetUserAchievement) == 0x000020, "Wrong size on SteamProGameServerStats_SetUserAchievement");
static_assert(offsetof(SteamProGameServerStats_SetUserAchievement, SteamIDUser) == 0x000000, "Member 'SteamProGameServerStats_SetUserAchievement::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_SetUserAchievement, Param_Name) == 0x000008, "Member 'SteamProGameServerStats_SetUserAchievement::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_SetUserAchievement, ReturnValue) == 0x000018, "Member 'SteamProGameServerStats_SetUserAchievement::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServerStats.SetUserStatFloat
// 0x0020 (0x0020 - 0x0000)
struct SteamProGameServerStats_SetUserStatFloat final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22ED[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServerStats_SetUserStatFloat) == 0x000008, "Wrong alignment on SteamProGameServerStats_SetUserStatFloat");
static_assert(sizeof(SteamProGameServerStats_SetUserStatFloat) == 0x000020, "Wrong size on SteamProGameServerStats_SetUserStatFloat");
static_assert(offsetof(SteamProGameServerStats_SetUserStatFloat, SteamIDUser) == 0x000000, "Member 'SteamProGameServerStats_SetUserStatFloat::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_SetUserStatFloat, Param_Name) == 0x000008, "Member 'SteamProGameServerStats_SetUserStatFloat::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_SetUserStatFloat, Data) == 0x000018, "Member 'SteamProGameServerStats_SetUserStatFloat::Data' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_SetUserStatFloat, ReturnValue) == 0x00001C, "Member 'SteamProGameServerStats_SetUserStatFloat::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServerStats.SetUserStatInt
// 0x0020 (0x0020 - 0x0000)
struct SteamProGameServerStats_SetUserStatInt final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22EE[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServerStats_SetUserStatInt) == 0x000008, "Wrong alignment on SteamProGameServerStats_SetUserStatInt");
static_assert(sizeof(SteamProGameServerStats_SetUserStatInt) == 0x000020, "Wrong size on SteamProGameServerStats_SetUserStatInt");
static_assert(offsetof(SteamProGameServerStats_SetUserStatInt, SteamIDUser) == 0x000000, "Member 'SteamProGameServerStats_SetUserStatInt::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_SetUserStatInt, Param_Name) == 0x000008, "Member 'SteamProGameServerStats_SetUserStatInt::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_SetUserStatInt, Data) == 0x000018, "Member 'SteamProGameServerStats_SetUserStatInt::Data' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_SetUserStatInt, ReturnValue) == 0x00001C, "Member 'SteamProGameServerStats_SetUserStatInt::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServerStats.UpdateUserAvgRateStat
// 0x0028 (0x0028 - 0x0000)
struct SteamProGameServerStats_UpdateUserAvgRateStat final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CountThisSession;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SessionLength;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22EF[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServerStats_UpdateUserAvgRateStat) == 0x000008, "Wrong alignment on SteamProGameServerStats_UpdateUserAvgRateStat");
static_assert(sizeof(SteamProGameServerStats_UpdateUserAvgRateStat) == 0x000028, "Wrong size on SteamProGameServerStats_UpdateUserAvgRateStat");
static_assert(offsetof(SteamProGameServerStats_UpdateUserAvgRateStat, SteamIDUser) == 0x000000, "Member 'SteamProGameServerStats_UpdateUserAvgRateStat::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_UpdateUserAvgRateStat, Param_Name) == 0x000008, "Member 'SteamProGameServerStats_UpdateUserAvgRateStat::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_UpdateUserAvgRateStat, CountThisSession) == 0x000018, "Member 'SteamProGameServerStats_UpdateUserAvgRateStat::CountThisSession' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_UpdateUserAvgRateStat, SessionLength) == 0x00001C, "Member 'SteamProGameServerStats_UpdateUserAvgRateStat::SessionLength' has a wrong offset!");
static_assert(offsetof(SteamProGameServerStats_UpdateUserAvgRateStat, ReturnValue) == 0x000020, "Member 'SteamProGameServerStats_UpdateUserAvgRateStat::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.BNewDataAvailable
// 0x0001 (0x0001 - 0x0000)
struct SteamProInput_BNewDataAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_BNewDataAvailable) == 0x000001, "Wrong alignment on SteamProInput_BNewDataAvailable");
static_assert(sizeof(SteamProInput_BNewDataAvailable) == 0x000001, "Wrong size on SteamProInput_BNewDataAvailable");
static_assert(offsetof(SteamProInput_BNewDataAvailable, ReturnValue) == 0x000000, "Member 'SteamProInput_BNewDataAvailable::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.BWaitForData
// 0x000C (0x000C - 0x0000)
struct SteamProInput_BWaitForData final
{
public:
	bool                                          bWaitForever;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Timeout;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F1[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_BWaitForData) == 0x000004, "Wrong alignment on SteamProInput_BWaitForData");
static_assert(sizeof(SteamProInput_BWaitForData) == 0x00000C, "Wrong size on SteamProInput_BWaitForData");
static_assert(offsetof(SteamProInput_BWaitForData, bWaitForever) == 0x000000, "Member 'SteamProInput_BWaitForData::bWaitForever' has a wrong offset!");
static_assert(offsetof(SteamProInput_BWaitForData, Timeout) == 0x000004, "Member 'SteamProInput_BWaitForData::Timeout' has a wrong offset!");
static_assert(offsetof(SteamProInput_BWaitForData, ReturnValue) == 0x000008, "Member 'SteamProInput_BWaitForData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetSessionInputConfigurationSettings
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_GetSessionInputConfigurationSettings final
{
public:
	TArray<ESteamCoreInputConfigurationEnableType> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetSessionInputConfigurationSettings) == 0x000008, "Wrong alignment on SteamProInput_GetSessionInputConfigurationSettings");
static_assert(sizeof(SteamProInput_GetSessionInputConfigurationSettings) == 0x000010, "Wrong size on SteamProInput_GetSessionInputConfigurationSettings");
static_assert(offsetof(SteamProInput_GetSessionInputConfigurationSettings, ReturnValue) == 0x000000, "Member 'SteamProInput_GetSessionInputConfigurationSettings::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetSteamInput
// 0x0008 (0x0008 - 0x0000)
struct SteamProInput_GetSteamInput final
{
public:
	class USteamProInput*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetSteamInput) == 0x000008, "Wrong alignment on SteamProInput_GetSteamInput");
static_assert(sizeof(SteamProInput_GetSteamInput) == 0x000008, "Wrong size on SteamProInput_GetSteamInput");
static_assert(offsetof(SteamProInput_GetSteamInput, ReturnValue) == 0x000000, "Member 'SteamProInput_GetSteamInput::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetStringForAnalogActionName
// 0x0018 (0x0018 - 0x0000)
struct SteamProInput_GetStringForAnalogActionName final
{
public:
	struct FInputAnalogActionHandle               ActionHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetStringForAnalogActionName) == 0x000008, "Wrong alignment on SteamProInput_GetStringForAnalogActionName");
static_assert(sizeof(SteamProInput_GetStringForAnalogActionName) == 0x000018, "Wrong size on SteamProInput_GetStringForAnalogActionName");
static_assert(offsetof(SteamProInput_GetStringForAnalogActionName, ActionHandle) == 0x000000, "Member 'SteamProInput_GetStringForAnalogActionName::ActionHandle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetStringForAnalogActionName, ReturnValue) == 0x000008, "Member 'SteamProInput_GetStringForAnalogActionName::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetStringForDigitalActionName
// 0x0018 (0x0018 - 0x0000)
struct SteamProInput_GetStringForDigitalActionName final
{
public:
	struct FInputDigitalActionHandle              ActionHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetStringForDigitalActionName) == 0x000008, "Wrong alignment on SteamProInput_GetStringForDigitalActionName");
static_assert(sizeof(SteamProInput_GetStringForDigitalActionName) == 0x000018, "Wrong size on SteamProInput_GetStringForDigitalActionName");
static_assert(offsetof(SteamProInput_GetStringForDigitalActionName, ActionHandle) == 0x000000, "Member 'SteamProInput_GetStringForDigitalActionName::ActionHandle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetStringForDigitalActionName, ReturnValue) == 0x000008, "Member 'SteamProInput_GetStringForDigitalActionName::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.SetDualSenseTriggerEffect
// 0x00D8 (0x00D8 - 0x0000)
struct SteamProInput_SetDualSenseTriggerEffect final
{
public:
	struct FInputHandle                           InputHandle;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FScePadTriggerEffectCommand            R2;                                                // 0x0008(0x0068)(Parm, NativeAccessSpecifierPublic)
	struct FScePadTriggerEffectCommand            L2;                                                // 0x0070(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_SetDualSenseTriggerEffect) == 0x000008, "Wrong alignment on SteamProInput_SetDualSenseTriggerEffect");
static_assert(sizeof(SteamProInput_SetDualSenseTriggerEffect) == 0x0000D8, "Wrong size on SteamProInput_SetDualSenseTriggerEffect");
static_assert(offsetof(SteamProInput_SetDualSenseTriggerEffect, InputHandle) == 0x000000, "Member 'SteamProInput_SetDualSenseTriggerEffect::InputHandle' has a wrong offset!");
static_assert(offsetof(SteamProInput_SetDualSenseTriggerEffect, R2) == 0x000008, "Member 'SteamProInput_SetDualSenseTriggerEffect::R2' has a wrong offset!");
static_assert(offsetof(SteamProInput_SetDualSenseTriggerEffect, L2) == 0x000070, "Member 'SteamProInput_SetDualSenseTriggerEffect::L2' has a wrong offset!");

// Function SteamCorePro.SteamProInput.ActivateActionSet
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_ActivateActionSet final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ActionSetHandle;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_ActivateActionSet) == 0x000008, "Wrong alignment on SteamProInput_ActivateActionSet");
static_assert(sizeof(SteamProInput_ActivateActionSet) == 0x000010, "Wrong size on SteamProInput_ActivateActionSet");
static_assert(offsetof(SteamProInput_ActivateActionSet, Handle) == 0x000000, "Member 'SteamProInput_ActivateActionSet::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_ActivateActionSet, ActionSetHandle) == 0x000008, "Member 'SteamProInput_ActivateActionSet::ActionSetHandle' has a wrong offset!");

// Function SteamCorePro.SteamProInput.ActivateActionSetLayer
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_ActivateActionSetLayer final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ActionSetLayerHandle;                              // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_ActivateActionSetLayer) == 0x000008, "Wrong alignment on SteamProInput_ActivateActionSetLayer");
static_assert(sizeof(SteamProInput_ActivateActionSetLayer) == 0x000010, "Wrong size on SteamProInput_ActivateActionSetLayer");
static_assert(offsetof(SteamProInput_ActivateActionSetLayer, Handle) == 0x000000, "Member 'SteamProInput_ActivateActionSetLayer::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_ActivateActionSetLayer, ActionSetLayerHandle) == 0x000008, "Member 'SteamProInput_ActivateActionSetLayer::ActionSetLayerHandle' has a wrong offset!");

// Function SteamCorePro.SteamProInput.DeactivateActionSetLayer
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_DeactivateActionSetLayer final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ActionSetLayerHandle;                              // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_DeactivateActionSetLayer) == 0x000008, "Wrong alignment on SteamProInput_DeactivateActionSetLayer");
static_assert(sizeof(SteamProInput_DeactivateActionSetLayer) == 0x000010, "Wrong size on SteamProInput_DeactivateActionSetLayer");
static_assert(offsetof(SteamProInput_DeactivateActionSetLayer, Handle) == 0x000000, "Member 'SteamProInput_DeactivateActionSetLayer::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_DeactivateActionSetLayer, ActionSetLayerHandle) == 0x000008, "Member 'SteamProInput_DeactivateActionSetLayer::ActionSetLayerHandle' has a wrong offset!");

// Function SteamCorePro.SteamProInput.DeactivateAllActionSetLayers
// 0x0008 (0x0008 - 0x0000)
struct SteamProInput_DeactivateAllActionSetLayers final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_DeactivateAllActionSetLayers) == 0x000008, "Wrong alignment on SteamProInput_DeactivateAllActionSetLayers");
static_assert(sizeof(SteamProInput_DeactivateAllActionSetLayers) == 0x000008, "Wrong size on SteamProInput_DeactivateAllActionSetLayers");
static_assert(offsetof(SteamProInput_DeactivateAllActionSetLayers, Handle) == 0x000000, "Member 'SteamProInput_DeactivateAllActionSetLayers::Handle' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetActionOriginFromXboxOrigin
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_GetActionOriginFromXboxOrigin final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProXboxOrigin                       Origin;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreProInputActionOrigin                ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F2[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_GetActionOriginFromXboxOrigin) == 0x000008, "Wrong alignment on SteamProInput_GetActionOriginFromXboxOrigin");
static_assert(sizeof(SteamProInput_GetActionOriginFromXboxOrigin) == 0x000010, "Wrong size on SteamProInput_GetActionOriginFromXboxOrigin");
static_assert(offsetof(SteamProInput_GetActionOriginFromXboxOrigin, Handle) == 0x000000, "Member 'SteamProInput_GetActionOriginFromXboxOrigin::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetActionOriginFromXboxOrigin, Origin) == 0x000008, "Member 'SteamProInput_GetActionOriginFromXboxOrigin::Origin' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetActionOriginFromXboxOrigin, ReturnValue) == 0x000009, "Member 'SteamProInput_GetActionOriginFromXboxOrigin::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetActionSetHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamProInput_GetActionSetHandle final
{
public:
	class FString                                 ActionSetName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetActionSetHandle) == 0x000008, "Wrong alignment on SteamProInput_GetActionSetHandle");
static_assert(sizeof(SteamProInput_GetActionSetHandle) == 0x000018, "Wrong size on SteamProInput_GetActionSetHandle");
static_assert(offsetof(SteamProInput_GetActionSetHandle, ActionSetName) == 0x000000, "Member 'SteamProInput_GetActionSetHandle::ActionSetName' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetActionSetHandle, ReturnValue) == 0x000010, "Member 'SteamProInput_GetActionSetHandle::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetActiveActionSetLayers
// 0x0020 (0x0020 - 0x0000)
struct SteamProInput_GetActiveActionSetLayers final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FInputActionSetHandle>          Data;                                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F3[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_GetActiveActionSetLayers) == 0x000008, "Wrong alignment on SteamProInput_GetActiveActionSetLayers");
static_assert(sizeof(SteamProInput_GetActiveActionSetLayers) == 0x000020, "Wrong size on SteamProInput_GetActiveActionSetLayers");
static_assert(offsetof(SteamProInput_GetActiveActionSetLayers, Handle) == 0x000000, "Member 'SteamProInput_GetActiveActionSetLayers::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetActiveActionSetLayers, Data) == 0x000008, "Member 'SteamProInput_GetActiveActionSetLayers::Data' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetActiveActionSetLayers, ReturnValue) == 0x000018, "Member 'SteamProInput_GetActiveActionSetLayers::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetAnalogActionData
// 0x0020 (0x0020 - 0x0000)
struct SteamProInput_GetAnalogActionData final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputAnalogActionHandle               AnalogActionHandle;                                // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputAnalogActionData                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetAnalogActionData) == 0x000008, "Wrong alignment on SteamProInput_GetAnalogActionData");
static_assert(sizeof(SteamProInput_GetAnalogActionData) == 0x000020, "Wrong size on SteamProInput_GetAnalogActionData");
static_assert(offsetof(SteamProInput_GetAnalogActionData, Handle) == 0x000000, "Member 'SteamProInput_GetAnalogActionData::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetAnalogActionData, AnalogActionHandle) == 0x000008, "Member 'SteamProInput_GetAnalogActionData::AnalogActionHandle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetAnalogActionData, ReturnValue) == 0x000010, "Member 'SteamProInput_GetAnalogActionData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetAnalogActionHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamProInput_GetAnalogActionHandle final
{
public:
	class FString                                 PszActionName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAnalogActionHandle               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetAnalogActionHandle) == 0x000008, "Wrong alignment on SteamProInput_GetAnalogActionHandle");
static_assert(sizeof(SteamProInput_GetAnalogActionHandle) == 0x000018, "Wrong size on SteamProInput_GetAnalogActionHandle");
static_assert(offsetof(SteamProInput_GetAnalogActionHandle, PszActionName) == 0x000000, "Member 'SteamProInput_GetAnalogActionHandle::PszActionName' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetAnalogActionHandle, ReturnValue) == 0x000010, "Member 'SteamProInput_GetAnalogActionHandle::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetAnalogActionOrigins
// 0x0030 (0x0030 - 0x0000)
struct SteamProInput_GetAnalogActionOrigins final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ActionSetHandle;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputAnalogActionHandle               AnalogActionHandle;                                // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<ESteamCoreProInputActionOrigin>        OriginsOut;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F4[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_GetAnalogActionOrigins) == 0x000008, "Wrong alignment on SteamProInput_GetAnalogActionOrigins");
static_assert(sizeof(SteamProInput_GetAnalogActionOrigins) == 0x000030, "Wrong size on SteamProInput_GetAnalogActionOrigins");
static_assert(offsetof(SteamProInput_GetAnalogActionOrigins, Handle) == 0x000000, "Member 'SteamProInput_GetAnalogActionOrigins::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetAnalogActionOrigins, ActionSetHandle) == 0x000008, "Member 'SteamProInput_GetAnalogActionOrigins::ActionSetHandle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetAnalogActionOrigins, AnalogActionHandle) == 0x000010, "Member 'SteamProInput_GetAnalogActionOrigins::AnalogActionHandle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetAnalogActionOrigins, OriginsOut) == 0x000018, "Member 'SteamProInput_GetAnalogActionOrigins::OriginsOut' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetAnalogActionOrigins, ReturnValue) == 0x000028, "Member 'SteamProInput_GetAnalogActionOrigins::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetConnectedControllers
// 0x0018 (0x0018 - 0x0000)
struct SteamProInput_GetConnectedControllers final
{
public:
	TArray<struct FInputHandle>                   OutHandles;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F5[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_GetConnectedControllers) == 0x000008, "Wrong alignment on SteamProInput_GetConnectedControllers");
static_assert(sizeof(SteamProInput_GetConnectedControllers) == 0x000018, "Wrong size on SteamProInput_GetConnectedControllers");
static_assert(offsetof(SteamProInput_GetConnectedControllers, OutHandles) == 0x000000, "Member 'SteamProInput_GetConnectedControllers::OutHandles' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetConnectedControllers, ReturnValue) == 0x000010, "Member 'SteamProInput_GetConnectedControllers::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetControllerForGamepadIndex
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_GetControllerForGamepadIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputHandle                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetControllerForGamepadIndex) == 0x000008, "Wrong alignment on SteamProInput_GetControllerForGamepadIndex");
static_assert(sizeof(SteamProInput_GetControllerForGamepadIndex) == 0x000010, "Wrong size on SteamProInput_GetControllerForGamepadIndex");
static_assert(offsetof(SteamProInput_GetControllerForGamepadIndex, Param_Index) == 0x000000, "Member 'SteamProInput_GetControllerForGamepadIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetControllerForGamepadIndex, ReturnValue) == 0x000008, "Member 'SteamProInput_GetControllerForGamepadIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetCurrentActionSet
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_GetCurrentActionSet final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetCurrentActionSet) == 0x000008, "Wrong alignment on SteamProInput_GetCurrentActionSet");
static_assert(sizeof(SteamProInput_GetCurrentActionSet) == 0x000010, "Wrong size on SteamProInput_GetCurrentActionSet");
static_assert(offsetof(SteamProInput_GetCurrentActionSet, Handle) == 0x000000, "Member 'SteamProInput_GetCurrentActionSet::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetCurrentActionSet, ReturnValue) == 0x000008, "Member 'SteamProInput_GetCurrentActionSet::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetDeviceBindingRevision
// 0x0018 (0x0018 - 0x0000)
struct SteamProInput_GetDeviceBindingRevision final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Major;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F7[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_GetDeviceBindingRevision) == 0x000008, "Wrong alignment on SteamProInput_GetDeviceBindingRevision");
static_assert(sizeof(SteamProInput_GetDeviceBindingRevision) == 0x000018, "Wrong size on SteamProInput_GetDeviceBindingRevision");
static_assert(offsetof(SteamProInput_GetDeviceBindingRevision, Handle) == 0x000000, "Member 'SteamProInput_GetDeviceBindingRevision::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetDeviceBindingRevision, Major) == 0x000008, "Member 'SteamProInput_GetDeviceBindingRevision::Major' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetDeviceBindingRevision, Minor) == 0x00000C, "Member 'SteamProInput_GetDeviceBindingRevision::Minor' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetDeviceBindingRevision, ReturnValue) == 0x000010, "Member 'SteamProInput_GetDeviceBindingRevision::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetDigitalActionData
// 0x0018 (0x0018 - 0x0000)
struct SteamProInput_GetDigitalActionData final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputDigitalActionHandle              DigitalActionHandle;                               // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputDigitalActionData                ReturnValue;                                       // 0x0010(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F8[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_GetDigitalActionData) == 0x000008, "Wrong alignment on SteamProInput_GetDigitalActionData");
static_assert(sizeof(SteamProInput_GetDigitalActionData) == 0x000018, "Wrong size on SteamProInput_GetDigitalActionData");
static_assert(offsetof(SteamProInput_GetDigitalActionData, Handle) == 0x000000, "Member 'SteamProInput_GetDigitalActionData::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetDigitalActionData, DigitalActionHandle) == 0x000008, "Member 'SteamProInput_GetDigitalActionData::DigitalActionHandle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetDigitalActionData, ReturnValue) == 0x000010, "Member 'SteamProInput_GetDigitalActionData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetDigitalActionHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamProInput_GetDigitalActionHandle final
{
public:
	class FString                                 PszActionName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputDigitalActionHandle              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetDigitalActionHandle) == 0x000008, "Wrong alignment on SteamProInput_GetDigitalActionHandle");
static_assert(sizeof(SteamProInput_GetDigitalActionHandle) == 0x000018, "Wrong size on SteamProInput_GetDigitalActionHandle");
static_assert(offsetof(SteamProInput_GetDigitalActionHandle, PszActionName) == 0x000000, "Member 'SteamProInput_GetDigitalActionHandle::PszActionName' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetDigitalActionHandle, ReturnValue) == 0x000010, "Member 'SteamProInput_GetDigitalActionHandle::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetDigitalActionOrigins
// 0x0030 (0x0030 - 0x0000)
struct SteamProInput_GetDigitalActionOrigins final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputActionSetHandle                  ActionSetHandle;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputDigitalActionHandle              DigitalActionHandle;                               // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<ESteamCoreProInputActionOrigin>        OriginsOut;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F9[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_GetDigitalActionOrigins) == 0x000008, "Wrong alignment on SteamProInput_GetDigitalActionOrigins");
static_assert(sizeof(SteamProInput_GetDigitalActionOrigins) == 0x000030, "Wrong size on SteamProInput_GetDigitalActionOrigins");
static_assert(offsetof(SteamProInput_GetDigitalActionOrigins, Handle) == 0x000000, "Member 'SteamProInput_GetDigitalActionOrigins::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetDigitalActionOrigins, ActionSetHandle) == 0x000008, "Member 'SteamProInput_GetDigitalActionOrigins::ActionSetHandle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetDigitalActionOrigins, DigitalActionHandle) == 0x000010, "Member 'SteamProInput_GetDigitalActionOrigins::DigitalActionHandle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetDigitalActionOrigins, OriginsOut) == 0x000018, "Member 'SteamProInput_GetDigitalActionOrigins::OriginsOut' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetDigitalActionOrigins, ReturnValue) == 0x000028, "Member 'SteamProInput_GetDigitalActionOrigins::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetGamepadIndexForController
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_GetGamepadIndexForController final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FA[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_GetGamepadIndexForController) == 0x000008, "Wrong alignment on SteamProInput_GetGamepadIndexForController");
static_assert(sizeof(SteamProInput_GetGamepadIndexForController) == 0x000010, "Wrong size on SteamProInput_GetGamepadIndexForController");
static_assert(offsetof(SteamProInput_GetGamepadIndexForController, Handle) == 0x000000, "Member 'SteamProInput_GetGamepadIndexForController::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetGamepadIndexForController, ReturnValue) == 0x000008, "Member 'SteamProInput_GetGamepadIndexForController::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetGlyphForActionOrigin_Legacy
// 0x0018 (0x0018 - 0x0000)
struct SteamProInput_GetGlyphForActionOrigin_Legacy final
{
public:
	ESteamCoreProInputActionOrigin                Origin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetGlyphForActionOrigin_Legacy) == 0x000008, "Wrong alignment on SteamProInput_GetGlyphForActionOrigin_Legacy");
static_assert(sizeof(SteamProInput_GetGlyphForActionOrigin_Legacy) == 0x000018, "Wrong size on SteamProInput_GetGlyphForActionOrigin_Legacy");
static_assert(offsetof(SteamProInput_GetGlyphForActionOrigin_Legacy, Origin) == 0x000000, "Member 'SteamProInput_GetGlyphForActionOrigin_Legacy::Origin' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetGlyphForActionOrigin_Legacy, ReturnValue) == 0x000008, "Member 'SteamProInput_GetGlyphForActionOrigin_Legacy::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetGlyphForXboxOrigin
// 0x0018 (0x0018 - 0x0000)
struct SteamProInput_GetGlyphForXboxOrigin final
{
public:
	ESteamCoreProXboxOrigin                       Origin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetGlyphForXboxOrigin) == 0x000008, "Wrong alignment on SteamProInput_GetGlyphForXboxOrigin");
static_assert(sizeof(SteamProInput_GetGlyphForXboxOrigin) == 0x000018, "Wrong size on SteamProInput_GetGlyphForXboxOrigin");
static_assert(offsetof(SteamProInput_GetGlyphForXboxOrigin, Origin) == 0x000000, "Member 'SteamProInput_GetGlyphForXboxOrigin::Origin' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetGlyphForXboxOrigin, ReturnValue) == 0x000008, "Member 'SteamProInput_GetGlyphForXboxOrigin::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetInputTypeForHandle
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_GetInputTypeForHandle final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProInputType                        ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FD[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_GetInputTypeForHandle) == 0x000008, "Wrong alignment on SteamProInput_GetInputTypeForHandle");
static_assert(sizeof(SteamProInput_GetInputTypeForHandle) == 0x000010, "Wrong size on SteamProInput_GetInputTypeForHandle");
static_assert(offsetof(SteamProInput_GetInputTypeForHandle, Handle) == 0x000000, "Member 'SteamProInput_GetInputTypeForHandle::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetInputTypeForHandle, ReturnValue) == 0x000008, "Member 'SteamProInput_GetInputTypeForHandle::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetMotionData
// 0x0030 (0x0030 - 0x0000)
struct SteamProInput_GetMotionData final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputMotionData                       ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetMotionData) == 0x000008, "Wrong alignment on SteamProInput_GetMotionData");
static_assert(sizeof(SteamProInput_GetMotionData) == 0x000030, "Wrong size on SteamProInput_GetMotionData");
static_assert(offsetof(SteamProInput_GetMotionData, Handle) == 0x000000, "Member 'SteamProInput_GetMotionData::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetMotionData, ReturnValue) == 0x000008, "Member 'SteamProInput_GetMotionData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetRemotePlaySessionID
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_GetRemotePlaySessionID final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FE[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_GetRemotePlaySessionID) == 0x000008, "Wrong alignment on SteamProInput_GetRemotePlaySessionID");
static_assert(sizeof(SteamProInput_GetRemotePlaySessionID) == 0x000010, "Wrong size on SteamProInput_GetRemotePlaySessionID");
static_assert(offsetof(SteamProInput_GetRemotePlaySessionID, Handle) == 0x000000, "Member 'SteamProInput_GetRemotePlaySessionID::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetRemotePlaySessionID, ReturnValue) == 0x000008, "Member 'SteamProInput_GetRemotePlaySessionID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetStringForActionOrigin
// 0x0018 (0x0018 - 0x0000)
struct SteamProInput_GetStringForActionOrigin final
{
public:
	ESteamCoreProInputActionOrigin                Origin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetStringForActionOrigin) == 0x000008, "Wrong alignment on SteamProInput_GetStringForActionOrigin");
static_assert(sizeof(SteamProInput_GetStringForActionOrigin) == 0x000018, "Wrong size on SteamProInput_GetStringForActionOrigin");
static_assert(offsetof(SteamProInput_GetStringForActionOrigin, Origin) == 0x000000, "Member 'SteamProInput_GetStringForActionOrigin::Origin' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetStringForActionOrigin, ReturnValue) == 0x000008, "Member 'SteamProInput_GetStringForActionOrigin::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.GetStringForXboxOrigin
// 0x0018 (0x0018 - 0x0000)
struct SteamProInput_GetStringForXboxOrigin final
{
public:
	ESteamCoreProXboxOrigin                       Origin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2300[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_GetStringForXboxOrigin) == 0x000008, "Wrong alignment on SteamProInput_GetStringForXboxOrigin");
static_assert(sizeof(SteamProInput_GetStringForXboxOrigin) == 0x000018, "Wrong size on SteamProInput_GetStringForXboxOrigin");
static_assert(offsetof(SteamProInput_GetStringForXboxOrigin, Origin) == 0x000000, "Member 'SteamProInput_GetStringForXboxOrigin::Origin' has a wrong offset!");
static_assert(offsetof(SteamProInput_GetStringForXboxOrigin, ReturnValue) == 0x000008, "Member 'SteamProInput_GetStringForXboxOrigin::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.Init
// 0x0001 (0x0001 - 0x0000)
struct SteamProInput_Init final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_Init) == 0x000001, "Wrong alignment on SteamProInput_Init");
static_assert(sizeof(SteamProInput_Init) == 0x000001, "Wrong size on SteamProInput_Init");
static_assert(offsetof(SteamProInput_Init, ReturnValue) == 0x000000, "Member 'SteamProInput_Init::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.Legacy_TriggerHapticPulse
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_Legacy_TriggerHapticPulse final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProControllerPad                    TargetPad;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DurationMicroSec;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2301[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_Legacy_TriggerHapticPulse) == 0x000008, "Wrong alignment on SteamProInput_Legacy_TriggerHapticPulse");
static_assert(sizeof(SteamProInput_Legacy_TriggerHapticPulse) == 0x000010, "Wrong size on SteamProInput_Legacy_TriggerHapticPulse");
static_assert(offsetof(SteamProInput_Legacy_TriggerHapticPulse, Handle) == 0x000000, "Member 'SteamProInput_Legacy_TriggerHapticPulse::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_Legacy_TriggerHapticPulse, TargetPad) == 0x000008, "Member 'SteamProInput_Legacy_TriggerHapticPulse::TargetPad' has a wrong offset!");
static_assert(offsetof(SteamProInput_Legacy_TriggerHapticPulse, DurationMicroSec) == 0x000009, "Member 'SteamProInput_Legacy_TriggerHapticPulse::DurationMicroSec' has a wrong offset!");

// Function SteamCorePro.SteamProInput.Legacy_TriggerRepeatedHapticPulse
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_Legacy_TriggerRepeatedHapticPulse final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProControllerPad                    TargetPad;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DurationMicroSec;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OffMicroSec;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Repeat;                                            // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Param_Flags;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2302[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_Legacy_TriggerRepeatedHapticPulse) == 0x000008, "Wrong alignment on SteamProInput_Legacy_TriggerRepeatedHapticPulse");
static_assert(sizeof(SteamProInput_Legacy_TriggerRepeatedHapticPulse) == 0x000010, "Wrong size on SteamProInput_Legacy_TriggerRepeatedHapticPulse");
static_assert(offsetof(SteamProInput_Legacy_TriggerRepeatedHapticPulse, Handle) == 0x000000, "Member 'SteamProInput_Legacy_TriggerRepeatedHapticPulse::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_Legacy_TriggerRepeatedHapticPulse, TargetPad) == 0x000008, "Member 'SteamProInput_Legacy_TriggerRepeatedHapticPulse::TargetPad' has a wrong offset!");
static_assert(offsetof(SteamProInput_Legacy_TriggerRepeatedHapticPulse, DurationMicroSec) == 0x000009, "Member 'SteamProInput_Legacy_TriggerRepeatedHapticPulse::DurationMicroSec' has a wrong offset!");
static_assert(offsetof(SteamProInput_Legacy_TriggerRepeatedHapticPulse, OffMicroSec) == 0x00000A, "Member 'SteamProInput_Legacy_TriggerRepeatedHapticPulse::OffMicroSec' has a wrong offset!");
static_assert(offsetof(SteamProInput_Legacy_TriggerRepeatedHapticPulse, Repeat) == 0x00000B, "Member 'SteamProInput_Legacy_TriggerRepeatedHapticPulse::Repeat' has a wrong offset!");
static_assert(offsetof(SteamProInput_Legacy_TriggerRepeatedHapticPulse, Param_Flags) == 0x00000C, "Member 'SteamProInput_Legacy_TriggerRepeatedHapticPulse::Param_Flags' has a wrong offset!");

// Function SteamCorePro.SteamProInput.SetLEDColor
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_SetLEDColor final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         ColorR;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorG;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorB;                                            // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreProInputLEDFlag                     Param_Flags;                                       // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2303[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_SetLEDColor) == 0x000008, "Wrong alignment on SteamProInput_SetLEDColor");
static_assert(sizeof(SteamProInput_SetLEDColor) == 0x000010, "Wrong size on SteamProInput_SetLEDColor");
static_assert(offsetof(SteamProInput_SetLEDColor, Handle) == 0x000000, "Member 'SteamProInput_SetLEDColor::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_SetLEDColor, ColorR) == 0x000008, "Member 'SteamProInput_SetLEDColor::ColorR' has a wrong offset!");
static_assert(offsetof(SteamProInput_SetLEDColor, ColorG) == 0x000009, "Member 'SteamProInput_SetLEDColor::ColorG' has a wrong offset!");
static_assert(offsetof(SteamProInput_SetLEDColor, ColorB) == 0x00000A, "Member 'SteamProInput_SetLEDColor::ColorB' has a wrong offset!");
static_assert(offsetof(SteamProInput_SetLEDColor, Param_Flags) == 0x00000B, "Member 'SteamProInput_SetLEDColor::Param_Flags' has a wrong offset!");

// Function SteamCorePro.SteamProInput.ShowBindingPanel
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_ShowBindingPanel final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2304[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_ShowBindingPanel) == 0x000008, "Wrong alignment on SteamProInput_ShowBindingPanel");
static_assert(sizeof(SteamProInput_ShowBindingPanel) == 0x000010, "Wrong size on SteamProInput_ShowBindingPanel");
static_assert(offsetof(SteamProInput_ShowBindingPanel, Handle) == 0x000000, "Member 'SteamProInput_ShowBindingPanel::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_ShowBindingPanel, ReturnValue) == 0x000008, "Member 'SteamProInput_ShowBindingPanel::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.Shutdown
// 0x0001 (0x0001 - 0x0000)
struct SteamProInput_Shutdown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_Shutdown) == 0x000001, "Wrong alignment on SteamProInput_Shutdown");
static_assert(sizeof(SteamProInput_Shutdown) == 0x000001, "Wrong size on SteamProInput_Shutdown");
static_assert(offsetof(SteamProInput_Shutdown, ReturnValue) == 0x000000, "Member 'SteamProInput_Shutdown::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.StopAnalogActionMomentum
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_StopAnalogActionMomentum final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputAnalogActionHandle               EAction;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_StopAnalogActionMomentum) == 0x000008, "Wrong alignment on SteamProInput_StopAnalogActionMomentum");
static_assert(sizeof(SteamProInput_StopAnalogActionMomentum) == 0x000010, "Wrong size on SteamProInput_StopAnalogActionMomentum");
static_assert(offsetof(SteamProInput_StopAnalogActionMomentum, Handle) == 0x000000, "Member 'SteamProInput_StopAnalogActionMomentum::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_StopAnalogActionMomentum, EAction) == 0x000008, "Member 'SteamProInput_StopAnalogActionMomentum::EAction' has a wrong offset!");

// Function SteamCorePro.SteamProInput.TranslateActionOrigin
// 0x0003 (0x0003 - 0x0000)
struct SteamProInput_TranslateActionOrigin final
{
public:
	ESteamCoreProInputType                        DestinationInputType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreProInputActionOrigin                SourceOrigin;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreProInputActionOrigin                ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInput_TranslateActionOrigin) == 0x000001, "Wrong alignment on SteamProInput_TranslateActionOrigin");
static_assert(sizeof(SteamProInput_TranslateActionOrigin) == 0x000003, "Wrong size on SteamProInput_TranslateActionOrigin");
static_assert(offsetof(SteamProInput_TranslateActionOrigin, DestinationInputType) == 0x000000, "Member 'SteamProInput_TranslateActionOrigin::DestinationInputType' has a wrong offset!");
static_assert(offsetof(SteamProInput_TranslateActionOrigin, SourceOrigin) == 0x000001, "Member 'SteamProInput_TranslateActionOrigin::SourceOrigin' has a wrong offset!");
static_assert(offsetof(SteamProInput_TranslateActionOrigin, ReturnValue) == 0x000002, "Member 'SteamProInput_TranslateActionOrigin::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInput.TriggerVibration
// 0x0010 (0x0010 - 0x0000)
struct SteamProInput_TriggerVibration final
{
public:
	struct FInputHandle                           Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         LeftSpeed;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RightSpeed;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2305[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInput_TriggerVibration) == 0x000008, "Wrong alignment on SteamProInput_TriggerVibration");
static_assert(sizeof(SteamProInput_TriggerVibration) == 0x000010, "Wrong size on SteamProInput_TriggerVibration");
static_assert(offsetof(SteamProInput_TriggerVibration, Handle) == 0x000000, "Member 'SteamProInput_TriggerVibration::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInput_TriggerVibration, LeftSpeed) == 0x000008, "Member 'SteamProInput_TriggerVibration::LeftSpeed' has a wrong offset!");
static_assert(offsetof(SteamProInput_TriggerVibration, RightSpeed) == 0x000009, "Member 'SteamProInput_TriggerVibration::RightSpeed' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.AddPromoItem
// 0x000C (0x000C - 0x0000)
struct SteamProInventory_AddPromoItem final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamItemDef                          ItemDef;                                           // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2307[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_AddPromoItem) == 0x000004, "Wrong alignment on SteamProInventory_AddPromoItem");
static_assert(sizeof(SteamProInventory_AddPromoItem) == 0x00000C, "Wrong size on SteamProInventory_AddPromoItem");
static_assert(offsetof(SteamProInventory_AddPromoItem, Result) == 0x000000, "Member 'SteamProInventory_AddPromoItem::Result' has a wrong offset!");
static_assert(offsetof(SteamProInventory_AddPromoItem, ItemDef) == 0x000004, "Member 'SteamProInventory_AddPromoItem::ItemDef' has a wrong offset!");
static_assert(offsetof(SteamProInventory_AddPromoItem, ReturnValue) == 0x000008, "Member 'SteamProInventory_AddPromoItem::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.AddPromoItems
// 0x0020 (0x0020 - 0x0000)
struct SteamProInventory_AddPromoItems final
{
public:
	struct FSteamInventoryResult                  OutResult;                                         // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2308[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2309[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_AddPromoItems) == 0x000008, "Wrong alignment on SteamProInventory_AddPromoItems");
static_assert(sizeof(SteamProInventory_AddPromoItems) == 0x000020, "Wrong size on SteamProInventory_AddPromoItems");
static_assert(offsetof(SteamProInventory_AddPromoItems, OutResult) == 0x000000, "Member 'SteamProInventory_AddPromoItems::OutResult' has a wrong offset!");
static_assert(offsetof(SteamProInventory_AddPromoItems, ItemDefs) == 0x000008, "Member 'SteamProInventory_AddPromoItems::ItemDefs' has a wrong offset!");
static_assert(offsetof(SteamProInventory_AddPromoItems, ReturnValue) == 0x000018, "Member 'SteamProInventory_AddPromoItems::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.CheckResultSteamID
// 0x0018 (0x0018 - 0x0000)
struct SteamProInventory_CheckResultSteamID final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_230A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDExpected;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_CheckResultSteamID) == 0x000008, "Wrong alignment on SteamProInventory_CheckResultSteamID");
static_assert(sizeof(SteamProInventory_CheckResultSteamID) == 0x000018, "Wrong size on SteamProInventory_CheckResultSteamID");
static_assert(offsetof(SteamProInventory_CheckResultSteamID, Handle) == 0x000000, "Member 'SteamProInventory_CheckResultSteamID::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_CheckResultSteamID, SteamIDExpected) == 0x000008, "Member 'SteamProInventory_CheckResultSteamID::SteamIDExpected' has a wrong offset!");
static_assert(offsetof(SteamProInventory_CheckResultSteamID, ReturnValue) == 0x000010, "Member 'SteamProInventory_CheckResultSteamID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.ConsumeItem
// 0x0018 (0x0018 - 0x0000)
struct SteamProInventory_ConsumeItem final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_230C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamItemInstanceID                   ItemConsume;                                       // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230D[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_ConsumeItem) == 0x000008, "Wrong alignment on SteamProInventory_ConsumeItem");
static_assert(sizeof(SteamProInventory_ConsumeItem) == 0x000018, "Wrong size on SteamProInventory_ConsumeItem");
static_assert(offsetof(SteamProInventory_ConsumeItem, Result) == 0x000000, "Member 'SteamProInventory_ConsumeItem::Result' has a wrong offset!");
static_assert(offsetof(SteamProInventory_ConsumeItem, ItemConsume) == 0x000008, "Member 'SteamProInventory_ConsumeItem::ItemConsume' has a wrong offset!");
static_assert(offsetof(SteamProInventory_ConsumeItem, Quantity) == 0x000010, "Member 'SteamProInventory_ConsumeItem::Quantity' has a wrong offset!");
static_assert(offsetof(SteamProInventory_ConsumeItem, ReturnValue) == 0x000014, "Member 'SteamProInventory_ConsumeItem::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.DeserializeResult
// 0x0020 (0x0020 - 0x0000)
struct SteamProInventory_DeserializeResult final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_230E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Buffer;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bReservedMustBeFalse;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230F[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_DeserializeResult) == 0x000008, "Wrong alignment on SteamProInventory_DeserializeResult");
static_assert(sizeof(SteamProInventory_DeserializeResult) == 0x000020, "Wrong size on SteamProInventory_DeserializeResult");
static_assert(offsetof(SteamProInventory_DeserializeResult, Result) == 0x000000, "Member 'SteamProInventory_DeserializeResult::Result' has a wrong offset!");
static_assert(offsetof(SteamProInventory_DeserializeResult, Buffer) == 0x000008, "Member 'SteamProInventory_DeserializeResult::Buffer' has a wrong offset!");
static_assert(offsetof(SteamProInventory_DeserializeResult, bReservedMustBeFalse) == 0x000018, "Member 'SteamProInventory_DeserializeResult::bReservedMustBeFalse' has a wrong offset!");
static_assert(offsetof(SteamProInventory_DeserializeResult, ReturnValue) == 0x000019, "Member 'SteamProInventory_DeserializeResult::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.DestroyResult
// 0x0004 (0x0004 - 0x0000)
struct SteamProInventory_DestroyResult final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInventory_DestroyResult) == 0x000004, "Wrong alignment on SteamProInventory_DestroyResult");
static_assert(sizeof(SteamProInventory_DestroyResult) == 0x000004, "Wrong size on SteamProInventory_DestroyResult");
static_assert(offsetof(SteamProInventory_DestroyResult, Handle) == 0x000000, "Member 'SteamProInventory_DestroyResult::Handle' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.ExchangeItems
// 0x0050 (0x0050 - 0x0000)
struct SteamProInventory_ExchangeItems final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2310[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemDef>                  ArrayGenerate;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ArrayGenerateQuantity;                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSteamItemInstanceID>           ArrayDestroy;                                      // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ArrayDestroyQuantity;                              // 0x0038(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2311[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_ExchangeItems) == 0x000008, "Wrong alignment on SteamProInventory_ExchangeItems");
static_assert(sizeof(SteamProInventory_ExchangeItems) == 0x000050, "Wrong size on SteamProInventory_ExchangeItems");
static_assert(offsetof(SteamProInventory_ExchangeItems, Result) == 0x000000, "Member 'SteamProInventory_ExchangeItems::Result' has a wrong offset!");
static_assert(offsetof(SteamProInventory_ExchangeItems, ArrayGenerate) == 0x000008, "Member 'SteamProInventory_ExchangeItems::ArrayGenerate' has a wrong offset!");
static_assert(offsetof(SteamProInventory_ExchangeItems, ArrayGenerateQuantity) == 0x000018, "Member 'SteamProInventory_ExchangeItems::ArrayGenerateQuantity' has a wrong offset!");
static_assert(offsetof(SteamProInventory_ExchangeItems, ArrayDestroy) == 0x000028, "Member 'SteamProInventory_ExchangeItems::ArrayDestroy' has a wrong offset!");
static_assert(offsetof(SteamProInventory_ExchangeItems, ArrayDestroyQuantity) == 0x000038, "Member 'SteamProInventory_ExchangeItems::ArrayDestroyQuantity' has a wrong offset!");
static_assert(offsetof(SteamProInventory_ExchangeItems, ReturnValue) == 0x000048, "Member 'SteamProInventory_ExchangeItems::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GenerateItems
// 0x0030 (0x0030 - 0x0000)
struct SteamProInventory_GenerateItems final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2312[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Quantity;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2313[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_GenerateItems) == 0x000008, "Wrong alignment on SteamProInventory_GenerateItems");
static_assert(sizeof(SteamProInventory_GenerateItems) == 0x000030, "Wrong size on SteamProInventory_GenerateItems");
static_assert(offsetof(SteamProInventory_GenerateItems, Result) == 0x000000, "Member 'SteamProInventory_GenerateItems::Result' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GenerateItems, ItemDefs) == 0x000008, "Member 'SteamProInventory_GenerateItems::ItemDefs' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GenerateItems, Quantity) == 0x000018, "Member 'SteamProInventory_GenerateItems::Quantity' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GenerateItems, ReturnValue) == 0x000028, "Member 'SteamProInventory_GenerateItems::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetAllItems
// 0x0008 (0x0008 - 0x0000)
struct SteamProInventory_GetAllItems final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2314[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_GetAllItems) == 0x000004, "Wrong alignment on SteamProInventory_GetAllItems");
static_assert(sizeof(SteamProInventory_GetAllItems) == 0x000008, "Wrong size on SteamProInventory_GetAllItems");
static_assert(offsetof(SteamProInventory_GetAllItems, Handle) == 0x000000, "Member 'SteamProInventory_GetAllItems::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetAllItems, ReturnValue) == 0x000004, "Member 'SteamProInventory_GetAllItems::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetEligiblePromoItemDefinitionIDs
// 0x0020 (0x0020 - 0x0000)
struct SteamProInventory_GetEligiblePromoItemDefinitionIDs final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2315[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_GetEligiblePromoItemDefinitionIDs) == 0x000008, "Wrong alignment on SteamProInventory_GetEligiblePromoItemDefinitionIDs");
static_assert(sizeof(SteamProInventory_GetEligiblePromoItemDefinitionIDs) == 0x000020, "Wrong size on SteamProInventory_GetEligiblePromoItemDefinitionIDs");
static_assert(offsetof(SteamProInventory_GetEligiblePromoItemDefinitionIDs, SteamID) == 0x000000, "Member 'SteamProInventory_GetEligiblePromoItemDefinitionIDs::SteamID' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetEligiblePromoItemDefinitionIDs, ItemDefs) == 0x000008, "Member 'SteamProInventory_GetEligiblePromoItemDefinitionIDs::ItemDefs' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetEligiblePromoItemDefinitionIDs, ReturnValue) == 0x000018, "Member 'SteamProInventory_GetEligiblePromoItemDefinitionIDs::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetItemDefinitionIDs
// 0x0018 (0x0018 - 0x0000)
struct SteamProInventory_GetItemDefinitionIDs final
{
public:
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2316[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_GetItemDefinitionIDs) == 0x000008, "Wrong alignment on SteamProInventory_GetItemDefinitionIDs");
static_assert(sizeof(SteamProInventory_GetItemDefinitionIDs) == 0x000018, "Wrong size on SteamProInventory_GetItemDefinitionIDs");
static_assert(offsetof(SteamProInventory_GetItemDefinitionIDs, ItemDefs) == 0x000000, "Member 'SteamProInventory_GetItemDefinitionIDs::ItemDefs' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetItemDefinitionIDs, ReturnValue) == 0x000010, "Member 'SteamProInventory_GetItemDefinitionIDs::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetItemDefinitionProperty
// 0x0030 (0x0030 - 0x0000)
struct SteamProInventory_GetItemDefinitionProperty final
{
public:
	struct FSteamItemDef                          ItemDef;                                           // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2317[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PropertyName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2318[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_GetItemDefinitionProperty) == 0x000008, "Wrong alignment on SteamProInventory_GetItemDefinitionProperty");
static_assert(sizeof(SteamProInventory_GetItemDefinitionProperty) == 0x000030, "Wrong size on SteamProInventory_GetItemDefinitionProperty");
static_assert(offsetof(SteamProInventory_GetItemDefinitionProperty, ItemDef) == 0x000000, "Member 'SteamProInventory_GetItemDefinitionProperty::ItemDef' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetItemDefinitionProperty, PropertyName) == 0x000008, "Member 'SteamProInventory_GetItemDefinitionProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetItemDefinitionProperty, Value) == 0x000018, "Member 'SteamProInventory_GetItemDefinitionProperty::Value' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetItemDefinitionProperty, ReturnValue) == 0x000028, "Member 'SteamProInventory_GetItemDefinitionProperty::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetItemPrice
// 0x0010 (0x0010 - 0x0000)
struct SteamProInventory_GetItemPrice final
{
public:
	struct FSteamItemDef                          ItemDef;                                           // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BasePrice;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2319[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_GetItemPrice) == 0x000004, "Wrong alignment on SteamProInventory_GetItemPrice");
static_assert(sizeof(SteamProInventory_GetItemPrice) == 0x000010, "Wrong size on SteamProInventory_GetItemPrice");
static_assert(offsetof(SteamProInventory_GetItemPrice, ItemDef) == 0x000000, "Member 'SteamProInventory_GetItemPrice::ItemDef' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetItemPrice, Price) == 0x000004, "Member 'SteamProInventory_GetItemPrice::Price' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetItemPrice, BasePrice) == 0x000008, "Member 'SteamProInventory_GetItemPrice::BasePrice' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetItemPrice, ReturnValue) == 0x00000C, "Member 'SteamProInventory_GetItemPrice::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetItemsByID
// 0x0020 (0x0020 - 0x0000)
struct SteamProInventory_GetItemsByID final
{
public:
	struct FSteamInventoryResult                  InventoryResult;                                   // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_231A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemInstanceID>           InstanceIDs;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231B[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_GetItemsByID) == 0x000008, "Wrong alignment on SteamProInventory_GetItemsByID");
static_assert(sizeof(SteamProInventory_GetItemsByID) == 0x000020, "Wrong size on SteamProInventory_GetItemsByID");
static_assert(offsetof(SteamProInventory_GetItemsByID, InventoryResult) == 0x000000, "Member 'SteamProInventory_GetItemsByID::InventoryResult' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetItemsByID, InstanceIDs) == 0x000008, "Member 'SteamProInventory_GetItemsByID::InstanceIDs' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetItemsByID, ReturnValue) == 0x000018, "Member 'SteamProInventory_GetItemsByID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetItemsWithPrices
// 0x0038 (0x0038 - 0x0000)
struct SteamProInventory_GetItemsWithPrices final
{
public:
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Prices;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BasePrices;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231C[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_GetItemsWithPrices) == 0x000008, "Wrong alignment on SteamProInventory_GetItemsWithPrices");
static_assert(sizeof(SteamProInventory_GetItemsWithPrices) == 0x000038, "Wrong size on SteamProInventory_GetItemsWithPrices");
static_assert(offsetof(SteamProInventory_GetItemsWithPrices, ItemDefs) == 0x000000, "Member 'SteamProInventory_GetItemsWithPrices::ItemDefs' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetItemsWithPrices, Prices) == 0x000010, "Member 'SteamProInventory_GetItemsWithPrices::Prices' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetItemsWithPrices, BasePrices) == 0x000020, "Member 'SteamProInventory_GetItemsWithPrices::BasePrices' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetItemsWithPrices, ReturnValue) == 0x000030, "Member 'SteamProInventory_GetItemsWithPrices::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetNumItemsWithPrices
// 0x0004 (0x0004 - 0x0000)
struct SteamProInventory_GetNumItemsWithPrices final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInventory_GetNumItemsWithPrices) == 0x000004, "Wrong alignment on SteamProInventory_GetNumItemsWithPrices");
static_assert(sizeof(SteamProInventory_GetNumItemsWithPrices) == 0x000004, "Wrong size on SteamProInventory_GetNumItemsWithPrices");
static_assert(offsetof(SteamProInventory_GetNumItemsWithPrices, ReturnValue) == 0x000000, "Member 'SteamProInventory_GetNumItemsWithPrices::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetResultItemProperty
// 0x0030 (0x0030 - 0x0000)
struct SteamProInventory_GetResultItemProperty final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ItemIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231D[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_GetResultItemProperty) == 0x000008, "Wrong alignment on SteamProInventory_GetResultItemProperty");
static_assert(sizeof(SteamProInventory_GetResultItemProperty) == 0x000030, "Wrong size on SteamProInventory_GetResultItemProperty");
static_assert(offsetof(SteamProInventory_GetResultItemProperty, Handle) == 0x000000, "Member 'SteamProInventory_GetResultItemProperty::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetResultItemProperty, ItemIndex) == 0x000004, "Member 'SteamProInventory_GetResultItemProperty::ItemIndex' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetResultItemProperty, PropertyName) == 0x000008, "Member 'SteamProInventory_GetResultItemProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetResultItemProperty, Value) == 0x000018, "Member 'SteamProInventory_GetResultItemProperty::Value' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetResultItemProperty, ReturnValue) == 0x000028, "Member 'SteamProInventory_GetResultItemProperty::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetResultItems
// 0x0020 (0x0020 - 0x0000)
struct SteamProInventory_GetResultItems final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_231E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamItemDetails>              Items;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231F[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_GetResultItems) == 0x000008, "Wrong alignment on SteamProInventory_GetResultItems");
static_assert(sizeof(SteamProInventory_GetResultItems) == 0x000020, "Wrong size on SteamProInventory_GetResultItems");
static_assert(offsetof(SteamProInventory_GetResultItems, Handle) == 0x000000, "Member 'SteamProInventory_GetResultItems::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetResultItems, Items) == 0x000008, "Member 'SteamProInventory_GetResultItems::Items' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetResultItems, ReturnValue) == 0x000018, "Member 'SteamProInventory_GetResultItems::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetResultStatus
// 0x0008 (0x0008 - 0x0000)
struct SteamProInventory_GetResultStatus final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamResult                                  ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2320[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_GetResultStatus) == 0x000004, "Wrong alignment on SteamProInventory_GetResultStatus");
static_assert(sizeof(SteamProInventory_GetResultStatus) == 0x000008, "Wrong size on SteamProInventory_GetResultStatus");
static_assert(offsetof(SteamProInventory_GetResultStatus, Handle) == 0x000000, "Member 'SteamProInventory_GetResultStatus::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetResultStatus, ReturnValue) == 0x000004, "Member 'SteamProInventory_GetResultStatus::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetResultTimestamp
// 0x0008 (0x0008 - 0x0000)
struct SteamProInventory_GetResultTimestamp final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInventory_GetResultTimestamp) == 0x000004, "Wrong alignment on SteamProInventory_GetResultTimestamp");
static_assert(sizeof(SteamProInventory_GetResultTimestamp) == 0x000008, "Wrong size on SteamProInventory_GetResultTimestamp");
static_assert(offsetof(SteamProInventory_GetResultTimestamp, Handle) == 0x000000, "Member 'SteamProInventory_GetResultTimestamp::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GetResultTimestamp, ReturnValue) == 0x000004, "Member 'SteamProInventory_GetResultTimestamp::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GetSteamInventory
// 0x0008 (0x0008 - 0x0000)
struct SteamProInventory_GetSteamInventory final
{
public:
	class USteamProInventory*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInventory_GetSteamInventory) == 0x000008, "Wrong alignment on SteamProInventory_GetSteamInventory");
static_assert(sizeof(SteamProInventory_GetSteamInventory) == 0x000008, "Wrong size on SteamProInventory_GetSteamInventory");
static_assert(offsetof(SteamProInventory_GetSteamInventory, ReturnValue) == 0x000000, "Member 'SteamProInventory_GetSteamInventory::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.GrantPromoItems
// 0x0008 (0x0008 - 0x0000)
struct SteamProInventory_GrantPromoItems final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2321[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_GrantPromoItems) == 0x000004, "Wrong alignment on SteamProInventory_GrantPromoItems");
static_assert(sizeof(SteamProInventory_GrantPromoItems) == 0x000008, "Wrong size on SteamProInventory_GrantPromoItems");
static_assert(offsetof(SteamProInventory_GrantPromoItems, Result) == 0x000000, "Member 'SteamProInventory_GrantPromoItems::Result' has a wrong offset!");
static_assert(offsetof(SteamProInventory_GrantPromoItems, ReturnValue) == 0x000004, "Member 'SteamProInventory_GrantPromoItems::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.LoadItemDefinitions
// 0x0001 (0x0001 - 0x0000)
struct SteamProInventory_LoadItemDefinitions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInventory_LoadItemDefinitions) == 0x000001, "Wrong alignment on SteamProInventory_LoadItemDefinitions");
static_assert(sizeof(SteamProInventory_LoadItemDefinitions) == 0x000001, "Wrong size on SteamProInventory_LoadItemDefinitions");
static_assert(offsetof(SteamProInventory_LoadItemDefinitions, ReturnValue) == 0x000000, "Member 'SteamProInventory_LoadItemDefinitions::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.RemoveProperty
// 0x0028 (0x0028 - 0x0000)
struct SteamProInventory_RemoveProperty final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   ItemId;                                            // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2322[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_RemoveProperty) == 0x000008, "Wrong alignment on SteamProInventory_RemoveProperty");
static_assert(sizeof(SteamProInventory_RemoveProperty) == 0x000028, "Wrong size on SteamProInventory_RemoveProperty");
static_assert(offsetof(SteamProInventory_RemoveProperty, Handle) == 0x000000, "Member 'SteamProInventory_RemoveProperty::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_RemoveProperty, ItemId) == 0x000008, "Member 'SteamProInventory_RemoveProperty::ItemId' has a wrong offset!");
static_assert(offsetof(SteamProInventory_RemoveProperty, PropertyName) == 0x000010, "Member 'SteamProInventory_RemoveProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(SteamProInventory_RemoveProperty, ReturnValue) == 0x000020, "Member 'SteamProInventory_RemoveProperty::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.SerializeResult
// 0x0020 (0x0020 - 0x0000)
struct SteamProInventory_SerializeResult final
{
public:
	struct FSteamInventoryResult                  Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2323[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Buffer;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2324[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_SerializeResult) == 0x000008, "Wrong alignment on SteamProInventory_SerializeResult");
static_assert(sizeof(SteamProInventory_SerializeResult) == 0x000020, "Wrong size on SteamProInventory_SerializeResult");
static_assert(offsetof(SteamProInventory_SerializeResult, Handle) == 0x000000, "Member 'SteamProInventory_SerializeResult::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SerializeResult, Buffer) == 0x000008, "Member 'SteamProInventory_SerializeResult::Buffer' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SerializeResult, ReturnValue) == 0x000018, "Member 'SteamProInventory_SerializeResult::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.SetPropertyBool
// 0x0028 (0x0028 - 0x0000)
struct SteamProInventory_SetPropertyBool final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   ItemId;                                            // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2325[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_SetPropertyBool) == 0x000008, "Wrong alignment on SteamProInventory_SetPropertyBool");
static_assert(sizeof(SteamProInventory_SetPropertyBool) == 0x000028, "Wrong size on SteamProInventory_SetPropertyBool");
static_assert(offsetof(SteamProInventory_SetPropertyBool, Handle) == 0x000000, "Member 'SteamProInventory_SetPropertyBool::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyBool, ItemId) == 0x000008, "Member 'SteamProInventory_SetPropertyBool::ItemId' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyBool, PropertyName) == 0x000010, "Member 'SteamProInventory_SetPropertyBool::PropertyName' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyBool, bValue) == 0x000020, "Member 'SteamProInventory_SetPropertyBool::bValue' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyBool, ReturnValue) == 0x000021, "Member 'SteamProInventory_SetPropertyBool::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.SetPropertyFloat
// 0x0028 (0x0028 - 0x0000)
struct SteamProInventory_SetPropertyFloat final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   ItemId;                                            // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2326[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_SetPropertyFloat) == 0x000008, "Wrong alignment on SteamProInventory_SetPropertyFloat");
static_assert(sizeof(SteamProInventory_SetPropertyFloat) == 0x000028, "Wrong size on SteamProInventory_SetPropertyFloat");
static_assert(offsetof(SteamProInventory_SetPropertyFloat, Handle) == 0x000000, "Member 'SteamProInventory_SetPropertyFloat::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyFloat, ItemId) == 0x000008, "Member 'SteamProInventory_SetPropertyFloat::ItemId' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyFloat, PropertyName) == 0x000010, "Member 'SteamProInventory_SetPropertyFloat::PropertyName' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyFloat, Value) == 0x000020, "Member 'SteamProInventory_SetPropertyFloat::Value' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyFloat, ReturnValue) == 0x000024, "Member 'SteamProInventory_SetPropertyFloat::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.SetPropertyInt
// 0x0028 (0x0028 - 0x0000)
struct SteamProInventory_SetPropertyInt final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   ItemId;                                            // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2327[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_SetPropertyInt) == 0x000008, "Wrong alignment on SteamProInventory_SetPropertyInt");
static_assert(sizeof(SteamProInventory_SetPropertyInt) == 0x000028, "Wrong size on SteamProInventory_SetPropertyInt");
static_assert(offsetof(SteamProInventory_SetPropertyInt, Handle) == 0x000000, "Member 'SteamProInventory_SetPropertyInt::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyInt, ItemId) == 0x000008, "Member 'SteamProInventory_SetPropertyInt::ItemId' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyInt, PropertyName) == 0x000010, "Member 'SteamProInventory_SetPropertyInt::PropertyName' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyInt, Value) == 0x000020, "Member 'SteamProInventory_SetPropertyInt::Value' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyInt, ReturnValue) == 0x000024, "Member 'SteamProInventory_SetPropertyInt::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.SetPropertyString
// 0x0038 (0x0038 - 0x0000)
struct SteamProInventory_SetPropertyString final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   ItemId;                                            // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PropertyName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2328[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_SetPropertyString) == 0x000008, "Wrong alignment on SteamProInventory_SetPropertyString");
static_assert(sizeof(SteamProInventory_SetPropertyString) == 0x000038, "Wrong size on SteamProInventory_SetPropertyString");
static_assert(offsetof(SteamProInventory_SetPropertyString, Handle) == 0x000000, "Member 'SteamProInventory_SetPropertyString::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyString, ItemId) == 0x000008, "Member 'SteamProInventory_SetPropertyString::ItemId' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyString, PropertyName) == 0x000010, "Member 'SteamProInventory_SetPropertyString::PropertyName' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyString, Value) == 0x000020, "Member 'SteamProInventory_SetPropertyString::Value' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SetPropertyString, ReturnValue) == 0x000030, "Member 'SteamProInventory_SetPropertyString::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.StartUpdateProperties
// 0x0008 (0x0008 - 0x0000)
struct SteamProInventory_StartUpdateProperties final
{
public:
	struct FSteamInventoryUpdateHandle            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInventory_StartUpdateProperties) == 0x000008, "Wrong alignment on SteamProInventory_StartUpdateProperties");
static_assert(sizeof(SteamProInventory_StartUpdateProperties) == 0x000008, "Wrong size on SteamProInventory_StartUpdateProperties");
static_assert(offsetof(SteamProInventory_StartUpdateProperties, ReturnValue) == 0x000000, "Member 'SteamProInventory_StartUpdateProperties::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.SubmitUpdateProperties
// 0x0010 (0x0010 - 0x0000)
struct SteamProInventory_SubmitUpdateProperties final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamInventoryResult                  ResultHandle;                                      // 0x0008(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2329[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_SubmitUpdateProperties) == 0x000008, "Wrong alignment on SteamProInventory_SubmitUpdateProperties");
static_assert(sizeof(SteamProInventory_SubmitUpdateProperties) == 0x000010, "Wrong size on SteamProInventory_SubmitUpdateProperties");
static_assert(offsetof(SteamProInventory_SubmitUpdateProperties, Handle) == 0x000000, "Member 'SteamProInventory_SubmitUpdateProperties::Handle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SubmitUpdateProperties, ResultHandle) == 0x000008, "Member 'SteamProInventory_SubmitUpdateProperties::ResultHandle' has a wrong offset!");
static_assert(offsetof(SteamProInventory_SubmitUpdateProperties, ReturnValue) == 0x00000C, "Member 'SteamProInventory_SubmitUpdateProperties::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.TransferItemQuantity
// 0x0028 (0x0028 - 0x0000)
struct SteamProInventory_TransferItemQuantity final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_232A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamItemInstanceID                   ItemIDSource;                                      // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamItemInstanceID                   ItemIDDest;                                        // 0x0018(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232C[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_TransferItemQuantity) == 0x000008, "Wrong alignment on SteamProInventory_TransferItemQuantity");
static_assert(sizeof(SteamProInventory_TransferItemQuantity) == 0x000028, "Wrong size on SteamProInventory_TransferItemQuantity");
static_assert(offsetof(SteamProInventory_TransferItemQuantity, Result) == 0x000000, "Member 'SteamProInventory_TransferItemQuantity::Result' has a wrong offset!");
static_assert(offsetof(SteamProInventory_TransferItemQuantity, ItemIDSource) == 0x000008, "Member 'SteamProInventory_TransferItemQuantity::ItemIDSource' has a wrong offset!");
static_assert(offsetof(SteamProInventory_TransferItemQuantity, Quantity) == 0x000010, "Member 'SteamProInventory_TransferItemQuantity::Quantity' has a wrong offset!");
static_assert(offsetof(SteamProInventory_TransferItemQuantity, ItemIDDest) == 0x000018, "Member 'SteamProInventory_TransferItemQuantity::ItemIDDest' has a wrong offset!");
static_assert(offsetof(SteamProInventory_TransferItemQuantity, ReturnValue) == 0x000020, "Member 'SteamProInventory_TransferItemQuantity::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.TriggerItemDrop
// 0x000C (0x000C - 0x0000)
struct SteamProInventory_TriggerItemDrop final
{
public:
	struct FSteamInventoryResult                  Result;                                            // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamItemDef                          ListDefinition;                                    // 0x0004(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232D[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProInventory_TriggerItemDrop) == 0x000004, "Wrong alignment on SteamProInventory_TriggerItemDrop");
static_assert(sizeof(SteamProInventory_TriggerItemDrop) == 0x00000C, "Wrong size on SteamProInventory_TriggerItemDrop");
static_assert(offsetof(SteamProInventory_TriggerItemDrop, Result) == 0x000000, "Member 'SteamProInventory_TriggerItemDrop::Result' has a wrong offset!");
static_assert(offsetof(SteamProInventory_TriggerItemDrop, ListDefinition) == 0x000004, "Member 'SteamProInventory_TriggerItemDrop::ListDefinition' has a wrong offset!");
static_assert(offsetof(SteamProInventory_TriggerItemDrop, ReturnValue) == 0x000008, "Member 'SteamProInventory_TriggerItemDrop::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.RequestEligiblePromoItemDefinitionsIDs
// 0x0018 (0x0018 - 0x0000)
struct SteamProInventory_RequestEligiblePromoItemDefinitionsIDs final
{
public:
	TDelegate<void(struct FSteamInventoryEligiblePromoItemDefIDs& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInventory_RequestEligiblePromoItemDefinitionsIDs) == 0x000008, "Wrong alignment on SteamProInventory_RequestEligiblePromoItemDefinitionsIDs");
static_assert(sizeof(SteamProInventory_RequestEligiblePromoItemDefinitionsIDs) == 0x000018, "Wrong size on SteamProInventory_RequestEligiblePromoItemDefinitionsIDs");
static_assert(offsetof(SteamProInventory_RequestEligiblePromoItemDefinitionsIDs, Callback) == 0x000000, "Member 'SteamProInventory_RequestEligiblePromoItemDefinitionsIDs::Callback' has a wrong offset!");
static_assert(offsetof(SteamProInventory_RequestEligiblePromoItemDefinitionsIDs, SteamID) == 0x000010, "Member 'SteamProInventory_RequestEligiblePromoItemDefinitionsIDs::SteamID' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.RequestPrices
// 0x0010 (0x0010 - 0x0000)
struct SteamProInventory_RequestPrices final
{
public:
	TDelegate<void(struct FSteamInventoryRequestPricesResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInventory_RequestPrices) == 0x000004, "Wrong alignment on SteamProInventory_RequestPrices");
static_assert(sizeof(SteamProInventory_RequestPrices) == 0x000010, "Wrong size on SteamProInventory_RequestPrices");
static_assert(offsetof(SteamProInventory_RequestPrices, Callback) == 0x000000, "Member 'SteamProInventory_RequestPrices::Callback' has a wrong offset!");

// Function SteamCorePro.SteamProInventory.StartPurchase
// 0x0030 (0x0030 - 0x0000)
struct SteamProInventory_StartPurchase final
{
public:
	TDelegate<void(struct FSteamInventoryStartPurchaseResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Quantity;                                          // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProInventory_StartPurchase) == 0x000008, "Wrong alignment on SteamProInventory_StartPurchase");
static_assert(sizeof(SteamProInventory_StartPurchase) == 0x000030, "Wrong size on SteamProInventory_StartPurchase");
static_assert(offsetof(SteamProInventory_StartPurchase, Callback) == 0x000000, "Member 'SteamProInventory_StartPurchase::Callback' has a wrong offset!");
static_assert(offsetof(SteamProInventory_StartPurchase, ItemDefs) == 0x000010, "Member 'SteamProInventory_StartPurchase::ItemDefs' has a wrong offset!");
static_assert(offsetof(SteamProInventory_StartPurchase, Quantity) == 0x000020, "Member 'SteamProInventory_StartPurchase::Quantity' has a wrong offset!");

// Function SteamCorePro.SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs.RequestEligiblePromoItemDefinitionsIDsAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232E[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync) == 0x000008, "Wrong alignment on SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync");
static_assert(sizeof(SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync) == 0x000020, "Wrong size on SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync");
static_assert(offsetof(SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync, SteamID) == 0x000008, "Member 'SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync, Timeout) == 0x000010, "Member 'SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_RequestEligiblePromoItemDefinitionsIDsAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback final
{
public:
	struct FSteamInventoryEligiblePromoItemDefIDs Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232F[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback");
static_assert(sizeof(SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback) == 0x000020, "Wrong size on SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback");
static_assert(offsetof(SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProInventoryAsyncActionRequestPricesResult.RequestPricesAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProInventoryAsyncActionRequestPricesResult_RequestPricesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2330[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProInventoryAsyncActionRequestPricesResult* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProInventoryAsyncActionRequestPricesResult_RequestPricesAsync) == 0x000008, "Wrong alignment on SteamCoreProInventoryAsyncActionRequestPricesResult_RequestPricesAsync");
static_assert(sizeof(SteamCoreProInventoryAsyncActionRequestPricesResult_RequestPricesAsync) == 0x000018, "Wrong size on SteamCoreProInventoryAsyncActionRequestPricesResult_RequestPricesAsync");
static_assert(offsetof(SteamCoreProInventoryAsyncActionRequestPricesResult_RequestPricesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProInventoryAsyncActionRequestPricesResult_RequestPricesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProInventoryAsyncActionRequestPricesResult_RequestPricesAsync, Timeout) == 0x000008, "Member 'SteamCoreProInventoryAsyncActionRequestPricesResult_RequestPricesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProInventoryAsyncActionRequestPricesResult_RequestPricesAsync, ReturnValue) == 0x000010, "Member 'SteamCoreProInventoryAsyncActionRequestPricesResult_RequestPricesAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProInventoryAsyncActionRequestPricesResult.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProInventoryAsyncActionRequestPricesResult_HandleCallback final
{
public:
	struct FSteamInventoryRequestPricesResult     Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2331[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProInventoryAsyncActionRequestPricesResult_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProInventoryAsyncActionRequestPricesResult_HandleCallback");
static_assert(sizeof(SteamCoreProInventoryAsyncActionRequestPricesResult_HandleCallback) == 0x000020, "Wrong size on SteamCoreProInventoryAsyncActionRequestPricesResult_HandleCallback");
static_assert(offsetof(SteamCoreProInventoryAsyncActionRequestPricesResult_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProInventoryAsyncActionRequestPricesResult_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProInventoryAsyncActionRequestPricesResult_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProInventoryAsyncActionRequestPricesResult_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProInventoryAsyncActionStartPurchaseResult.StartPurchaseAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSteamItemDef>                  ItemDefs;                                          // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Quantity;                                          // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2332[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProInventoryAsyncActionStartPurchaseResult* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync) == 0x000008, "Wrong alignment on SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync");
static_assert(sizeof(SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync) == 0x000038, "Wrong size on SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync");
static_assert(offsetof(SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync, ItemDefs) == 0x000008, "Member 'SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync::ItemDefs' has a wrong offset!");
static_assert(offsetof(SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync, Quantity) == 0x000018, "Member 'SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync::Quantity' has a wrong offset!");
static_assert(offsetof(SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync, Timeout) == 0x000028, "Member 'SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync, ReturnValue) == 0x000030, "Member 'SteamCoreProInventoryAsyncActionStartPurchaseResult_StartPurchaseAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProInventoryAsyncActionStartPurchaseResult.HandleCallback
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreProInventoryAsyncActionStartPurchaseResult_HandleCallback final
{
public:
	struct FSteamInventoryStartPurchaseResult     Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2333[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProInventoryAsyncActionStartPurchaseResult_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProInventoryAsyncActionStartPurchaseResult_HandleCallback");
static_assert(sizeof(SteamCoreProInventoryAsyncActionStartPurchaseResult_HandleCallback) == 0x000030, "Wrong size on SteamCoreProInventoryAsyncActionStartPurchaseResult_HandleCallback");
static_assert(offsetof(SteamCoreProInventoryAsyncActionStartPurchaseResult_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProInventoryAsyncActionStartPurchaseResult_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProInventoryAsyncActionStartPurchaseResult_HandleCallback, bWasSuccessful) == 0x000028, "Member 'SteamCoreProInventoryAsyncActionStartPurchaseResult_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.AddFavoriteGame
// 0x0038 (0x0038 - 0x0000)
struct SteamProMatchmaking_AddFavoriteGame final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2335[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamFavoriteFlags>                   Param_Flags;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TimeLastPlayedOnServer;                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_AddFavoriteGame) == 0x000008, "Wrong alignment on SteamProMatchmaking_AddFavoriteGame");
static_assert(sizeof(SteamProMatchmaking_AddFavoriteGame) == 0x000038, "Wrong size on SteamProMatchmaking_AddFavoriteGame");
static_assert(offsetof(SteamProMatchmaking_AddFavoriteGame, AppID) == 0x000000, "Member 'SteamProMatchmaking_AddFavoriteGame::AppID' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_AddFavoriteGame, IP) == 0x000008, "Member 'SteamProMatchmaking_AddFavoriteGame::IP' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_AddFavoriteGame, ConnectionPort) == 0x000018, "Member 'SteamProMatchmaking_AddFavoriteGame::ConnectionPort' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_AddFavoriteGame, QueryPort) == 0x00001C, "Member 'SteamProMatchmaking_AddFavoriteGame::QueryPort' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_AddFavoriteGame, Param_Flags) == 0x000020, "Member 'SteamProMatchmaking_AddFavoriteGame::Param_Flags' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_AddFavoriteGame, TimeLastPlayedOnServer) == 0x000030, "Member 'SteamProMatchmaking_AddFavoriteGame::TimeLastPlayedOnServer' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_AddFavoriteGame, ReturnValue) == 0x000034, "Member 'SteamProMatchmaking_AddFavoriteGame::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.AddRequestLobbyListCompatibleMembersFilter
// 0x0008 (0x0008 - 0x0000)
struct SteamProMatchmaking_AddRequestLobbyListCompatibleMembersFilter final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_AddRequestLobbyListCompatibleMembersFilter) == 0x000008, "Wrong alignment on SteamProMatchmaking_AddRequestLobbyListCompatibleMembersFilter");
static_assert(sizeof(SteamProMatchmaking_AddRequestLobbyListCompatibleMembersFilter) == 0x000008, "Wrong size on SteamProMatchmaking_AddRequestLobbyListCompatibleMembersFilter");
static_assert(offsetof(SteamProMatchmaking_AddRequestLobbyListCompatibleMembersFilter, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_AddRequestLobbyListCompatibleMembersFilter::SteamIDLobby' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.AddRequestLobbyListDistanceFilter
// 0x0001 (0x0001 - 0x0000)
struct SteamProMatchmaking_AddRequestLobbyListDistanceFilter final
{
public:
	ESteamLobbyDistanceFilter                     LobbyDistanceFilter;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_AddRequestLobbyListDistanceFilter) == 0x000001, "Wrong alignment on SteamProMatchmaking_AddRequestLobbyListDistanceFilter");
static_assert(sizeof(SteamProMatchmaking_AddRequestLobbyListDistanceFilter) == 0x000001, "Wrong size on SteamProMatchmaking_AddRequestLobbyListDistanceFilter");
static_assert(offsetof(SteamProMatchmaking_AddRequestLobbyListDistanceFilter, LobbyDistanceFilter) == 0x000000, "Member 'SteamProMatchmaking_AddRequestLobbyListDistanceFilter::LobbyDistanceFilter' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.AddRequestLobbyListFilterSlotsAvailable
// 0x0004 (0x0004 - 0x0000)
struct SteamProMatchmaking_AddRequestLobbyListFilterSlotsAvailable final
{
public:
	int32                                         SlotsAvailable;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_AddRequestLobbyListFilterSlotsAvailable) == 0x000004, "Wrong alignment on SteamProMatchmaking_AddRequestLobbyListFilterSlotsAvailable");
static_assert(sizeof(SteamProMatchmaking_AddRequestLobbyListFilterSlotsAvailable) == 0x000004, "Wrong size on SteamProMatchmaking_AddRequestLobbyListFilterSlotsAvailable");
static_assert(offsetof(SteamProMatchmaking_AddRequestLobbyListFilterSlotsAvailable, SlotsAvailable) == 0x000000, "Member 'SteamProMatchmaking_AddRequestLobbyListFilterSlotsAvailable::SlotsAvailable' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.AddRequestLobbyListNearValueFilter
// 0x0018 (0x0018 - 0x0000)
struct SteamProMatchmaking_AddRequestLobbyListNearValueFilter final
{
public:
	class FString                                 KeyToMatch;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueToBeCloseTo;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2336[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_AddRequestLobbyListNearValueFilter) == 0x000008, "Wrong alignment on SteamProMatchmaking_AddRequestLobbyListNearValueFilter");
static_assert(sizeof(SteamProMatchmaking_AddRequestLobbyListNearValueFilter) == 0x000018, "Wrong size on SteamProMatchmaking_AddRequestLobbyListNearValueFilter");
static_assert(offsetof(SteamProMatchmaking_AddRequestLobbyListNearValueFilter, KeyToMatch) == 0x000000, "Member 'SteamProMatchmaking_AddRequestLobbyListNearValueFilter::KeyToMatch' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_AddRequestLobbyListNearValueFilter, ValueToBeCloseTo) == 0x000010, "Member 'SteamProMatchmaking_AddRequestLobbyListNearValueFilter::ValueToBeCloseTo' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.AddRequestLobbyListNumericalFilter
// 0x0018 (0x0018 - 0x0000)
struct SteamProMatchmaking_AddRequestLobbyListNumericalFilter final
{
public:
	class FString                                 KeyToMatch;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValueToMatch;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLobbyComparison                         ComparisonType;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2337[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_AddRequestLobbyListNumericalFilter) == 0x000008, "Wrong alignment on SteamProMatchmaking_AddRequestLobbyListNumericalFilter");
static_assert(sizeof(SteamProMatchmaking_AddRequestLobbyListNumericalFilter) == 0x000018, "Wrong size on SteamProMatchmaking_AddRequestLobbyListNumericalFilter");
static_assert(offsetof(SteamProMatchmaking_AddRequestLobbyListNumericalFilter, KeyToMatch) == 0x000000, "Member 'SteamProMatchmaking_AddRequestLobbyListNumericalFilter::KeyToMatch' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_AddRequestLobbyListNumericalFilter, ValueToMatch) == 0x000010, "Member 'SteamProMatchmaking_AddRequestLobbyListNumericalFilter::ValueToMatch' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_AddRequestLobbyListNumericalFilter, ComparisonType) == 0x000014, "Member 'SteamProMatchmaking_AddRequestLobbyListNumericalFilter::ComparisonType' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.AddRequestLobbyListResultCountFilter
// 0x0004 (0x0004 - 0x0000)
struct SteamProMatchmaking_AddRequestLobbyListResultCountFilter final
{
public:
	int32                                         MaxResults;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_AddRequestLobbyListResultCountFilter) == 0x000004, "Wrong alignment on SteamProMatchmaking_AddRequestLobbyListResultCountFilter");
static_assert(sizeof(SteamProMatchmaking_AddRequestLobbyListResultCountFilter) == 0x000004, "Wrong size on SteamProMatchmaking_AddRequestLobbyListResultCountFilter");
static_assert(offsetof(SteamProMatchmaking_AddRequestLobbyListResultCountFilter, MaxResults) == 0x000000, "Member 'SteamProMatchmaking_AddRequestLobbyListResultCountFilter::MaxResults' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.AddRequestLobbyListStringFilter
// 0x0028 (0x0028 - 0x0000)
struct SteamProMatchmaking_AddRequestLobbyListStringFilter final
{
public:
	class FString                                 KeyToMatch;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValueToMatch;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLobbyComparison                         ComparisonType;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2338[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_AddRequestLobbyListStringFilter) == 0x000008, "Wrong alignment on SteamProMatchmaking_AddRequestLobbyListStringFilter");
static_assert(sizeof(SteamProMatchmaking_AddRequestLobbyListStringFilter) == 0x000028, "Wrong size on SteamProMatchmaking_AddRequestLobbyListStringFilter");
static_assert(offsetof(SteamProMatchmaking_AddRequestLobbyListStringFilter, KeyToMatch) == 0x000000, "Member 'SteamProMatchmaking_AddRequestLobbyListStringFilter::KeyToMatch' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_AddRequestLobbyListStringFilter, ValueToMatch) == 0x000010, "Member 'SteamProMatchmaking_AddRequestLobbyListStringFilter::ValueToMatch' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_AddRequestLobbyListStringFilter, ComparisonType) == 0x000020, "Member 'SteamProMatchmaking_AddRequestLobbyListStringFilter::ComparisonType' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.DeleteLobbyData
// 0x0020 (0x0020 - 0x0000)
struct SteamProMatchmaking_DeleteLobbyData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2339[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_DeleteLobbyData) == 0x000008, "Wrong alignment on SteamProMatchmaking_DeleteLobbyData");
static_assert(sizeof(SteamProMatchmaking_DeleteLobbyData) == 0x000020, "Wrong size on SteamProMatchmaking_DeleteLobbyData");
static_assert(offsetof(SteamProMatchmaking_DeleteLobbyData, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_DeleteLobbyData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_DeleteLobbyData, Key) == 0x000008, "Member 'SteamProMatchmaking_DeleteLobbyData::Key' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_DeleteLobbyData, ReturnValue) == 0x000018, "Member 'SteamProMatchmaking_DeleteLobbyData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetFavoriteGame
// 0x0038 (0x0038 - 0x0000)
struct SteamProMatchmaking_GetFavoriteGame final
{
public:
	int32                                         Game;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamFavoriteFlags>                   Param_Flags;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TimeLastPlayedOnServer;                            // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233A[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_GetFavoriteGame) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetFavoriteGame");
static_assert(sizeof(SteamProMatchmaking_GetFavoriteGame) == 0x000038, "Wrong size on SteamProMatchmaking_GetFavoriteGame");
static_assert(offsetof(SteamProMatchmaking_GetFavoriteGame, Game) == 0x000000, "Member 'SteamProMatchmaking_GetFavoriteGame::Game' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetFavoriteGame, AppID) == 0x000004, "Member 'SteamProMatchmaking_GetFavoriteGame::AppID' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetFavoriteGame, IP) == 0x000008, "Member 'SteamProMatchmaking_GetFavoriteGame::IP' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetFavoriteGame, ConnectionPort) == 0x000018, "Member 'SteamProMatchmaking_GetFavoriteGame::ConnectionPort' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetFavoriteGame, QueryPort) == 0x00001C, "Member 'SteamProMatchmaking_GetFavoriteGame::QueryPort' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetFavoriteGame, Param_Flags) == 0x000020, "Member 'SteamProMatchmaking_GetFavoriteGame::Param_Flags' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetFavoriteGame, TimeLastPlayedOnServer) == 0x000030, "Member 'SteamProMatchmaking_GetFavoriteGame::TimeLastPlayedOnServer' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetFavoriteGame, ReturnValue) == 0x000034, "Member 'SteamProMatchmaking_GetFavoriteGame::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetFavoriteGameCount
// 0x0004 (0x0004 - 0x0000)
struct SteamProMatchmaking_GetFavoriteGameCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_GetFavoriteGameCount) == 0x000004, "Wrong alignment on SteamProMatchmaking_GetFavoriteGameCount");
static_assert(sizeof(SteamProMatchmaking_GetFavoriteGameCount) == 0x000004, "Wrong size on SteamProMatchmaking_GetFavoriteGameCount");
static_assert(offsetof(SteamProMatchmaking_GetFavoriteGameCount, ReturnValue) == 0x000000, "Member 'SteamProMatchmaking_GetFavoriteGameCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetLobbyByIndex
// 0x0010 (0x0010 - 0x0000)
struct SteamProMatchmaking_GetLobbyByIndex final
{
public:
	int32                                         Lobby;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_GetLobbyByIndex) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetLobbyByIndex");
static_assert(sizeof(SteamProMatchmaking_GetLobbyByIndex) == 0x000010, "Wrong size on SteamProMatchmaking_GetLobbyByIndex");
static_assert(offsetof(SteamProMatchmaking_GetLobbyByIndex, Lobby) == 0x000000, "Member 'SteamProMatchmaking_GetLobbyByIndex::Lobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyByIndex, ReturnValue) == 0x000008, "Member 'SteamProMatchmaking_GetLobbyByIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetLobbyChatEntry
// 0x0030 (0x0030 - 0x0000)
struct SteamProMatchmaking_GetLobbyChatEntry final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MessageID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233C[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDUser;                                       // 0x0010(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamChatEntryType                           ChatEntryType;                                     // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233D[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_GetLobbyChatEntry) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetLobbyChatEntry");
static_assert(sizeof(SteamProMatchmaking_GetLobbyChatEntry) == 0x000030, "Wrong size on SteamProMatchmaking_GetLobbyChatEntry");
static_assert(offsetof(SteamProMatchmaking_GetLobbyChatEntry, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_GetLobbyChatEntry::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyChatEntry, MessageID) == 0x000008, "Member 'SteamProMatchmaking_GetLobbyChatEntry::MessageID' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyChatEntry, SteamIDUser) == 0x000010, "Member 'SteamProMatchmaking_GetLobbyChatEntry::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyChatEntry, Message) == 0x000018, "Member 'SteamProMatchmaking_GetLobbyChatEntry::Message' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyChatEntry, ChatEntryType) == 0x000028, "Member 'SteamProMatchmaking_GetLobbyChatEntry::ChatEntryType' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyChatEntry, ReturnValue) == 0x00002C, "Member 'SteamProMatchmaking_GetLobbyChatEntry::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetLobbyData
// 0x0028 (0x0028 - 0x0000)
struct SteamProMatchmaking_GetLobbyData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_GetLobbyData) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetLobbyData");
static_assert(sizeof(SteamProMatchmaking_GetLobbyData) == 0x000028, "Wrong size on SteamProMatchmaking_GetLobbyData");
static_assert(offsetof(SteamProMatchmaking_GetLobbyData, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_GetLobbyData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyData, Key) == 0x000008, "Member 'SteamProMatchmaking_GetLobbyData::Key' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyData, ReturnValue) == 0x000018, "Member 'SteamProMatchmaking_GetLobbyData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetLobbyDataByIndex
// 0x0038 (0x0038 - 0x0000)
struct SteamProMatchmaking_GetLobbyDataByIndex final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LobbyData;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233F[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_GetLobbyDataByIndex) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetLobbyDataByIndex");
static_assert(sizeof(SteamProMatchmaking_GetLobbyDataByIndex) == 0x000038, "Wrong size on SteamProMatchmaking_GetLobbyDataByIndex");
static_assert(offsetof(SteamProMatchmaking_GetLobbyDataByIndex, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_GetLobbyDataByIndex::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyDataByIndex, LobbyData) == 0x000008, "Member 'SteamProMatchmaking_GetLobbyDataByIndex::LobbyData' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyDataByIndex, Key) == 0x000010, "Member 'SteamProMatchmaking_GetLobbyDataByIndex::Key' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyDataByIndex, Value) == 0x000020, "Member 'SteamProMatchmaking_GetLobbyDataByIndex::Value' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyDataByIndex, ReturnValue) == 0x000030, "Member 'SteamProMatchmaking_GetLobbyDataByIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetLobbyDataCount
// 0x0010 (0x0010 - 0x0000)
struct SteamProMatchmaking_GetLobbyDataCount final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2340[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_GetLobbyDataCount) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetLobbyDataCount");
static_assert(sizeof(SteamProMatchmaking_GetLobbyDataCount) == 0x000010, "Wrong size on SteamProMatchmaking_GetLobbyDataCount");
static_assert(offsetof(SteamProMatchmaking_GetLobbyDataCount, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_GetLobbyDataCount::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyDataCount, ReturnValue) == 0x000008, "Member 'SteamProMatchmaking_GetLobbyDataCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetLobbyGameServer
// 0x0030 (0x0030 - 0x0000)
struct SteamProMatchmaking_GetLobbyGameServer final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 GameServerIP;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameServerPort;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2341[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDGameServer;                                 // 0x0020(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2342[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_GetLobbyGameServer) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetLobbyGameServer");
static_assert(sizeof(SteamProMatchmaking_GetLobbyGameServer) == 0x000030, "Wrong size on SteamProMatchmaking_GetLobbyGameServer");
static_assert(offsetof(SteamProMatchmaking_GetLobbyGameServer, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_GetLobbyGameServer::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyGameServer, GameServerIP) == 0x000008, "Member 'SteamProMatchmaking_GetLobbyGameServer::GameServerIP' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyGameServer, GameServerPort) == 0x000018, "Member 'SteamProMatchmaking_GetLobbyGameServer::GameServerPort' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyGameServer, SteamIDGameServer) == 0x000020, "Member 'SteamProMatchmaking_GetLobbyGameServer::SteamIDGameServer' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyGameServer, ReturnValue) == 0x000028, "Member 'SteamProMatchmaking_GetLobbyGameServer::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetLobbyMemberByIndex
// 0x0018 (0x0018 - 0x0000)
struct SteamProMatchmaking_GetLobbyMemberByIndex final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Member;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2343[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_GetLobbyMemberByIndex) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetLobbyMemberByIndex");
static_assert(sizeof(SteamProMatchmaking_GetLobbyMemberByIndex) == 0x000018, "Wrong size on SteamProMatchmaking_GetLobbyMemberByIndex");
static_assert(offsetof(SteamProMatchmaking_GetLobbyMemberByIndex, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_GetLobbyMemberByIndex::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyMemberByIndex, Member) == 0x000008, "Member 'SteamProMatchmaking_GetLobbyMemberByIndex::Member' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyMemberByIndex, ReturnValue) == 0x000010, "Member 'SteamProMatchmaking_GetLobbyMemberByIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetLobbyMemberData
// 0x0030 (0x0030 - 0x0000)
struct SteamProMatchmaking_GetLobbyMemberData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_GetLobbyMemberData) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetLobbyMemberData");
static_assert(sizeof(SteamProMatchmaking_GetLobbyMemberData) == 0x000030, "Wrong size on SteamProMatchmaking_GetLobbyMemberData");
static_assert(offsetof(SteamProMatchmaking_GetLobbyMemberData, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_GetLobbyMemberData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyMemberData, SteamIDUser) == 0x000008, "Member 'SteamProMatchmaking_GetLobbyMemberData::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyMemberData, Key) == 0x000010, "Member 'SteamProMatchmaking_GetLobbyMemberData::Key' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyMemberData, ReturnValue) == 0x000020, "Member 'SteamProMatchmaking_GetLobbyMemberData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetLobbyMemberLimit
// 0x0010 (0x0010 - 0x0000)
struct SteamProMatchmaking_GetLobbyMemberLimit final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2344[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_GetLobbyMemberLimit) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetLobbyMemberLimit");
static_assert(sizeof(SteamProMatchmaking_GetLobbyMemberLimit) == 0x000010, "Wrong size on SteamProMatchmaking_GetLobbyMemberLimit");
static_assert(offsetof(SteamProMatchmaking_GetLobbyMemberLimit, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_GetLobbyMemberLimit::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyMemberLimit, ReturnValue) == 0x000008, "Member 'SteamProMatchmaking_GetLobbyMemberLimit::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetLobbyOwner
// 0x0010 (0x0010 - 0x0000)
struct SteamProMatchmaking_GetLobbyOwner final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_GetLobbyOwner) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetLobbyOwner");
static_assert(sizeof(SteamProMatchmaking_GetLobbyOwner) == 0x000010, "Wrong size on SteamProMatchmaking_GetLobbyOwner");
static_assert(offsetof(SteamProMatchmaking_GetLobbyOwner, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_GetLobbyOwner::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetLobbyOwner, ReturnValue) == 0x000008, "Member 'SteamProMatchmaking_GetLobbyOwner::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetNumLobbyMembers
// 0x0010 (0x0010 - 0x0000)
struct SteamProMatchmaking_GetNumLobbyMembers final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2345[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_GetNumLobbyMembers) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetNumLobbyMembers");
static_assert(sizeof(SteamProMatchmaking_GetNumLobbyMembers) == 0x000010, "Wrong size on SteamProMatchmaking_GetNumLobbyMembers");
static_assert(offsetof(SteamProMatchmaking_GetNumLobbyMembers, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_GetNumLobbyMembers::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_GetNumLobbyMembers, ReturnValue) == 0x000008, "Member 'SteamProMatchmaking_GetNumLobbyMembers::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.GetSteamMatchmaking
// 0x0008 (0x0008 - 0x0000)
struct SteamProMatchmaking_GetSteamMatchmaking final
{
public:
	class USteamProMatchmaking*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_GetSteamMatchmaking) == 0x000008, "Wrong alignment on SteamProMatchmaking_GetSteamMatchmaking");
static_assert(sizeof(SteamProMatchmaking_GetSteamMatchmaking) == 0x000008, "Wrong size on SteamProMatchmaking_GetSteamMatchmaking");
static_assert(offsetof(SteamProMatchmaking_GetSteamMatchmaking, ReturnValue) == 0x000000, "Member 'SteamProMatchmaking_GetSteamMatchmaking::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.InviteUserToLobby
// 0x0018 (0x0018 - 0x0000)
struct SteamProMatchmaking_InviteUserToLobby final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDInvitee;                                    // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2346[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_InviteUserToLobby) == 0x000008, "Wrong alignment on SteamProMatchmaking_InviteUserToLobby");
static_assert(sizeof(SteamProMatchmaking_InviteUserToLobby) == 0x000018, "Wrong size on SteamProMatchmaking_InviteUserToLobby");
static_assert(offsetof(SteamProMatchmaking_InviteUserToLobby, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_InviteUserToLobby::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_InviteUserToLobby, SteamIDInvitee) == 0x000008, "Member 'SteamProMatchmaking_InviteUserToLobby::SteamIDInvitee' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_InviteUserToLobby, ReturnValue) == 0x000010, "Member 'SteamProMatchmaking_InviteUserToLobby::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.LeaveLobby
// 0x0008 (0x0008 - 0x0000)
struct SteamProMatchmaking_LeaveLobby final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_LeaveLobby) == 0x000008, "Wrong alignment on SteamProMatchmaking_LeaveLobby");
static_assert(sizeof(SteamProMatchmaking_LeaveLobby) == 0x000008, "Wrong size on SteamProMatchmaking_LeaveLobby");
static_assert(offsetof(SteamProMatchmaking_LeaveLobby, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_LeaveLobby::SteamIDLobby' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.RemoveFavoriteGame
// 0x0038 (0x0038 - 0x0000)
struct SteamProMatchmaking_RemoveFavoriteGame final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2347[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESteamFavoriteFlags>                   Param_Flags;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2348[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_RemoveFavoriteGame) == 0x000008, "Wrong alignment on SteamProMatchmaking_RemoveFavoriteGame");
static_assert(sizeof(SteamProMatchmaking_RemoveFavoriteGame) == 0x000038, "Wrong size on SteamProMatchmaking_RemoveFavoriteGame");
static_assert(offsetof(SteamProMatchmaking_RemoveFavoriteGame, AppID) == 0x000000, "Member 'SteamProMatchmaking_RemoveFavoriteGame::AppID' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_RemoveFavoriteGame, IP) == 0x000008, "Member 'SteamProMatchmaking_RemoveFavoriteGame::IP' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_RemoveFavoriteGame, ConnectionPort) == 0x000018, "Member 'SteamProMatchmaking_RemoveFavoriteGame::ConnectionPort' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_RemoveFavoriteGame, QueryPort) == 0x00001C, "Member 'SteamProMatchmaking_RemoveFavoriteGame::QueryPort' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_RemoveFavoriteGame, Param_Flags) == 0x000020, "Member 'SteamProMatchmaking_RemoveFavoriteGame::Param_Flags' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_RemoveFavoriteGame, ReturnValue) == 0x000030, "Member 'SteamProMatchmaking_RemoveFavoriteGame::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.RequestLobbyData
// 0x0010 (0x0010 - 0x0000)
struct SteamProMatchmaking_RequestLobbyData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2349[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_RequestLobbyData) == 0x000008, "Wrong alignment on SteamProMatchmaking_RequestLobbyData");
static_assert(sizeof(SteamProMatchmaking_RequestLobbyData) == 0x000010, "Wrong size on SteamProMatchmaking_RequestLobbyData");
static_assert(offsetof(SteamProMatchmaking_RequestLobbyData, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_RequestLobbyData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_RequestLobbyData, ReturnValue) == 0x000008, "Member 'SteamProMatchmaking_RequestLobbyData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.SendLobbyChatMsg
// 0x0020 (0x0020 - 0x0000)
struct SteamProMatchmaking_SendLobbyChatMsg final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234A[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_SendLobbyChatMsg) == 0x000008, "Wrong alignment on SteamProMatchmaking_SendLobbyChatMsg");
static_assert(sizeof(SteamProMatchmaking_SendLobbyChatMsg) == 0x000020, "Wrong size on SteamProMatchmaking_SendLobbyChatMsg");
static_assert(offsetof(SteamProMatchmaking_SendLobbyChatMsg, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_SendLobbyChatMsg::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SendLobbyChatMsg, Message) == 0x000008, "Member 'SteamProMatchmaking_SendLobbyChatMsg::Message' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SendLobbyChatMsg, ReturnValue) == 0x000018, "Member 'SteamProMatchmaking_SendLobbyChatMsg::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.SetLinkedLobby
// 0x0018 (0x0018 - 0x0000)
struct SteamProMatchmaking_SetLinkedLobby final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDLobbyDependent;                             // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_SetLinkedLobby) == 0x000008, "Wrong alignment on SteamProMatchmaking_SetLinkedLobby");
static_assert(sizeof(SteamProMatchmaking_SetLinkedLobby) == 0x000018, "Wrong size on SteamProMatchmaking_SetLinkedLobby");
static_assert(offsetof(SteamProMatchmaking_SetLinkedLobby, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_SetLinkedLobby::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLinkedLobby, SteamIDLobbyDependent) == 0x000008, "Member 'SteamProMatchmaking_SetLinkedLobby::SteamIDLobbyDependent' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLinkedLobby, ReturnValue) == 0x000010, "Member 'SteamProMatchmaking_SetLinkedLobby::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.SetLobbyData
// 0x0030 (0x0030 - 0x0000)
struct SteamProMatchmaking_SetLobbyData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234C[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_SetLobbyData) == 0x000008, "Wrong alignment on SteamProMatchmaking_SetLobbyData");
static_assert(sizeof(SteamProMatchmaking_SetLobbyData) == 0x000030, "Wrong size on SteamProMatchmaking_SetLobbyData");
static_assert(offsetof(SteamProMatchmaking_SetLobbyData, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_SetLobbyData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyData, Key) == 0x000008, "Member 'SteamProMatchmaking_SetLobbyData::Key' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyData, Value) == 0x000018, "Member 'SteamProMatchmaking_SetLobbyData::Value' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyData, ReturnValue) == 0x000028, "Member 'SteamProMatchmaking_SetLobbyData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.SetLobbyGameServer
// 0x0028 (0x0028 - 0x0000)
struct SteamProMatchmaking_SetLobbyGameServer final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 GameServerIP;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameServerPort;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234D[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDGameServer;                                 // 0x0020(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_SetLobbyGameServer) == 0x000008, "Wrong alignment on SteamProMatchmaking_SetLobbyGameServer");
static_assert(sizeof(SteamProMatchmaking_SetLobbyGameServer) == 0x000028, "Wrong size on SteamProMatchmaking_SetLobbyGameServer");
static_assert(offsetof(SteamProMatchmaking_SetLobbyGameServer, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_SetLobbyGameServer::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyGameServer, GameServerIP) == 0x000008, "Member 'SteamProMatchmaking_SetLobbyGameServer::GameServerIP' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyGameServer, GameServerPort) == 0x000018, "Member 'SteamProMatchmaking_SetLobbyGameServer::GameServerPort' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyGameServer, SteamIDGameServer) == 0x000020, "Member 'SteamProMatchmaking_SetLobbyGameServer::SteamIDGameServer' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.SetLobbyJoinable
// 0x0010 (0x0010 - 0x0000)
struct SteamProMatchmaking_SetLobbyJoinable final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLobbyJoinable;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234E[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_SetLobbyJoinable) == 0x000008, "Wrong alignment on SteamProMatchmaking_SetLobbyJoinable");
static_assert(sizeof(SteamProMatchmaking_SetLobbyJoinable) == 0x000010, "Wrong size on SteamProMatchmaking_SetLobbyJoinable");
static_assert(offsetof(SteamProMatchmaking_SetLobbyJoinable, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_SetLobbyJoinable::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyJoinable, bLobbyJoinable) == 0x000008, "Member 'SteamProMatchmaking_SetLobbyJoinable::bLobbyJoinable' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyJoinable, ReturnValue) == 0x000009, "Member 'SteamProMatchmaking_SetLobbyJoinable::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.SetLobbyMemberData
// 0x0028 (0x0028 - 0x0000)
struct SteamProMatchmaking_SetLobbyMemberData final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_SetLobbyMemberData) == 0x000008, "Wrong alignment on SteamProMatchmaking_SetLobbyMemberData");
static_assert(sizeof(SteamProMatchmaking_SetLobbyMemberData) == 0x000028, "Wrong size on SteamProMatchmaking_SetLobbyMemberData");
static_assert(offsetof(SteamProMatchmaking_SetLobbyMemberData, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_SetLobbyMemberData::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyMemberData, Key) == 0x000008, "Member 'SteamProMatchmaking_SetLobbyMemberData::Key' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyMemberData, Value) == 0x000018, "Member 'SteamProMatchmaking_SetLobbyMemberData::Value' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.SetLobbyMemberLimit
// 0x0010 (0x0010 - 0x0000)
struct SteamProMatchmaking_SetLobbyMemberLimit final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxMembers;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234F[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_SetLobbyMemberLimit) == 0x000008, "Wrong alignment on SteamProMatchmaking_SetLobbyMemberLimit");
static_assert(sizeof(SteamProMatchmaking_SetLobbyMemberLimit) == 0x000010, "Wrong size on SteamProMatchmaking_SetLobbyMemberLimit");
static_assert(offsetof(SteamProMatchmaking_SetLobbyMemberLimit, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_SetLobbyMemberLimit::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyMemberLimit, MaxMembers) == 0x000008, "Member 'SteamProMatchmaking_SetLobbyMemberLimit::MaxMembers' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyMemberLimit, ReturnValue) == 0x00000C, "Member 'SteamProMatchmaking_SetLobbyMemberLimit::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.SetLobbyOwner
// 0x0018 (0x0018 - 0x0000)
struct SteamProMatchmaking_SetLobbyOwner final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDNewOwner;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2350[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_SetLobbyOwner) == 0x000008, "Wrong alignment on SteamProMatchmaking_SetLobbyOwner");
static_assert(sizeof(SteamProMatchmaking_SetLobbyOwner) == 0x000018, "Wrong size on SteamProMatchmaking_SetLobbyOwner");
static_assert(offsetof(SteamProMatchmaking_SetLobbyOwner, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_SetLobbyOwner::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyOwner, SteamIDNewOwner) == 0x000008, "Member 'SteamProMatchmaking_SetLobbyOwner::SteamIDNewOwner' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyOwner, ReturnValue) == 0x000010, "Member 'SteamProMatchmaking_SetLobbyOwner::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.SetLobbyType
// 0x0010 (0x0010 - 0x0000)
struct SteamProMatchmaking_SetLobbyType final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamLobbyType                               LobbyType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2351[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmaking_SetLobbyType) == 0x000008, "Wrong alignment on SteamProMatchmaking_SetLobbyType");
static_assert(sizeof(SteamProMatchmaking_SetLobbyType) == 0x000010, "Wrong size on SteamProMatchmaking_SetLobbyType");
static_assert(offsetof(SteamProMatchmaking_SetLobbyType, SteamIDLobby) == 0x000000, "Member 'SteamProMatchmaking_SetLobbyType::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyType, LobbyType) == 0x000008, "Member 'SteamProMatchmaking_SetLobbyType::LobbyType' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_SetLobbyType, ReturnValue) == 0x000009, "Member 'SteamProMatchmaking_SetLobbyType::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.CreateLobby
// 0x0018 (0x0018 - 0x0000)
struct SteamProMatchmaking_CreateLobby final
{
public:
	TDelegate<void(struct FCreateLobbyData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLobbyType                               LobbyType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2352[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxMembers;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_CreateLobby) == 0x000004, "Wrong alignment on SteamProMatchmaking_CreateLobby");
static_assert(sizeof(SteamProMatchmaking_CreateLobby) == 0x000018, "Wrong size on SteamProMatchmaking_CreateLobby");
static_assert(offsetof(SteamProMatchmaking_CreateLobby, Callback) == 0x000000, "Member 'SteamProMatchmaking_CreateLobby::Callback' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_CreateLobby, LobbyType) == 0x000010, "Member 'SteamProMatchmaking_CreateLobby::LobbyType' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_CreateLobby, MaxMembers) == 0x000014, "Member 'SteamProMatchmaking_CreateLobby::MaxMembers' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.JoinLobby
// 0x0018 (0x0018 - 0x0000)
struct SteamProMatchmaking_JoinLobby final
{
public:
	TDelegate<void(struct FJoinLobbyData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDLobby;                                      // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_JoinLobby) == 0x000008, "Wrong alignment on SteamProMatchmaking_JoinLobby");
static_assert(sizeof(SteamProMatchmaking_JoinLobby) == 0x000018, "Wrong size on SteamProMatchmaking_JoinLobby");
static_assert(offsetof(SteamProMatchmaking_JoinLobby, Callback) == 0x000000, "Member 'SteamProMatchmaking_JoinLobby::Callback' has a wrong offset!");
static_assert(offsetof(SteamProMatchmaking_JoinLobby, SteamIDLobby) == 0x000010, "Member 'SteamProMatchmaking_JoinLobby::SteamIDLobby' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmaking.RequestLobbyList
// 0x0010 (0x0010 - 0x0000)
struct SteamProMatchmaking_RequestLobbyList final
{
public:
	TDelegate<void(struct FLobbyMatchList& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmaking_RequestLobbyList) == 0x000004, "Wrong alignment on SteamProMatchmaking_RequestLobbyList");
static_assert(sizeof(SteamProMatchmaking_RequestLobbyList) == 0x000010, "Wrong size on SteamProMatchmaking_RequestLobbyList");
static_assert(offsetof(SteamProMatchmaking_RequestLobbyList, Callback) == 0x000000, "Member 'SteamProMatchmaking_RequestLobbyList::Callback' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingAsyncActionCreateLobby.CreateLobbyAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLobbyType                               LobbyType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2353[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxMembers;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2354[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProMatchmakingAsyncActionCreateLobby* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync");
static_assert(sizeof(SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync) == 0x000020, "Wrong size on SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync, LobbyType) == 0x000008, "Member 'SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync::LobbyType' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync, MaxMembers) == 0x00000C, "Member 'SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync::MaxMembers' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync, Timeout) == 0x000010, "Member 'SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProMatchmakingAsyncActionCreateLobby_CreateLobbyAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingAsyncActionCreateLobby.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProMatchmakingAsyncActionCreateLobby_HandleCallback final
{
public:
	struct FCreateLobbyData                       Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2355[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProMatchmakingAsyncActionCreateLobby_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingAsyncActionCreateLobby_HandleCallback");
static_assert(sizeof(SteamCoreProMatchmakingAsyncActionCreateLobby_HandleCallback) == 0x000018, "Wrong size on SteamCoreProMatchmakingAsyncActionCreateLobby_HandleCallback");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionCreateLobby_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProMatchmakingAsyncActionCreateLobby_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionCreateLobby_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProMatchmakingAsyncActionCreateLobby_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingAsyncActionRequestLobbyList.RequestLobbyListAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2356[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProMatchmakingAsyncActionRequestLobbyList* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync");
static_assert(sizeof(SteamCoreProMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync) == 0x000018, "Wrong size on SteamCoreProMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync, Timeout) == 0x000008, "Member 'SteamCoreProMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync, ReturnValue) == 0x000010, "Member 'SteamCoreProMatchmakingAsyncActionRequestLobbyList_RequestLobbyListAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingAsyncActionRequestLobbyList.HandleCallback
// 0x0008 (0x0008 - 0x0000)
struct SteamCoreProMatchmakingAsyncActionRequestLobbyList_HandleCallback final
{
public:
	struct FLobbyMatchList                        Data;                                              // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2357[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProMatchmakingAsyncActionRequestLobbyList_HandleCallback) == 0x000004, "Wrong alignment on SteamCoreProMatchmakingAsyncActionRequestLobbyList_HandleCallback");
static_assert(sizeof(SteamCoreProMatchmakingAsyncActionRequestLobbyList_HandleCallback) == 0x000008, "Wrong size on SteamCoreProMatchmakingAsyncActionRequestLobbyList_HandleCallback");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionRequestLobbyList_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProMatchmakingAsyncActionRequestLobbyList_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionRequestLobbyList_HandleCallback, bWasSuccessful) == 0x000004, "Member 'SteamCoreProMatchmakingAsyncActionRequestLobbyList_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingAsyncActionJoinLobby.JoinLobbyAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDLobby;                                      // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2358[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProMatchmakingAsyncActionJoinLobby* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync");
static_assert(sizeof(SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync) == 0x000020, "Wrong size on SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync, SteamIDLobby) == 0x000008, "Member 'SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync, Timeout) == 0x000010, "Member 'SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProMatchmakingAsyncActionJoinLobby_JoinLobbyAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingAsyncActionJoinLobby.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProMatchmakingAsyncActionJoinLobby_HandleCallback final
{
public:
	struct FJoinLobbyData                         Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2359[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProMatchmakingAsyncActionJoinLobby_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingAsyncActionJoinLobby_HandleCallback");
static_assert(sizeof(SteamCoreProMatchmakingAsyncActionJoinLobby_HandleCallback) == 0x000018, "Wrong size on SteamCoreProMatchmakingAsyncActionJoinLobby_HandleCallback");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionJoinLobby_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProMatchmakingAsyncActionJoinLobby_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingAsyncActionJoinLobby_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProMatchmakingAsyncActionJoinLobby_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProCreateSession.CreateSteamCoreProSession
// 0x0088 (0x0088 - 0x0000)
struct SteamCoreProCreateSession_CreateSteamCoreProSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSteamSessionSetting> SessionSettings;                                   // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLAN;                                           // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInvites;                                     // 0x006D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesPresence;                                     // 0x006E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinViaPresence;                             // 0x006F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinViaPresenceFriendsOnly;                  // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAntiCheatProtected;                               // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesStats;                                        // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAdvertise;                                  // 0x0073(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLobbiesVoiceChatIfAvailable;                   // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235B[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235C[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProCreateSession*             ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProCreateSession_CreateSteamCoreProSession) == 0x000008, "Wrong alignment on SteamCoreProCreateSession_CreateSteamCoreProSession");
static_assert(sizeof(SteamCoreProCreateSession_CreateSteamCoreProSession) == 0x000088, "Wrong size on SteamCoreProCreateSession_CreateSteamCoreProSession");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, WorldContextObject) == 0x000000, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, SessionSettings) == 0x000008, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::SessionSettings' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, SessionName) == 0x000058, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::SessionName' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, MaxPlayers) == 0x000068, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::MaxPlayers' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, bUseLAN) == 0x00006C, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::bUseLAN' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, bAllowInvites) == 0x00006D, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::bAllowInvites' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, bUsesPresence) == 0x00006E, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::bUsesPresence' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, bAllowJoinViaPresence) == 0x00006F, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::bAllowJoinViaPresence' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, bAllowJoinViaPresenceFriendsOnly) == 0x000070, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::bAllowJoinViaPresenceFriendsOnly' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, bAntiCheatProtected) == 0x000071, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::bAntiCheatProtected' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, bUsesStats) == 0x000072, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::bUsesStats' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, bShouldAdvertise) == 0x000073, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::bShouldAdvertise' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, bUseLobbiesVoiceChatIfAvailable) == 0x000074, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::bUseLobbiesVoiceChatIfAvailable' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, Timeout) == 0x000078, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProCreateSession_CreateSteamCoreProSession, ReturnValue) == 0x000080, "Member 'SteamCoreProCreateSession_CreateSteamCoreProSession::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFindSession.FindSteamCoreProSessions
// 0x0070 (0x0070 - 0x0000)
struct SteamCoreProFindSession_FindSteamCoreProSessions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSteamSessionSearchSetting> SearchSettings;                                    // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLAN;                                           // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamSessionFindType                         ServerType;                                        // 0x005D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLobbyDistanceFilter                     DistanceFilter;                                    // 0x005E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEmptyServersOnly;                                 // 0x005F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSecureServersOnly;                                // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235E[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProFindSession*               ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProFindSession_FindSteamCoreProSessions) == 0x000008, "Wrong alignment on SteamCoreProFindSession_FindSteamCoreProSessions");
static_assert(sizeof(SteamCoreProFindSession_FindSteamCoreProSessions) == 0x000070, "Wrong size on SteamCoreProFindSession_FindSteamCoreProSessions");
static_assert(offsetof(SteamCoreProFindSession_FindSteamCoreProSessions, WorldContextObject) == 0x000000, "Member 'SteamCoreProFindSession_FindSteamCoreProSessions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProFindSession_FindSteamCoreProSessions, SearchSettings) == 0x000008, "Member 'SteamCoreProFindSession_FindSteamCoreProSessions::SearchSettings' has a wrong offset!");
static_assert(offsetof(SteamCoreProFindSession_FindSteamCoreProSessions, MaxResults) == 0x000058, "Member 'SteamCoreProFindSession_FindSteamCoreProSessions::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreProFindSession_FindSteamCoreProSessions, bUseLAN) == 0x00005C, "Member 'SteamCoreProFindSession_FindSteamCoreProSessions::bUseLAN' has a wrong offset!");
static_assert(offsetof(SteamCoreProFindSession_FindSteamCoreProSessions, ServerType) == 0x00005D, "Member 'SteamCoreProFindSession_FindSteamCoreProSessions::ServerType' has a wrong offset!");
static_assert(offsetof(SteamCoreProFindSession_FindSteamCoreProSessions, DistanceFilter) == 0x00005E, "Member 'SteamCoreProFindSession_FindSteamCoreProSessions::DistanceFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreProFindSession_FindSteamCoreProSessions, bEmptyServersOnly) == 0x00005F, "Member 'SteamCoreProFindSession_FindSteamCoreProSessions::bEmptyServersOnly' has a wrong offset!");
static_assert(offsetof(SteamCoreProFindSession_FindSteamCoreProSessions, bSecureServersOnly) == 0x000060, "Member 'SteamCoreProFindSession_FindSteamCoreProSessions::bSecureServersOnly' has a wrong offset!");
static_assert(offsetof(SteamCoreProFindSession_FindSteamCoreProSessions, Timeout) == 0x000064, "Member 'SteamCoreProFindSession_FindSteamCoreProSessions::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProFindSession_FindSteamCoreProSessions, ReturnValue) == 0x000068, "Member 'SteamCoreProFindSession_FindSteamCoreProSessions::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProFindSession.OnCompleted
// 0x0001 (0x0001 - 0x0000)
struct SteamCoreProFindSession_OnCompleted final
{
public:
	bool                                          bSuccessful;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProFindSession_OnCompleted) == 0x000001, "Wrong alignment on SteamCoreProFindSession_OnCompleted");
static_assert(sizeof(SteamCoreProFindSession_OnCompleted) == 0x000001, "Wrong size on SteamCoreProFindSession_OnCompleted");
static_assert(offsetof(SteamCoreProFindSession_OnCompleted, bSuccessful) == 0x000000, "Member 'SteamCoreProFindSession_OnCompleted::bSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProDestroySession.DestroySteamCoreProSession
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProDestroySession_DestroySteamCoreProSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2360[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProDestroySession*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProDestroySession_DestroySteamCoreProSession) == 0x000008, "Wrong alignment on SteamCoreProDestroySession_DestroySteamCoreProSession");
static_assert(sizeof(SteamCoreProDestroySession_DestroySteamCoreProSession) == 0x000018, "Wrong size on SteamCoreProDestroySession_DestroySteamCoreProSession");
static_assert(offsetof(SteamCoreProDestroySession_DestroySteamCoreProSession, WorldContextObject) == 0x000000, "Member 'SteamCoreProDestroySession_DestroySteamCoreProSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProDestroySession_DestroySteamCoreProSession, Timeout) == 0x000008, "Member 'SteamCoreProDestroySession_DestroySteamCoreProSession::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProDestroySession_DestroySteamCoreProSession, ReturnValue) == 0x000010, "Member 'SteamCoreProDestroySession_DestroySteamCoreProSession::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProDestroySession.OnCompleted
// 0x000C (0x000C - 0x0000)
struct SteamCoreProDestroySession_OnCompleted final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2361[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProDestroySession_OnCompleted) == 0x000004, "Wrong alignment on SteamCoreProDestroySession_OnCompleted");
static_assert(sizeof(SteamCoreProDestroySession_OnCompleted) == 0x00000C, "Wrong size on SteamCoreProDestroySession_OnCompleted");
static_assert(offsetof(SteamCoreProDestroySession_OnCompleted, SessionName) == 0x000000, "Member 'SteamCoreProDestroySession_OnCompleted::SessionName' has a wrong offset!");
static_assert(offsetof(SteamCoreProDestroySession_OnCompleted, bWasSuccessful) == 0x000008, "Member 'SteamCoreProDestroySession_OnCompleted::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUpdateSession.UpdateSteamCoreProSession
// 0x0078 (0x0078 - 0x0000)
struct SteamCoreProUpdateSession_UpdateSteamCoreProSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSteamSessionSearchSetting> Settings;                                          // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2363[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUpdateSession*             ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUpdateSession_UpdateSteamCoreProSession) == 0x000008, "Wrong alignment on SteamCoreProUpdateSession_UpdateSteamCoreProSession");
static_assert(sizeof(SteamCoreProUpdateSession_UpdateSteamCoreProSession) == 0x000078, "Wrong size on SteamCoreProUpdateSession_UpdateSteamCoreProSession");
static_assert(offsetof(SteamCoreProUpdateSession_UpdateSteamCoreProSession, WorldContextObject) == 0x000000, "Member 'SteamCoreProUpdateSession_UpdateSteamCoreProSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUpdateSession_UpdateSteamCoreProSession, Settings) == 0x000008, "Member 'SteamCoreProUpdateSession_UpdateSteamCoreProSession::Settings' has a wrong offset!");
static_assert(offsetof(SteamCoreProUpdateSession_UpdateSteamCoreProSession, SessionName) == 0x000058, "Member 'SteamCoreProUpdateSession_UpdateSteamCoreProSession::SessionName' has a wrong offset!");
static_assert(offsetof(SteamCoreProUpdateSession_UpdateSteamCoreProSession, MaxPlayers) == 0x000068, "Member 'SteamCoreProUpdateSession_UpdateSteamCoreProSession::MaxPlayers' has a wrong offset!");
static_assert(offsetof(SteamCoreProUpdateSession_UpdateSteamCoreProSession, ReturnValue) == 0x000070, "Member 'SteamCoreProUpdateSession_UpdateSteamCoreProSession::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUpdateSession.OnCompleted
// 0x000C (0x000C - 0x0000)
struct SteamCoreProUpdateSession_OnCompleted final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2364[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUpdateSession_OnCompleted) == 0x000004, "Wrong alignment on SteamCoreProUpdateSession_OnCompleted");
static_assert(sizeof(SteamCoreProUpdateSession_OnCompleted) == 0x00000C, "Wrong size on SteamCoreProUpdateSession_OnCompleted");
static_assert(offsetof(SteamCoreProUpdateSession_OnCompleted, SessionName) == 0x000000, "Member 'SteamCoreProUpdateSession_OnCompleted::SessionName' has a wrong offset!");
static_assert(offsetof(SteamCoreProUpdateSession_OnCompleted, bWasSuccessful) == 0x000008, "Member 'SteamCoreProUpdateSession_OnCompleted::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmakingServers.GetSteamMatchmakingServers
// 0x0008 (0x0008 - 0x0000)
struct SteamProMatchmakingServers_GetSteamMatchmakingServers final
{
public:
	class USteamProMatchmakingServers*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmakingServers_GetSteamMatchmakingServers) == 0x000008, "Wrong alignment on SteamProMatchmakingServers_GetSteamMatchmakingServers");
static_assert(sizeof(SteamProMatchmakingServers_GetSteamMatchmakingServers) == 0x000008, "Wrong size on SteamProMatchmakingServers_GetSteamMatchmakingServers");
static_assert(offsetof(SteamProMatchmakingServers_GetSteamMatchmakingServers, ReturnValue) == 0x000000, "Member 'SteamProMatchmakingServers_GetSteamMatchmakingServers::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmakingServers.PingServer
// 0x0028 (0x0028 - 0x0000)
struct SteamProMatchmakingServers_PingServer final
{
public:
	TDelegate<void(struct FGameServerItem& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2365[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmakingServers_PingServer) == 0x000008, "Wrong alignment on SteamProMatchmakingServers_PingServer");
static_assert(sizeof(SteamProMatchmakingServers_PingServer) == 0x000028, "Wrong size on SteamProMatchmakingServers_PingServer");
static_assert(offsetof(SteamProMatchmakingServers_PingServer, Callback) == 0x000000, "Member 'SteamProMatchmakingServers_PingServer::Callback' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_PingServer, IP) == 0x000010, "Member 'SteamProMatchmakingServers_PingServer::IP' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_PingServer, QueryPort) == 0x000020, "Member 'SteamProMatchmakingServers_PingServer::QueryPort' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmakingServers.RequestFavoritesServerList
// 0x0028 (0x0028 - 0x0000)
struct SteamProMatchmakingServers_RequestFavoritesServerList final
{
public:
	TDelegate<void(struct FGameServerItem& Data)> ServerCallback;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2366[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmakingServers_RequestFavoritesServerList) == 0x000008, "Wrong alignment on SteamProMatchmakingServers_RequestFavoritesServerList");
static_assert(sizeof(SteamProMatchmakingServers_RequestFavoritesServerList) == 0x000028, "Wrong size on SteamProMatchmakingServers_RequestFavoritesServerList");
static_assert(offsetof(SteamProMatchmakingServers_RequestFavoritesServerList, ServerCallback) == 0x000000, "Member 'SteamProMatchmakingServers_RequestFavoritesServerList::ServerCallback' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestFavoritesServerList, AppID) == 0x000010, "Member 'SteamProMatchmakingServers_RequestFavoritesServerList::AppID' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestFavoritesServerList, Timeout) == 0x000014, "Member 'SteamProMatchmakingServers_RequestFavoritesServerList::Timeout' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestFavoritesServerList, MaxResults) == 0x000018, "Member 'SteamProMatchmakingServers_RequestFavoritesServerList::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestFavoritesServerList, bIgnoreNonResponsive) == 0x00001C, "Member 'SteamProMatchmakingServers_RequestFavoritesServerList::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestFavoritesServerList, ServerFilter) == 0x000020, "Member 'SteamProMatchmakingServers_RequestFavoritesServerList::ServerFilter' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmakingServers.RequestFriendsServerList
// 0x0028 (0x0028 - 0x0000)
struct SteamProMatchmakingServers_RequestFriendsServerList final
{
public:
	TDelegate<void(struct FGameServerItem& Data)> ServerCallback;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2367[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmakingServers_RequestFriendsServerList) == 0x000008, "Wrong alignment on SteamProMatchmakingServers_RequestFriendsServerList");
static_assert(sizeof(SteamProMatchmakingServers_RequestFriendsServerList) == 0x000028, "Wrong size on SteamProMatchmakingServers_RequestFriendsServerList");
static_assert(offsetof(SteamProMatchmakingServers_RequestFriendsServerList, ServerCallback) == 0x000000, "Member 'SteamProMatchmakingServers_RequestFriendsServerList::ServerCallback' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestFriendsServerList, AppID) == 0x000010, "Member 'SteamProMatchmakingServers_RequestFriendsServerList::AppID' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestFriendsServerList, Timeout) == 0x000014, "Member 'SteamProMatchmakingServers_RequestFriendsServerList::Timeout' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestFriendsServerList, MaxResults) == 0x000018, "Member 'SteamProMatchmakingServers_RequestFriendsServerList::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestFriendsServerList, bIgnoreNonResponsive) == 0x00001C, "Member 'SteamProMatchmakingServers_RequestFriendsServerList::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestFriendsServerList, ServerFilter) == 0x000020, "Member 'SteamProMatchmakingServers_RequestFriendsServerList::ServerFilter' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmakingServers.RequestHistoryServerList
// 0x0028 (0x0028 - 0x0000)
struct SteamProMatchmakingServers_RequestHistoryServerList final
{
public:
	TDelegate<void(struct FGameServerItem& Data)> ServerCallback;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2368[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmakingServers_RequestHistoryServerList) == 0x000008, "Wrong alignment on SteamProMatchmakingServers_RequestHistoryServerList");
static_assert(sizeof(SteamProMatchmakingServers_RequestHistoryServerList) == 0x000028, "Wrong size on SteamProMatchmakingServers_RequestHistoryServerList");
static_assert(offsetof(SteamProMatchmakingServers_RequestHistoryServerList, ServerCallback) == 0x000000, "Member 'SteamProMatchmakingServers_RequestHistoryServerList::ServerCallback' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestHistoryServerList, AppID) == 0x000010, "Member 'SteamProMatchmakingServers_RequestHistoryServerList::AppID' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestHistoryServerList, Timeout) == 0x000014, "Member 'SteamProMatchmakingServers_RequestHistoryServerList::Timeout' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestHistoryServerList, MaxResults) == 0x000018, "Member 'SteamProMatchmakingServers_RequestHistoryServerList::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestHistoryServerList, bIgnoreNonResponsive) == 0x00001C, "Member 'SteamProMatchmakingServers_RequestHistoryServerList::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestHistoryServerList, ServerFilter) == 0x000020, "Member 'SteamProMatchmakingServers_RequestHistoryServerList::ServerFilter' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmakingServers.RequestInternetServerList
// 0x0028 (0x0028 - 0x0000)
struct SteamProMatchmakingServers_RequestInternetServerList final
{
public:
	TDelegate<void(struct FGameServerItem& Data)> ServerCallback;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2369[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmakingServers_RequestInternetServerList) == 0x000008, "Wrong alignment on SteamProMatchmakingServers_RequestInternetServerList");
static_assert(sizeof(SteamProMatchmakingServers_RequestInternetServerList) == 0x000028, "Wrong size on SteamProMatchmakingServers_RequestInternetServerList");
static_assert(offsetof(SteamProMatchmakingServers_RequestInternetServerList, ServerCallback) == 0x000000, "Member 'SteamProMatchmakingServers_RequestInternetServerList::ServerCallback' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestInternetServerList, AppID) == 0x000010, "Member 'SteamProMatchmakingServers_RequestInternetServerList::AppID' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestInternetServerList, Timeout) == 0x000014, "Member 'SteamProMatchmakingServers_RequestInternetServerList::Timeout' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestInternetServerList, MaxResults) == 0x000018, "Member 'SteamProMatchmakingServers_RequestInternetServerList::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestInternetServerList, bIgnoreNonResponsive) == 0x00001C, "Member 'SteamProMatchmakingServers_RequestInternetServerList::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestInternetServerList, ServerFilter) == 0x000020, "Member 'SteamProMatchmakingServers_RequestInternetServerList::ServerFilter' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmakingServers.RequestLANServerList
// 0x0028 (0x0028 - 0x0000)
struct SteamProMatchmakingServers_RequestLANServerList final
{
public:
	TDelegate<void(struct FGameServerItem& Data)> ServerCallback;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236A[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmakingServers_RequestLANServerList) == 0x000008, "Wrong alignment on SteamProMatchmakingServers_RequestLANServerList");
static_assert(sizeof(SteamProMatchmakingServers_RequestLANServerList) == 0x000028, "Wrong size on SteamProMatchmakingServers_RequestLANServerList");
static_assert(offsetof(SteamProMatchmakingServers_RequestLANServerList, ServerCallback) == 0x000000, "Member 'SteamProMatchmakingServers_RequestLANServerList::ServerCallback' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestLANServerList, AppID) == 0x000010, "Member 'SteamProMatchmakingServers_RequestLANServerList::AppID' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestLANServerList, Timeout) == 0x000014, "Member 'SteamProMatchmakingServers_RequestLANServerList::Timeout' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestLANServerList, MaxResults) == 0x000018, "Member 'SteamProMatchmakingServers_RequestLANServerList::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestLANServerList, bIgnoreNonResponsive) == 0x00001C, "Member 'SteamProMatchmakingServers_RequestLANServerList::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestLANServerList, ServerFilter) == 0x000020, "Member 'SteamProMatchmakingServers_RequestLANServerList::ServerFilter' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmakingServers.RequestSpectatorServerList
// 0x0028 (0x0028 - 0x0000)
struct SteamProMatchmakingServers_RequestSpectatorServerList final
{
public:
	TDelegate<void(struct FGameServerItem& Data)> ServerCallback;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236B[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMatchmakingServers_RequestSpectatorServerList) == 0x000008, "Wrong alignment on SteamProMatchmakingServers_RequestSpectatorServerList");
static_assert(sizeof(SteamProMatchmakingServers_RequestSpectatorServerList) == 0x000028, "Wrong size on SteamProMatchmakingServers_RequestSpectatorServerList");
static_assert(offsetof(SteamProMatchmakingServers_RequestSpectatorServerList, ServerCallback) == 0x000000, "Member 'SteamProMatchmakingServers_RequestSpectatorServerList::ServerCallback' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestSpectatorServerList, AppID) == 0x000010, "Member 'SteamProMatchmakingServers_RequestSpectatorServerList::AppID' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestSpectatorServerList, Timeout) == 0x000014, "Member 'SteamProMatchmakingServers_RequestSpectatorServerList::Timeout' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestSpectatorServerList, MaxResults) == 0x000018, "Member 'SteamProMatchmakingServers_RequestSpectatorServerList::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestSpectatorServerList, bIgnoreNonResponsive) == 0x00001C, "Member 'SteamProMatchmakingServers_RequestSpectatorServerList::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_RequestSpectatorServerList, ServerFilter) == 0x000020, "Member 'SteamProMatchmakingServers_RequestSpectatorServerList::ServerFilter' has a wrong offset!");

// Function SteamCorePro.SteamProMatchmakingServers.ServerRules
// 0x0028 (0x0028 - 0x0000)
struct SteamProMatchmakingServers_ServerRules final
{
public:
	TDelegate<void(TArray<struct FGameServerRule>& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236C[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProMatchmakingServers_ServerRules) == 0x000008, "Wrong alignment on SteamProMatchmakingServers_ServerRules");
static_assert(sizeof(SteamProMatchmakingServers_ServerRules) == 0x000028, "Wrong size on SteamProMatchmakingServers_ServerRules");
static_assert(offsetof(SteamProMatchmakingServers_ServerRules, Callback) == 0x000000, "Member 'SteamProMatchmakingServers_ServerRules::Callback' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_ServerRules, IP) == 0x000010, "Member 'SteamProMatchmakingServers_ServerRules::IP' has a wrong offset!");
static_assert(offsetof(SteamProMatchmakingServers_ServerRules, QueryPort) == 0x000020, "Member 'SteamProMatchmakingServers_ServerRules::QueryPort' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionPingServer.CancelPingQueries
// 0x0008 (0x0008 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionPingServer_CancelPingQueries final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionPingServer_CancelPingQueries) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionPingServer_CancelPingQueries");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionPingServer_CancelPingQueries) == 0x000008, "Wrong size on SteamCoreProMatchmakingServersAsyncActionPingServer_CancelPingQueries");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionPingServer_CancelPingQueries, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionPingServer_CancelPingQueries::WorldContextObject' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionPingServer.PingServerAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProMatchmakingServersAsyncActionPingServer* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync) == 0x000028, "Wrong size on SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync, IP) == 0x000008, "Member 'SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync::IP' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync, Port) == 0x000018, "Member 'SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync::Port' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync, Timeout) == 0x00001C, "Member 'SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProMatchmakingServersAsyncActionPingServer_PingServerAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionPingServer.HandleCallback
// 0x00B8 (0x00B8 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionPingServer_HandleCallback final
{
public:
	struct FGameServerItem                        Data;                                              // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x00B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236D[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionPingServer_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionPingServer_HandleCallback");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionPingServer_HandleCallback) == 0x0000B8, "Wrong size on SteamCoreProMatchmakingServersAsyncActionPingServer_HandleCallback");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionPingServer_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionPingServer_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionPingServer_HandleCallback, bWasSuccessful) == 0x0000B0, "Member 'SteamCoreProMatchmakingServersAsyncActionPingServer_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionRequestServerList.CancelServerListQueries
// 0x0008 (0x0008 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries) == 0x000008, "Wrong size on SteamCoreProMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_CancelServerListQueries::WorldContextObject' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionRequestServerList.RequestFavoritesServerListAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236E[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProMatchmakingServersAsyncActionRequestServerList* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync) == 0x000028, "Wrong size on SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, AppID) == 0x000008, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, Timeout) == 0x00000C, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, MaxResults) == 0x000010, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, bIgnoreNonResponsive) == 0x000014, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, ServerFilter) == 0x000018, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::ServerFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFavoritesServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionRequestServerList.RequestFriendsServerListAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236F[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProMatchmakingServersAsyncActionRequestServerList* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync) == 0x000028, "Wrong size on SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, AppID) == 0x000008, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, Timeout) == 0x00000C, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, MaxResults) == 0x000010, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, bIgnoreNonResponsive) == 0x000014, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, ServerFilter) == 0x000018, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::ServerFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestFriendsServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionRequestServerList.RequestHistoryServerListAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2370[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProMatchmakingServersAsyncActionRequestServerList* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync) == 0x000028, "Wrong size on SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, AppID) == 0x000008, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, Timeout) == 0x00000C, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, MaxResults) == 0x000010, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, bIgnoreNonResponsive) == 0x000014, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, ServerFilter) == 0x000018, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::ServerFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestHistoryServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionRequestServerList.RequestInternetServerListAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2371[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProMatchmakingServersAsyncActionRequestServerList* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync) == 0x000028, "Wrong size on SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, AppID) == 0x000008, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, Timeout) == 0x00000C, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, MaxResults) == 0x000010, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, bIgnoreNonResponsive) == 0x000014, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, ServerFilter) == 0x000018, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::ServerFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestInternetServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionRequestServerList.RequestLANServerListAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2372[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProMatchmakingServersAsyncActionRequestServerList* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync) == 0x000028, "Wrong size on SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, AppID) == 0x000008, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, Timeout) == 0x00000C, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, MaxResults) == 0x000010, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, bIgnoreNonResponsive) == 0x000014, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, ServerFilter) == 0x000018, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::ServerFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestLANServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionRequestServerList.RequestSpectatorServerListAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNonResponsive;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2373[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UServerFilter*                          ServerFilter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProMatchmakingServersAsyncActionRequestServerList* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync) == 0x000028, "Wrong size on SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, AppID) == 0x000008, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, Timeout) == 0x00000C, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, MaxResults) == 0x000010, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::MaxResults' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, bIgnoreNonResponsive) == 0x000014, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::bIgnoreNonResponsive' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, ServerFilter) == 0x000018, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::ServerFilter' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_RequestSpectatorServerListAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionRequestServerList.HandleCallback
// 0x00B0 (0x00B0 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionRequestServerList_HandleCallback final
{
public:
	struct FGameServerItem                        Data;                                              // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionRequestServerList_HandleCallback");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_HandleCallback) == 0x0000B0, "Wrong size on SteamCoreProMatchmakingServersAsyncActionRequestServerList_HandleCallback");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionRequestServerList_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionRequestServerList_HandleCallback::Data' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionServerRules.CancelServerRulesQueries
// 0x0008 (0x0008 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries) == 0x000008, "Wrong size on SteamCoreProMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionServerRules_CancelServerRulesQueries::WorldContextObject' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionServerRules.ServerRulesAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryPort;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProMatchmakingServersAsyncActionServerRules* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync) == 0x000028, "Wrong size on SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync, IP) == 0x000008, "Member 'SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync::IP' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync, QueryPort) == 0x000018, "Member 'SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync::QueryPort' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync, Timeout) == 0x00001C, "Member 'SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProMatchmakingServersAsyncActionServerRules_ServerRulesAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProMatchmakingServersAsyncActionServerRules.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProMatchmakingServersAsyncActionServerRules_HandleCallback final
{
public:
	TArray<struct FGameServerRule>                Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2374[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProMatchmakingServersAsyncActionServerRules_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProMatchmakingServersAsyncActionServerRules_HandleCallback");
static_assert(sizeof(SteamCoreProMatchmakingServersAsyncActionServerRules_HandleCallback) == 0x000018, "Wrong size on SteamCoreProMatchmakingServersAsyncActionServerRules_HandleCallback");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionServerRules_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProMatchmakingServersAsyncActionServerRules_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProMatchmakingServersAsyncActionServerRules_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProMatchmakingServersAsyncActionServerRules_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterAnd
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterAnd final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterAnd) == 0x000008, "Wrong alignment on ServerFilter_AddFilterAnd");
static_assert(sizeof(ServerFilter_AddFilterAnd) == 0x000010, "Wrong size on ServerFilter_AddFilterAnd");
static_assert(offsetof(ServerFilter_AddFilterAnd, Value) == 0x000000, "Member 'ServerFilter_AddFilterAnd::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterGameAddr
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterGameAddr final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterGameAddr) == 0x000008, "Wrong alignment on ServerFilter_AddFilterGameAddr");
static_assert(sizeof(ServerFilter_AddFilterGameAddr) == 0x000010, "Wrong size on ServerFilter_AddFilterGameAddr");
static_assert(offsetof(ServerFilter_AddFilterGameAddr, Value) == 0x000000, "Member 'ServerFilter_AddFilterGameAddr::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterGameDataAnd
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterGameDataAnd final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterGameDataAnd) == 0x000008, "Wrong alignment on ServerFilter_AddFilterGameDataAnd");
static_assert(sizeof(ServerFilter_AddFilterGameDataAnd) == 0x000010, "Wrong size on ServerFilter_AddFilterGameDataAnd");
static_assert(offsetof(ServerFilter_AddFilterGameDataAnd, Value) == 0x000000, "Member 'ServerFilter_AddFilterGameDataAnd::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterGameDataNor
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterGameDataNor final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterGameDataNor) == 0x000008, "Wrong alignment on ServerFilter_AddFilterGameDataNor");
static_assert(sizeof(ServerFilter_AddFilterGameDataNor) == 0x000010, "Wrong size on ServerFilter_AddFilterGameDataNor");
static_assert(offsetof(ServerFilter_AddFilterGameDataNor, Value) == 0x000000, "Member 'ServerFilter_AddFilterGameDataNor::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterGameDataOr
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterGameDataOr final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterGameDataOr) == 0x000008, "Wrong alignment on ServerFilter_AddFilterGameDataOr");
static_assert(sizeof(ServerFilter_AddFilterGameDataOr) == 0x000010, "Wrong size on ServerFilter_AddFilterGameDataOr");
static_assert(offsetof(ServerFilter_AddFilterGameDataOr, Value) == 0x000000, "Member 'ServerFilter_AddFilterGameDataOr::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterGameTagsAnd
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterGameTagsAnd final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterGameTagsAnd) == 0x000008, "Wrong alignment on ServerFilter_AddFilterGameTagsAnd");
static_assert(sizeof(ServerFilter_AddFilterGameTagsAnd) == 0x000010, "Wrong size on ServerFilter_AddFilterGameTagsAnd");
static_assert(offsetof(ServerFilter_AddFilterGameTagsAnd, Value) == 0x000000, "Member 'ServerFilter_AddFilterGameTagsAnd::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterGameTagsNor
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterGameTagsNor final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterGameTagsNor) == 0x000008, "Wrong alignment on ServerFilter_AddFilterGameTagsNor");
static_assert(sizeof(ServerFilter_AddFilterGameTagsNor) == 0x000010, "Wrong size on ServerFilter_AddFilterGameTagsNor");
static_assert(offsetof(ServerFilter_AddFilterGameTagsNor, Value) == 0x000000, "Member 'ServerFilter_AddFilterGameTagsNor::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterMap
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterMap final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterMap) == 0x000008, "Wrong alignment on ServerFilter_AddFilterMap");
static_assert(sizeof(ServerFilter_AddFilterMap) == 0x000010, "Wrong size on ServerFilter_AddFilterMap");
static_assert(offsetof(ServerFilter_AddFilterMap, Value) == 0x000000, "Member 'ServerFilter_AddFilterMap::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterName
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterName final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterName) == 0x000008, "Wrong alignment on ServerFilter_AddFilterName");
static_assert(sizeof(ServerFilter_AddFilterName) == 0x000010, "Wrong size on ServerFilter_AddFilterName");
static_assert(offsetof(ServerFilter_AddFilterName, Value) == 0x000000, "Member 'ServerFilter_AddFilterName::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterNand
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterNand final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterNand) == 0x000008, "Wrong alignment on ServerFilter_AddFilterNand");
static_assert(sizeof(ServerFilter_AddFilterNand) == 0x000010, "Wrong size on ServerFilter_AddFilterNand");
static_assert(offsetof(ServerFilter_AddFilterNand, Value) == 0x000000, "Member 'ServerFilter_AddFilterNand::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterNor
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterNor final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterNor) == 0x000008, "Wrong alignment on ServerFilter_AddFilterNor");
static_assert(sizeof(ServerFilter_AddFilterNor) == 0x000010, "Wrong size on ServerFilter_AddFilterNor");
static_assert(offsetof(ServerFilter_AddFilterNor, Value) == 0x000000, "Member 'ServerFilter_AddFilterNor::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterNotAppId
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterNotAppId final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterNotAppId) == 0x000008, "Wrong alignment on ServerFilter_AddFilterNotAppId");
static_assert(sizeof(ServerFilter_AddFilterNotAppId) == 0x000010, "Wrong size on ServerFilter_AddFilterNotAppId");
static_assert(offsetof(ServerFilter_AddFilterNotAppId, Value) == 0x000000, "Member 'ServerFilter_AddFilterNotAppId::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterOr
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterOr final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterOr) == 0x000008, "Wrong alignment on ServerFilter_AddFilterOr");
static_assert(sizeof(ServerFilter_AddFilterOr) == 0x000010, "Wrong size on ServerFilter_AddFilterOr");
static_assert(offsetof(ServerFilter_AddFilterOr, Value) == 0x000000, "Member 'ServerFilter_AddFilterOr::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.AddFilterVersion
// 0x0010 (0x0010 - 0x0000)
struct ServerFilter_AddFilterVersion final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_AddFilterVersion) == 0x000008, "Wrong alignment on ServerFilter_AddFilterVersion");
static_assert(sizeof(ServerFilter_AddFilterVersion) == 0x000010, "Wrong size on ServerFilter_AddFilterVersion");
static_assert(offsetof(ServerFilter_AddFilterVersion, Value) == 0x000000, "Member 'ServerFilter_AddFilterVersion::Value' has a wrong offset!");

// Function SteamCorePro.ServerFilter.GetFilters
// 0x0050 (0x0050 - 0x0000)
struct ServerFilter_GetFilters final
{
public:
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerFilter_GetFilters) == 0x000008, "Wrong alignment on ServerFilter_GetFilters");
static_assert(sizeof(ServerFilter_GetFilters) == 0x000050, "Wrong size on ServerFilter_GetFilters");
static_assert(offsetof(ServerFilter_GetFilters, ReturnValue) == 0x000000, "Member 'ServerFilter_GetFilters::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMusic.GetSteamMusic
// 0x0008 (0x0008 - 0x0000)
struct SteamProMusic_GetSteamMusic final
{
public:
	class USteamProMusic*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMusic_GetSteamMusic) == 0x000008, "Wrong alignment on SteamProMusic_GetSteamMusic");
static_assert(sizeof(SteamProMusic_GetSteamMusic) == 0x000008, "Wrong size on SteamProMusic_GetSteamMusic");
static_assert(offsetof(SteamProMusic_GetSteamMusic, ReturnValue) == 0x000000, "Member 'SteamProMusic_GetSteamMusic::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMusic.bIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SteamProMusic_bIsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMusic_bIsEnabled) == 0x000001, "Wrong alignment on SteamProMusic_bIsEnabled");
static_assert(sizeof(SteamProMusic_bIsEnabled) == 0x000001, "Wrong size on SteamProMusic_bIsEnabled");
static_assert(offsetof(SteamProMusic_bIsEnabled, ReturnValue) == 0x000000, "Member 'SteamProMusic_bIsEnabled::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMusic.BIsPlaying
// 0x0001 (0x0001 - 0x0000)
struct SteamProMusic_BIsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMusic_BIsPlaying) == 0x000001, "Wrong alignment on SteamProMusic_BIsPlaying");
static_assert(sizeof(SteamProMusic_BIsPlaying) == 0x000001, "Wrong size on SteamProMusic_BIsPlaying");
static_assert(offsetof(SteamProMusic_BIsPlaying, ReturnValue) == 0x000000, "Member 'SteamProMusic_BIsPlaying::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMusic.GetPlaybackStatus
// 0x0001 (0x0001 - 0x0000)
struct SteamProMusic_GetPlaybackStatus final
{
public:
	ESteamAudioPlaybackStatus                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMusic_GetPlaybackStatus) == 0x000001, "Wrong alignment on SteamProMusic_GetPlaybackStatus");
static_assert(sizeof(SteamProMusic_GetPlaybackStatus) == 0x000001, "Wrong size on SteamProMusic_GetPlaybackStatus");
static_assert(offsetof(SteamProMusic_GetPlaybackStatus, ReturnValue) == 0x000000, "Member 'SteamProMusic_GetPlaybackStatus::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMusic.GetVolume
// 0x0004 (0x0004 - 0x0000)
struct SteamProMusic_GetVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMusic_GetVolume) == 0x000004, "Wrong alignment on SteamProMusic_GetVolume");
static_assert(sizeof(SteamProMusic_GetVolume) == 0x000004, "Wrong size on SteamProMusic_GetVolume");
static_assert(offsetof(SteamProMusic_GetVolume, ReturnValue) == 0x000000, "Member 'SteamProMusic_GetVolume::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProMusic.SetVolume
// 0x0004 (0x0004 - 0x0000)
struct SteamProMusic_SetVolume final
{
public:
	float                                         FlVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProMusic_SetVolume) == 0x000004, "Wrong alignment on SteamProMusic_SetVolume");
static_assert(sizeof(SteamProMusic_SetVolume) == 0x000004, "Wrong size on SteamProMusic_SetVolume");
static_assert(offsetof(SteamProMusic_SetVolume, FlVolume) == 0x000000, "Member 'SteamProMusic_SetVolume::FlVolume' has a wrong offset!");

// Function SteamCorePro.SteamProNetworking.GetSteamNetworking
// 0x0008 (0x0008 - 0x0000)
struct SteamProNetworking_GetSteamNetworking final
{
public:
	class USteamProNetworking*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProNetworking_GetSteamNetworking) == 0x000008, "Wrong alignment on SteamProNetworking_GetSteamNetworking");
static_assert(sizeof(SteamProNetworking_GetSteamNetworking) == 0x000008, "Wrong size on SteamProNetworking_GetSteamNetworking");
static_assert(offsetof(SteamProNetworking_GetSteamNetworking, ReturnValue) == 0x000000, "Member 'SteamProNetworking_GetSteamNetworking::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworking.AcceptP2PSessionWithUser
// 0x0010 (0x0010 - 0x0000)
struct SteamProNetworking_AcceptP2PSessionWithUser final
{
public:
	struct FSteamID                               SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2378[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProNetworking_AcceptP2PSessionWithUser) == 0x000008, "Wrong alignment on SteamProNetworking_AcceptP2PSessionWithUser");
static_assert(sizeof(SteamProNetworking_AcceptP2PSessionWithUser) == 0x000010, "Wrong size on SteamProNetworking_AcceptP2PSessionWithUser");
static_assert(offsetof(SteamProNetworking_AcceptP2PSessionWithUser, SteamIDRemote) == 0x000000, "Member 'SteamProNetworking_AcceptP2PSessionWithUser::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_AcceptP2PSessionWithUser, ReturnValue) == 0x000008, "Member 'SteamProNetworking_AcceptP2PSessionWithUser::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworking.AllowP2PPacketRelay
// 0x0002 (0x0002 - 0x0000)
struct SteamProNetworking_AllowP2PPacketRelay final
{
public:
	bool                                          bAllow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProNetworking_AllowP2PPacketRelay) == 0x000001, "Wrong alignment on SteamProNetworking_AllowP2PPacketRelay");
static_assert(sizeof(SteamProNetworking_AllowP2PPacketRelay) == 0x000002, "Wrong size on SteamProNetworking_AllowP2PPacketRelay");
static_assert(offsetof(SteamProNetworking_AllowP2PPacketRelay, bAllow) == 0x000000, "Member 'SteamProNetworking_AllowP2PPacketRelay::bAllow' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_AllowP2PPacketRelay, ReturnValue) == 0x000001, "Member 'SteamProNetworking_AllowP2PPacketRelay::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworking.CloseP2PChannelWithUser
// 0x0010 (0x0010 - 0x0000)
struct SteamProNetworking_CloseP2PChannelWithUser final
{
public:
	struct FSteamID                               SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2379[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProNetworking_CloseP2PChannelWithUser) == 0x000008, "Wrong alignment on SteamProNetworking_CloseP2PChannelWithUser");
static_assert(sizeof(SteamProNetworking_CloseP2PChannelWithUser) == 0x000010, "Wrong size on SteamProNetworking_CloseP2PChannelWithUser");
static_assert(offsetof(SteamProNetworking_CloseP2PChannelWithUser, SteamIDRemote) == 0x000000, "Member 'SteamProNetworking_CloseP2PChannelWithUser::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_CloseP2PChannelWithUser, Channel) == 0x000008, "Member 'SteamProNetworking_CloseP2PChannelWithUser::Channel' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_CloseP2PChannelWithUser, ReturnValue) == 0x00000C, "Member 'SteamProNetworking_CloseP2PChannelWithUser::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworking.CloseP2PSessionWithUser
// 0x0010 (0x0010 - 0x0000)
struct SteamProNetworking_CloseP2PSessionWithUser final
{
public:
	struct FSteamID                               SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProNetworking_CloseP2PSessionWithUser) == 0x000008, "Wrong alignment on SteamProNetworking_CloseP2PSessionWithUser");
static_assert(sizeof(SteamProNetworking_CloseP2PSessionWithUser) == 0x000010, "Wrong size on SteamProNetworking_CloseP2PSessionWithUser");
static_assert(offsetof(SteamProNetworking_CloseP2PSessionWithUser, SteamIDRemote) == 0x000000, "Member 'SteamProNetworking_CloseP2PSessionWithUser::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_CloseP2PSessionWithUser, ReturnValue) == 0x000008, "Member 'SteamProNetworking_CloseP2PSessionWithUser::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworking.GetP2PSessionState
// 0x0038 (0x0038 - 0x0000)
struct SteamProNetworking_GetP2PSessionState final
{
public:
	struct FSteamID                               SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamP2PSessionState                  ConnectionState;                                   // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237B[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProNetworking_GetP2PSessionState) == 0x000008, "Wrong alignment on SteamProNetworking_GetP2PSessionState");
static_assert(sizeof(SteamProNetworking_GetP2PSessionState) == 0x000038, "Wrong size on SteamProNetworking_GetP2PSessionState");
static_assert(offsetof(SteamProNetworking_GetP2PSessionState, SteamIDRemote) == 0x000000, "Member 'SteamProNetworking_GetP2PSessionState::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_GetP2PSessionState, ConnectionState) == 0x000008, "Member 'SteamProNetworking_GetP2PSessionState::ConnectionState' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_GetP2PSessionState, ReturnValue) == 0x000030, "Member 'SteamProNetworking_GetP2PSessionState::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworking.IsP2PPacketAvailable
// 0x000C (0x000C - 0x0000)
struct SteamProNetworking_IsP2PPacketAvailable final
{
public:
	int32                                         MessageSize;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237C[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProNetworking_IsP2PPacketAvailable) == 0x000004, "Wrong alignment on SteamProNetworking_IsP2PPacketAvailable");
static_assert(sizeof(SteamProNetworking_IsP2PPacketAvailable) == 0x00000C, "Wrong size on SteamProNetworking_IsP2PPacketAvailable");
static_assert(offsetof(SteamProNetworking_IsP2PPacketAvailable, MessageSize) == 0x000000, "Member 'SteamProNetworking_IsP2PPacketAvailable::MessageSize' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_IsP2PPacketAvailable, Channel) == 0x000004, "Member 'SteamProNetworking_IsP2PPacketAvailable::Channel' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_IsP2PPacketAvailable, ReturnValue) == 0x000008, "Member 'SteamProNetworking_IsP2PPacketAvailable::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworking.ReadP2PPacket
// 0x0028 (0x0028 - 0x0000)
struct SteamProNetworking_ReadP2PPacket final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamID                               OutSteamIdRemote;                                  // 0x0010(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MessageSize;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Channel;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237D[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProNetworking_ReadP2PPacket) == 0x000008, "Wrong alignment on SteamProNetworking_ReadP2PPacket");
static_assert(sizeof(SteamProNetworking_ReadP2PPacket) == 0x000028, "Wrong size on SteamProNetworking_ReadP2PPacket");
static_assert(offsetof(SteamProNetworking_ReadP2PPacket, Data) == 0x000000, "Member 'SteamProNetworking_ReadP2PPacket::Data' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_ReadP2PPacket, OutSteamIdRemote) == 0x000010, "Member 'SteamProNetworking_ReadP2PPacket::OutSteamIdRemote' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_ReadP2PPacket, MessageSize) == 0x000018, "Member 'SteamProNetworking_ReadP2PPacket::MessageSize' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_ReadP2PPacket, Channel) == 0x00001C, "Member 'SteamProNetworking_ReadP2PPacket::Channel' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_ReadP2PPacket, ReturnValue) == 0x000020, "Member 'SteamProNetworking_ReadP2PPacket::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworking.SendP2PPacket
// 0x0028 (0x0028 - 0x0000)
struct SteamProNetworking_SendP2PPacket final
{
public:
	struct FSteamID                               SteamIDRemote;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESteamP2PSend                                 P2PSendType;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237E[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Channel;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237F[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProNetworking_SendP2PPacket) == 0x000008, "Wrong alignment on SteamProNetworking_SendP2PPacket");
static_assert(sizeof(SteamProNetworking_SendP2PPacket) == 0x000028, "Wrong size on SteamProNetworking_SendP2PPacket");
static_assert(offsetof(SteamProNetworking_SendP2PPacket, SteamIDRemote) == 0x000000, "Member 'SteamProNetworking_SendP2PPacket::SteamIDRemote' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_SendP2PPacket, Data) == 0x000008, "Member 'SteamProNetworking_SendP2PPacket::Data' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_SendP2PPacket, P2PSendType) == 0x000018, "Member 'SteamProNetworking_SendP2PPacket::P2PSendType' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_SendP2PPacket, Channel) == 0x00001C, "Member 'SteamProNetworking_SendP2PPacket::Channel' has a wrong offset!");
static_assert(offsetof(SteamProNetworking_SendP2PPacket, ReturnValue) == 0x000020, "Member 'SteamProNetworking_SendP2PPacket::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworkingUtils.ConvertPingLocationToString
// 0x0020 (0x0020 - 0x0000)
struct SteamProNetworkingUtils_ConvertPingLocationToString final
{
public:
	struct FSteamNetworkPingLocation              Location;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProNetworkingUtils_ConvertPingLocationToString) == 0x000008, "Wrong alignment on SteamProNetworkingUtils_ConvertPingLocationToString");
static_assert(sizeof(SteamProNetworkingUtils_ConvertPingLocationToString) == 0x000020, "Wrong size on SteamProNetworkingUtils_ConvertPingLocationToString");
static_assert(offsetof(SteamProNetworkingUtils_ConvertPingLocationToString, Location) == 0x000000, "Member 'SteamProNetworkingUtils_ConvertPingLocationToString::Location' has a wrong offset!");
static_assert(offsetof(SteamProNetworkingUtils_ConvertPingLocationToString, String) == 0x000010, "Member 'SteamProNetworkingUtils_ConvertPingLocationToString::String' has a wrong offset!");

// Function SteamCorePro.SteamProNetworkingUtils.GetSteamNetworkingUtils
// 0x0008 (0x0008 - 0x0000)
struct SteamProNetworkingUtils_GetSteamNetworkingUtils final
{
public:
	class USteamProNetworkingUtils*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProNetworkingUtils_GetSteamNetworkingUtils) == 0x000008, "Wrong alignment on SteamProNetworkingUtils_GetSteamNetworkingUtils");
static_assert(sizeof(SteamProNetworkingUtils_GetSteamNetworkingUtils) == 0x000008, "Wrong size on SteamProNetworkingUtils_GetSteamNetworkingUtils");
static_assert(offsetof(SteamProNetworkingUtils_GetSteamNetworkingUtils, ReturnValue) == 0x000000, "Member 'SteamProNetworkingUtils_GetSteamNetworkingUtils::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworkingUtils.ParsePingLocationString
// 0x0028 (0x0028 - 0x0000)
struct SteamProNetworkingUtils_ParsePingLocationString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamNetworkPingLocation              Result;                                            // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2380[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProNetworkingUtils_ParsePingLocationString) == 0x000008, "Wrong alignment on SteamProNetworkingUtils_ParsePingLocationString");
static_assert(sizeof(SteamProNetworkingUtils_ParsePingLocationString) == 0x000028, "Wrong size on SteamProNetworkingUtils_ParsePingLocationString");
static_assert(offsetof(SteamProNetworkingUtils_ParsePingLocationString, String) == 0x000000, "Member 'SteamProNetworkingUtils_ParsePingLocationString::String' has a wrong offset!");
static_assert(offsetof(SteamProNetworkingUtils_ParsePingLocationString, Result) == 0x000010, "Member 'SteamProNetworkingUtils_ParsePingLocationString::Result' has a wrong offset!");
static_assert(offsetof(SteamProNetworkingUtils_ParsePingLocationString, ReturnValue) == 0x000020, "Member 'SteamProNetworkingUtils_ParsePingLocationString::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworkingUtils.CheckPingDataUpToDate
// 0x0008 (0x0008 - 0x0000)
struct SteamProNetworkingUtils_CheckPingDataUpToDate final
{
public:
	float                                         MaxAgeSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2381[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProNetworkingUtils_CheckPingDataUpToDate) == 0x000004, "Wrong alignment on SteamProNetworkingUtils_CheckPingDataUpToDate");
static_assert(sizeof(SteamProNetworkingUtils_CheckPingDataUpToDate) == 0x000008, "Wrong size on SteamProNetworkingUtils_CheckPingDataUpToDate");
static_assert(offsetof(SteamProNetworkingUtils_CheckPingDataUpToDate, MaxAgeSeconds) == 0x000000, "Member 'SteamProNetworkingUtils_CheckPingDataUpToDate::MaxAgeSeconds' has a wrong offset!");
static_assert(offsetof(SteamProNetworkingUtils_CheckPingDataUpToDate, ReturnValue) == 0x000004, "Member 'SteamProNetworkingUtils_CheckPingDataUpToDate::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworkingUtils.EstimatePingTimeBetweenTwoLocations
// 0x0028 (0x0028 - 0x0000)
struct SteamProNetworkingUtils_EstimatePingTimeBetweenTwoLocations final
{
public:
	struct FSteamNetworkPingLocation              Location1;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSteamNetworkPingLocation              Location2;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2382[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProNetworkingUtils_EstimatePingTimeBetweenTwoLocations) == 0x000008, "Wrong alignment on SteamProNetworkingUtils_EstimatePingTimeBetweenTwoLocations");
static_assert(sizeof(SteamProNetworkingUtils_EstimatePingTimeBetweenTwoLocations) == 0x000028, "Wrong size on SteamProNetworkingUtils_EstimatePingTimeBetweenTwoLocations");
static_assert(offsetof(SteamProNetworkingUtils_EstimatePingTimeBetweenTwoLocations, Location1) == 0x000000, "Member 'SteamProNetworkingUtils_EstimatePingTimeBetweenTwoLocations::Location1' has a wrong offset!");
static_assert(offsetof(SteamProNetworkingUtils_EstimatePingTimeBetweenTwoLocations, Location2) == 0x000010, "Member 'SteamProNetworkingUtils_EstimatePingTimeBetweenTwoLocations::Location2' has a wrong offset!");
static_assert(offsetof(SteamProNetworkingUtils_EstimatePingTimeBetweenTwoLocations, ReturnValue) == 0x000020, "Member 'SteamProNetworkingUtils_EstimatePingTimeBetweenTwoLocations::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworkingUtils.EstimatePingTimeFromLocalHost
// 0x0018 (0x0018 - 0x0000)
struct SteamProNetworkingUtils_EstimatePingTimeFromLocalHost final
{
public:
	struct FSteamNetworkPingLocation              RemoteLocation;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2383[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProNetworkingUtils_EstimatePingTimeFromLocalHost) == 0x000008, "Wrong alignment on SteamProNetworkingUtils_EstimatePingTimeFromLocalHost");
static_assert(sizeof(SteamProNetworkingUtils_EstimatePingTimeFromLocalHost) == 0x000018, "Wrong size on SteamProNetworkingUtils_EstimatePingTimeFromLocalHost");
static_assert(offsetof(SteamProNetworkingUtils_EstimatePingTimeFromLocalHost, RemoteLocation) == 0x000000, "Member 'SteamProNetworkingUtils_EstimatePingTimeFromLocalHost::RemoteLocation' has a wrong offset!");
static_assert(offsetof(SteamProNetworkingUtils_EstimatePingTimeFromLocalHost, ReturnValue) == 0x000010, "Member 'SteamProNetworkingUtils_EstimatePingTimeFromLocalHost::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProNetworkingUtils.GetLocalPingLocation
// 0x0018 (0x0018 - 0x0000)
struct SteamProNetworkingUtils_GetLocalPingLocation final
{
public:
	struct FSteamNetworkPingLocation              Result;                                            // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2384[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProNetworkingUtils_GetLocalPingLocation) == 0x000008, "Wrong alignment on SteamProNetworkingUtils_GetLocalPingLocation");
static_assert(sizeof(SteamProNetworkingUtils_GetLocalPingLocation) == 0x000018, "Wrong size on SteamProNetworkingUtils_GetLocalPingLocation");
static_assert(offsetof(SteamProNetworkingUtils_GetLocalPingLocation, Result) == 0x000000, "Member 'SteamProNetworkingUtils_GetLocalPingLocation::Result' has a wrong offset!");
static_assert(offsetof(SteamProNetworkingUtils_GetLocalPingLocation, ReturnValue) == 0x000010, "Member 'SteamProNetworkingUtils_GetLocalPingLocation::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParentalSettings.GetSteamParentalSettings
// 0x0008 (0x0008 - 0x0000)
struct SteamProParentalSettings_GetSteamParentalSettings final
{
public:
	class USteamProParentalSettings*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProParentalSettings_GetSteamParentalSettings) == 0x000008, "Wrong alignment on SteamProParentalSettings_GetSteamParentalSettings");
static_assert(sizeof(SteamProParentalSettings_GetSteamParentalSettings) == 0x000008, "Wrong size on SteamProParentalSettings_GetSteamParentalSettings");
static_assert(offsetof(SteamProParentalSettings_GetSteamParentalSettings, ReturnValue) == 0x000000, "Member 'SteamProParentalSettings_GetSteamParentalSettings::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParentalSettings.BIsAppBlocked
// 0x0008 (0x0008 - 0x0000)
struct SteamProParentalSettings_BIsAppBlocked final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2385[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProParentalSettings_BIsAppBlocked) == 0x000004, "Wrong alignment on SteamProParentalSettings_BIsAppBlocked");
static_assert(sizeof(SteamProParentalSettings_BIsAppBlocked) == 0x000008, "Wrong size on SteamProParentalSettings_BIsAppBlocked");
static_assert(offsetof(SteamProParentalSettings_BIsAppBlocked, AppID) == 0x000000, "Member 'SteamProParentalSettings_BIsAppBlocked::AppID' has a wrong offset!");
static_assert(offsetof(SteamProParentalSettings_BIsAppBlocked, ReturnValue) == 0x000004, "Member 'SteamProParentalSettings_BIsAppBlocked::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParentalSettings.BIsAppInBlockList
// 0x0008 (0x0008 - 0x0000)
struct SteamProParentalSettings_BIsAppInBlockList final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2386[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProParentalSettings_BIsAppInBlockList) == 0x000004, "Wrong alignment on SteamProParentalSettings_BIsAppInBlockList");
static_assert(sizeof(SteamProParentalSettings_BIsAppInBlockList) == 0x000008, "Wrong size on SteamProParentalSettings_BIsAppInBlockList");
static_assert(offsetof(SteamProParentalSettings_BIsAppInBlockList, AppID) == 0x000000, "Member 'SteamProParentalSettings_BIsAppInBlockList::AppID' has a wrong offset!");
static_assert(offsetof(SteamProParentalSettings_BIsAppInBlockList, ReturnValue) == 0x000004, "Member 'SteamProParentalSettings_BIsAppInBlockList::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParentalSettings.BIsFeatureBlocked
// 0x0002 (0x0002 - 0x0000)
struct SteamProParentalSettings_BIsFeatureBlocked final
{
public:
	ESteamParentalFeature                         Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProParentalSettings_BIsFeatureBlocked) == 0x000001, "Wrong alignment on SteamProParentalSettings_BIsFeatureBlocked");
static_assert(sizeof(SteamProParentalSettings_BIsFeatureBlocked) == 0x000002, "Wrong size on SteamProParentalSettings_BIsFeatureBlocked");
static_assert(offsetof(SteamProParentalSettings_BIsFeatureBlocked, Feature) == 0x000000, "Member 'SteamProParentalSettings_BIsFeatureBlocked::Feature' has a wrong offset!");
static_assert(offsetof(SteamProParentalSettings_BIsFeatureBlocked, ReturnValue) == 0x000001, "Member 'SteamProParentalSettings_BIsFeatureBlocked::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParentalSettings.BIsFeatureInBlockList
// 0x0002 (0x0002 - 0x0000)
struct SteamProParentalSettings_BIsFeatureInBlockList final
{
public:
	ESteamParentalFeature                         Feature;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProParentalSettings_BIsFeatureInBlockList) == 0x000001, "Wrong alignment on SteamProParentalSettings_BIsFeatureInBlockList");
static_assert(sizeof(SteamProParentalSettings_BIsFeatureInBlockList) == 0x000002, "Wrong size on SteamProParentalSettings_BIsFeatureInBlockList");
static_assert(offsetof(SteamProParentalSettings_BIsFeatureInBlockList, Feature) == 0x000000, "Member 'SteamProParentalSettings_BIsFeatureInBlockList::Feature' has a wrong offset!");
static_assert(offsetof(SteamProParentalSettings_BIsFeatureInBlockList, ReturnValue) == 0x000001, "Member 'SteamProParentalSettings_BIsFeatureInBlockList::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParentalSettings.BIsParentalLockEnabled
// 0x0001 (0x0001 - 0x0000)
struct SteamProParentalSettings_BIsParentalLockEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProParentalSettings_BIsParentalLockEnabled) == 0x000001, "Wrong alignment on SteamProParentalSettings_BIsParentalLockEnabled");
static_assert(sizeof(SteamProParentalSettings_BIsParentalLockEnabled) == 0x000001, "Wrong size on SteamProParentalSettings_BIsParentalLockEnabled");
static_assert(offsetof(SteamProParentalSettings_BIsParentalLockEnabled, ReturnValue) == 0x000000, "Member 'SteamProParentalSettings_BIsParentalLockEnabled::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParentalSettings.BIsParentalLockLocked
// 0x0001 (0x0001 - 0x0000)
struct SteamProParentalSettings_BIsParentalLockLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProParentalSettings_BIsParentalLockLocked) == 0x000001, "Wrong alignment on SteamProParentalSettings_BIsParentalLockLocked");
static_assert(sizeof(SteamProParentalSettings_BIsParentalLockLocked) == 0x000001, "Wrong size on SteamProParentalSettings_BIsParentalLockLocked");
static_assert(offsetof(SteamProParentalSettings_BIsParentalLockLocked, ReturnValue) == 0x000000, "Member 'SteamProParentalSettings_BIsParentalLockLocked::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProSteamPartiesAsyncActionJoinParty.JoinPartyAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyBeaconID                         BeaconID;                                          // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2387[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProSteamPartiesAsyncActionJoinParty* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync) == 0x000008, "Wrong alignment on SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync");
static_assert(sizeof(SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync) == 0x000020, "Wrong size on SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync, BeaconID) == 0x000008, "Member 'SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync, Timeout) == 0x000010, "Member 'SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProSteamPartiesAsyncActionJoinParty_JoinPartyAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProSteamPartiesAsyncActionJoinParty.HandleCallback
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreProSteamPartiesAsyncActionJoinParty_HandleCallback final
{
public:
	struct FJoinPartyData                         Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2388[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProSteamPartiesAsyncActionJoinParty_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProSteamPartiesAsyncActionJoinParty_HandleCallback");
static_assert(sizeof(SteamCoreProSteamPartiesAsyncActionJoinParty_HandleCallback) == 0x000030, "Wrong size on SteamCoreProSteamPartiesAsyncActionJoinParty_HandleCallback");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionJoinParty_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProSteamPartiesAsyncActionJoinParty_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionJoinParty_HandleCallback, bWasSuccessful) == 0x000028, "Member 'SteamCoreProSteamPartiesAsyncActionJoinParty_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProSteamPartiesAsyncActionCreateBeacon.CreateBeaconAsync
// 0x0058 (0x0058 - 0x0000)
struct SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenSlots;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2389[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamPartyBeaconLocation              BeaconLocation;                                    // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ConnectString;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetaData;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238A[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProSteamPartiesAsyncActionCreateBeacon* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync) == 0x000008, "Wrong alignment on SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync");
static_assert(sizeof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync) == 0x000058, "Wrong size on SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, OpenSlots) == 0x000008, "Member 'SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::OpenSlots' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, BeaconLocation) == 0x000010, "Member 'SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::BeaconLocation' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, ConnectString) == 0x000028, "Member 'SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::ConnectString' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, MetaData) == 0x000038, "Member 'SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::MetaData' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, Timeout) == 0x000048, "Member 'SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync, ReturnValue) == 0x000050, "Member 'SteamCoreProSteamPartiesAsyncActionCreateBeacon_CreateBeaconAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProSteamPartiesAsyncActionCreateBeacon.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProSteamPartiesAsyncActionCreateBeacon_HandleCallback final
{
public:
	struct FCreateBeaconData                      Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProSteamPartiesAsyncActionCreateBeacon_HandleCallback");
static_assert(sizeof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_HandleCallback) == 0x000018, "Wrong size on SteamCoreProSteamPartiesAsyncActionCreateBeacon_HandleCallback");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProSteamPartiesAsyncActionCreateBeacon_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionCreateBeacon_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProSteamPartiesAsyncActionCreateBeacon_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots.ChangeNumOpenSlotsAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyBeaconID                         BeaconID;                                          // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OpenSlots;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync) == 0x000008, "Wrong alignment on SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync");
static_assert(sizeof(SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync) == 0x000020, "Wrong size on SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync, BeaconID) == 0x000008, "Member 'SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync, OpenSlots) == 0x000010, "Member 'SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync::OpenSlots' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync, Timeout) == 0x000014, "Member 'SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_ChangeNumOpenSlotsAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots.HandleCallback
// 0x0002 (0x0002 - 0x0000)
struct SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback final
{
public:
	struct FChangeNumOpenSlotsData                Data;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback");
static_assert(sizeof(SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback) == 0x000002, "Wrong size on SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback, bWasSuccessful) == 0x000001, "Member 'SteamCoreProSteamPartiesAsyncActionChangeNumOpenSlots_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamProApps.BGetDLCDataByIndex
// 0x0028 (0x0028 - 0x0000)
struct SteamProApps_BGetDLCDataByIndex final
{
public:
	int32                                         DLC;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvailable;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_Name;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238E[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProApps_BGetDLCDataByIndex) == 0x000008, "Wrong alignment on SteamProApps_BGetDLCDataByIndex");
static_assert(sizeof(SteamProApps_BGetDLCDataByIndex) == 0x000028, "Wrong size on SteamProApps_BGetDLCDataByIndex");
static_assert(offsetof(SteamProApps_BGetDLCDataByIndex, DLC) == 0x000000, "Member 'SteamProApps_BGetDLCDataByIndex::DLC' has a wrong offset!");
static_assert(offsetof(SteamProApps_BGetDLCDataByIndex, AppID) == 0x000004, "Member 'SteamProApps_BGetDLCDataByIndex::AppID' has a wrong offset!");
static_assert(offsetof(SteamProApps_BGetDLCDataByIndex, bAvailable) == 0x000008, "Member 'SteamProApps_BGetDLCDataByIndex::bAvailable' has a wrong offset!");
static_assert(offsetof(SteamProApps_BGetDLCDataByIndex, Param_Name) == 0x000010, "Member 'SteamProApps_BGetDLCDataByIndex::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProApps_BGetDLCDataByIndex, ReturnValue) == 0x000020, "Member 'SteamProApps_BGetDLCDataByIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.BIsAppInstalled
// 0x0008 (0x0008 - 0x0000)
struct SteamProApps_BIsAppInstalled final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238F[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProApps_BIsAppInstalled) == 0x000004, "Wrong alignment on SteamProApps_BIsAppInstalled");
static_assert(sizeof(SteamProApps_BIsAppInstalled) == 0x000008, "Wrong size on SteamProApps_BIsAppInstalled");
static_assert(offsetof(SteamProApps_BIsAppInstalled, AppID) == 0x000000, "Member 'SteamProApps_BIsAppInstalled::AppID' has a wrong offset!");
static_assert(offsetof(SteamProApps_BIsAppInstalled, ReturnValue) == 0x000004, "Member 'SteamProApps_BIsAppInstalled::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.BIsCybercafe
// 0x0001 (0x0001 - 0x0000)
struct SteamProApps_BIsCybercafe final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_BIsCybercafe) == 0x000001, "Wrong alignment on SteamProApps_BIsCybercafe");
static_assert(sizeof(SteamProApps_BIsCybercafe) == 0x000001, "Wrong size on SteamProApps_BIsCybercafe");
static_assert(offsetof(SteamProApps_BIsCybercafe, ReturnValue) == 0x000000, "Member 'SteamProApps_BIsCybercafe::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.BIsDlcInstalled
// 0x0008 (0x0008 - 0x0000)
struct SteamProApps_BIsDlcInstalled final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2390[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProApps_BIsDlcInstalled) == 0x000004, "Wrong alignment on SteamProApps_BIsDlcInstalled");
static_assert(sizeof(SteamProApps_BIsDlcInstalled) == 0x000008, "Wrong size on SteamProApps_BIsDlcInstalled");
static_assert(offsetof(SteamProApps_BIsDlcInstalled, AppID) == 0x000000, "Member 'SteamProApps_BIsDlcInstalled::AppID' has a wrong offset!");
static_assert(offsetof(SteamProApps_BIsDlcInstalled, ReturnValue) == 0x000004, "Member 'SteamProApps_BIsDlcInstalled::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.BIsLowViolence
// 0x0001 (0x0001 - 0x0000)
struct SteamProApps_BIsLowViolence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_BIsLowViolence) == 0x000001, "Wrong alignment on SteamProApps_BIsLowViolence");
static_assert(sizeof(SteamProApps_BIsLowViolence) == 0x000001, "Wrong size on SteamProApps_BIsLowViolence");
static_assert(offsetof(SteamProApps_BIsLowViolence, ReturnValue) == 0x000000, "Member 'SteamProApps_BIsLowViolence::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.BIsSubscribed
// 0x0001 (0x0001 - 0x0000)
struct SteamProApps_BIsSubscribed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_BIsSubscribed) == 0x000001, "Wrong alignment on SteamProApps_BIsSubscribed");
static_assert(sizeof(SteamProApps_BIsSubscribed) == 0x000001, "Wrong size on SteamProApps_BIsSubscribed");
static_assert(offsetof(SteamProApps_BIsSubscribed, ReturnValue) == 0x000000, "Member 'SteamProApps_BIsSubscribed::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.BIsSubscribedApp
// 0x0008 (0x0008 - 0x0000)
struct SteamProApps_BIsSubscribedApp final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2391[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProApps_BIsSubscribedApp) == 0x000004, "Wrong alignment on SteamProApps_BIsSubscribedApp");
static_assert(sizeof(SteamProApps_BIsSubscribedApp) == 0x000008, "Wrong size on SteamProApps_BIsSubscribedApp");
static_assert(offsetof(SteamProApps_BIsSubscribedApp, AppID) == 0x000000, "Member 'SteamProApps_BIsSubscribedApp::AppID' has a wrong offset!");
static_assert(offsetof(SteamProApps_BIsSubscribedApp, ReturnValue) == 0x000004, "Member 'SteamProApps_BIsSubscribedApp::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.BIsSubscribedFromFamilySharing
// 0x0001 (0x0001 - 0x0000)
struct SteamProApps_BIsSubscribedFromFamilySharing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_BIsSubscribedFromFamilySharing) == 0x000001, "Wrong alignment on SteamProApps_BIsSubscribedFromFamilySharing");
static_assert(sizeof(SteamProApps_BIsSubscribedFromFamilySharing) == 0x000001, "Wrong size on SteamProApps_BIsSubscribedFromFamilySharing");
static_assert(offsetof(SteamProApps_BIsSubscribedFromFamilySharing, ReturnValue) == 0x000000, "Member 'SteamProApps_BIsSubscribedFromFamilySharing::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.BIsSubscribedFromFreeWeekend
// 0x0001 (0x0001 - 0x0000)
struct SteamProApps_BIsSubscribedFromFreeWeekend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_BIsSubscribedFromFreeWeekend) == 0x000001, "Wrong alignment on SteamProApps_BIsSubscribedFromFreeWeekend");
static_assert(sizeof(SteamProApps_BIsSubscribedFromFreeWeekend) == 0x000001, "Wrong size on SteamProApps_BIsSubscribedFromFreeWeekend");
static_assert(offsetof(SteamProApps_BIsSubscribedFromFreeWeekend, ReturnValue) == 0x000000, "Member 'SteamProApps_BIsSubscribedFromFreeWeekend::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.BIsTimedTrial
// 0x000C (0x000C - 0x0000)
struct SteamProApps_BIsTimedTrial final
{
public:
	int32                                         SecondsAllowed;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsPlayed;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2392[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProApps_BIsTimedTrial) == 0x000004, "Wrong alignment on SteamProApps_BIsTimedTrial");
static_assert(sizeof(SteamProApps_BIsTimedTrial) == 0x00000C, "Wrong size on SteamProApps_BIsTimedTrial");
static_assert(offsetof(SteamProApps_BIsTimedTrial, SecondsAllowed) == 0x000000, "Member 'SteamProApps_BIsTimedTrial::SecondsAllowed' has a wrong offset!");
static_assert(offsetof(SteamProApps_BIsTimedTrial, SecondsPlayed) == 0x000004, "Member 'SteamProApps_BIsTimedTrial::SecondsPlayed' has a wrong offset!");
static_assert(offsetof(SteamProApps_BIsTimedTrial, ReturnValue) == 0x000008, "Member 'SteamProApps_BIsTimedTrial::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.BIsVACBanned
// 0x0001 (0x0001 - 0x0000)
struct SteamProApps_BIsVACBanned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_BIsVACBanned) == 0x000001, "Wrong alignment on SteamProApps_BIsVACBanned");
static_assert(sizeof(SteamProApps_BIsVACBanned) == 0x000001, "Wrong size on SteamProApps_BIsVACBanned");
static_assert(offsetof(SteamProApps_BIsVACBanned, ReturnValue) == 0x000000, "Member 'SteamProApps_BIsVACBanned::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetAppBuildId
// 0x0004 (0x0004 - 0x0000)
struct SteamProApps_GetAppBuildId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_GetAppBuildId) == 0x000004, "Wrong alignment on SteamProApps_GetAppBuildId");
static_assert(sizeof(SteamProApps_GetAppBuildId) == 0x000004, "Wrong size on SteamProApps_GetAppBuildId");
static_assert(offsetof(SteamProApps_GetAppBuildId, ReturnValue) == 0x000000, "Member 'SteamProApps_GetAppBuildId::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetAppInstallDir
// 0x0020 (0x0020 - 0x0000)
struct SteamProApps_GetAppInstallDir final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2393[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Folder;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2394[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProApps_GetAppInstallDir) == 0x000008, "Wrong alignment on SteamProApps_GetAppInstallDir");
static_assert(sizeof(SteamProApps_GetAppInstallDir) == 0x000020, "Wrong size on SteamProApps_GetAppInstallDir");
static_assert(offsetof(SteamProApps_GetAppInstallDir, AppID) == 0x000000, "Member 'SteamProApps_GetAppInstallDir::AppID' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetAppInstallDir, Folder) == 0x000008, "Member 'SteamProApps_GetAppInstallDir::Folder' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetAppInstallDir, ReturnValue) == 0x000018, "Member 'SteamProApps_GetAppInstallDir::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetAppOwner
// 0x0008 (0x0008 - 0x0000)
struct SteamProApps_GetAppOwner final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_GetAppOwner) == 0x000008, "Wrong alignment on SteamProApps_GetAppOwner");
static_assert(sizeof(SteamProApps_GetAppOwner) == 0x000008, "Wrong size on SteamProApps_GetAppOwner");
static_assert(offsetof(SteamProApps_GetAppOwner, ReturnValue) == 0x000000, "Member 'SteamProApps_GetAppOwner::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetAvailableGameLanguages
// 0x0010 (0x0010 - 0x0000)
struct SteamProApps_GetAvailableGameLanguages final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_GetAvailableGameLanguages) == 0x000008, "Wrong alignment on SteamProApps_GetAvailableGameLanguages");
static_assert(sizeof(SteamProApps_GetAvailableGameLanguages) == 0x000010, "Wrong size on SteamProApps_GetAvailableGameLanguages");
static_assert(offsetof(SteamProApps_GetAvailableGameLanguages, ReturnValue) == 0x000000, "Member 'SteamProApps_GetAvailableGameLanguages::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetCurrentBetaName
// 0x0018 (0x0018 - 0x0000)
struct SteamProApps_GetCurrentBetaName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2395[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProApps_GetCurrentBetaName) == 0x000008, "Wrong alignment on SteamProApps_GetCurrentBetaName");
static_assert(sizeof(SteamProApps_GetCurrentBetaName) == 0x000018, "Wrong size on SteamProApps_GetCurrentBetaName");
static_assert(offsetof(SteamProApps_GetCurrentBetaName, Param_Name) == 0x000000, "Member 'SteamProApps_GetCurrentBetaName::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetCurrentBetaName, ReturnValue) == 0x000010, "Member 'SteamProApps_GetCurrentBetaName::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetCurrentGameLanguage
// 0x0010 (0x0010 - 0x0000)
struct SteamProApps_GetCurrentGameLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_GetCurrentGameLanguage) == 0x000008, "Wrong alignment on SteamProApps_GetCurrentGameLanguage");
static_assert(sizeof(SteamProApps_GetCurrentGameLanguage) == 0x000010, "Wrong size on SteamProApps_GetCurrentGameLanguage");
static_assert(offsetof(SteamProApps_GetCurrentGameLanguage, ReturnValue) == 0x000000, "Member 'SteamProApps_GetCurrentGameLanguage::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetDLCCount
// 0x0004 (0x0004 - 0x0000)
struct SteamProApps_GetDLCCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_GetDLCCount) == 0x000004, "Wrong alignment on SteamProApps_GetDLCCount");
static_assert(sizeof(SteamProApps_GetDLCCount) == 0x000004, "Wrong size on SteamProApps_GetDLCCount");
static_assert(offsetof(SteamProApps_GetDLCCount, ReturnValue) == 0x000000, "Member 'SteamProApps_GetDLCCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetDlcDownloadProgress
// 0x0010 (0x0010 - 0x0000)
struct SteamProApps_GetDlcDownloadProgress final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesDownloaded;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesTotal;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2396[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProApps_GetDlcDownloadProgress) == 0x000004, "Wrong alignment on SteamProApps_GetDlcDownloadProgress");
static_assert(sizeof(SteamProApps_GetDlcDownloadProgress) == 0x000010, "Wrong size on SteamProApps_GetDlcDownloadProgress");
static_assert(offsetof(SteamProApps_GetDlcDownloadProgress, AppID) == 0x000000, "Member 'SteamProApps_GetDlcDownloadProgress::AppID' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetDlcDownloadProgress, BytesDownloaded) == 0x000004, "Member 'SteamProApps_GetDlcDownloadProgress::BytesDownloaded' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetDlcDownloadProgress, BytesTotal) == 0x000008, "Member 'SteamProApps_GetDlcDownloadProgress::BytesTotal' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetDlcDownloadProgress, ReturnValue) == 0x00000C, "Member 'SteamProApps_GetDlcDownloadProgress::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetEarliestPurchaseUnixTime
// 0x0008 (0x0008 - 0x0000)
struct SteamProApps_GetEarliestPurchaseUnixTime final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_GetEarliestPurchaseUnixTime) == 0x000004, "Wrong alignment on SteamProApps_GetEarliestPurchaseUnixTime");
static_assert(sizeof(SteamProApps_GetEarliestPurchaseUnixTime) == 0x000008, "Wrong size on SteamProApps_GetEarliestPurchaseUnixTime");
static_assert(offsetof(SteamProApps_GetEarliestPurchaseUnixTime, AppID) == 0x000000, "Member 'SteamProApps_GetEarliestPurchaseUnixTime::AppID' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetEarliestPurchaseUnixTime, ReturnValue) == 0x000004, "Member 'SteamProApps_GetEarliestPurchaseUnixTime::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetInstalledDepots
// 0x0020 (0x0020 - 0x0000)
struct SteamProApps_GetInstalledDepots final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDepots;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Depots;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2397[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProApps_GetInstalledDepots) == 0x000008, "Wrong alignment on SteamProApps_GetInstalledDepots");
static_assert(sizeof(SteamProApps_GetInstalledDepots) == 0x000020, "Wrong size on SteamProApps_GetInstalledDepots");
static_assert(offsetof(SteamProApps_GetInstalledDepots, AppID) == 0x000000, "Member 'SteamProApps_GetInstalledDepots::AppID' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetInstalledDepots, MaxDepots) == 0x000004, "Member 'SteamProApps_GetInstalledDepots::MaxDepots' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetInstalledDepots, Depots) == 0x000008, "Member 'SteamProApps_GetInstalledDepots::Depots' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetInstalledDepots, ReturnValue) == 0x000018, "Member 'SteamProApps_GetInstalledDepots::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetLaunchCommandLine
// 0x0018 (0x0018 - 0x0000)
struct SteamProApps_GetLaunchCommandLine final
{
public:
	class FString                                 CommandLine;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2398[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProApps_GetLaunchCommandLine) == 0x000008, "Wrong alignment on SteamProApps_GetLaunchCommandLine");
static_assert(sizeof(SteamProApps_GetLaunchCommandLine) == 0x000018, "Wrong size on SteamProApps_GetLaunchCommandLine");
static_assert(offsetof(SteamProApps_GetLaunchCommandLine, CommandLine) == 0x000000, "Member 'SteamProApps_GetLaunchCommandLine::CommandLine' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetLaunchCommandLine, ReturnValue) == 0x000010, "Member 'SteamProApps_GetLaunchCommandLine::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetLaunchQueryParam
// 0x0020 (0x0020 - 0x0000)
struct SteamProApps_GetLaunchQueryParam final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_GetLaunchQueryParam) == 0x000008, "Wrong alignment on SteamProApps_GetLaunchQueryParam");
static_assert(sizeof(SteamProApps_GetLaunchQueryParam) == 0x000020, "Wrong size on SteamProApps_GetLaunchQueryParam");
static_assert(offsetof(SteamProApps_GetLaunchQueryParam, Key) == 0x000000, "Member 'SteamProApps_GetLaunchQueryParam::Key' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetLaunchQueryParam, ReturnValue) == 0x000010, "Member 'SteamProApps_GetLaunchQueryParam::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetSteamApps
// 0x0008 (0x0008 - 0x0000)
struct SteamProApps_GetSteamApps final
{
public:
	class USteamProApps*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_GetSteamApps) == 0x000008, "Wrong alignment on SteamProApps_GetSteamApps");
static_assert(sizeof(SteamProApps_GetSteamApps) == 0x000008, "Wrong size on SteamProApps_GetSteamApps");
static_assert(offsetof(SteamProApps_GetSteamApps, ReturnValue) == 0x000000, "Member 'SteamProApps_GetSteamApps::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.InstallDLC
// 0x0004 (0x0004 - 0x0000)
struct SteamProApps_InstallDLC final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_InstallDLC) == 0x000004, "Wrong alignment on SteamProApps_InstallDLC");
static_assert(sizeof(SteamProApps_InstallDLC) == 0x000004, "Wrong size on SteamProApps_InstallDLC");
static_assert(offsetof(SteamProApps_InstallDLC, AppID) == 0x000000, "Member 'SteamProApps_InstallDLC::AppID' has a wrong offset!");

// Function SteamCorePro.SteamProApps.MarkContentCorrupt
// 0x0002 (0x0002 - 0x0000)
struct SteamProApps_MarkContentCorrupt final
{
public:
	bool                                          bMissingFilesOnly;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_MarkContentCorrupt) == 0x000001, "Wrong alignment on SteamProApps_MarkContentCorrupt");
static_assert(sizeof(SteamProApps_MarkContentCorrupt) == 0x000002, "Wrong size on SteamProApps_MarkContentCorrupt");
static_assert(offsetof(SteamProApps_MarkContentCorrupt, bMissingFilesOnly) == 0x000000, "Member 'SteamProApps_MarkContentCorrupt::bMissingFilesOnly' has a wrong offset!");
static_assert(offsetof(SteamProApps_MarkContentCorrupt, ReturnValue) == 0x000001, "Member 'SteamProApps_MarkContentCorrupt::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProApps.UninstallDLC
// 0x0004 (0x0004 - 0x0000)
struct SteamProApps_UninstallDLC final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_UninstallDLC) == 0x000004, "Wrong alignment on SteamProApps_UninstallDLC");
static_assert(sizeof(SteamProApps_UninstallDLC) == 0x000004, "Wrong size on SteamProApps_UninstallDLC");
static_assert(offsetof(SteamProApps_UninstallDLC, AppID) == 0x000000, "Member 'SteamProApps_UninstallDLC::AppID' has a wrong offset!");

// Function SteamCorePro.SteamProApps.GetFileDetails
// 0x0020 (0x0020 - 0x0000)
struct SteamProApps_GetFileDetails final
{
public:
	TDelegate<void(struct FFileDetailsResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProApps_GetFileDetails) == 0x000008, "Wrong alignment on SteamProApps_GetFileDetails");
static_assert(sizeof(SteamProApps_GetFileDetails) == 0x000020, "Wrong size on SteamProApps_GetFileDetails");
static_assert(offsetof(SteamProApps_GetFileDetails, Callback) == 0x000000, "Member 'SteamProApps_GetFileDetails::Callback' has a wrong offset!");
static_assert(offsetof(SteamProApps_GetFileDetails, Filename) == 0x000010, "Member 'SteamProApps_GetFileDetails::Filename' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.GetSteamGameSearch
// 0x0008 (0x0008 - 0x0000)
struct SteamProGameSearch_GetSteamGameSearch final
{
public:
	class USteamProGameSearch*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameSearch_GetSteamGameSearch) == 0x000008, "Wrong alignment on SteamProGameSearch_GetSteamGameSearch");
static_assert(sizeof(SteamProGameSearch_GetSteamGameSearch) == 0x000008, "Wrong size on SteamProGameSearch_GetSteamGameSearch");
static_assert(offsetof(SteamProGameSearch_GetSteamGameSearch, ReturnValue) == 0x000000, "Member 'SteamProGameSearch_GetSteamGameSearch::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.AcceptGame
// 0x0001 (0x0001 - 0x0000)
struct SteamProGameSearch_AcceptGame final
{
public:
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameSearch_AcceptGame) == 0x000001, "Wrong alignment on SteamProGameSearch_AcceptGame");
static_assert(sizeof(SteamProGameSearch_AcceptGame) == 0x000001, "Wrong size on SteamProGameSearch_AcceptGame");
static_assert(offsetof(SteamProGameSearch_AcceptGame, ReturnValue) == 0x000000, "Member 'SteamProGameSearch_AcceptGame::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.AddGameSearchParams
// 0x0028 (0x0028 - 0x0000)
struct SteamProGameSearch_AddGameSearchParams final
{
public:
	class FString                                 KeyToFind;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ValuesToFind;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239A[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameSearch_AddGameSearchParams) == 0x000008, "Wrong alignment on SteamProGameSearch_AddGameSearchParams");
static_assert(sizeof(SteamProGameSearch_AddGameSearchParams) == 0x000028, "Wrong size on SteamProGameSearch_AddGameSearchParams");
static_assert(offsetof(SteamProGameSearch_AddGameSearchParams, KeyToFind) == 0x000000, "Member 'SteamProGameSearch_AddGameSearchParams::KeyToFind' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_AddGameSearchParams, ValuesToFind) == 0x000010, "Member 'SteamProGameSearch_AddGameSearchParams::ValuesToFind' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_AddGameSearchParams, ReturnValue) == 0x000020, "Member 'SteamProGameSearch_AddGameSearchParams::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.CancelRequestPlayersForGame
// 0x0001 (0x0001 - 0x0000)
struct SteamProGameSearch_CancelRequestPlayersForGame final
{
public:
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameSearch_CancelRequestPlayersForGame) == 0x000001, "Wrong alignment on SteamProGameSearch_CancelRequestPlayersForGame");
static_assert(sizeof(SteamProGameSearch_CancelRequestPlayersForGame) == 0x000001, "Wrong size on SteamProGameSearch_CancelRequestPlayersForGame");
static_assert(offsetof(SteamProGameSearch_CancelRequestPlayersForGame, ReturnValue) == 0x000000, "Member 'SteamProGameSearch_CancelRequestPlayersForGame::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.DeclineGame
// 0x0001 (0x0001 - 0x0000)
struct SteamProGameSearch_DeclineGame final
{
public:
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameSearch_DeclineGame) == 0x000001, "Wrong alignment on SteamProGameSearch_DeclineGame");
static_assert(sizeof(SteamProGameSearch_DeclineGame) == 0x000001, "Wrong size on SteamProGameSearch_DeclineGame");
static_assert(offsetof(SteamProGameSearch_DeclineGame, ReturnValue) == 0x000000, "Member 'SteamProGameSearch_DeclineGame::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.EndGame
// 0x0018 (0x0018 - 0x0000)
struct SteamProGameSearch_EndGame final
{
public:
	class FString                                 UniqueGameID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameSearch_EndGame) == 0x000008, "Wrong alignment on SteamProGameSearch_EndGame");
static_assert(sizeof(SteamProGameSearch_EndGame) == 0x000018, "Wrong size on SteamProGameSearch_EndGame");
static_assert(offsetof(SteamProGameSearch_EndGame, UniqueGameID) == 0x000000, "Member 'SteamProGameSearch_EndGame::UniqueGameID' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_EndGame, ReturnValue) == 0x000010, "Member 'SteamProGameSearch_EndGame::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.EndGameSearch
// 0x0001 (0x0001 - 0x0000)
struct SteamProGameSearch_EndGameSearch final
{
public:
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameSearch_EndGameSearch) == 0x000001, "Wrong alignment on SteamProGameSearch_EndGameSearch");
static_assert(sizeof(SteamProGameSearch_EndGameSearch) == 0x000001, "Wrong size on SteamProGameSearch_EndGameSearch");
static_assert(offsetof(SteamProGameSearch_EndGameSearch, ReturnValue) == 0x000000, "Member 'SteamProGameSearch_EndGameSearch::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.HostConfirmGameStart
// 0x0018 (0x0018 - 0x0000)
struct SteamProGameSearch_HostConfirmGameStart final
{
public:
	class FString                                 UniqueGameID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameSearch_HostConfirmGameStart) == 0x000008, "Wrong alignment on SteamProGameSearch_HostConfirmGameStart");
static_assert(sizeof(SteamProGameSearch_HostConfirmGameStart) == 0x000018, "Wrong size on SteamProGameSearch_HostConfirmGameStart");
static_assert(offsetof(SteamProGameSearch_HostConfirmGameStart, UniqueGameID) == 0x000000, "Member 'SteamProGameSearch_HostConfirmGameStart::UniqueGameID' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_HostConfirmGameStart, ReturnValue) == 0x000010, "Member 'SteamProGameSearch_HostConfirmGameStart::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.RequestPlayersForGame
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameSearch_RequestPlayersForGame final
{
public:
	int32                                         PlayerMin;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMax;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTeamSize;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239D[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameSearch_RequestPlayersForGame) == 0x000004, "Wrong alignment on SteamProGameSearch_RequestPlayersForGame");
static_assert(sizeof(SteamProGameSearch_RequestPlayersForGame) == 0x000010, "Wrong size on SteamProGameSearch_RequestPlayersForGame");
static_assert(offsetof(SteamProGameSearch_RequestPlayersForGame, PlayerMin) == 0x000000, "Member 'SteamProGameSearch_RequestPlayersForGame::PlayerMin' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_RequestPlayersForGame, PlayerMax) == 0x000004, "Member 'SteamProGameSearch_RequestPlayersForGame::PlayerMax' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_RequestPlayersForGame, MaxTeamSize) == 0x000008, "Member 'SteamProGameSearch_RequestPlayersForGame::MaxTeamSize' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_RequestPlayersForGame, ReturnValue) == 0x00000C, "Member 'SteamProGameSearch_RequestPlayersForGame::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.RetrieveConnectionDetails
// 0x0020 (0x0020 - 0x0000)
struct SteamProGameSearch_RetrieveConnectionDetails final
{
public:
	struct FSteamID                               SteamIDHost;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ConnectionDetails;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumConnectionDetails;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239E[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameSearch_RetrieveConnectionDetails) == 0x000008, "Wrong alignment on SteamProGameSearch_RetrieveConnectionDetails");
static_assert(sizeof(SteamProGameSearch_RetrieveConnectionDetails) == 0x000020, "Wrong size on SteamProGameSearch_RetrieveConnectionDetails");
static_assert(offsetof(SteamProGameSearch_RetrieveConnectionDetails, SteamIDHost) == 0x000000, "Member 'SteamProGameSearch_RetrieveConnectionDetails::SteamIDHost' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_RetrieveConnectionDetails, ConnectionDetails) == 0x000008, "Member 'SteamProGameSearch_RetrieveConnectionDetails::ConnectionDetails' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_RetrieveConnectionDetails, NumConnectionDetails) == 0x000018, "Member 'SteamProGameSearch_RetrieveConnectionDetails::NumConnectionDetails' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_RetrieveConnectionDetails, ReturnValue) == 0x00001C, "Member 'SteamProGameSearch_RetrieveConnectionDetails::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.SearchForGameSolo
// 0x000C (0x000C - 0x0000)
struct SteamProGameSearch_SearchForGameSolo final
{
public:
	int32                                         PlayerMin;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMax;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239F[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameSearch_SearchForGameSolo) == 0x000004, "Wrong alignment on SteamProGameSearch_SearchForGameSolo");
static_assert(sizeof(SteamProGameSearch_SearchForGameSolo) == 0x00000C, "Wrong size on SteamProGameSearch_SearchForGameSolo");
static_assert(offsetof(SteamProGameSearch_SearchForGameSolo, PlayerMin) == 0x000000, "Member 'SteamProGameSearch_SearchForGameSolo::PlayerMin' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_SearchForGameSolo, PlayerMax) == 0x000004, "Member 'SteamProGameSearch_SearchForGameSolo::PlayerMax' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_SearchForGameSolo, ReturnValue) == 0x000008, "Member 'SteamProGameSearch_SearchForGameSolo::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.SearchForGameWithLobby
// 0x0018 (0x0018 - 0x0000)
struct SteamProGameSearch_SearchForGameWithLobby final
{
public:
	struct FSteamID                               SteamIDLobby;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PlayerMin;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMax;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A0[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameSearch_SearchForGameWithLobby) == 0x000008, "Wrong alignment on SteamProGameSearch_SearchForGameWithLobby");
static_assert(sizeof(SteamProGameSearch_SearchForGameWithLobby) == 0x000018, "Wrong size on SteamProGameSearch_SearchForGameWithLobby");
static_assert(offsetof(SteamProGameSearch_SearchForGameWithLobby, SteamIDLobby) == 0x000000, "Member 'SteamProGameSearch_SearchForGameWithLobby::SteamIDLobby' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_SearchForGameWithLobby, PlayerMin) == 0x000008, "Member 'SteamProGameSearch_SearchForGameWithLobby::PlayerMin' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_SearchForGameWithLobby, PlayerMax) == 0x00000C, "Member 'SteamProGameSearch_SearchForGameWithLobby::PlayerMax' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_SearchForGameWithLobby, ReturnValue) == 0x000010, "Member 'SteamProGameSearch_SearchForGameWithLobby::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.SetConnectionDetails
// 0x0018 (0x0018 - 0x0000)
struct SteamProGameSearch_SetConnectionDetails final
{
public:
	class FString                                 ConnectionDetails;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A1[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameSearch_SetConnectionDetails) == 0x000008, "Wrong alignment on SteamProGameSearch_SetConnectionDetails");
static_assert(sizeof(SteamProGameSearch_SetConnectionDetails) == 0x000018, "Wrong size on SteamProGameSearch_SetConnectionDetails");
static_assert(offsetof(SteamProGameSearch_SetConnectionDetails, ConnectionDetails) == 0x000000, "Member 'SteamProGameSearch_SetConnectionDetails::ConnectionDetails' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_SetConnectionDetails, ReturnValue) == 0x000010, "Member 'SteamProGameSearch_SetConnectionDetails::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.SetGameHostParams
// 0x0028 (0x0028 - 0x0000)
struct SteamProGameSearch_SetGameHostParams final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Values;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A2[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameSearch_SetGameHostParams) == 0x000008, "Wrong alignment on SteamProGameSearch_SetGameHostParams");
static_assert(sizeof(SteamProGameSearch_SetGameHostParams) == 0x000028, "Wrong size on SteamProGameSearch_SetGameHostParams");
static_assert(offsetof(SteamProGameSearch_SetGameHostParams, Key) == 0x000000, "Member 'SteamProGameSearch_SetGameHostParams::Key' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_SetGameHostParams, Values) == 0x000010, "Member 'SteamProGameSearch_SetGameHostParams::Values' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_SetGameHostParams, ReturnValue) == 0x000020, "Member 'SteamProGameSearch_SetGameHostParams::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameSearch.SubmitPlayerResult
// 0x0020 (0x0020 - 0x0000)
struct SteamProGameSearch_SubmitPlayerResult final
{
public:
	class FString                                 UniqueGameID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDPlayer;                                     // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamPlayerResult                            PlayerResult;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGameSearchErrorCode                     ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A3[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameSearch_SubmitPlayerResult) == 0x000008, "Wrong alignment on SteamProGameSearch_SubmitPlayerResult");
static_assert(sizeof(SteamProGameSearch_SubmitPlayerResult) == 0x000020, "Wrong size on SteamProGameSearch_SubmitPlayerResult");
static_assert(offsetof(SteamProGameSearch_SubmitPlayerResult, UniqueGameID) == 0x000000, "Member 'SteamProGameSearch_SubmitPlayerResult::UniqueGameID' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_SubmitPlayerResult, SteamIDPlayer) == 0x000010, "Member 'SteamProGameSearch_SubmitPlayerResult::SteamIDPlayer' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_SubmitPlayerResult, PlayerResult) == 0x000018, "Member 'SteamProGameSearch_SubmitPlayerResult::PlayerResult' has a wrong offset!");
static_assert(offsetof(SteamProGameSearch_SubmitPlayerResult, ReturnValue) == 0x000019, "Member 'SteamProGameSearch_SubmitPlayerResult::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.GetSteamGameServer
// 0x0008 (0x0008 - 0x0000)
struct SteamProGameServer_GetSteamGameServer final
{
public:
	class USteamProGameServer*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_GetSteamGameServer) == 0x000008, "Wrong alignment on SteamProGameServer_GetSteamGameServer");
static_assert(sizeof(SteamProGameServer_GetSteamGameServer) == 0x000008, "Wrong size on SteamProGameServer_GetSteamGameServer");
static_assert(offsetof(SteamProGameServer_GetSteamGameServer, ReturnValue) == 0x000000, "Member 'SteamProGameServer_GetSteamGameServer::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.AssociateWithClan
// 0x0018 (0x0018 - 0x0000)
struct SteamProGameServer_AssociateWithClan final
{
public:
	TDelegate<void(struct FAssociateWithClanResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDClan;                                       // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_AssociateWithClan) == 0x000008, "Wrong alignment on SteamProGameServer_AssociateWithClan");
static_assert(sizeof(SteamProGameServer_AssociateWithClan) == 0x000018, "Wrong size on SteamProGameServer_AssociateWithClan");
static_assert(offsetof(SteamProGameServer_AssociateWithClan, Callback) == 0x000000, "Member 'SteamProGameServer_AssociateWithClan::Callback' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_AssociateWithClan, SteamIDClan) == 0x000010, "Member 'SteamProGameServer_AssociateWithClan::SteamIDClan' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.BeginAuthSession
// 0x0020 (0x0020 - 0x0000)
struct SteamProGameServer_BeginAuthSession final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamBeginAuthSessionResult                  ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A5[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServer_BeginAuthSession) == 0x000008, "Wrong alignment on SteamProGameServer_BeginAuthSession");
static_assert(sizeof(SteamProGameServer_BeginAuthSession) == 0x000020, "Wrong size on SteamProGameServer_BeginAuthSession");
static_assert(offsetof(SteamProGameServer_BeginAuthSession, Ticket) == 0x000000, "Member 'SteamProGameServer_BeginAuthSession::Ticket' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_BeginAuthSession, SteamID) == 0x000010, "Member 'SteamProGameServer_BeginAuthSession::SteamID' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_BeginAuthSession, ReturnValue) == 0x000018, "Member 'SteamProGameServer_BeginAuthSession::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.BLoggedOn
// 0x0001 (0x0001 - 0x0000)
struct SteamProGameServer_BLoggedOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_BLoggedOn) == 0x000001, "Wrong alignment on SteamProGameServer_BLoggedOn");
static_assert(sizeof(SteamProGameServer_BLoggedOn) == 0x000001, "Wrong size on SteamProGameServer_BLoggedOn");
static_assert(offsetof(SteamProGameServer_BLoggedOn, ReturnValue) == 0x000000, "Member 'SteamProGameServer_BLoggedOn::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.BSecure
// 0x0001 (0x0001 - 0x0000)
struct SteamProGameServer_BSecure final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_BSecure) == 0x000001, "Wrong alignment on SteamProGameServer_BSecure");
static_assert(sizeof(SteamProGameServer_BSecure) == 0x000001, "Wrong size on SteamProGameServer_BSecure");
static_assert(offsetof(SteamProGameServer_BSecure, ReturnValue) == 0x000000, "Member 'SteamProGameServer_BSecure::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.BUpdateUserData
// 0x0020 (0x0020 - 0x0000)
struct SteamProGameServer_BUpdateUserData final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A6[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServer_BUpdateUserData) == 0x000008, "Wrong alignment on SteamProGameServer_BUpdateUserData");
static_assert(sizeof(SteamProGameServer_BUpdateUserData) == 0x000020, "Wrong size on SteamProGameServer_BUpdateUserData");
static_assert(offsetof(SteamProGameServer_BUpdateUserData, SteamIDUser) == 0x000000, "Member 'SteamProGameServer_BUpdateUserData::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_BUpdateUserData, PlayerName) == 0x000008, "Member 'SteamProGameServer_BUpdateUserData::PlayerName' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_BUpdateUserData, Score) == 0x000018, "Member 'SteamProGameServer_BUpdateUserData::Score' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_BUpdateUserData, ReturnValue) == 0x00001C, "Member 'SteamProGameServer_BUpdateUserData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.CancelAuthTicket
// 0x0004 (0x0004 - 0x0000)
struct SteamProGameServer_CancelAuthTicket final
{
public:
	struct FSteamTicketHandle                     TicketHandle;                                      // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_CancelAuthTicket) == 0x000004, "Wrong alignment on SteamProGameServer_CancelAuthTicket");
static_assert(sizeof(SteamProGameServer_CancelAuthTicket) == 0x000004, "Wrong size on SteamProGameServer_CancelAuthTicket");
static_assert(offsetof(SteamProGameServer_CancelAuthTicket, TicketHandle) == 0x000000, "Member 'SteamProGameServer_CancelAuthTicket::TicketHandle' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.ComputeNewPlayerCompatibility
// 0x0018 (0x0018 - 0x0000)
struct SteamProGameServer_ComputeNewPlayerCompatibility final
{
public:
	TDelegate<void(struct FComputeNewPlayerCompatibilityResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDNewPlayer;                                  // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_ComputeNewPlayerCompatibility) == 0x000008, "Wrong alignment on SteamProGameServer_ComputeNewPlayerCompatibility");
static_assert(sizeof(SteamProGameServer_ComputeNewPlayerCompatibility) == 0x000018, "Wrong size on SteamProGameServer_ComputeNewPlayerCompatibility");
static_assert(offsetof(SteamProGameServer_ComputeNewPlayerCompatibility, Callback) == 0x000000, "Member 'SteamProGameServer_ComputeNewPlayerCompatibility::Callback' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_ComputeNewPlayerCompatibility, SteamIDNewPlayer) == 0x000010, "Member 'SteamProGameServer_ComputeNewPlayerCompatibility::SteamIDNewPlayer' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.CreateUnauthenticatedUserConnection
// 0x0008 (0x0008 - 0x0000)
struct SteamProGameServer_CreateUnauthenticatedUserConnection final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_CreateUnauthenticatedUserConnection) == 0x000008, "Wrong alignment on SteamProGameServer_CreateUnauthenticatedUserConnection");
static_assert(sizeof(SteamProGameServer_CreateUnauthenticatedUserConnection) == 0x000008, "Wrong size on SteamProGameServer_CreateUnauthenticatedUserConnection");
static_assert(offsetof(SteamProGameServer_CreateUnauthenticatedUserConnection, ReturnValue) == 0x000000, "Member 'SteamProGameServer_CreateUnauthenticatedUserConnection::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.EndAuthSession
// 0x0008 (0x0008 - 0x0000)
struct SteamProGameServer_EndAuthSession final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_EndAuthSession) == 0x000008, "Wrong alignment on SteamProGameServer_EndAuthSession");
static_assert(sizeof(SteamProGameServer_EndAuthSession) == 0x000008, "Wrong size on SteamProGameServer_EndAuthSession");
static_assert(offsetof(SteamProGameServer_EndAuthSession, SteamID) == 0x000000, "Member 'SteamProGameServer_EndAuthSession::SteamID' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.GetAuthSessionTicket
// 0x00A0 (0x00A0 - 0x0000)
struct SteamProGameServer_GetAuthSessionTicket final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamNetworkingIdentity               SteamNetworkingIdentity;                           // 0x0010(0x0088)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamTicketHandle                     ReturnValue;                                       // 0x0098(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A7[0x4];                                     // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServer_GetAuthSessionTicket) == 0x000008, "Wrong alignment on SteamProGameServer_GetAuthSessionTicket");
static_assert(sizeof(SteamProGameServer_GetAuthSessionTicket) == 0x0000A0, "Wrong size on SteamProGameServer_GetAuthSessionTicket");
static_assert(offsetof(SteamProGameServer_GetAuthSessionTicket, Ticket) == 0x000000, "Member 'SteamProGameServer_GetAuthSessionTicket::Ticket' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_GetAuthSessionTicket, SteamNetworkingIdentity) == 0x000010, "Member 'SteamProGameServer_GetAuthSessionTicket::SteamNetworkingIdentity' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_GetAuthSessionTicket, ReturnValue) == 0x000098, "Member 'SteamProGameServer_GetAuthSessionTicket::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.GetServerPublicIP
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_GetServerPublicIP final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_GetServerPublicIP) == 0x000008, "Wrong alignment on SteamProGameServer_GetServerPublicIP");
static_assert(sizeof(SteamProGameServer_GetServerPublicIP) == 0x000010, "Wrong size on SteamProGameServer_GetServerPublicIP");
static_assert(offsetof(SteamProGameServer_GetServerPublicIP, ReturnValue) == 0x000000, "Member 'SteamProGameServer_GetServerPublicIP::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.GetServerPublicIP_Pure
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_GetServerPublicIP_Pure final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_GetServerPublicIP_Pure) == 0x000008, "Wrong alignment on SteamProGameServer_GetServerPublicIP_Pure");
static_assert(sizeof(SteamProGameServer_GetServerPublicIP_Pure) == 0x000010, "Wrong size on SteamProGameServer_GetServerPublicIP_Pure");
static_assert(offsetof(SteamProGameServer_GetServerPublicIP_Pure, ReturnValue) == 0x000000, "Member 'SteamProGameServer_GetServerPublicIP_Pure::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.GetServerPublicIP_PureCompact
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_GetServerPublicIP_PureCompact final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_GetServerPublicIP_PureCompact) == 0x000008, "Wrong alignment on SteamProGameServer_GetServerPublicIP_PureCompact");
static_assert(sizeof(SteamProGameServer_GetServerPublicIP_PureCompact) == 0x000010, "Wrong size on SteamProGameServer_GetServerPublicIP_PureCompact");
static_assert(offsetof(SteamProGameServer_GetServerPublicIP_PureCompact, ReturnValue) == 0x000000, "Member 'SteamProGameServer_GetServerPublicIP_PureCompact::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.GetServerSteamID
// 0x0008 (0x0008 - 0x0000)
struct SteamProGameServer_GetServerSteamID final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_GetServerSteamID) == 0x000008, "Wrong alignment on SteamProGameServer_GetServerSteamID");
static_assert(sizeof(SteamProGameServer_GetServerSteamID) == 0x000008, "Wrong size on SteamProGameServer_GetServerSteamID");
static_assert(offsetof(SteamProGameServer_GetServerSteamID, ReturnValue) == 0x000000, "Member 'SteamProGameServer_GetServerSteamID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.GetServerSteamID_Pure
// 0x0008 (0x0008 - 0x0000)
struct SteamProGameServer_GetServerSteamID_Pure final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_GetServerSteamID_Pure) == 0x000008, "Wrong alignment on SteamProGameServer_GetServerSteamID_Pure");
static_assert(sizeof(SteamProGameServer_GetServerSteamID_Pure) == 0x000008, "Wrong size on SteamProGameServer_GetServerSteamID_Pure");
static_assert(offsetof(SteamProGameServer_GetServerSteamID_Pure, ReturnValue) == 0x000000, "Member 'SteamProGameServer_GetServerSteamID_Pure::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.GetServerSteamID_PureCompact
// 0x0008 (0x0008 - 0x0000)
struct SteamProGameServer_GetServerSteamID_PureCompact final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_GetServerSteamID_PureCompact) == 0x000008, "Wrong alignment on SteamProGameServer_GetServerSteamID_PureCompact");
static_assert(sizeof(SteamProGameServer_GetServerSteamID_PureCompact) == 0x000008, "Wrong size on SteamProGameServer_GetServerSteamID_PureCompact");
static_assert(offsetof(SteamProGameServer_GetServerSteamID_PureCompact, ReturnValue) == 0x000000, "Member 'SteamProGameServer_GetServerSteamID_PureCompact::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.LogOn
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_LogOn final
{
public:
	class FString                                 Token;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_LogOn) == 0x000008, "Wrong alignment on SteamProGameServer_LogOn");
static_assert(sizeof(SteamProGameServer_LogOn) == 0x000010, "Wrong size on SteamProGameServer_LogOn");
static_assert(offsetof(SteamProGameServer_LogOn, Token) == 0x000000, "Member 'SteamProGameServer_LogOn::Token' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.RequestUserGroupStatus
// 0x0018 (0x0018 - 0x0000)
struct SteamProGameServer_RequestUserGroupStatus final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDGroup;                                      // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServer_RequestUserGroupStatus) == 0x000008, "Wrong alignment on SteamProGameServer_RequestUserGroupStatus");
static_assert(sizeof(SteamProGameServer_RequestUserGroupStatus) == 0x000018, "Wrong size on SteamProGameServer_RequestUserGroupStatus");
static_assert(offsetof(SteamProGameServer_RequestUserGroupStatus, SteamIDUser) == 0x000000, "Member 'SteamProGameServer_RequestUserGroupStatus::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_RequestUserGroupStatus, SteamIDGroup) == 0x000008, "Member 'SteamProGameServer_RequestUserGroupStatus::SteamIDGroup' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_RequestUserGroupStatus, ReturnValue) == 0x000010, "Member 'SteamProGameServer_RequestUserGroupStatus::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetAdvertiseServerActive
// 0x0001 (0x0001 - 0x0000)
struct SteamProGameServer_SetAdvertiseServerActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetAdvertiseServerActive) == 0x000001, "Wrong alignment on SteamProGameServer_SetAdvertiseServerActive");
static_assert(sizeof(SteamProGameServer_SetAdvertiseServerActive) == 0x000001, "Wrong size on SteamProGameServer_SetAdvertiseServerActive");
static_assert(offsetof(SteamProGameServer_SetAdvertiseServerActive, bActive) == 0x000000, "Member 'SteamProGameServer_SetAdvertiseServerActive::bActive' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetBotPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct SteamProGameServer_SetBotPlayerCount final
{
public:
	int32                                         BotPlayers;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetBotPlayerCount) == 0x000004, "Wrong alignment on SteamProGameServer_SetBotPlayerCount");
static_assert(sizeof(SteamProGameServer_SetBotPlayerCount) == 0x000004, "Wrong size on SteamProGameServer_SetBotPlayerCount");
static_assert(offsetof(SteamProGameServer_SetBotPlayerCount, BotPlayers) == 0x000000, "Member 'SteamProGameServer_SetBotPlayerCount::BotPlayers' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetDedicatedServer
// 0x0001 (0x0001 - 0x0000)
struct SteamProGameServer_SetDedicatedServer final
{
public:
	bool                                          bDedicated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetDedicatedServer) == 0x000001, "Wrong alignment on SteamProGameServer_SetDedicatedServer");
static_assert(sizeof(SteamProGameServer_SetDedicatedServer) == 0x000001, "Wrong size on SteamProGameServer_SetDedicatedServer");
static_assert(offsetof(SteamProGameServer_SetDedicatedServer, bDedicated) == 0x000000, "Member 'SteamProGameServer_SetDedicatedServer::bDedicated' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetGameData
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_SetGameData final
{
public:
	class FString                                 GameData;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetGameData) == 0x000008, "Wrong alignment on SteamProGameServer_SetGameData");
static_assert(sizeof(SteamProGameServer_SetGameData) == 0x000010, "Wrong size on SteamProGameServer_SetGameData");
static_assert(offsetof(SteamProGameServer_SetGameData, GameData) == 0x000000, "Member 'SteamProGameServer_SetGameData::GameData' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetGameDescription
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_SetGameDescription final
{
public:
	class FString                                 GameDescription;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetGameDescription) == 0x000008, "Wrong alignment on SteamProGameServer_SetGameDescription");
static_assert(sizeof(SteamProGameServer_SetGameDescription) == 0x000010, "Wrong size on SteamProGameServer_SetGameDescription");
static_assert(offsetof(SteamProGameServer_SetGameDescription, GameDescription) == 0x000000, "Member 'SteamProGameServer_SetGameDescription::GameDescription' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetGameTags
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_SetGameTags final
{
public:
	class FString                                 GameTags;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetGameTags) == 0x000008, "Wrong alignment on SteamProGameServer_SetGameTags");
static_assert(sizeof(SteamProGameServer_SetGameTags) == 0x000010, "Wrong size on SteamProGameServer_SetGameTags");
static_assert(offsetof(SteamProGameServer_SetGameTags, GameTags) == 0x000000, "Member 'SteamProGameServer_SetGameTags::GameTags' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetKeyValue
// 0x0020 (0x0020 - 0x0000)
struct SteamProGameServer_SetKeyValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetKeyValue) == 0x000008, "Wrong alignment on SteamProGameServer_SetKeyValue");
static_assert(sizeof(SteamProGameServer_SetKeyValue) == 0x000020, "Wrong size on SteamProGameServer_SetKeyValue");
static_assert(offsetof(SteamProGameServer_SetKeyValue, Key) == 0x000000, "Member 'SteamProGameServer_SetKeyValue::Key' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_SetKeyValue, Value) == 0x000010, "Member 'SteamProGameServer_SetKeyValue::Value' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetMapName
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_SetMapName final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetMapName) == 0x000008, "Wrong alignment on SteamProGameServer_SetMapName");
static_assert(sizeof(SteamProGameServer_SetMapName) == 0x000010, "Wrong size on SteamProGameServer_SetMapName");
static_assert(offsetof(SteamProGameServer_SetMapName, MapName) == 0x000000, "Member 'SteamProGameServer_SetMapName::MapName' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetMaxPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct SteamProGameServer_SetMaxPlayerCount final
{
public:
	int32                                         PlayersMax;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetMaxPlayerCount) == 0x000004, "Wrong alignment on SteamProGameServer_SetMaxPlayerCount");
static_assert(sizeof(SteamProGameServer_SetMaxPlayerCount) == 0x000004, "Wrong size on SteamProGameServer_SetMaxPlayerCount");
static_assert(offsetof(SteamProGameServer_SetMaxPlayerCount, PlayersMax) == 0x000000, "Member 'SteamProGameServer_SetMaxPlayerCount::PlayersMax' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetModDir
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_SetModDir final
{
public:
	class FString                                 ModDir;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetModDir) == 0x000008, "Wrong alignment on SteamProGameServer_SetModDir");
static_assert(sizeof(SteamProGameServer_SetModDir) == 0x000010, "Wrong size on SteamProGameServer_SetModDir");
static_assert(offsetof(SteamProGameServer_SetModDir, ModDir) == 0x000000, "Member 'SteamProGameServer_SetModDir::ModDir' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetPasswordProtected
// 0x0001 (0x0001 - 0x0000)
struct SteamProGameServer_SetPasswordProtected final
{
public:
	bool                                          bPasswordProtected;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetPasswordProtected) == 0x000001, "Wrong alignment on SteamProGameServer_SetPasswordProtected");
static_assert(sizeof(SteamProGameServer_SetPasswordProtected) == 0x000001, "Wrong size on SteamProGameServer_SetPasswordProtected");
static_assert(offsetof(SteamProGameServer_SetPasswordProtected, bPasswordProtected) == 0x000000, "Member 'SteamProGameServer_SetPasswordProtected::bPasswordProtected' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetProduct
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_SetProduct final
{
public:
	class FString                                 Product;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetProduct) == 0x000008, "Wrong alignment on SteamProGameServer_SetProduct");
static_assert(sizeof(SteamProGameServer_SetProduct) == 0x000010, "Wrong size on SteamProGameServer_SetProduct");
static_assert(offsetof(SteamProGameServer_SetProduct, Product) == 0x000000, "Member 'SteamProGameServer_SetProduct::Product' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetRegion
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_SetRegion final
{
public:
	class FString                                 Region;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetRegion) == 0x000008, "Wrong alignment on SteamProGameServer_SetRegion");
static_assert(sizeof(SteamProGameServer_SetRegion) == 0x000010, "Wrong size on SteamProGameServer_SetRegion");
static_assert(offsetof(SteamProGameServer_SetRegion, Region) == 0x000000, "Member 'SteamProGameServer_SetRegion::Region' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetServerName
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_SetServerName final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetServerName) == 0x000008, "Wrong alignment on SteamProGameServer_SetServerName");
static_assert(sizeof(SteamProGameServer_SetServerName) == 0x000010, "Wrong size on SteamProGameServer_SetServerName");
static_assert(offsetof(SteamProGameServer_SetServerName, ServerName) == 0x000000, "Member 'SteamProGameServer_SetServerName::ServerName' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetSpectatorPort
// 0x0004 (0x0004 - 0x0000)
struct SteamProGameServer_SetSpectatorPort final
{
public:
	int32                                         SpectatorPort;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetSpectatorPort) == 0x000004, "Wrong alignment on SteamProGameServer_SetSpectatorPort");
static_assert(sizeof(SteamProGameServer_SetSpectatorPort) == 0x000004, "Wrong size on SteamProGameServer_SetSpectatorPort");
static_assert(offsetof(SteamProGameServer_SetSpectatorPort, SpectatorPort) == 0x000000, "Member 'SteamProGameServer_SetSpectatorPort::SpectatorPort' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.SetSpectatorServerName
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_SetSpectatorServerName final
{
public:
	class FString                                 SpectatorServerName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_SetSpectatorServerName) == 0x000008, "Wrong alignment on SteamProGameServer_SetSpectatorServerName");
static_assert(sizeof(SteamProGameServer_SetSpectatorServerName) == 0x000010, "Wrong size on SteamProGameServer_SetSpectatorServerName");
static_assert(offsetof(SteamProGameServer_SetSpectatorServerName, SpectatorServerName) == 0x000000, "Member 'SteamProGameServer_SetSpectatorServerName::SpectatorServerName' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.UserHasLicenseForApp
// 0x0010 (0x0010 - 0x0000)
struct SteamProGameServer_UserHasLicenseForApp final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUserHasLicenseForAppResult              ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A9[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProGameServer_UserHasLicenseForApp) == 0x000008, "Wrong alignment on SteamProGameServer_UserHasLicenseForApp");
static_assert(sizeof(SteamProGameServer_UserHasLicenseForApp) == 0x000010, "Wrong size on SteamProGameServer_UserHasLicenseForApp");
static_assert(offsetof(SteamProGameServer_UserHasLicenseForApp, SteamID) == 0x000000, "Member 'SteamProGameServer_UserHasLicenseForApp::SteamID' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_UserHasLicenseForApp, AppID) == 0x000008, "Member 'SteamProGameServer_UserHasLicenseForApp::AppID' has a wrong offset!");
static_assert(offsetof(SteamProGameServer_UserHasLicenseForApp, ReturnValue) == 0x00000C, "Member 'SteamProGameServer_UserHasLicenseForApp::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProGameServer.WasRestartRequested
// 0x0001 (0x0001 - 0x0000)
struct SteamProGameServer_WasRestartRequested final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProGameServer_WasRestartRequested) == 0x000001, "Wrong alignment on SteamProGameServer_WasRestartRequested");
static_assert(sizeof(SteamProGameServer_WasRestartRequested) == 0x000001, "Wrong size on SteamProGameServer_WasRestartRequested");
static_assert(offsetof(SteamProGameServer_WasRestartRequested, ReturnValue) == 0x000000, "Member 'SteamProGameServer_WasRestartRequested::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParties.CancelReservation
// 0x0010 (0x0010 - 0x0000)
struct SteamProParties_CancelReservation final
{
public:
	struct FPartyBeaconID                         BeaconID;                                          // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProParties_CancelReservation) == 0x000008, "Wrong alignment on SteamProParties_CancelReservation");
static_assert(sizeof(SteamProParties_CancelReservation) == 0x000010, "Wrong size on SteamProParties_CancelReservation");
static_assert(offsetof(SteamProParties_CancelReservation, BeaconID) == 0x000000, "Member 'SteamProParties_CancelReservation::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamProParties_CancelReservation, SteamIDUser) == 0x000008, "Member 'SteamProParties_CancelReservation::SteamIDUser' has a wrong offset!");

// Function SteamCorePro.SteamProParties.DestroyBeacon
// 0x0010 (0x0010 - 0x0000)
struct SteamProParties_DestroyBeacon final
{
public:
	struct FPartyBeaconID                         BeaconID;                                          // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23AB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProParties_DestroyBeacon) == 0x000008, "Wrong alignment on SteamProParties_DestroyBeacon");
static_assert(sizeof(SteamProParties_DestroyBeacon) == 0x000010, "Wrong size on SteamProParties_DestroyBeacon");
static_assert(offsetof(SteamProParties_DestroyBeacon, BeaconID) == 0x000000, "Member 'SteamProParties_DestroyBeacon::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamProParties_DestroyBeacon, ReturnValue) == 0x000008, "Member 'SteamProParties_DestroyBeacon::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParties.GetAvailableBeaconLocations
// 0x0018 (0x0018 - 0x0000)
struct SteamProParties_GetAvailableBeaconLocations final
{
public:
	TArray<struct FSteamPartyBeaconLocation>      LocationList;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxNumLocations;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23AC[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProParties_GetAvailableBeaconLocations) == 0x000008, "Wrong alignment on SteamProParties_GetAvailableBeaconLocations");
static_assert(sizeof(SteamProParties_GetAvailableBeaconLocations) == 0x000018, "Wrong size on SteamProParties_GetAvailableBeaconLocations");
static_assert(offsetof(SteamProParties_GetAvailableBeaconLocations, LocationList) == 0x000000, "Member 'SteamProParties_GetAvailableBeaconLocations::LocationList' has a wrong offset!");
static_assert(offsetof(SteamProParties_GetAvailableBeaconLocations, MaxNumLocations) == 0x000010, "Member 'SteamProParties_GetAvailableBeaconLocations::MaxNumLocations' has a wrong offset!");
static_assert(offsetof(SteamProParties_GetAvailableBeaconLocations, ReturnValue) == 0x000014, "Member 'SteamProParties_GetAvailableBeaconLocations::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParties.GetBeaconByIndex
// 0x0010 (0x0010 - 0x0000)
struct SteamProParties_GetBeaconByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23AD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPartyBeaconID                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProParties_GetBeaconByIndex) == 0x000008, "Wrong alignment on SteamProParties_GetBeaconByIndex");
static_assert(sizeof(SteamProParties_GetBeaconByIndex) == 0x000010, "Wrong size on SteamProParties_GetBeaconByIndex");
static_assert(offsetof(SteamProParties_GetBeaconByIndex, Param_Index) == 0x000000, "Member 'SteamProParties_GetBeaconByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProParties_GetBeaconByIndex, ReturnValue) == 0x000008, "Member 'SteamProParties_GetBeaconByIndex::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParties.GetBeaconDetails
// 0x0040 (0x0040 - 0x0000)
struct SteamProParties_GetBeaconDetails final
{
public:
	struct FPartyBeaconID                         BeaconID;                                          // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDBeaconOwner;                                // 0x0008(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamPartyBeaconLocation              Location;                                          // 0x0010(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 OutMetadata;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23AE[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProParties_GetBeaconDetails) == 0x000008, "Wrong alignment on SteamProParties_GetBeaconDetails");
static_assert(sizeof(SteamProParties_GetBeaconDetails) == 0x000040, "Wrong size on SteamProParties_GetBeaconDetails");
static_assert(offsetof(SteamProParties_GetBeaconDetails, BeaconID) == 0x000000, "Member 'SteamProParties_GetBeaconDetails::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamProParties_GetBeaconDetails, SteamIDBeaconOwner) == 0x000008, "Member 'SteamProParties_GetBeaconDetails::SteamIDBeaconOwner' has a wrong offset!");
static_assert(offsetof(SteamProParties_GetBeaconDetails, Location) == 0x000010, "Member 'SteamProParties_GetBeaconDetails::Location' has a wrong offset!");
static_assert(offsetof(SteamProParties_GetBeaconDetails, OutMetadata) == 0x000028, "Member 'SteamProParties_GetBeaconDetails::OutMetadata' has a wrong offset!");
static_assert(offsetof(SteamProParties_GetBeaconDetails, ReturnValue) == 0x000038, "Member 'SteamProParties_GetBeaconDetails::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParties.GetBeaconLocationData
// 0x0038 (0x0038 - 0x0000)
struct SteamProParties_GetBeaconLocationData final
{
public:
	struct FSteamPartyBeaconLocation              BeaconLocation;                                    // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	ESteamPartiesBeaconLocationData               EData;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23AF[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PCHDataStringOut;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B0[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProParties_GetBeaconLocationData) == 0x000008, "Wrong alignment on SteamProParties_GetBeaconLocationData");
static_assert(sizeof(SteamProParties_GetBeaconLocationData) == 0x000038, "Wrong size on SteamProParties_GetBeaconLocationData");
static_assert(offsetof(SteamProParties_GetBeaconLocationData, BeaconLocation) == 0x000000, "Member 'SteamProParties_GetBeaconLocationData::BeaconLocation' has a wrong offset!");
static_assert(offsetof(SteamProParties_GetBeaconLocationData, EData) == 0x000018, "Member 'SteamProParties_GetBeaconLocationData::EData' has a wrong offset!");
static_assert(offsetof(SteamProParties_GetBeaconLocationData, PCHDataStringOut) == 0x000020, "Member 'SteamProParties_GetBeaconLocationData::PCHDataStringOut' has a wrong offset!");
static_assert(offsetof(SteamProParties_GetBeaconLocationData, ReturnValue) == 0x000030, "Member 'SteamProParties_GetBeaconLocationData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParties.GetNumActiveBeacons
// 0x0004 (0x0004 - 0x0000)
struct SteamProParties_GetNumActiveBeacons final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProParties_GetNumActiveBeacons) == 0x000004, "Wrong alignment on SteamProParties_GetNumActiveBeacons");
static_assert(sizeof(SteamProParties_GetNumActiveBeacons) == 0x000004, "Wrong size on SteamProParties_GetNumActiveBeacons");
static_assert(offsetof(SteamProParties_GetNumActiveBeacons, ReturnValue) == 0x000000, "Member 'SteamProParties_GetNumActiveBeacons::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParties.GetNumAvailableBeaconLocations
// 0x0008 (0x0008 - 0x0000)
struct SteamProParties_GetNumAvailableBeaconLocations final
{
public:
	int32                                         NumLocations;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B1[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProParties_GetNumAvailableBeaconLocations) == 0x000004, "Wrong alignment on SteamProParties_GetNumAvailableBeaconLocations");
static_assert(sizeof(SteamProParties_GetNumAvailableBeaconLocations) == 0x000008, "Wrong size on SteamProParties_GetNumAvailableBeaconLocations");
static_assert(offsetof(SteamProParties_GetNumAvailableBeaconLocations, NumLocations) == 0x000000, "Member 'SteamProParties_GetNumAvailableBeaconLocations::NumLocations' has a wrong offset!");
static_assert(offsetof(SteamProParties_GetNumAvailableBeaconLocations, ReturnValue) == 0x000004, "Member 'SteamProParties_GetNumAvailableBeaconLocations::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParties.GetSteamParties
// 0x0008 (0x0008 - 0x0000)
struct SteamProParties_GetSteamParties final
{
public:
	class USteamProParties*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProParties_GetSteamParties) == 0x000008, "Wrong alignment on SteamProParties_GetSteamParties");
static_assert(sizeof(SteamProParties_GetSteamParties) == 0x000008, "Wrong size on SteamProParties_GetSteamParties");
static_assert(offsetof(SteamProParties_GetSteamParties, ReturnValue) == 0x000000, "Member 'SteamProParties_GetSteamParties::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProParties.OnReservationCompleted
// 0x0010 (0x0010 - 0x0000)
struct SteamProParties_OnReservationCompleted final
{
public:
	struct FPartyBeaconID                         BeaconID;                                          // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamIDUser;                                       // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProParties_OnReservationCompleted) == 0x000008, "Wrong alignment on SteamProParties_OnReservationCompleted");
static_assert(sizeof(SteamProParties_OnReservationCompleted) == 0x000010, "Wrong size on SteamProParties_OnReservationCompleted");
static_assert(offsetof(SteamProParties_OnReservationCompleted, BeaconID) == 0x000000, "Member 'SteamProParties_OnReservationCompleted::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamProParties_OnReservationCompleted, SteamIDUser) == 0x000008, "Member 'SteamProParties_OnReservationCompleted::SteamIDUser' has a wrong offset!");

// Function SteamCorePro.SteamProParties.ChangeNumOpenSlots
// 0x0020 (0x0020 - 0x0000)
struct SteamProParties_ChangeNumOpenSlots final
{
public:
	TDelegate<void(struct FChangeNumOpenSlotsData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyBeaconID                         BeaconID;                                          // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OpenSlots;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B2[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProParties_ChangeNumOpenSlots) == 0x000008, "Wrong alignment on SteamProParties_ChangeNumOpenSlots");
static_assert(sizeof(SteamProParties_ChangeNumOpenSlots) == 0x000020, "Wrong size on SteamProParties_ChangeNumOpenSlots");
static_assert(offsetof(SteamProParties_ChangeNumOpenSlots, Callback) == 0x000000, "Member 'SteamProParties_ChangeNumOpenSlots::Callback' has a wrong offset!");
static_assert(offsetof(SteamProParties_ChangeNumOpenSlots, BeaconID) == 0x000010, "Member 'SteamProParties_ChangeNumOpenSlots::BeaconID' has a wrong offset!");
static_assert(offsetof(SteamProParties_ChangeNumOpenSlots, OpenSlots) == 0x000018, "Member 'SteamProParties_ChangeNumOpenSlots::OpenSlots' has a wrong offset!");

// Function SteamCorePro.SteamProParties.CreateBeacon
// 0x0050 (0x0050 - 0x0000)
struct SteamProParties_CreateBeacon final
{
public:
	TDelegate<void(struct FCreateBeaconData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenSlots;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B3[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamPartyBeaconLocation              BeaconLocation;                                    // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ConnectString;                                     // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetaData;                                          // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProParties_CreateBeacon) == 0x000008, "Wrong alignment on SteamProParties_CreateBeacon");
static_assert(sizeof(SteamProParties_CreateBeacon) == 0x000050, "Wrong size on SteamProParties_CreateBeacon");
static_assert(offsetof(SteamProParties_CreateBeacon, Callback) == 0x000000, "Member 'SteamProParties_CreateBeacon::Callback' has a wrong offset!");
static_assert(offsetof(SteamProParties_CreateBeacon, OpenSlots) == 0x000010, "Member 'SteamProParties_CreateBeacon::OpenSlots' has a wrong offset!");
static_assert(offsetof(SteamProParties_CreateBeacon, BeaconLocation) == 0x000018, "Member 'SteamProParties_CreateBeacon::BeaconLocation' has a wrong offset!");
static_assert(offsetof(SteamProParties_CreateBeacon, ConnectString) == 0x000030, "Member 'SteamProParties_CreateBeacon::ConnectString' has a wrong offset!");
static_assert(offsetof(SteamProParties_CreateBeacon, MetaData) == 0x000040, "Member 'SteamProParties_CreateBeacon::MetaData' has a wrong offset!");

// Function SteamCorePro.SteamProParties.JoinParty
// 0x0018 (0x0018 - 0x0000)
struct SteamProParties_JoinParty final
{
public:
	TDelegate<void(struct FJoinPartyData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyBeaconID                         BeaconID;                                          // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProParties_JoinParty) == 0x000008, "Wrong alignment on SteamProParties_JoinParty");
static_assert(sizeof(SteamProParties_JoinParty) == 0x000018, "Wrong size on SteamProParties_JoinParty");
static_assert(offsetof(SteamProParties_JoinParty, Callback) == 0x000000, "Member 'SteamProParties_JoinParty::Callback' has a wrong offset!");
static_assert(offsetof(SteamProParties_JoinParty, BeaconID) == 0x000010, "Member 'SteamProParties_JoinParty::BeaconID' has a wrong offset!");

// Function SteamCorePro.SteamProRemotePlay.GetSteamRemotePlay
// 0x0008 (0x0008 - 0x0000)
struct SteamProRemotePlay_GetSteamRemotePlay final
{
public:
	class USteamProRemotePlay*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemotePlay_GetSteamRemotePlay) == 0x000008, "Wrong alignment on SteamProRemotePlay_GetSteamRemotePlay");
static_assert(sizeof(SteamProRemotePlay_GetSteamRemotePlay) == 0x000008, "Wrong size on SteamProRemotePlay_GetSteamRemotePlay");
static_assert(offsetof(SteamProRemotePlay_GetSteamRemotePlay, ReturnValue) == 0x000000, "Member 'SteamProRemotePlay_GetSteamRemotePlay::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemotePlay.BGetSessionClientResolution
// 0x0010 (0x0010 - 0x0000)
struct SteamProRemotePlay_BGetSessionClientResolution final
{
public:
	int32                                         SessionID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionX;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionY;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B5[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemotePlay_BGetSessionClientResolution) == 0x000004, "Wrong alignment on SteamProRemotePlay_BGetSessionClientResolution");
static_assert(sizeof(SteamProRemotePlay_BGetSessionClientResolution) == 0x000010, "Wrong size on SteamProRemotePlay_BGetSessionClientResolution");
static_assert(offsetof(SteamProRemotePlay_BGetSessionClientResolution, SessionID) == 0x000000, "Member 'SteamProRemotePlay_BGetSessionClientResolution::SessionID' has a wrong offset!");
static_assert(offsetof(SteamProRemotePlay_BGetSessionClientResolution, ResolutionX) == 0x000004, "Member 'SteamProRemotePlay_BGetSessionClientResolution::ResolutionX' has a wrong offset!");
static_assert(offsetof(SteamProRemotePlay_BGetSessionClientResolution, ResolutionY) == 0x000008, "Member 'SteamProRemotePlay_BGetSessionClientResolution::ResolutionY' has a wrong offset!");
static_assert(offsetof(SteamProRemotePlay_BGetSessionClientResolution, ReturnValue) == 0x00000C, "Member 'SteamProRemotePlay_BGetSessionClientResolution::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemotePlay.BSendRemotePlayTogetherInvite
// 0x0010 (0x0010 - 0x0000)
struct SteamProRemotePlay_BSendRemotePlayTogetherInvite final
{
public:
	struct FSteamID                               SteamIDFriend;                                     // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemotePlay_BSendRemotePlayTogetherInvite) == 0x000008, "Wrong alignment on SteamProRemotePlay_BSendRemotePlayTogetherInvite");
static_assert(sizeof(SteamProRemotePlay_BSendRemotePlayTogetherInvite) == 0x000010, "Wrong size on SteamProRemotePlay_BSendRemotePlayTogetherInvite");
static_assert(offsetof(SteamProRemotePlay_BSendRemotePlayTogetherInvite, SteamIDFriend) == 0x000000, "Member 'SteamProRemotePlay_BSendRemotePlayTogetherInvite::SteamIDFriend' has a wrong offset!");
static_assert(offsetof(SteamProRemotePlay_BSendRemotePlayTogetherInvite, ReturnValue) == 0x000008, "Member 'SteamProRemotePlay_BSendRemotePlayTogetherInvite::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemotePlay.BStartRemotePlayTogether
// 0x0002 (0x0002 - 0x0000)
struct SteamProRemotePlay_BStartRemotePlayTogether final
{
public:
	bool                                          bShowOverlay;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemotePlay_BStartRemotePlayTogether) == 0x000001, "Wrong alignment on SteamProRemotePlay_BStartRemotePlayTogether");
static_assert(sizeof(SteamProRemotePlay_BStartRemotePlayTogether) == 0x000002, "Wrong size on SteamProRemotePlay_BStartRemotePlayTogether");
static_assert(offsetof(SteamProRemotePlay_BStartRemotePlayTogether, bShowOverlay) == 0x000000, "Member 'SteamProRemotePlay_BStartRemotePlayTogether::bShowOverlay' has a wrong offset!");
static_assert(offsetof(SteamProRemotePlay_BStartRemotePlayTogether, ReturnValue) == 0x000001, "Member 'SteamProRemotePlay_BStartRemotePlayTogether::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemotePlay.GetSessionClientFormFactor
// 0x0008 (0x0008 - 0x0000)
struct SteamProRemotePlay_GetSessionClientFormFactor final
{
public:
	int32                                         SessionID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreProDeviceFormFactor                 ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B7[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemotePlay_GetSessionClientFormFactor) == 0x000004, "Wrong alignment on SteamProRemotePlay_GetSessionClientFormFactor");
static_assert(sizeof(SteamProRemotePlay_GetSessionClientFormFactor) == 0x000008, "Wrong size on SteamProRemotePlay_GetSessionClientFormFactor");
static_assert(offsetof(SteamProRemotePlay_GetSessionClientFormFactor, SessionID) == 0x000000, "Member 'SteamProRemotePlay_GetSessionClientFormFactor::SessionID' has a wrong offset!");
static_assert(offsetof(SteamProRemotePlay_GetSessionClientFormFactor, ReturnValue) == 0x000004, "Member 'SteamProRemotePlay_GetSessionClientFormFactor::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemotePlay.GetSessionClientName
// 0x0018 (0x0018 - 0x0000)
struct SteamProRemotePlay_GetSessionClientName final
{
public:
	int32                                         SessionID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemotePlay_GetSessionClientName) == 0x000008, "Wrong alignment on SteamProRemotePlay_GetSessionClientName");
static_assert(sizeof(SteamProRemotePlay_GetSessionClientName) == 0x000018, "Wrong size on SteamProRemotePlay_GetSessionClientName");
static_assert(offsetof(SteamProRemotePlay_GetSessionClientName, SessionID) == 0x000000, "Member 'SteamProRemotePlay_GetSessionClientName::SessionID' has a wrong offset!");
static_assert(offsetof(SteamProRemotePlay_GetSessionClientName, ReturnValue) == 0x000008, "Member 'SteamProRemotePlay_GetSessionClientName::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemotePlay.GetSessionCount
// 0x0004 (0x0004 - 0x0000)
struct SteamProRemotePlay_GetSessionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemotePlay_GetSessionCount) == 0x000004, "Wrong alignment on SteamProRemotePlay_GetSessionCount");
static_assert(sizeof(SteamProRemotePlay_GetSessionCount) == 0x000004, "Wrong size on SteamProRemotePlay_GetSessionCount");
static_assert(offsetof(SteamProRemotePlay_GetSessionCount, ReturnValue) == 0x000000, "Member 'SteamProRemotePlay_GetSessionCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemotePlay.GetSessionID
// 0x0008 (0x0008 - 0x0000)
struct SteamProRemotePlay_GetSessionID final
{
public:
	int32                                         SessionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemotePlay_GetSessionID) == 0x000004, "Wrong alignment on SteamProRemotePlay_GetSessionID");
static_assert(sizeof(SteamProRemotePlay_GetSessionID) == 0x000008, "Wrong size on SteamProRemotePlay_GetSessionID");
static_assert(offsetof(SteamProRemotePlay_GetSessionID, SessionIndex) == 0x000000, "Member 'SteamProRemotePlay_GetSessionID::SessionIndex' has a wrong offset!");
static_assert(offsetof(SteamProRemotePlay_GetSessionID, ReturnValue) == 0x000004, "Member 'SteamProRemotePlay_GetSessionID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemotePlay.GetSessionSteamID
// 0x0010 (0x0010 - 0x0000)
struct SteamProRemotePlay_GetSessionSteamID final
{
public:
	int32                                         SessionID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B9[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemotePlay_GetSessionSteamID) == 0x000008, "Wrong alignment on SteamProRemotePlay_GetSessionSteamID");
static_assert(sizeof(SteamProRemotePlay_GetSessionSteamID) == 0x000010, "Wrong size on SteamProRemotePlay_GetSessionSteamID");
static_assert(offsetof(SteamProRemotePlay_GetSessionSteamID, SessionID) == 0x000000, "Member 'SteamProRemotePlay_GetSessionSteamID::SessionID' has a wrong offset!");
static_assert(offsetof(SteamProRemotePlay_GetSessionSteamID, ReturnValue) == 0x000008, "Member 'SteamProRemotePlay_GetSessionSteamID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.BeginFileWriteBatch
// 0x0001 (0x0001 - 0x0000)
struct SteamProRemoteStorage_BeginFileWriteBatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_BeginFileWriteBatch) == 0x000001, "Wrong alignment on SteamProRemoteStorage_BeginFileWriteBatch");
static_assert(sizeof(SteamProRemoteStorage_BeginFileWriteBatch) == 0x000001, "Wrong size on SteamProRemoteStorage_BeginFileWriteBatch");
static_assert(offsetof(SteamProRemoteStorage_BeginFileWriteBatch, ReturnValue) == 0x000000, "Member 'SteamProRemoteStorage_BeginFileWriteBatch::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.EndFileWriteBatch
// 0x0001 (0x0001 - 0x0000)
struct SteamProRemoteStorage_EndFileWriteBatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_EndFileWriteBatch) == 0x000001, "Wrong alignment on SteamProRemoteStorage_EndFileWriteBatch");
static_assert(sizeof(SteamProRemoteStorage_EndFileWriteBatch) == 0x000001, "Wrong size on SteamProRemoteStorage_EndFileWriteBatch");
static_assert(offsetof(SteamProRemoteStorage_EndFileWriteBatch, ReturnValue) == 0x000000, "Member 'SteamProRemoteStorage_EndFileWriteBatch::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileDelete
// 0x0018 (0x0018 - 0x0000)
struct SteamProRemoteStorage_FileDelete final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BB[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_FileDelete) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileDelete");
static_assert(sizeof(SteamProRemoteStorage_FileDelete) == 0x000018, "Wrong size on SteamProRemoteStorage_FileDelete");
static_assert(offsetof(SteamProRemoteStorage_FileDelete, File) == 0x000000, "Member 'SteamProRemoteStorage_FileDelete::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileDelete, ReturnValue) == 0x000010, "Member 'SteamProRemoteStorage_FileDelete::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileExists
// 0x0018 (0x0018 - 0x0000)
struct SteamProRemoteStorage_FileExists final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BC[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_FileExists) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileExists");
static_assert(sizeof(SteamProRemoteStorage_FileExists) == 0x000018, "Wrong size on SteamProRemoteStorage_FileExists");
static_assert(offsetof(SteamProRemoteStorage_FileExists, File) == 0x000000, "Member 'SteamProRemoteStorage_FileExists::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileExists, ReturnValue) == 0x000010, "Member 'SteamProRemoteStorage_FileExists::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileForget
// 0x0018 (0x0018 - 0x0000)
struct SteamProRemoteStorage_FileForget final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_FileForget) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileForget");
static_assert(sizeof(SteamProRemoteStorage_FileForget) == 0x000018, "Wrong size on SteamProRemoteStorage_FileForget");
static_assert(offsetof(SteamProRemoteStorage_FileForget, File) == 0x000000, "Member 'SteamProRemoteStorage_FileForget::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileForget, ReturnValue) == 0x000010, "Member 'SteamProRemoteStorage_FileForget::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FilePersisted
// 0x0018 (0x0018 - 0x0000)
struct SteamProRemoteStorage_FilePersisted final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BE[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_FilePersisted) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FilePersisted");
static_assert(sizeof(SteamProRemoteStorage_FilePersisted) == 0x000018, "Wrong size on SteamProRemoteStorage_FilePersisted");
static_assert(offsetof(SteamProRemoteStorage_FilePersisted, File) == 0x000000, "Member 'SteamProRemoteStorage_FilePersisted::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FilePersisted, ReturnValue) == 0x000010, "Member 'SteamProRemoteStorage_FilePersisted::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileRead
// 0x0028 (0x0028 - 0x0000)
struct SteamProRemoteStorage_FileRead final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Buffer;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DataToRead;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_FileRead) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileRead");
static_assert(sizeof(SteamProRemoteStorage_FileRead) == 0x000028, "Wrong size on SteamProRemoteStorage_FileRead");
static_assert(offsetof(SteamProRemoteStorage_FileRead, File) == 0x000000, "Member 'SteamProRemoteStorage_FileRead::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileRead, Buffer) == 0x000010, "Member 'SteamProRemoteStorage_FileRead::Buffer' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileRead, DataToRead) == 0x000020, "Member 'SteamProRemoteStorage_FileRead::DataToRead' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileRead, ReturnValue) == 0x000024, "Member 'SteamProRemoteStorage_FileRead::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileReadAsyncComplete
// 0x0030 (0x0030 - 0x0000)
struct SteamProRemoteStorage_FileReadAsyncComplete final
{
public:
	struct FRemoteStorageFileReadAsyncComplete    ReadCall;                                          // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Buffer;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BytesToRead;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BF[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_FileReadAsyncComplete) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileReadAsyncComplete");
static_assert(sizeof(SteamProRemoteStorage_FileReadAsyncComplete) == 0x000030, "Wrong size on SteamProRemoteStorage_FileReadAsyncComplete");
static_assert(offsetof(SteamProRemoteStorage_FileReadAsyncComplete, ReadCall) == 0x000000, "Member 'SteamProRemoteStorage_FileReadAsyncComplete::ReadCall' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileReadAsyncComplete, Buffer) == 0x000018, "Member 'SteamProRemoteStorage_FileReadAsyncComplete::Buffer' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileReadAsyncComplete, BytesToRead) == 0x000028, "Member 'SteamProRemoteStorage_FileReadAsyncComplete::BytesToRead' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileReadAsyncComplete, ReturnValue) == 0x00002C, "Member 'SteamProRemoteStorage_FileReadAsyncComplete::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileWrite
// 0x0028 (0x0028 - 0x0000)
struct SteamProRemoteStorage_FileWrite final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C0[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_FileWrite) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileWrite");
static_assert(sizeof(SteamProRemoteStorage_FileWrite) == 0x000028, "Wrong size on SteamProRemoteStorage_FileWrite");
static_assert(offsetof(SteamProRemoteStorage_FileWrite, File) == 0x000000, "Member 'SteamProRemoteStorage_FileWrite::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileWrite, Data) == 0x000010, "Member 'SteamProRemoteStorage_FileWrite::Data' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileWrite, ReturnValue) == 0x000020, "Member 'SteamProRemoteStorage_FileWrite::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileWriteStreamCancel
// 0x0010 (0x0010 - 0x0000)
struct SteamProRemoteStorage_FileWriteStreamCancel final
{
public:
	struct FUGCFileWriteStreamHandle              Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_FileWriteStreamCancel) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileWriteStreamCancel");
static_assert(sizeof(SteamProRemoteStorage_FileWriteStreamCancel) == 0x000010, "Wrong size on SteamProRemoteStorage_FileWriteStreamCancel");
static_assert(offsetof(SteamProRemoteStorage_FileWriteStreamCancel, Handle) == 0x000000, "Member 'SteamProRemoteStorage_FileWriteStreamCancel::Handle' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileWriteStreamCancel, ReturnValue) == 0x000008, "Member 'SteamProRemoteStorage_FileWriteStreamCancel::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileWriteStreamClose
// 0x0010 (0x0010 - 0x0000)
struct SteamProRemoteStorage_FileWriteStreamClose final
{
public:
	struct FUGCFileWriteStreamHandle              Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_FileWriteStreamClose) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileWriteStreamClose");
static_assert(sizeof(SteamProRemoteStorage_FileWriteStreamClose) == 0x000010, "Wrong size on SteamProRemoteStorage_FileWriteStreamClose");
static_assert(offsetof(SteamProRemoteStorage_FileWriteStreamClose, Handle) == 0x000000, "Member 'SteamProRemoteStorage_FileWriteStreamClose::Handle' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileWriteStreamClose, ReturnValue) == 0x000008, "Member 'SteamProRemoteStorage_FileWriteStreamClose::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileWriteStreamOpen
// 0x0018 (0x0018 - 0x0000)
struct SteamProRemoteStorage_FileWriteStreamOpen final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCFileWriteStreamHandle              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_FileWriteStreamOpen) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileWriteStreamOpen");
static_assert(sizeof(SteamProRemoteStorage_FileWriteStreamOpen) == 0x000018, "Wrong size on SteamProRemoteStorage_FileWriteStreamOpen");
static_assert(offsetof(SteamProRemoteStorage_FileWriteStreamOpen, File) == 0x000000, "Member 'SteamProRemoteStorage_FileWriteStreamOpen::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileWriteStreamOpen, ReturnValue) == 0x000010, "Member 'SteamProRemoteStorage_FileWriteStreamOpen::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileWriteStreamWriteChunk
// 0x0020 (0x0020 - 0x0000)
struct SteamProRemoteStorage_FileWriteStreamWriteChunk final
{
public:
	struct FUGCFileWriteStreamHandle              Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C3[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_FileWriteStreamWriteChunk) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileWriteStreamWriteChunk");
static_assert(sizeof(SteamProRemoteStorage_FileWriteStreamWriteChunk) == 0x000020, "Wrong size on SteamProRemoteStorage_FileWriteStreamWriteChunk");
static_assert(offsetof(SteamProRemoteStorage_FileWriteStreamWriteChunk, Handle) == 0x000000, "Member 'SteamProRemoteStorage_FileWriteStreamWriteChunk::Handle' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileWriteStreamWriteChunk, Data) == 0x000008, "Member 'SteamProRemoteStorage_FileWriteStreamWriteChunk::Data' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileWriteStreamWriteChunk, ReturnValue) == 0x000018, "Member 'SteamProRemoteStorage_FileWriteStreamWriteChunk::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.GetCachedUGCCount
// 0x0004 (0x0004 - 0x0000)
struct SteamProRemoteStorage_GetCachedUGCCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_GetCachedUGCCount) == 0x000004, "Wrong alignment on SteamProRemoteStorage_GetCachedUGCCount");
static_assert(sizeof(SteamProRemoteStorage_GetCachedUGCCount) == 0x000004, "Wrong size on SteamProRemoteStorage_GetCachedUGCCount");
static_assert(offsetof(SteamProRemoteStorage_GetCachedUGCCount, ReturnValue) == 0x000000, "Member 'SteamProRemoteStorage_GetCachedUGCCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.GetCachedUGCHandle
// 0x0010 (0x0010 - 0x0000)
struct SteamProRemoteStorage_GetCachedUGCHandle final
{
public:
	int32                                         ICachedContent;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamUGCHandle                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_GetCachedUGCHandle) == 0x000008, "Wrong alignment on SteamProRemoteStorage_GetCachedUGCHandle");
static_assert(sizeof(SteamProRemoteStorage_GetCachedUGCHandle) == 0x000010, "Wrong size on SteamProRemoteStorage_GetCachedUGCHandle");
static_assert(offsetof(SteamProRemoteStorage_GetCachedUGCHandle, ICachedContent) == 0x000000, "Member 'SteamProRemoteStorage_GetCachedUGCHandle::ICachedContent' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetCachedUGCHandle, ReturnValue) == 0x000008, "Member 'SteamProRemoteStorage_GetCachedUGCHandle::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.GetFileCount
// 0x0004 (0x0004 - 0x0000)
struct SteamProRemoteStorage_GetFileCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_GetFileCount) == 0x000004, "Wrong alignment on SteamProRemoteStorage_GetFileCount");
static_assert(sizeof(SteamProRemoteStorage_GetFileCount) == 0x000004, "Wrong size on SteamProRemoteStorage_GetFileCount");
static_assert(offsetof(SteamProRemoteStorage_GetFileCount, ReturnValue) == 0x000000, "Member 'SteamProRemoteStorage_GetFileCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.GetFileNameAndSize
// 0x0018 (0x0018 - 0x0000)
struct SteamProRemoteStorage_GetFileNameAndSize final
{
public:
	int32                                         File;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSizeInBytes;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_GetFileNameAndSize) == 0x000008, "Wrong alignment on SteamProRemoteStorage_GetFileNameAndSize");
static_assert(sizeof(SteamProRemoteStorage_GetFileNameAndSize) == 0x000018, "Wrong size on SteamProRemoteStorage_GetFileNameAndSize");
static_assert(offsetof(SteamProRemoteStorage_GetFileNameAndSize, File) == 0x000000, "Member 'SteamProRemoteStorage_GetFileNameAndSize::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetFileNameAndSize, FileSizeInBytes) == 0x000004, "Member 'SteamProRemoteStorage_GetFileNameAndSize::FileSizeInBytes' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetFileNameAndSize, ReturnValue) == 0x000008, "Member 'SteamProRemoteStorage_GetFileNameAndSize::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.GetFileSize
// 0x0018 (0x0018 - 0x0000)
struct SteamProRemoteStorage_GetFileSize final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C5[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_GetFileSize) == 0x000008, "Wrong alignment on SteamProRemoteStorage_GetFileSize");
static_assert(sizeof(SteamProRemoteStorage_GetFileSize) == 0x000018, "Wrong size on SteamProRemoteStorage_GetFileSize");
static_assert(offsetof(SteamProRemoteStorage_GetFileSize, File) == 0x000000, "Member 'SteamProRemoteStorage_GetFileSize::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetFileSize, ReturnValue) == 0x000010, "Member 'SteamProRemoteStorage_GetFileSize::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.GetFileTimestamp
// 0x0018 (0x0018 - 0x0000)
struct SteamProRemoteStorage_GetFileTimestamp final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C6[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_GetFileTimestamp) == 0x000008, "Wrong alignment on SteamProRemoteStorage_GetFileTimestamp");
static_assert(sizeof(SteamProRemoteStorage_GetFileTimestamp) == 0x000018, "Wrong size on SteamProRemoteStorage_GetFileTimestamp");
static_assert(offsetof(SteamProRemoteStorage_GetFileTimestamp, File) == 0x000000, "Member 'SteamProRemoteStorage_GetFileTimestamp::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetFileTimestamp, ReturnValue) == 0x000010, "Member 'SteamProRemoteStorage_GetFileTimestamp::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.GetLocalFileChangeCount
// 0x0004 (0x0004 - 0x0000)
struct SteamProRemoteStorage_GetLocalFileChangeCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_GetLocalFileChangeCount) == 0x000004, "Wrong alignment on SteamProRemoteStorage_GetLocalFileChangeCount");
static_assert(sizeof(SteamProRemoteStorage_GetLocalFileChangeCount) == 0x000004, "Wrong size on SteamProRemoteStorage_GetLocalFileChangeCount");
static_assert(offsetof(SteamProRemoteStorage_GetLocalFileChangeCount, ReturnValue) == 0x000000, "Member 'SteamProRemoteStorage_GetLocalFileChangeCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.GetQuota
// 0x000C (0x000C - 0x0000)
struct SteamProRemoteStorage_GetQuota final
{
public:
	int32                                         TotalBytes;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailableBytes;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C7[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_GetQuota) == 0x000004, "Wrong alignment on SteamProRemoteStorage_GetQuota");
static_assert(sizeof(SteamProRemoteStorage_GetQuota) == 0x00000C, "Wrong size on SteamProRemoteStorage_GetQuota");
static_assert(offsetof(SteamProRemoteStorage_GetQuota, TotalBytes) == 0x000000, "Member 'SteamProRemoteStorage_GetQuota::TotalBytes' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetQuota, AvailableBytes) == 0x000004, "Member 'SteamProRemoteStorage_GetQuota::AvailableBytes' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetQuota, ReturnValue) == 0x000008, "Member 'SteamProRemoteStorage_GetQuota::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.GetSteamRemoteStorage
// 0x0008 (0x0008 - 0x0000)
struct SteamProRemoteStorage_GetSteamRemoteStorage final
{
public:
	class USteamProRemoteStorage*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_GetSteamRemoteStorage) == 0x000008, "Wrong alignment on SteamProRemoteStorage_GetSteamRemoteStorage");
static_assert(sizeof(SteamProRemoteStorage_GetSteamRemoteStorage) == 0x000008, "Wrong size on SteamProRemoteStorage_GetSteamRemoteStorage");
static_assert(offsetof(SteamProRemoteStorage_GetSteamRemoteStorage, ReturnValue) == 0x000000, "Member 'SteamProRemoteStorage_GetSteamRemoteStorage::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.GetSyncPlatforms
// 0x0018 (0x0018 - 0x0000)
struct SteamProRemoteStorage_GetSyncPlatforms final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamRemoteStoragePlatform                   ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_GetSyncPlatforms) == 0x000008, "Wrong alignment on SteamProRemoteStorage_GetSyncPlatforms");
static_assert(sizeof(SteamProRemoteStorage_GetSyncPlatforms) == 0x000018, "Wrong size on SteamProRemoteStorage_GetSyncPlatforms");
static_assert(offsetof(SteamProRemoteStorage_GetSyncPlatforms, File) == 0x000000, "Member 'SteamProRemoteStorage_GetSyncPlatforms::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetSyncPlatforms, ReturnValue) == 0x000010, "Member 'SteamProRemoteStorage_GetSyncPlatforms::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.GetUGCDetails
// 0x0038 (0x0038 - 0x0000)
struct SteamProRemoteStorage_GetUGCDetails final
{
public:
	struct FSteamUGCHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C9[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_Name;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileSizeInBytes;                                   // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23CA[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamIDOwner;                                      // 0x0028(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23CB[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_GetUGCDetails) == 0x000008, "Wrong alignment on SteamProRemoteStorage_GetUGCDetails");
static_assert(sizeof(SteamProRemoteStorage_GetUGCDetails) == 0x000038, "Wrong size on SteamProRemoteStorage_GetUGCDetails");
static_assert(offsetof(SteamProRemoteStorage_GetUGCDetails, Handle) == 0x000000, "Member 'SteamProRemoteStorage_GetUGCDetails::Handle' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetUGCDetails, AppID) == 0x000008, "Member 'SteamProRemoteStorage_GetUGCDetails::AppID' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetUGCDetails, Param_Name) == 0x000010, "Member 'SteamProRemoteStorage_GetUGCDetails::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetUGCDetails, FileSizeInBytes) == 0x000020, "Member 'SteamProRemoteStorage_GetUGCDetails::FileSizeInBytes' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetUGCDetails, SteamIDOwner) == 0x000028, "Member 'SteamProRemoteStorage_GetUGCDetails::SteamIDOwner' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetUGCDetails, ReturnValue) == 0x000030, "Member 'SteamProRemoteStorage_GetUGCDetails::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.GetUGCDownloadProgress
// 0x0018 (0x0018 - 0x0000)
struct SteamProRemoteStorage_GetUGCDownloadProgress final
{
public:
	struct FSteamUGCHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BytesDownloaded;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesExpected;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23CC[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_GetUGCDownloadProgress) == 0x000008, "Wrong alignment on SteamProRemoteStorage_GetUGCDownloadProgress");
static_assert(sizeof(SteamProRemoteStorage_GetUGCDownloadProgress) == 0x000018, "Wrong size on SteamProRemoteStorage_GetUGCDownloadProgress");
static_assert(offsetof(SteamProRemoteStorage_GetUGCDownloadProgress, Handle) == 0x000000, "Member 'SteamProRemoteStorage_GetUGCDownloadProgress::Handle' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetUGCDownloadProgress, BytesDownloaded) == 0x000008, "Member 'SteamProRemoteStorage_GetUGCDownloadProgress::BytesDownloaded' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetUGCDownloadProgress, BytesExpected) == 0x00000C, "Member 'SteamProRemoteStorage_GetUGCDownloadProgress::BytesExpected' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_GetUGCDownloadProgress, ReturnValue) == 0x000010, "Member 'SteamProRemoteStorage_GetUGCDownloadProgress::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.IsCloudEnabledForAccount
// 0x0001 (0x0001 - 0x0000)
struct SteamProRemoteStorage_IsCloudEnabledForAccount final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_IsCloudEnabledForAccount) == 0x000001, "Wrong alignment on SteamProRemoteStorage_IsCloudEnabledForAccount");
static_assert(sizeof(SteamProRemoteStorage_IsCloudEnabledForAccount) == 0x000001, "Wrong size on SteamProRemoteStorage_IsCloudEnabledForAccount");
static_assert(offsetof(SteamProRemoteStorage_IsCloudEnabledForAccount, ReturnValue) == 0x000000, "Member 'SteamProRemoteStorage_IsCloudEnabledForAccount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.IsCloudEnabledForApp
// 0x0001 (0x0001 - 0x0000)
struct SteamProRemoteStorage_IsCloudEnabledForApp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_IsCloudEnabledForApp) == 0x000001, "Wrong alignment on SteamProRemoteStorage_IsCloudEnabledForApp");
static_assert(sizeof(SteamProRemoteStorage_IsCloudEnabledForApp) == 0x000001, "Wrong size on SteamProRemoteStorage_IsCloudEnabledForApp");
static_assert(offsetof(SteamProRemoteStorage_IsCloudEnabledForApp, ReturnValue) == 0x000000, "Member 'SteamProRemoteStorage_IsCloudEnabledForApp::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.SetCloudEnabledForApp
// 0x0001 (0x0001 - 0x0000)
struct SteamProRemoteStorage_SetCloudEnabledForApp final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_SetCloudEnabledForApp) == 0x000001, "Wrong alignment on SteamProRemoteStorage_SetCloudEnabledForApp");
static_assert(sizeof(SteamProRemoteStorage_SetCloudEnabledForApp) == 0x000001, "Wrong size on SteamProRemoteStorage_SetCloudEnabledForApp");
static_assert(offsetof(SteamProRemoteStorage_SetCloudEnabledForApp, bEnabled) == 0x000000, "Member 'SteamProRemoteStorage_SetCloudEnabledForApp::bEnabled' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.SetSyncPlatforms
// 0x0018 (0x0018 - 0x0000)
struct SteamProRemoteStorage_SetSyncPlatforms final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamRemoteStoragePlatform                   RemoteStoragePlatform;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23CD[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_SetSyncPlatforms) == 0x000008, "Wrong alignment on SteamProRemoteStorage_SetSyncPlatforms");
static_assert(sizeof(SteamProRemoteStorage_SetSyncPlatforms) == 0x000018, "Wrong size on SteamProRemoteStorage_SetSyncPlatforms");
static_assert(offsetof(SteamProRemoteStorage_SetSyncPlatforms, File) == 0x000000, "Member 'SteamProRemoteStorage_SetSyncPlatforms::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_SetSyncPlatforms, RemoteStoragePlatform) == 0x000010, "Member 'SteamProRemoteStorage_SetSyncPlatforms::RemoteStoragePlatform' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_SetSyncPlatforms, ReturnValue) == 0x000011, "Member 'SteamProRemoteStorage_SetSyncPlatforms::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.UGCRead
// 0x0028 (0x0028 - 0x0000)
struct SteamProRemoteStorage_UGCRead final
{
public:
	struct FSteamUGCHandle                        Content;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DataToRead;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUGCReadAction                           Action;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23CE[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_UGCRead) == 0x000008, "Wrong alignment on SteamProRemoteStorage_UGCRead");
static_assert(sizeof(SteamProRemoteStorage_UGCRead) == 0x000028, "Wrong size on SteamProRemoteStorage_UGCRead");
static_assert(offsetof(SteamProRemoteStorage_UGCRead, Content) == 0x000000, "Member 'SteamProRemoteStorage_UGCRead::Content' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_UGCRead, OutData) == 0x000008, "Member 'SteamProRemoteStorage_UGCRead::OutData' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_UGCRead, DataToRead) == 0x000018, "Member 'SteamProRemoteStorage_UGCRead::DataToRead' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_UGCRead, Offset) == 0x00001C, "Member 'SteamProRemoteStorage_UGCRead::Offset' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_UGCRead, Action) == 0x000020, "Member 'SteamProRemoteStorage_UGCRead::Action' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_UGCRead, ReturnValue) == 0x000024, "Member 'SteamProRemoteStorage_UGCRead::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileReadAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamProRemoteStorage_FileReadAsync final
{
public:
	TDelegate<void(struct FRemoteStorageFileReadAsyncComplete& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 File;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesToRead;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_FileReadAsync) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileReadAsync");
static_assert(sizeof(SteamProRemoteStorage_FileReadAsync) == 0x000028, "Wrong size on SteamProRemoteStorage_FileReadAsync");
static_assert(offsetof(SteamProRemoteStorage_FileReadAsync, Callback) == 0x000000, "Member 'SteamProRemoteStorage_FileReadAsync::Callback' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileReadAsync, File) == 0x000010, "Member 'SteamProRemoteStorage_FileReadAsync::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileReadAsync, Offset) == 0x000020, "Member 'SteamProRemoteStorage_FileReadAsync::Offset' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileReadAsync, BytesToRead) == 0x000024, "Member 'SteamProRemoteStorage_FileReadAsync::BytesToRead' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileShare
// 0x0020 (0x0020 - 0x0000)
struct SteamProRemoteStorage_FileShare final
{
public:
	TDelegate<void(struct FRemoteStorageFileShareResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 File;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_FileShare) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileShare");
static_assert(sizeof(SteamProRemoteStorage_FileShare) == 0x000020, "Wrong size on SteamProRemoteStorage_FileShare");
static_assert(offsetof(SteamProRemoteStorage_FileShare, Callback) == 0x000000, "Member 'SteamProRemoteStorage_FileShare::Callback' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileShare, File) == 0x000010, "Member 'SteamProRemoteStorage_FileShare::File' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.FileWriteAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamProRemoteStorage_FileWriteAsync final
{
public:
	TDelegate<void(struct FRemoteStorageFileWriteAsyncComplete& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 File;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProRemoteStorage_FileWriteAsync) == 0x000008, "Wrong alignment on SteamProRemoteStorage_FileWriteAsync");
static_assert(sizeof(SteamProRemoteStorage_FileWriteAsync) == 0x000030, "Wrong size on SteamProRemoteStorage_FileWriteAsync");
static_assert(offsetof(SteamProRemoteStorage_FileWriteAsync, Callback) == 0x000000, "Member 'SteamProRemoteStorage_FileWriteAsync::Callback' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileWriteAsync, File) == 0x000010, "Member 'SteamProRemoteStorage_FileWriteAsync::File' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_FileWriteAsync, Data) == 0x000020, "Member 'SteamProRemoteStorage_FileWriteAsync::Data' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.UGCDownload
// 0x0020 (0x0020 - 0x0000)
struct SteamProRemoteStorage_UGCDownload final
{
public:
	TDelegate<void(struct FRemoteStorageDownloadUGCResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamUGCHandle                        Content;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23CF[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_UGCDownload) == 0x000008, "Wrong alignment on SteamProRemoteStorage_UGCDownload");
static_assert(sizeof(SteamProRemoteStorage_UGCDownload) == 0x000020, "Wrong size on SteamProRemoteStorage_UGCDownload");
static_assert(offsetof(SteamProRemoteStorage_UGCDownload, Callback) == 0x000000, "Member 'SteamProRemoteStorage_UGCDownload::Callback' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_UGCDownload, Content) == 0x000010, "Member 'SteamProRemoteStorage_UGCDownload::Content' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_UGCDownload, Priority) == 0x000018, "Member 'SteamProRemoteStorage_UGCDownload::Priority' has a wrong offset!");

// Function SteamCorePro.SteamProRemoteStorage.UGCDownloadToLocation
// 0x0030 (0x0030 - 0x0000)
struct SteamProRemoteStorage_UGCDownloadToLocation final
{
public:
	TDelegate<void(struct FRemoteStorageDownloadUGCResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamUGCHandle                        Content;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Location;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D0[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProRemoteStorage_UGCDownloadToLocation) == 0x000008, "Wrong alignment on SteamProRemoteStorage_UGCDownloadToLocation");
static_assert(sizeof(SteamProRemoteStorage_UGCDownloadToLocation) == 0x000030, "Wrong size on SteamProRemoteStorage_UGCDownloadToLocation");
static_assert(offsetof(SteamProRemoteStorage_UGCDownloadToLocation, Callback) == 0x000000, "Member 'SteamProRemoteStorage_UGCDownloadToLocation::Callback' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_UGCDownloadToLocation, Content) == 0x000010, "Member 'SteamProRemoteStorage_UGCDownloadToLocation::Content' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_UGCDownloadToLocation, Location) == 0x000018, "Member 'SteamProRemoteStorage_UGCDownloadToLocation::Location' has a wrong offset!");
static_assert(offsetof(SteamProRemoteStorage_UGCDownloadToLocation, Priority) == 0x000028, "Member 'SteamProRemoteStorage_UGCDownloadToLocation::Priority' has a wrong offset!");

// Function SteamCorePro.SteamProScreenshots.AddScreenshotToLibrary
// 0x0030 (0x0030 - 0x0000)
struct SteamProScreenshots_AddScreenshotToLibrary final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailFilename;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScreenshotHandle                      ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D2[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProScreenshots_AddScreenshotToLibrary) == 0x000008, "Wrong alignment on SteamProScreenshots_AddScreenshotToLibrary");
static_assert(sizeof(SteamProScreenshots_AddScreenshotToLibrary) == 0x000030, "Wrong size on SteamProScreenshots_AddScreenshotToLibrary");
static_assert(offsetof(SteamProScreenshots_AddScreenshotToLibrary, Filename) == 0x000000, "Member 'SteamProScreenshots_AddScreenshotToLibrary::Filename' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_AddScreenshotToLibrary, ThumbnailFilename) == 0x000010, "Member 'SteamProScreenshots_AddScreenshotToLibrary::ThumbnailFilename' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_AddScreenshotToLibrary, Width) == 0x000020, "Member 'SteamProScreenshots_AddScreenshotToLibrary::Width' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_AddScreenshotToLibrary, Height) == 0x000024, "Member 'SteamProScreenshots_AddScreenshotToLibrary::Height' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_AddScreenshotToLibrary, ReturnValue) == 0x000028, "Member 'SteamProScreenshots_AddScreenshotToLibrary::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProScreenshots.AddVRScreenshotToLibrary
// 0x0030 (0x0030 - 0x0000)
struct SteamProScreenshots_AddVRScreenshotToLibrary final
{
public:
	ESteamVRScreenshotType                        EType;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VRFileName;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScreenshotHandle                      ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D4[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProScreenshots_AddVRScreenshotToLibrary) == 0x000008, "Wrong alignment on SteamProScreenshots_AddVRScreenshotToLibrary");
static_assert(sizeof(SteamProScreenshots_AddVRScreenshotToLibrary) == 0x000030, "Wrong size on SteamProScreenshots_AddVRScreenshotToLibrary");
static_assert(offsetof(SteamProScreenshots_AddVRScreenshotToLibrary, EType) == 0x000000, "Member 'SteamProScreenshots_AddVRScreenshotToLibrary::EType' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_AddVRScreenshotToLibrary, Filename) == 0x000008, "Member 'SteamProScreenshots_AddVRScreenshotToLibrary::Filename' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_AddVRScreenshotToLibrary, VRFileName) == 0x000018, "Member 'SteamProScreenshots_AddVRScreenshotToLibrary::VRFileName' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_AddVRScreenshotToLibrary, ReturnValue) == 0x000028, "Member 'SteamProScreenshots_AddVRScreenshotToLibrary::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProScreenshots.GetSteamScreenshots
// 0x0008 (0x0008 - 0x0000)
struct SteamProScreenshots_GetSteamScreenshots final
{
public:
	class USteamProScreenshots*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProScreenshots_GetSteamScreenshots) == 0x000008, "Wrong alignment on SteamProScreenshots_GetSteamScreenshots");
static_assert(sizeof(SteamProScreenshots_GetSteamScreenshots) == 0x000008, "Wrong size on SteamProScreenshots_GetSteamScreenshots");
static_assert(offsetof(SteamProScreenshots_GetSteamScreenshots, ReturnValue) == 0x000000, "Member 'SteamProScreenshots_GetSteamScreenshots::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProScreenshots.HookScreenshots
// 0x0001 (0x0001 - 0x0000)
struct SteamProScreenshots_HookScreenshots final
{
public:
	bool                                          bHook;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProScreenshots_HookScreenshots) == 0x000001, "Wrong alignment on SteamProScreenshots_HookScreenshots");
static_assert(sizeof(SteamProScreenshots_HookScreenshots) == 0x000001, "Wrong size on SteamProScreenshots_HookScreenshots");
static_assert(offsetof(SteamProScreenshots_HookScreenshots, bHook) == 0x000000, "Member 'SteamProScreenshots_HookScreenshots::bHook' has a wrong offset!");

// Function SteamCorePro.SteamProScreenshots.IsScreenshotsHooked
// 0x0001 (0x0001 - 0x0000)
struct SteamProScreenshots_IsScreenshotsHooked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProScreenshots_IsScreenshotsHooked) == 0x000001, "Wrong alignment on SteamProScreenshots_IsScreenshotsHooked");
static_assert(sizeof(SteamProScreenshots_IsScreenshotsHooked) == 0x000001, "Wrong size on SteamProScreenshots_IsScreenshotsHooked");
static_assert(offsetof(SteamProScreenshots_IsScreenshotsHooked, ReturnValue) == 0x000000, "Member 'SteamProScreenshots_IsScreenshotsHooked::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProScreenshots.SetLocation
// 0x0020 (0x0020 - 0x0000)
struct SteamProScreenshots_SetLocation final
{
public:
	struct FScreenshotHandle                      Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Location;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D6[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProScreenshots_SetLocation) == 0x000008, "Wrong alignment on SteamProScreenshots_SetLocation");
static_assert(sizeof(SteamProScreenshots_SetLocation) == 0x000020, "Wrong size on SteamProScreenshots_SetLocation");
static_assert(offsetof(SteamProScreenshots_SetLocation, Handle) == 0x000000, "Member 'SteamProScreenshots_SetLocation::Handle' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_SetLocation, Location) == 0x000008, "Member 'SteamProScreenshots_SetLocation::Location' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_SetLocation, ReturnValue) == 0x000018, "Member 'SteamProScreenshots_SetLocation::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProScreenshots.TagPublishedFile
// 0x0018 (0x0018 - 0x0000)
struct SteamProScreenshots_TagPublishedFile final
{
public:
	struct FScreenshotHandle                      Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProScreenshots_TagPublishedFile) == 0x000008, "Wrong alignment on SteamProScreenshots_TagPublishedFile");
static_assert(sizeof(SteamProScreenshots_TagPublishedFile) == 0x000018, "Wrong size on SteamProScreenshots_TagPublishedFile");
static_assert(offsetof(SteamProScreenshots_TagPublishedFile, Handle) == 0x000000, "Member 'SteamProScreenshots_TagPublishedFile::Handle' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_TagPublishedFile, PublishedFileID) == 0x000008, "Member 'SteamProScreenshots_TagPublishedFile::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_TagPublishedFile, ReturnValue) == 0x000010, "Member 'SteamProScreenshots_TagPublishedFile::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProScreenshots.TagUser
// 0x0018 (0x0018 - 0x0000)
struct SteamProScreenshots_TagUser final
{
public:
	struct FScreenshotHandle                      Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D9[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DA[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProScreenshots_TagUser) == 0x000008, "Wrong alignment on SteamProScreenshots_TagUser");
static_assert(sizeof(SteamProScreenshots_TagUser) == 0x000018, "Wrong size on SteamProScreenshots_TagUser");
static_assert(offsetof(SteamProScreenshots_TagUser, Handle) == 0x000000, "Member 'SteamProScreenshots_TagUser::Handle' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_TagUser, SteamID) == 0x000008, "Member 'SteamProScreenshots_TagUser::SteamID' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_TagUser, ReturnValue) == 0x000010, "Member 'SteamProScreenshots_TagUser::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProScreenshots.WriteScreenshot
// 0x0020 (0x0020 - 0x0000)
struct SteamProScreenshots_WriteScreenshot final
{
public:
	TArray<uint8>                                 PubRGB;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScreenshotHandle                      ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DB[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProScreenshots_WriteScreenshot) == 0x000008, "Wrong alignment on SteamProScreenshots_WriteScreenshot");
static_assert(sizeof(SteamProScreenshots_WriteScreenshot) == 0x000020, "Wrong size on SteamProScreenshots_WriteScreenshot");
static_assert(offsetof(SteamProScreenshots_WriteScreenshot, PubRGB) == 0x000000, "Member 'SteamProScreenshots_WriteScreenshot::PubRGB' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_WriteScreenshot, Width) == 0x000010, "Member 'SteamProScreenshots_WriteScreenshot::Width' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_WriteScreenshot, Height) == 0x000014, "Member 'SteamProScreenshots_WriteScreenshot::Height' has a wrong offset!");
static_assert(offsetof(SteamProScreenshots_WriteScreenshot, ReturnValue) == 0x000018, "Member 'SteamProScreenshots_WriteScreenshot::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.AddContentDescriptor
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_AddContentDescriptor final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamUGCContentDescriptorID                  DescId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DD[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_AddContentDescriptor) == 0x000008, "Wrong alignment on SteamProUGC_AddContentDescriptor");
static_assert(sizeof(SteamProUGC_AddContentDescriptor) == 0x000010, "Wrong size on SteamProUGC_AddContentDescriptor");
static_assert(offsetof(SteamProUGC_AddContentDescriptor, Handle) == 0x000000, "Member 'SteamProUGC_AddContentDescriptor::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddContentDescriptor, DescId) == 0x000008, "Member 'SteamProUGC_AddContentDescriptor::DescId' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddContentDescriptor, ReturnValue) == 0x000009, "Member 'SteamProUGC_AddContentDescriptor::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.AddExcludedTag
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_AddExcludedTag final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DE[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_AddExcludedTag) == 0x000008, "Wrong alignment on SteamProUGC_AddExcludedTag");
static_assert(sizeof(SteamProUGC_AddExcludedTag) == 0x000020, "Wrong size on SteamProUGC_AddExcludedTag");
static_assert(offsetof(SteamProUGC_AddExcludedTag, Handle) == 0x000000, "Member 'SteamProUGC_AddExcludedTag::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddExcludedTag, TagName) == 0x000008, "Member 'SteamProUGC_AddExcludedTag::TagName' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddExcludedTag, ReturnValue) == 0x000018, "Member 'SteamProUGC_AddExcludedTag::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.AddItemKeyValueTag
// 0x0030 (0x0030 - 0x0000)
struct SteamProUGC_AddItemKeyValueTag final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DF[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_AddItemKeyValueTag) == 0x000008, "Wrong alignment on SteamProUGC_AddItemKeyValueTag");
static_assert(sizeof(SteamProUGC_AddItemKeyValueTag) == 0x000030, "Wrong size on SteamProUGC_AddItemKeyValueTag");
static_assert(offsetof(SteamProUGC_AddItemKeyValueTag, Handle) == 0x000000, "Member 'SteamProUGC_AddItemKeyValueTag::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddItemKeyValueTag, Key) == 0x000008, "Member 'SteamProUGC_AddItemKeyValueTag::Key' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddItemKeyValueTag, Value) == 0x000018, "Member 'SteamProUGC_AddItemKeyValueTag::Value' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddItemKeyValueTag, ReturnValue) == 0x000028, "Member 'SteamProUGC_AddItemKeyValueTag::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.AddItemPreviewFile
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_AddItemPreviewFile final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PreviewFile;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamItemPreviewType                         Type;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E0[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_AddItemPreviewFile) == 0x000008, "Wrong alignment on SteamProUGC_AddItemPreviewFile");
static_assert(sizeof(SteamProUGC_AddItemPreviewFile) == 0x000020, "Wrong size on SteamProUGC_AddItemPreviewFile");
static_assert(offsetof(SteamProUGC_AddItemPreviewFile, Handle) == 0x000000, "Member 'SteamProUGC_AddItemPreviewFile::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddItemPreviewFile, PreviewFile) == 0x000008, "Member 'SteamProUGC_AddItemPreviewFile::PreviewFile' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddItemPreviewFile, Type) == 0x000018, "Member 'SteamProUGC_AddItemPreviewFile::Type' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddItemPreviewFile, ReturnValue) == 0x000019, "Member 'SteamProUGC_AddItemPreviewFile::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.AddItemPreviewVideo
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_AddItemPreviewVideo final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 VideoID;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E1[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_AddItemPreviewVideo) == 0x000008, "Wrong alignment on SteamProUGC_AddItemPreviewVideo");
static_assert(sizeof(SteamProUGC_AddItemPreviewVideo) == 0x000020, "Wrong size on SteamProUGC_AddItemPreviewVideo");
static_assert(offsetof(SteamProUGC_AddItemPreviewVideo, Handle) == 0x000000, "Member 'SteamProUGC_AddItemPreviewVideo::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddItemPreviewVideo, VideoID) == 0x000008, "Member 'SteamProUGC_AddItemPreviewVideo::VideoID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddItemPreviewVideo, ReturnValue) == 0x000018, "Member 'SteamProUGC_AddItemPreviewVideo::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.AddRequiredKeyValueTag
// 0x0030 (0x0030 - 0x0000)
struct SteamProUGC_AddRequiredKeyValueTag final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E2[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_AddRequiredKeyValueTag) == 0x000008, "Wrong alignment on SteamProUGC_AddRequiredKeyValueTag");
static_assert(sizeof(SteamProUGC_AddRequiredKeyValueTag) == 0x000030, "Wrong size on SteamProUGC_AddRequiredKeyValueTag");
static_assert(offsetof(SteamProUGC_AddRequiredKeyValueTag, Handle) == 0x000000, "Member 'SteamProUGC_AddRequiredKeyValueTag::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddRequiredKeyValueTag, Key) == 0x000008, "Member 'SteamProUGC_AddRequiredKeyValueTag::Key' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddRequiredKeyValueTag, Value) == 0x000018, "Member 'SteamProUGC_AddRequiredKeyValueTag::Value' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddRequiredKeyValueTag, ReturnValue) == 0x000028, "Member 'SteamProUGC_AddRequiredKeyValueTag::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.AddRequiredTag
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_AddRequiredTag final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E3[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_AddRequiredTag) == 0x000008, "Wrong alignment on SteamProUGC_AddRequiredTag");
static_assert(sizeof(SteamProUGC_AddRequiredTag) == 0x000020, "Wrong size on SteamProUGC_AddRequiredTag");
static_assert(offsetof(SteamProUGC_AddRequiredTag, Handle) == 0x000000, "Member 'SteamProUGC_AddRequiredTag::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddRequiredTag, TagName) == 0x000008, "Member 'SteamProUGC_AddRequiredTag::TagName' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddRequiredTag, ReturnValue) == 0x000018, "Member 'SteamProUGC_AddRequiredTag::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.AddRequiredTagGroup
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_AddRequiredTagGroup final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         TagGroups;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E4[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_AddRequiredTagGroup) == 0x000008, "Wrong alignment on SteamProUGC_AddRequiredTagGroup");
static_assert(sizeof(SteamProUGC_AddRequiredTagGroup) == 0x000020, "Wrong size on SteamProUGC_AddRequiredTagGroup");
static_assert(offsetof(SteamProUGC_AddRequiredTagGroup, Handle) == 0x000000, "Member 'SteamProUGC_AddRequiredTagGroup::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddRequiredTagGroup, TagGroups) == 0x000008, "Member 'SteamProUGC_AddRequiredTagGroup::TagGroups' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddRequiredTagGroup, ReturnValue) == 0x000018, "Member 'SteamProUGC_AddRequiredTagGroup::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.BInitWorkshopForGameServer
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_BInitWorkshopForGameServer final
{
public:
	int32                                         WorkshopDepotID;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Folder;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E6[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_BInitWorkshopForGameServer) == 0x000008, "Wrong alignment on SteamProUGC_BInitWorkshopForGameServer");
static_assert(sizeof(SteamProUGC_BInitWorkshopForGameServer) == 0x000020, "Wrong size on SteamProUGC_BInitWorkshopForGameServer");
static_assert(offsetof(SteamProUGC_BInitWorkshopForGameServer, WorkshopDepotID) == 0x000000, "Member 'SteamProUGC_BInitWorkshopForGameServer::WorkshopDepotID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_BInitWorkshopForGameServer, Folder) == 0x000008, "Member 'SteamProUGC_BInitWorkshopForGameServer::Folder' has a wrong offset!");
static_assert(offsetof(SteamProUGC_BInitWorkshopForGameServer, ReturnValue) == 0x000018, "Member 'SteamProUGC_BInitWorkshopForGameServer::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.CreateQueryAllUGCRequest
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_CreateQueryAllUGCRequest final
{
public:
	ESteamUGCQuery                                QueryType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUGCMatchingUGCType                      FileType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E7[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CreatorAppID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumerAppID;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCQueryHandle                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_CreateQueryAllUGCRequest) == 0x000008, "Wrong alignment on SteamProUGC_CreateQueryAllUGCRequest");
static_assert(sizeof(SteamProUGC_CreateQueryAllUGCRequest) == 0x000018, "Wrong size on SteamProUGC_CreateQueryAllUGCRequest");
static_assert(offsetof(SteamProUGC_CreateQueryAllUGCRequest, QueryType) == 0x000000, "Member 'SteamProUGC_CreateQueryAllUGCRequest::QueryType' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryAllUGCRequest, FileType) == 0x000001, "Member 'SteamProUGC_CreateQueryAllUGCRequest::FileType' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryAllUGCRequest, CreatorAppID) == 0x000004, "Member 'SteamProUGC_CreateQueryAllUGCRequest::CreatorAppID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryAllUGCRequest, ConsumerAppID) == 0x000008, "Member 'SteamProUGC_CreateQueryAllUGCRequest::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryAllUGCRequest, Page) == 0x00000C, "Member 'SteamProUGC_CreateQueryAllUGCRequest::Page' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryAllUGCRequest, ReturnValue) == 0x000010, "Member 'SteamProUGC_CreateQueryAllUGCRequest::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.CreateQueryUGCDetailsRequest
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_CreateQueryUGCDetailsRequest final
{
public:
	TArray<struct FPublishedFileID>               PublishedFileIDs;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FUGCQueryHandle                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_CreateQueryUGCDetailsRequest) == 0x000008, "Wrong alignment on SteamProUGC_CreateQueryUGCDetailsRequest");
static_assert(sizeof(SteamProUGC_CreateQueryUGCDetailsRequest) == 0x000018, "Wrong size on SteamProUGC_CreateQueryUGCDetailsRequest");
static_assert(offsetof(SteamProUGC_CreateQueryUGCDetailsRequest, PublishedFileIDs) == 0x000000, "Member 'SteamProUGC_CreateQueryUGCDetailsRequest::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryUGCDetailsRequest, ReturnValue) == 0x000010, "Member 'SteamProUGC_CreateQueryUGCDetailsRequest::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.CreateQueryUserUGCRequest
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_CreateQueryUserUGCRequest final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamUserUGCList                             ListType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUGCMatchingUGCType                      MatchingUGCType;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUserUGCListSortOrder                    SortOrder;                                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E8[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CreatorAppID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumerAppID;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCQueryHandle                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_CreateQueryUserUGCRequest) == 0x000008, "Wrong alignment on SteamProUGC_CreateQueryUserUGCRequest");
static_assert(sizeof(SteamProUGC_CreateQueryUserUGCRequest) == 0x000020, "Wrong size on SteamProUGC_CreateQueryUserUGCRequest");
static_assert(offsetof(SteamProUGC_CreateQueryUserUGCRequest, SteamID) == 0x000000, "Member 'SteamProUGC_CreateQueryUserUGCRequest::SteamID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryUserUGCRequest, ListType) == 0x000008, "Member 'SteamProUGC_CreateQueryUserUGCRequest::ListType' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryUserUGCRequest, MatchingUGCType) == 0x000009, "Member 'SteamProUGC_CreateQueryUserUGCRequest::MatchingUGCType' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryUserUGCRequest, SortOrder) == 0x00000A, "Member 'SteamProUGC_CreateQueryUserUGCRequest::SortOrder' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryUserUGCRequest, CreatorAppID) == 0x00000C, "Member 'SteamProUGC_CreateQueryUserUGCRequest::CreatorAppID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryUserUGCRequest, ConsumerAppID) == 0x000010, "Member 'SteamProUGC_CreateQueryUserUGCRequest::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryUserUGCRequest, Page) == 0x000014, "Member 'SteamProUGC_CreateQueryUserUGCRequest::Page' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateQueryUserUGCRequest, ReturnValue) == 0x000018, "Member 'SteamProUGC_CreateQueryUserUGCRequest::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.DownloadItem
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_DownloadItem final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHighPriority;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E9[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_DownloadItem) == 0x000008, "Wrong alignment on SteamProUGC_DownloadItem");
static_assert(sizeof(SteamProUGC_DownloadItem) == 0x000010, "Wrong size on SteamProUGC_DownloadItem");
static_assert(offsetof(SteamProUGC_DownloadItem, PublishedFileID) == 0x000000, "Member 'SteamProUGC_DownloadItem::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_DownloadItem, bHighPriority) == 0x000008, "Member 'SteamProUGC_DownloadItem::bHighPriority' has a wrong offset!");
static_assert(offsetof(SteamProUGC_DownloadItem, ReturnValue) == 0x000009, "Member 'SteamProUGC_DownloadItem::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetItemDownloadInfo
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_GetItemDownloadInfo final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BytesDownloaded;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesTotal;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23EA[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetItemDownloadInfo) == 0x000008, "Wrong alignment on SteamProUGC_GetItemDownloadInfo");
static_assert(sizeof(SteamProUGC_GetItemDownloadInfo) == 0x000018, "Wrong size on SteamProUGC_GetItemDownloadInfo");
static_assert(offsetof(SteamProUGC_GetItemDownloadInfo, PublishedFileID) == 0x000000, "Member 'SteamProUGC_GetItemDownloadInfo::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetItemDownloadInfo, BytesDownloaded) == 0x000008, "Member 'SteamProUGC_GetItemDownloadInfo::BytesDownloaded' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetItemDownloadInfo, BytesTotal) == 0x00000C, "Member 'SteamProUGC_GetItemDownloadInfo::BytesTotal' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetItemDownloadInfo, ReturnValue) == 0x000010, "Member 'SteamProUGC_GetItemDownloadInfo::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetItemInstallInfo
// 0x0028 (0x0028 - 0x0000)
struct SteamProUGC_GetItemInstallInfo final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SizeOnDisk;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23EB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Folder;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timestamp;                                         // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23EC[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetItemInstallInfo) == 0x000008, "Wrong alignment on SteamProUGC_GetItemInstallInfo");
static_assert(sizeof(SteamProUGC_GetItemInstallInfo) == 0x000028, "Wrong size on SteamProUGC_GetItemInstallInfo");
static_assert(offsetof(SteamProUGC_GetItemInstallInfo, PublishedFileID) == 0x000000, "Member 'SteamProUGC_GetItemInstallInfo::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetItemInstallInfo, SizeOnDisk) == 0x000008, "Member 'SteamProUGC_GetItemInstallInfo::SizeOnDisk' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetItemInstallInfo, Folder) == 0x000010, "Member 'SteamProUGC_GetItemInstallInfo::Folder' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetItemInstallInfo, Timestamp) == 0x000020, "Member 'SteamProUGC_GetItemInstallInfo::Timestamp' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetItemInstallInfo, ReturnValue) == 0x000024, "Member 'SteamProUGC_GetItemInstallInfo::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetItemState
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_GetItemState final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<ESteamItemState>                       States;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23ED[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetItemState) == 0x000008, "Wrong alignment on SteamProUGC_GetItemState");
static_assert(sizeof(SteamProUGC_GetItemState) == 0x000020, "Wrong size on SteamProUGC_GetItemState");
static_assert(offsetof(SteamProUGC_GetItemState, PublishedFileID) == 0x000000, "Member 'SteamProUGC_GetItemState::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetItemState, States) == 0x000008, "Member 'SteamProUGC_GetItemState::States' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetItemState, ReturnValue) == 0x000018, "Member 'SteamProUGC_GetItemState::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetItemUpdateProgress
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_GetItemUpdateProgress final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BytesProcessed;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BytesTotal;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamItemUpdateStatus                        ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23EE[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetItemUpdateProgress) == 0x000008, "Wrong alignment on SteamProUGC_GetItemUpdateProgress");
static_assert(sizeof(SteamProUGC_GetItemUpdateProgress) == 0x000018, "Wrong size on SteamProUGC_GetItemUpdateProgress");
static_assert(offsetof(SteamProUGC_GetItemUpdateProgress, Handle) == 0x000000, "Member 'SteamProUGC_GetItemUpdateProgress::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetItemUpdateProgress, BytesProcessed) == 0x000008, "Member 'SteamProUGC_GetItemUpdateProgress::BytesProcessed' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetItemUpdateProgress, BytesTotal) == 0x00000C, "Member 'SteamProUGC_GetItemUpdateProgress::BytesTotal' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetItemUpdateProgress, ReturnValue) == 0x000010, "Member 'SteamProUGC_GetItemUpdateProgress::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetNumSubscribedItems
// 0x0004 (0x0004 - 0x0000)
struct SteamProUGC_GetNumSubscribedItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_GetNumSubscribedItems) == 0x000004, "Wrong alignment on SteamProUGC_GetNumSubscribedItems");
static_assert(sizeof(SteamProUGC_GetNumSubscribedItems) == 0x000004, "Wrong size on SteamProUGC_GetNumSubscribedItems");
static_assert(offsetof(SteamProUGC_GetNumSubscribedItems, ReturnValue) == 0x000000, "Member 'SteamProUGC_GetNumSubscribedItems::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetQueryUGCAdditionalPreview
// 0x0038 (0x0038 - 0x0000)
struct SteamProUGC_GetQueryUGCAdditionalPreview final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviewIndex;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URLOrVideoID;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalFileName;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamItemPreviewType                         PreviewType;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23EF[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetQueryUGCAdditionalPreview) == 0x000008, "Wrong alignment on SteamProUGC_GetQueryUGCAdditionalPreview");
static_assert(sizeof(SteamProUGC_GetQueryUGCAdditionalPreview) == 0x000038, "Wrong size on SteamProUGC_GetQueryUGCAdditionalPreview");
static_assert(offsetof(SteamProUGC_GetQueryUGCAdditionalPreview, Handle) == 0x000000, "Member 'SteamProUGC_GetQueryUGCAdditionalPreview::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCAdditionalPreview, Param_Index) == 0x000008, "Member 'SteamProUGC_GetQueryUGCAdditionalPreview::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCAdditionalPreview, PreviewIndex) == 0x00000C, "Member 'SteamProUGC_GetQueryUGCAdditionalPreview::PreviewIndex' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCAdditionalPreview, URLOrVideoID) == 0x000010, "Member 'SteamProUGC_GetQueryUGCAdditionalPreview::URLOrVideoID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCAdditionalPreview, OriginalFileName) == 0x000020, "Member 'SteamProUGC_GetQueryUGCAdditionalPreview::OriginalFileName' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCAdditionalPreview, PreviewType) == 0x000030, "Member 'SteamProUGC_GetQueryUGCAdditionalPreview::PreviewType' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCAdditionalPreview, ReturnValue) == 0x000031, "Member 'SteamProUGC_GetQueryUGCAdditionalPreview::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetQueryUGCChildren
// 0x0028 (0x0028 - 0x0000)
struct SteamProUGC_GetQueryUGCChildren final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F0[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPublishedFileID>               PublishedFileIDs;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxEntries;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F1[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetQueryUGCChildren) == 0x000008, "Wrong alignment on SteamProUGC_GetQueryUGCChildren");
static_assert(sizeof(SteamProUGC_GetQueryUGCChildren) == 0x000028, "Wrong size on SteamProUGC_GetQueryUGCChildren");
static_assert(offsetof(SteamProUGC_GetQueryUGCChildren, Handle) == 0x000000, "Member 'SteamProUGC_GetQueryUGCChildren::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCChildren, Param_Index) == 0x000008, "Member 'SteamProUGC_GetQueryUGCChildren::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCChildren, PublishedFileIDs) == 0x000010, "Member 'SteamProUGC_GetQueryUGCChildren::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCChildren, MaxEntries) == 0x000020, "Member 'SteamProUGC_GetQueryUGCChildren::MaxEntries' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCChildren, ReturnValue) == 0x000024, "Member 'SteamProUGC_GetQueryUGCChildren::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetQueryUGCKeyValueTag
// 0x0038 (0x0038 - 0x0000)
struct SteamProUGC_GetQueryUGCKeyValueTag final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyValueTagIndex;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F2[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetQueryUGCKeyValueTag) == 0x000008, "Wrong alignment on SteamProUGC_GetQueryUGCKeyValueTag");
static_assert(sizeof(SteamProUGC_GetQueryUGCKeyValueTag) == 0x000038, "Wrong size on SteamProUGC_GetQueryUGCKeyValueTag");
static_assert(offsetof(SteamProUGC_GetQueryUGCKeyValueTag, Handle) == 0x000000, "Member 'SteamProUGC_GetQueryUGCKeyValueTag::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCKeyValueTag, Param_Index) == 0x000008, "Member 'SteamProUGC_GetQueryUGCKeyValueTag::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCKeyValueTag, KeyValueTagIndex) == 0x00000C, "Member 'SteamProUGC_GetQueryUGCKeyValueTag::KeyValueTagIndex' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCKeyValueTag, Key) == 0x000010, "Member 'SteamProUGC_GetQueryUGCKeyValueTag::Key' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCKeyValueTag, Value) == 0x000020, "Member 'SteamProUGC_GetQueryUGCKeyValueTag::Value' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCKeyValueTag, ReturnValue) == 0x000030, "Member 'SteamProUGC_GetQueryUGCKeyValueTag::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetQueryUGCMetadata
// 0x0028 (0x0028 - 0x0000)
struct SteamProUGC_GetQueryUGCMetadata final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F3[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MetaData;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MetadataSize;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F4[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetQueryUGCMetadata) == 0x000008, "Wrong alignment on SteamProUGC_GetQueryUGCMetadata");
static_assert(sizeof(SteamProUGC_GetQueryUGCMetadata) == 0x000028, "Wrong size on SteamProUGC_GetQueryUGCMetadata");
static_assert(offsetof(SteamProUGC_GetQueryUGCMetadata, Handle) == 0x000000, "Member 'SteamProUGC_GetQueryUGCMetadata::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCMetadata, Param_Index) == 0x000008, "Member 'SteamProUGC_GetQueryUGCMetadata::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCMetadata, MetaData) == 0x000010, "Member 'SteamProUGC_GetQueryUGCMetadata::MetaData' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCMetadata, MetadataSize) == 0x000020, "Member 'SteamProUGC_GetQueryUGCMetadata::MetadataSize' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCMetadata, ReturnValue) == 0x000024, "Member 'SteamProUGC_GetQueryUGCMetadata::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetQueryUGCNumAdditionalPreviews
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_GetQueryUGCNumAdditionalPreviews final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_GetQueryUGCNumAdditionalPreviews) == 0x000008, "Wrong alignment on SteamProUGC_GetQueryUGCNumAdditionalPreviews");
static_assert(sizeof(SteamProUGC_GetQueryUGCNumAdditionalPreviews) == 0x000010, "Wrong size on SteamProUGC_GetQueryUGCNumAdditionalPreviews");
static_assert(offsetof(SteamProUGC_GetQueryUGCNumAdditionalPreviews, Handle) == 0x000000, "Member 'SteamProUGC_GetQueryUGCNumAdditionalPreviews::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCNumAdditionalPreviews, Param_Index) == 0x000008, "Member 'SteamProUGC_GetQueryUGCNumAdditionalPreviews::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCNumAdditionalPreviews, ReturnValue) == 0x00000C, "Member 'SteamProUGC_GetQueryUGCNumAdditionalPreviews::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetQueryUGCNumKeyValueTags
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_GetQueryUGCNumKeyValueTags final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_GetQueryUGCNumKeyValueTags) == 0x000008, "Wrong alignment on SteamProUGC_GetQueryUGCNumKeyValueTags");
static_assert(sizeof(SteamProUGC_GetQueryUGCNumKeyValueTags) == 0x000010, "Wrong size on SteamProUGC_GetQueryUGCNumKeyValueTags");
static_assert(offsetof(SteamProUGC_GetQueryUGCNumKeyValueTags, Handle) == 0x000000, "Member 'SteamProUGC_GetQueryUGCNumKeyValueTags::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCNumKeyValueTags, Param_Index) == 0x000008, "Member 'SteamProUGC_GetQueryUGCNumKeyValueTags::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCNumKeyValueTags, ReturnValue) == 0x00000C, "Member 'SteamProUGC_GetQueryUGCNumKeyValueTags::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetQueryUGCNumTags
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_GetQueryUGCNumTags final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_GetQueryUGCNumTags) == 0x000008, "Wrong alignment on SteamProUGC_GetQueryUGCNumTags");
static_assert(sizeof(SteamProUGC_GetQueryUGCNumTags) == 0x000010, "Wrong size on SteamProUGC_GetQueryUGCNumTags");
static_assert(offsetof(SteamProUGC_GetQueryUGCNumTags, Handle) == 0x000000, "Member 'SteamProUGC_GetQueryUGCNumTags::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCNumTags, Param_Index) == 0x000008, "Member 'SteamProUGC_GetQueryUGCNumTags::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCNumTags, ReturnValue) == 0x00000C, "Member 'SteamProUGC_GetQueryUGCNumTags::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetQueryUGCPreviewURL
// 0x0028 (0x0028 - 0x0000)
struct SteamProUGC_GetQueryUGCPreviewURL final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F5[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F6[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetQueryUGCPreviewURL) == 0x000008, "Wrong alignment on SteamProUGC_GetQueryUGCPreviewURL");
static_assert(sizeof(SteamProUGC_GetQueryUGCPreviewURL) == 0x000028, "Wrong size on SteamProUGC_GetQueryUGCPreviewURL");
static_assert(offsetof(SteamProUGC_GetQueryUGCPreviewURL, Handle) == 0x000000, "Member 'SteamProUGC_GetQueryUGCPreviewURL::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCPreviewURL, Param_Index) == 0x000008, "Member 'SteamProUGC_GetQueryUGCPreviewURL::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCPreviewURL, URL) == 0x000010, "Member 'SteamProUGC_GetQueryUGCPreviewURL::URL' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCPreviewURL, ReturnValue) == 0x000020, "Member 'SteamProUGC_GetQueryUGCPreviewURL::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetQueryUGCResult
// 0x00C0 (0x00C0 - 0x0000)
struct SteamProUGC_GetQueryUGCResult final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F7[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamUGCDetails                       Details;                                           // 0x0010(0x00A8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F8[0x7];                                     // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetQueryUGCResult) == 0x000008, "Wrong alignment on SteamProUGC_GetQueryUGCResult");
static_assert(sizeof(SteamProUGC_GetQueryUGCResult) == 0x0000C0, "Wrong size on SteamProUGC_GetQueryUGCResult");
static_assert(offsetof(SteamProUGC_GetQueryUGCResult, Handle) == 0x000000, "Member 'SteamProUGC_GetQueryUGCResult::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCResult, Param_Index) == 0x000008, "Member 'SteamProUGC_GetQueryUGCResult::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCResult, Details) == 0x000010, "Member 'SteamProUGC_GetQueryUGCResult::Details' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCResult, ReturnValue) == 0x0000B8, "Member 'SteamProUGC_GetQueryUGCResult::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetQueryUGCStatistic
// 0x0028 (0x0028 - 0x0000)
struct SteamProUGC_GetQueryUGCStatistic final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamItemStatistic                           StatType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F9[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatValue;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23FA[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetQueryUGCStatistic) == 0x000008, "Wrong alignment on SteamProUGC_GetQueryUGCStatistic");
static_assert(sizeof(SteamProUGC_GetQueryUGCStatistic) == 0x000028, "Wrong size on SteamProUGC_GetQueryUGCStatistic");
static_assert(offsetof(SteamProUGC_GetQueryUGCStatistic, Handle) == 0x000000, "Member 'SteamProUGC_GetQueryUGCStatistic::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCStatistic, Param_Index) == 0x000008, "Member 'SteamProUGC_GetQueryUGCStatistic::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCStatistic, StatType) == 0x00000C, "Member 'SteamProUGC_GetQueryUGCStatistic::StatType' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCStatistic, StatValue) == 0x000010, "Member 'SteamProUGC_GetQueryUGCStatistic::StatValue' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCStatistic, ReturnValue) == 0x000020, "Member 'SteamProUGC_GetQueryUGCStatistic::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetQueryUGCTag
// 0x0028 (0x0028 - 0x0000)
struct SteamProUGC_GetQueryUGCTag final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexTag;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23FB[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetQueryUGCTag) == 0x000008, "Wrong alignment on SteamProUGC_GetQueryUGCTag");
static_assert(sizeof(SteamProUGC_GetQueryUGCTag) == 0x000028, "Wrong size on SteamProUGC_GetQueryUGCTag");
static_assert(offsetof(SteamProUGC_GetQueryUGCTag, Handle) == 0x000000, "Member 'SteamProUGC_GetQueryUGCTag::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCTag, Param_Index) == 0x000008, "Member 'SteamProUGC_GetQueryUGCTag::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCTag, IndexTag) == 0x00000C, "Member 'SteamProUGC_GetQueryUGCTag::IndexTag' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCTag, Value) == 0x000010, "Member 'SteamProUGC_GetQueryUGCTag::Value' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCTag, ReturnValue) == 0x000020, "Member 'SteamProUGC_GetQueryUGCTag::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetQueryUGCTagDisplayName
// 0x0028 (0x0028 - 0x0000)
struct SteamProUGC_GetQueryUGCTagDisplayName final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexTag;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23FC[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_GetQueryUGCTagDisplayName) == 0x000008, "Wrong alignment on SteamProUGC_GetQueryUGCTagDisplayName");
static_assert(sizeof(SteamProUGC_GetQueryUGCTagDisplayName) == 0x000028, "Wrong size on SteamProUGC_GetQueryUGCTagDisplayName");
static_assert(offsetof(SteamProUGC_GetQueryUGCTagDisplayName, Handle) == 0x000000, "Member 'SteamProUGC_GetQueryUGCTagDisplayName::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCTagDisplayName, Param_Index) == 0x000008, "Member 'SteamProUGC_GetQueryUGCTagDisplayName::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCTagDisplayName, IndexTag) == 0x00000C, "Member 'SteamProUGC_GetQueryUGCTagDisplayName::IndexTag' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCTagDisplayName, Value) == 0x000010, "Member 'SteamProUGC_GetQueryUGCTagDisplayName::Value' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetQueryUGCTagDisplayName, ReturnValue) == 0x000020, "Member 'SteamProUGC_GetQueryUGCTagDisplayName::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetSteamUGC
// 0x0008 (0x0008 - 0x0000)
struct SteamProUGC_GetSteamUGC final
{
public:
	class USteamProUGC*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_GetSteamUGC) == 0x000008, "Wrong alignment on SteamProUGC_GetSteamUGC");
static_assert(sizeof(SteamProUGC_GetSteamUGC) == 0x000008, "Wrong size on SteamProUGC_GetSteamUGC");
static_assert(offsetof(SteamProUGC_GetSteamUGC, ReturnValue) == 0x000000, "Member 'SteamProUGC_GetSteamUGC::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetSubscribedItems
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_GetSubscribedItems final
{
public:
	TArray<struct FPublishedFileID>               PublishedFileIDs;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxEntries;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_GetSubscribedItems) == 0x000008, "Wrong alignment on SteamProUGC_GetSubscribedItems");
static_assert(sizeof(SteamProUGC_GetSubscribedItems) == 0x000018, "Wrong size on SteamProUGC_GetSubscribedItems");
static_assert(offsetof(SteamProUGC_GetSubscribedItems, PublishedFileIDs) == 0x000000, "Member 'SteamProUGC_GetSubscribedItems::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetSubscribedItems, MaxEntries) == 0x000010, "Member 'SteamProUGC_GetSubscribedItems::MaxEntries' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetSubscribedItems, ReturnValue) == 0x000014, "Member 'SteamProUGC_GetSubscribedItems::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetUserContentDescriptorPreferences
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_GetUserContentDescriptorPreferences final
{
public:
	TArray<ESteamUGCContentDescriptorID>          Descriptors;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxEntries;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_GetUserContentDescriptorPreferences) == 0x000008, "Wrong alignment on SteamProUGC_GetUserContentDescriptorPreferences");
static_assert(sizeof(SteamProUGC_GetUserContentDescriptorPreferences) == 0x000018, "Wrong size on SteamProUGC_GetUserContentDescriptorPreferences");
static_assert(offsetof(SteamProUGC_GetUserContentDescriptorPreferences, Descriptors) == 0x000000, "Member 'SteamProUGC_GetUserContentDescriptorPreferences::Descriptors' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetUserContentDescriptorPreferences, MaxEntries) == 0x000010, "Member 'SteamProUGC_GetUserContentDescriptorPreferences::MaxEntries' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetUserContentDescriptorPreferences, ReturnValue) == 0x000014, "Member 'SteamProUGC_GetUserContentDescriptorPreferences::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.ReleaseQueryUGCRequest
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_ReleaseQueryUGCRequest final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23FD[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_ReleaseQueryUGCRequest) == 0x000008, "Wrong alignment on SteamProUGC_ReleaseQueryUGCRequest");
static_assert(sizeof(SteamProUGC_ReleaseQueryUGCRequest) == 0x000010, "Wrong size on SteamProUGC_ReleaseQueryUGCRequest");
static_assert(offsetof(SteamProUGC_ReleaseQueryUGCRequest, Handle) == 0x000000, "Member 'SteamProUGC_ReleaseQueryUGCRequest::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_ReleaseQueryUGCRequest, ReturnValue) == 0x000008, "Member 'SteamProUGC_ReleaseQueryUGCRequest::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.RemoveContentDescriptor
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_RemoveContentDescriptor final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamUGCContentDescriptorID                  DescId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23FE[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_RemoveContentDescriptor) == 0x000008, "Wrong alignment on SteamProUGC_RemoveContentDescriptor");
static_assert(sizeof(SteamProUGC_RemoveContentDescriptor) == 0x000010, "Wrong size on SteamProUGC_RemoveContentDescriptor");
static_assert(offsetof(SteamProUGC_RemoveContentDescriptor, Handle) == 0x000000, "Member 'SteamProUGC_RemoveContentDescriptor::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_RemoveContentDescriptor, DescId) == 0x000008, "Member 'SteamProUGC_RemoveContentDescriptor::DescId' has a wrong offset!");
static_assert(offsetof(SteamProUGC_RemoveContentDescriptor, ReturnValue) == 0x000009, "Member 'SteamProUGC_RemoveContentDescriptor::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.RemoveItemKeyValueTags
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_RemoveItemKeyValueTags final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23FF[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_RemoveItemKeyValueTags) == 0x000008, "Wrong alignment on SteamProUGC_RemoveItemKeyValueTags");
static_assert(sizeof(SteamProUGC_RemoveItemKeyValueTags) == 0x000020, "Wrong size on SteamProUGC_RemoveItemKeyValueTags");
static_assert(offsetof(SteamProUGC_RemoveItemKeyValueTags, Handle) == 0x000000, "Member 'SteamProUGC_RemoveItemKeyValueTags::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_RemoveItemKeyValueTags, Key) == 0x000008, "Member 'SteamProUGC_RemoveItemKeyValueTags::Key' has a wrong offset!");
static_assert(offsetof(SteamProUGC_RemoveItemKeyValueTags, ReturnValue) == 0x000018, "Member 'SteamProUGC_RemoveItemKeyValueTags::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.RemoveItemPreview
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_RemoveItemPreview final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2400[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_RemoveItemPreview) == 0x000008, "Wrong alignment on SteamProUGC_RemoveItemPreview");
static_assert(sizeof(SteamProUGC_RemoveItemPreview) == 0x000010, "Wrong size on SteamProUGC_RemoveItemPreview");
static_assert(offsetof(SteamProUGC_RemoveItemPreview, Handle) == 0x000000, "Member 'SteamProUGC_RemoveItemPreview::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_RemoveItemPreview, Param_Index) == 0x000008, "Member 'SteamProUGC_RemoveItemPreview::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_RemoveItemPreview, ReturnValue) == 0x00000C, "Member 'SteamProUGC_RemoveItemPreview::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetAllowCachedResponse
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetAllowCachedResponse final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxAgeSeconds;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2401[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetAllowCachedResponse) == 0x000008, "Wrong alignment on SteamProUGC_SetAllowCachedResponse");
static_assert(sizeof(SteamProUGC_SetAllowCachedResponse) == 0x000010, "Wrong size on SteamProUGC_SetAllowCachedResponse");
static_assert(offsetof(SteamProUGC_SetAllowCachedResponse, Handle) == 0x000000, "Member 'SteamProUGC_SetAllowCachedResponse::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetAllowCachedResponse, MaxAgeSeconds) == 0x000008, "Member 'SteamProUGC_SetAllowCachedResponse::MaxAgeSeconds' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetAllowCachedResponse, ReturnValue) == 0x00000C, "Member 'SteamProUGC_SetAllowCachedResponse::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetCloudFileNameFilter
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_SetCloudFileNameFilter final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 MatchCloudFileName;                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2402[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetCloudFileNameFilter) == 0x000008, "Wrong alignment on SteamProUGC_SetCloudFileNameFilter");
static_assert(sizeof(SteamProUGC_SetCloudFileNameFilter) == 0x000020, "Wrong size on SteamProUGC_SetCloudFileNameFilter");
static_assert(offsetof(SteamProUGC_SetCloudFileNameFilter, Handle) == 0x000000, "Member 'SteamProUGC_SetCloudFileNameFilter::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetCloudFileNameFilter, MatchCloudFileName) == 0x000008, "Member 'SteamProUGC_SetCloudFileNameFilter::MatchCloudFileName' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetCloudFileNameFilter, ReturnValue) == 0x000018, "Member 'SteamProUGC_SetCloudFileNameFilter::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetItemContent
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_SetItemContent final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ContentFolder;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2403[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetItemContent) == 0x000008, "Wrong alignment on SteamProUGC_SetItemContent");
static_assert(sizeof(SteamProUGC_SetItemContent) == 0x000020, "Wrong size on SteamProUGC_SetItemContent");
static_assert(offsetof(SteamProUGC_SetItemContent, Handle) == 0x000000, "Member 'SteamProUGC_SetItemContent::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemContent, ContentFolder) == 0x000008, "Member 'SteamProUGC_SetItemContent::ContentFolder' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemContent, ReturnValue) == 0x000018, "Member 'SteamProUGC_SetItemContent::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetItemDescription
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_SetItemDescription final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2404[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetItemDescription) == 0x000008, "Wrong alignment on SteamProUGC_SetItemDescription");
static_assert(sizeof(SteamProUGC_SetItemDescription) == 0x000020, "Wrong size on SteamProUGC_SetItemDescription");
static_assert(offsetof(SteamProUGC_SetItemDescription, Handle) == 0x000000, "Member 'SteamProUGC_SetItemDescription::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemDescription, Description) == 0x000008, "Member 'SteamProUGC_SetItemDescription::Description' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemDescription, ReturnValue) == 0x000018, "Member 'SteamProUGC_SetItemDescription::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetItemMetadata
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_SetItemMetadata final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 MetaData;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2405[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetItemMetadata) == 0x000008, "Wrong alignment on SteamProUGC_SetItemMetadata");
static_assert(sizeof(SteamProUGC_SetItemMetadata) == 0x000020, "Wrong size on SteamProUGC_SetItemMetadata");
static_assert(offsetof(SteamProUGC_SetItemMetadata, Handle) == 0x000000, "Member 'SteamProUGC_SetItemMetadata::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemMetadata, MetaData) == 0x000008, "Member 'SteamProUGC_SetItemMetadata::MetaData' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemMetadata, ReturnValue) == 0x000018, "Member 'SteamProUGC_SetItemMetadata::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetItemPreview
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_SetItemPreview final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PreviewFile;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2406[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetItemPreview) == 0x000008, "Wrong alignment on SteamProUGC_SetItemPreview");
static_assert(sizeof(SteamProUGC_SetItemPreview) == 0x000020, "Wrong size on SteamProUGC_SetItemPreview");
static_assert(offsetof(SteamProUGC_SetItemPreview, Handle) == 0x000000, "Member 'SteamProUGC_SetItemPreview::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemPreview, PreviewFile) == 0x000008, "Member 'SteamProUGC_SetItemPreview::PreviewFile' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemPreview, ReturnValue) == 0x000018, "Member 'SteamProUGC_SetItemPreview::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetItemTags
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_SetItemTags final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2407[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetItemTags) == 0x000008, "Wrong alignment on SteamProUGC_SetItemTags");
static_assert(sizeof(SteamProUGC_SetItemTags) == 0x000020, "Wrong size on SteamProUGC_SetItemTags");
static_assert(offsetof(SteamProUGC_SetItemTags, Handle) == 0x000000, "Member 'SteamProUGC_SetItemTags::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemTags, Tags) == 0x000008, "Member 'SteamProUGC_SetItemTags::Tags' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemTags, ReturnValue) == 0x000018, "Member 'SteamProUGC_SetItemTags::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetItemTitle
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_SetItemTitle final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2408[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetItemTitle) == 0x000008, "Wrong alignment on SteamProUGC_SetItemTitle");
static_assert(sizeof(SteamProUGC_SetItemTitle) == 0x000020, "Wrong size on SteamProUGC_SetItemTitle");
static_assert(offsetof(SteamProUGC_SetItemTitle, Handle) == 0x000000, "Member 'SteamProUGC_SetItemTitle::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemTitle, Title) == 0x000008, "Member 'SteamProUGC_SetItemTitle::Title' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemTitle, ReturnValue) == 0x000018, "Member 'SteamProUGC_SetItemTitle::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetItemUpdateLanguage
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_SetItemUpdateLanguage final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2409[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetItemUpdateLanguage) == 0x000008, "Wrong alignment on SteamProUGC_SetItemUpdateLanguage");
static_assert(sizeof(SteamProUGC_SetItemUpdateLanguage) == 0x000020, "Wrong size on SteamProUGC_SetItemUpdateLanguage");
static_assert(offsetof(SteamProUGC_SetItemUpdateLanguage, Handle) == 0x000000, "Member 'SteamProUGC_SetItemUpdateLanguage::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemUpdateLanguage, Language) == 0x000008, "Member 'SteamProUGC_SetItemUpdateLanguage::Language' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemUpdateLanguage, ReturnValue) == 0x000018, "Member 'SteamProUGC_SetItemUpdateLanguage::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetItemVisibility
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetItemVisibility final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamRemoteStoragePublishedFileVisibility    Visibility;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240A[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetItemVisibility) == 0x000008, "Wrong alignment on SteamProUGC_SetItemVisibility");
static_assert(sizeof(SteamProUGC_SetItemVisibility) == 0x000010, "Wrong size on SteamProUGC_SetItemVisibility");
static_assert(offsetof(SteamProUGC_SetItemVisibility, Handle) == 0x000000, "Member 'SteamProUGC_SetItemVisibility::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemVisibility, Visibility) == 0x000008, "Member 'SteamProUGC_SetItemVisibility::Visibility' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetItemVisibility, ReturnValue) == 0x000009, "Member 'SteamProUGC_SetItemVisibility::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetLanguage
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_SetLanguage final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240B[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetLanguage) == 0x000008, "Wrong alignment on SteamProUGC_SetLanguage");
static_assert(sizeof(SteamProUGC_SetLanguage) == 0x000020, "Wrong size on SteamProUGC_SetLanguage");
static_assert(offsetof(SteamProUGC_SetLanguage, Handle) == 0x000000, "Member 'SteamProUGC_SetLanguage::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetLanguage, Language) == 0x000008, "Member 'SteamProUGC_SetLanguage::Language' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetLanguage, ReturnValue) == 0x000018, "Member 'SteamProUGC_SetLanguage::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetMatchAnyTag
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetMatchAnyTag final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMatchAnyTag;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240C[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetMatchAnyTag) == 0x000008, "Wrong alignment on SteamProUGC_SetMatchAnyTag");
static_assert(sizeof(SteamProUGC_SetMatchAnyTag) == 0x000010, "Wrong size on SteamProUGC_SetMatchAnyTag");
static_assert(offsetof(SteamProUGC_SetMatchAnyTag, Handle) == 0x000000, "Member 'SteamProUGC_SetMatchAnyTag::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetMatchAnyTag, bMatchAnyTag) == 0x000008, "Member 'SteamProUGC_SetMatchAnyTag::bMatchAnyTag' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetMatchAnyTag, ReturnValue) == 0x000009, "Member 'SteamProUGC_SetMatchAnyTag::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetRankedByTrendDays
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetRankedByTrendDays final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Days;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240D[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetRankedByTrendDays) == 0x000008, "Wrong alignment on SteamProUGC_SetRankedByTrendDays");
static_assert(sizeof(SteamProUGC_SetRankedByTrendDays) == 0x000010, "Wrong size on SteamProUGC_SetRankedByTrendDays");
static_assert(offsetof(SteamProUGC_SetRankedByTrendDays, Handle) == 0x000000, "Member 'SteamProUGC_SetRankedByTrendDays::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetRankedByTrendDays, Days) == 0x000008, "Member 'SteamProUGC_SetRankedByTrendDays::Days' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetRankedByTrendDays, ReturnValue) == 0x00000C, "Member 'SteamProUGC_SetRankedByTrendDays::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetReturnAdditionalPreviews
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetReturnAdditionalPreviews final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnAdditionalPreviews;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240E[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetReturnAdditionalPreviews) == 0x000008, "Wrong alignment on SteamProUGC_SetReturnAdditionalPreviews");
static_assert(sizeof(SteamProUGC_SetReturnAdditionalPreviews) == 0x000010, "Wrong size on SteamProUGC_SetReturnAdditionalPreviews");
static_assert(offsetof(SteamProUGC_SetReturnAdditionalPreviews, Handle) == 0x000000, "Member 'SteamProUGC_SetReturnAdditionalPreviews::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnAdditionalPreviews, bReturnAdditionalPreviews) == 0x000008, "Member 'SteamProUGC_SetReturnAdditionalPreviews::bReturnAdditionalPreviews' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnAdditionalPreviews, ReturnValue) == 0x000009, "Member 'SteamProUGC_SetReturnAdditionalPreviews::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetReturnChildren
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetReturnChildren final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnChildren;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240F[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetReturnChildren) == 0x000008, "Wrong alignment on SteamProUGC_SetReturnChildren");
static_assert(sizeof(SteamProUGC_SetReturnChildren) == 0x000010, "Wrong size on SteamProUGC_SetReturnChildren");
static_assert(offsetof(SteamProUGC_SetReturnChildren, Handle) == 0x000000, "Member 'SteamProUGC_SetReturnChildren::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnChildren, bReturnChildren) == 0x000008, "Member 'SteamProUGC_SetReturnChildren::bReturnChildren' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnChildren, ReturnValue) == 0x000009, "Member 'SteamProUGC_SetReturnChildren::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetReturnKeyValueTags
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetReturnKeyValueTags final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnKeyValueTags;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2410[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetReturnKeyValueTags) == 0x000008, "Wrong alignment on SteamProUGC_SetReturnKeyValueTags");
static_assert(sizeof(SteamProUGC_SetReturnKeyValueTags) == 0x000010, "Wrong size on SteamProUGC_SetReturnKeyValueTags");
static_assert(offsetof(SteamProUGC_SetReturnKeyValueTags, Handle) == 0x000000, "Member 'SteamProUGC_SetReturnKeyValueTags::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnKeyValueTags, bReturnKeyValueTags) == 0x000008, "Member 'SteamProUGC_SetReturnKeyValueTags::bReturnKeyValueTags' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnKeyValueTags, ReturnValue) == 0x000009, "Member 'SteamProUGC_SetReturnKeyValueTags::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetReturnLongDescription
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetReturnLongDescription final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnLongDescription;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2411[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetReturnLongDescription) == 0x000008, "Wrong alignment on SteamProUGC_SetReturnLongDescription");
static_assert(sizeof(SteamProUGC_SetReturnLongDescription) == 0x000010, "Wrong size on SteamProUGC_SetReturnLongDescription");
static_assert(offsetof(SteamProUGC_SetReturnLongDescription, Handle) == 0x000000, "Member 'SteamProUGC_SetReturnLongDescription::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnLongDescription, bReturnLongDescription) == 0x000008, "Member 'SteamProUGC_SetReturnLongDescription::bReturnLongDescription' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnLongDescription, ReturnValue) == 0x000009, "Member 'SteamProUGC_SetReturnLongDescription::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetReturnMetadata
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetReturnMetadata final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnMetadata;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2412[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetReturnMetadata) == 0x000008, "Wrong alignment on SteamProUGC_SetReturnMetadata");
static_assert(sizeof(SteamProUGC_SetReturnMetadata) == 0x000010, "Wrong size on SteamProUGC_SetReturnMetadata");
static_assert(offsetof(SteamProUGC_SetReturnMetadata, Handle) == 0x000000, "Member 'SteamProUGC_SetReturnMetadata::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnMetadata, bReturnMetadata) == 0x000008, "Member 'SteamProUGC_SetReturnMetadata::bReturnMetadata' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnMetadata, ReturnValue) == 0x000009, "Member 'SteamProUGC_SetReturnMetadata::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetReturnOnlyIDs
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetReturnOnlyIDs final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnOnlyIDs;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2413[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetReturnOnlyIDs) == 0x000008, "Wrong alignment on SteamProUGC_SetReturnOnlyIDs");
static_assert(sizeof(SteamProUGC_SetReturnOnlyIDs) == 0x000010, "Wrong size on SteamProUGC_SetReturnOnlyIDs");
static_assert(offsetof(SteamProUGC_SetReturnOnlyIDs, Handle) == 0x000000, "Member 'SteamProUGC_SetReturnOnlyIDs::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnOnlyIDs, bReturnOnlyIDs) == 0x000008, "Member 'SteamProUGC_SetReturnOnlyIDs::bReturnOnlyIDs' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnOnlyIDs, ReturnValue) == 0x000009, "Member 'SteamProUGC_SetReturnOnlyIDs::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetReturnPlaytimeStats
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetReturnPlaytimeStats final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Days;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2414[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetReturnPlaytimeStats) == 0x000008, "Wrong alignment on SteamProUGC_SetReturnPlaytimeStats");
static_assert(sizeof(SteamProUGC_SetReturnPlaytimeStats) == 0x000010, "Wrong size on SteamProUGC_SetReturnPlaytimeStats");
static_assert(offsetof(SteamProUGC_SetReturnPlaytimeStats, Handle) == 0x000000, "Member 'SteamProUGC_SetReturnPlaytimeStats::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnPlaytimeStats, Days) == 0x000008, "Member 'SteamProUGC_SetReturnPlaytimeStats::Days' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnPlaytimeStats, ReturnValue) == 0x00000C, "Member 'SteamProUGC_SetReturnPlaytimeStats::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetReturnTotalOnly
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetReturnTotalOnly final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReturnTotalOnly;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2415[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetReturnTotalOnly) == 0x000008, "Wrong alignment on SteamProUGC_SetReturnTotalOnly");
static_assert(sizeof(SteamProUGC_SetReturnTotalOnly) == 0x000010, "Wrong size on SteamProUGC_SetReturnTotalOnly");
static_assert(offsetof(SteamProUGC_SetReturnTotalOnly, Handle) == 0x000000, "Member 'SteamProUGC_SetReturnTotalOnly::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnTotalOnly, bReturnTotalOnly) == 0x000008, "Member 'SteamProUGC_SetReturnTotalOnly::bReturnTotalOnly' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetReturnTotalOnly, ReturnValue) == 0x000009, "Member 'SteamProUGC_SetReturnTotalOnly::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetSearchText
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_SetSearchText final
{
public:
	struct FUGCQueryHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 SearchText;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2416[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetSearchText) == 0x000008, "Wrong alignment on SteamProUGC_SetSearchText");
static_assert(sizeof(SteamProUGC_SetSearchText) == 0x000020, "Wrong size on SteamProUGC_SetSearchText");
static_assert(offsetof(SteamProUGC_SetSearchText, Handle) == 0x000000, "Member 'SteamProUGC_SetSearchText::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetSearchText, SearchText) == 0x000008, "Member 'SteamProUGC_SetSearchText::SearchText' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetSearchText, ReturnValue) == 0x000018, "Member 'SteamProUGC_SetSearchText::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.ShowWorkshopEULA
// 0x0001 (0x0001 - 0x0000)
struct SteamProUGC_ShowWorkshopEULA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_ShowWorkshopEULA) == 0x000001, "Wrong alignment on SteamProUGC_ShowWorkshopEULA");
static_assert(sizeof(SteamProUGC_ShowWorkshopEULA) == 0x000001, "Wrong size on SteamProUGC_ShowWorkshopEULA");
static_assert(offsetof(SteamProUGC_ShowWorkshopEULA, ReturnValue) == 0x000000, "Member 'SteamProUGC_ShowWorkshopEULA::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.StartItemUpdate
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_StartItemUpdate final
{
public:
	int32                                         ConsumerAppID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2417[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FUGCUpdateHandle                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_StartItemUpdate) == 0x000008, "Wrong alignment on SteamProUGC_StartItemUpdate");
static_assert(sizeof(SteamProUGC_StartItemUpdate) == 0x000018, "Wrong size on SteamProUGC_StartItemUpdate");
static_assert(offsetof(SteamProUGC_StartItemUpdate, ConsumerAppID) == 0x000000, "Member 'SteamProUGC_StartItemUpdate::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_StartItemUpdate, PublishedFileID) == 0x000008, "Member 'SteamProUGC_StartItemUpdate::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_StartItemUpdate, ReturnValue) == 0x000010, "Member 'SteamProUGC_StartItemUpdate::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SuspendDownloads
// 0x0001 (0x0001 - 0x0000)
struct SteamProUGC_SuspendDownloads final
{
public:
	bool                                          bSuspend;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_SuspendDownloads) == 0x000001, "Wrong alignment on SteamProUGC_SuspendDownloads");
static_assert(sizeof(SteamProUGC_SuspendDownloads) == 0x000001, "Wrong size on SteamProUGC_SuspendDownloads");
static_assert(offsetof(SteamProUGC_SuspendDownloads, bSuspend) == 0x000000, "Member 'SteamProUGC_SuspendDownloads::bSuspend' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.UpdateItemPreviewFile
// 0x0028 (0x0028 - 0x0000)
struct SteamProUGC_UpdateItemPreviewFile final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2418[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreviewFile;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2419[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_UpdateItemPreviewFile) == 0x000008, "Wrong alignment on SteamProUGC_UpdateItemPreviewFile");
static_assert(sizeof(SteamProUGC_UpdateItemPreviewFile) == 0x000028, "Wrong size on SteamProUGC_UpdateItemPreviewFile");
static_assert(offsetof(SteamProUGC_UpdateItemPreviewFile, Handle) == 0x000000, "Member 'SteamProUGC_UpdateItemPreviewFile::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_UpdateItemPreviewFile, Param_Index) == 0x000008, "Member 'SteamProUGC_UpdateItemPreviewFile::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_UpdateItemPreviewFile, PreviewFile) == 0x000010, "Member 'SteamProUGC_UpdateItemPreviewFile::PreviewFile' has a wrong offset!");
static_assert(offsetof(SteamProUGC_UpdateItemPreviewFile, ReturnValue) == 0x000020, "Member 'SteamProUGC_UpdateItemPreviewFile::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.UpdateItemPreviewVideo
// 0x0028 (0x0028 - 0x0000)
struct SteamProUGC_UpdateItemPreviewVideo final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreviewVideo;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241B[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_UpdateItemPreviewVideo) == 0x000008, "Wrong alignment on SteamProUGC_UpdateItemPreviewVideo");
static_assert(sizeof(SteamProUGC_UpdateItemPreviewVideo) == 0x000028, "Wrong size on SteamProUGC_UpdateItemPreviewVideo");
static_assert(offsetof(SteamProUGC_UpdateItemPreviewVideo, Handle) == 0x000000, "Member 'SteamProUGC_UpdateItemPreviewVideo::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_UpdateItemPreviewVideo, Param_Index) == 0x000008, "Member 'SteamProUGC_UpdateItemPreviewVideo::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUGC_UpdateItemPreviewVideo, PreviewVideo) == 0x000010, "Member 'SteamProUGC_UpdateItemPreviewVideo::PreviewVideo' has a wrong offset!");
static_assert(offsetof(SteamProUGC_UpdateItemPreviewVideo, ReturnValue) == 0x000020, "Member 'SteamProUGC_UpdateItemPreviewVideo::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.AddAppDependency
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_AddAppDependency final
{
public:
	TDelegate<void(struct FAddAppDependencyResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241C[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_AddAppDependency) == 0x000008, "Wrong alignment on SteamProUGC_AddAppDependency");
static_assert(sizeof(SteamProUGC_AddAppDependency) == 0x000020, "Wrong size on SteamProUGC_AddAppDependency");
static_assert(offsetof(SteamProUGC_AddAppDependency, Callback) == 0x000000, "Member 'SteamProUGC_AddAppDependency::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddAppDependency, PublishedFileID) == 0x000010, "Member 'SteamProUGC_AddAppDependency::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddAppDependency, AppID) == 0x000018, "Member 'SteamProUGC_AddAppDependency::AppID' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.AddDependency
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_AddDependency final
{
public:
	TDelegate<void(struct FAddUGCDependencyResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ChildPublishedFileId;                              // 0x0018(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_AddDependency) == 0x000008, "Wrong alignment on SteamProUGC_AddDependency");
static_assert(sizeof(SteamProUGC_AddDependency) == 0x000020, "Wrong size on SteamProUGC_AddDependency");
static_assert(offsetof(SteamProUGC_AddDependency, Callback) == 0x000000, "Member 'SteamProUGC_AddDependency::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddDependency, PublishedFileID) == 0x000010, "Member 'SteamProUGC_AddDependency::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddDependency, ChildPublishedFileId) == 0x000018, "Member 'SteamProUGC_AddDependency::ChildPublishedFileId' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.AddItemToFavorites
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_AddItemToFavorites final
{
public:
	TDelegate<void(struct FUserFavoriteItemsListChanged& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241D[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0018(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_AddItemToFavorites) == 0x000008, "Wrong alignment on SteamProUGC_AddItemToFavorites");
static_assert(sizeof(SteamProUGC_AddItemToFavorites) == 0x000020, "Wrong size on SteamProUGC_AddItemToFavorites");
static_assert(offsetof(SteamProUGC_AddItemToFavorites, Callback) == 0x000000, "Member 'SteamProUGC_AddItemToFavorites::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddItemToFavorites, AppID) == 0x000010, "Member 'SteamProUGC_AddItemToFavorites::AppID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_AddItemToFavorites, PublishedFileID) == 0x000018, "Member 'SteamProUGC_AddItemToFavorites::PublishedFileID' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.CreateItem
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_CreateItem final
{
public:
	TDelegate<void(struct FCreateItemResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumerAppID;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamWorkshopFileType                        FileType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241E[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_CreateItem) == 0x000004, "Wrong alignment on SteamProUGC_CreateItem");
static_assert(sizeof(SteamProUGC_CreateItem) == 0x000018, "Wrong size on SteamProUGC_CreateItem");
static_assert(offsetof(SteamProUGC_CreateItem, Callback) == 0x000000, "Member 'SteamProUGC_CreateItem::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateItem, ConsumerAppID) == 0x000010, "Member 'SteamProUGC_CreateItem::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_CreateItem, FileType) == 0x000014, "Member 'SteamProUGC_CreateItem::FileType' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.DeleteItem
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_DeleteItem final
{
public:
	TDelegate<void(struct FUGCDeleteItemResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_DeleteItem) == 0x000008, "Wrong alignment on SteamProUGC_DeleteItem");
static_assert(sizeof(SteamProUGC_DeleteItem) == 0x000018, "Wrong size on SteamProUGC_DeleteItem");
static_assert(offsetof(SteamProUGC_DeleteItem, Callback) == 0x000000, "Member 'SteamProUGC_DeleteItem::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_DeleteItem, PublishedFileID) == 0x000010, "Member 'SteamProUGC_DeleteItem::PublishedFileID' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetAppDependencies
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_GetAppDependencies final
{
public:
	TDelegate<void(struct FGetAppDependenciesResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_GetAppDependencies) == 0x000008, "Wrong alignment on SteamProUGC_GetAppDependencies");
static_assert(sizeof(SteamProUGC_GetAppDependencies) == 0x000018, "Wrong size on SteamProUGC_GetAppDependencies");
static_assert(offsetof(SteamProUGC_GetAppDependencies, Callback) == 0x000000, "Member 'SteamProUGC_GetAppDependencies::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetAppDependencies, PublishedFileID) == 0x000010, "Member 'SteamProUGC_GetAppDependencies::PublishedFileID' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetUserItemVote
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_GetUserItemVote final
{
public:
	TDelegate<void(struct FGetUserItemVoteResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_GetUserItemVote) == 0x000008, "Wrong alignment on SteamProUGC_GetUserItemVote");
static_assert(sizeof(SteamProUGC_GetUserItemVote) == 0x000018, "Wrong size on SteamProUGC_GetUserItemVote");
static_assert(offsetof(SteamProUGC_GetUserItemVote, Callback) == 0x000000, "Member 'SteamProUGC_GetUserItemVote::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_GetUserItemVote, PublishedFileID) == 0x000010, "Member 'SteamProUGC_GetUserItemVote::PublishedFileID' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.GetWorkshopEULAStatus
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_GetWorkshopEULAStatus final
{
public:
	TDelegate<void(struct FWorkshopEULAStatus& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_GetWorkshopEULAStatus) == 0x000004, "Wrong alignment on SteamProUGC_GetWorkshopEULAStatus");
static_assert(sizeof(SteamProUGC_GetWorkshopEULAStatus) == 0x000010, "Wrong size on SteamProUGC_GetWorkshopEULAStatus");
static_assert(offsetof(SteamProUGC_GetWorkshopEULAStatus, Callback) == 0x000000, "Member 'SteamProUGC_GetWorkshopEULAStatus::Callback' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.RemoveAppDependency
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_RemoveAppDependency final
{
public:
	TDelegate<void(struct FRemoveAppDependencyResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241F[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_RemoveAppDependency) == 0x000008, "Wrong alignment on SteamProUGC_RemoveAppDependency");
static_assert(sizeof(SteamProUGC_RemoveAppDependency) == 0x000020, "Wrong size on SteamProUGC_RemoveAppDependency");
static_assert(offsetof(SteamProUGC_RemoveAppDependency, Callback) == 0x000000, "Member 'SteamProUGC_RemoveAppDependency::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_RemoveAppDependency, PublishedFileID) == 0x000010, "Member 'SteamProUGC_RemoveAppDependency::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_RemoveAppDependency, AppID) == 0x000018, "Member 'SteamProUGC_RemoveAppDependency::AppID' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.RemoveDependency
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_RemoveDependency final
{
public:
	TDelegate<void(struct FRemoveUGCDependencyResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ParentPublishedFileID;                             // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ChildPublishedFileId;                              // 0x0018(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_RemoveDependency) == 0x000008, "Wrong alignment on SteamProUGC_RemoveDependency");
static_assert(sizeof(SteamProUGC_RemoveDependency) == 0x000020, "Wrong size on SteamProUGC_RemoveDependency");
static_assert(offsetof(SteamProUGC_RemoveDependency, Callback) == 0x000000, "Member 'SteamProUGC_RemoveDependency::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_RemoveDependency, ParentPublishedFileID) == 0x000010, "Member 'SteamProUGC_RemoveDependency::ParentPublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_RemoveDependency, ChildPublishedFileId) == 0x000018, "Member 'SteamProUGC_RemoveDependency::ChildPublishedFileId' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.RemoveItemFromFavorites
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_RemoveItemFromFavorites final
{
public:
	TDelegate<void(struct FUserFavoriteItemsListChanged& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2420[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0018(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_RemoveItemFromFavorites) == 0x000008, "Wrong alignment on SteamProUGC_RemoveItemFromFavorites");
static_assert(sizeof(SteamProUGC_RemoveItemFromFavorites) == 0x000020, "Wrong size on SteamProUGC_RemoveItemFromFavorites");
static_assert(offsetof(SteamProUGC_RemoveItemFromFavorites, Callback) == 0x000000, "Member 'SteamProUGC_RemoveItemFromFavorites::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_RemoveItemFromFavorites, AppID) == 0x000010, "Member 'SteamProUGC_RemoveItemFromFavorites::AppID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_RemoveItemFromFavorites, PublishedFileID) == 0x000018, "Member 'SteamProUGC_RemoveItemFromFavorites::PublishedFileID' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SendQueryUGCRequest
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_SendQueryUGCRequest final
{
public:
	TDelegate<void(struct FSteamUGCQueryCompleted& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCQueryHandle                        Handle;                                            // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_SendQueryUGCRequest) == 0x000008, "Wrong alignment on SteamProUGC_SendQueryUGCRequest");
static_assert(sizeof(SteamProUGC_SendQueryUGCRequest) == 0x000018, "Wrong size on SteamProUGC_SendQueryUGCRequest");
static_assert(offsetof(SteamProUGC_SendQueryUGCRequest, Callback) == 0x000000, "Member 'SteamProUGC_SendQueryUGCRequest::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SendQueryUGCRequest, Handle) == 0x000010, "Member 'SteamProUGC_SendQueryUGCRequest::Handle' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetAllowLegacyUpload
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_SetAllowLegacyUpload final
{
public:
	struct FUGCUpdateHandle                       Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowLegacyUpload;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2421[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetAllowLegacyUpload) == 0x000008, "Wrong alignment on SteamProUGC_SetAllowLegacyUpload");
static_assert(sizeof(SteamProUGC_SetAllowLegacyUpload) == 0x000010, "Wrong size on SteamProUGC_SetAllowLegacyUpload");
static_assert(offsetof(SteamProUGC_SetAllowLegacyUpload, Handle) == 0x000000, "Member 'SteamProUGC_SetAllowLegacyUpload::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetAllowLegacyUpload, bAllowLegacyUpload) == 0x000008, "Member 'SteamProUGC_SetAllowLegacyUpload::bAllowLegacyUpload' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetAllowLegacyUpload, ReturnValue) == 0x000009, "Member 'SteamProUGC_SetAllowLegacyUpload::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SetUserItemVote
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_SetUserItemVote final
{
public:
	TDelegate<void(struct FSetUserItemVoteResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bVoteUp;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2422[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUGC_SetUserItemVote) == 0x000008, "Wrong alignment on SteamProUGC_SetUserItemVote");
static_assert(sizeof(SteamProUGC_SetUserItemVote) == 0x000020, "Wrong size on SteamProUGC_SetUserItemVote");
static_assert(offsetof(SteamProUGC_SetUserItemVote, Callback) == 0x000000, "Member 'SteamProUGC_SetUserItemVote::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetUserItemVote, PublishedFileID) == 0x000010, "Member 'SteamProUGC_SetUserItemVote::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SetUserItemVote, bVoteUp) == 0x000018, "Member 'SteamProUGC_SetUserItemVote::bVoteUp' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.StartPlaytimeTracking
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_StartPlaytimeTracking final
{
public:
	TDelegate<void(struct FStartPlaytimeTrackingResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPublishedFileID>               PublishedFileID;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_StartPlaytimeTracking) == 0x000008, "Wrong alignment on SteamProUGC_StartPlaytimeTracking");
static_assert(sizeof(SteamProUGC_StartPlaytimeTracking) == 0x000020, "Wrong size on SteamProUGC_StartPlaytimeTracking");
static_assert(offsetof(SteamProUGC_StartPlaytimeTracking, Callback) == 0x000000, "Member 'SteamProUGC_StartPlaytimeTracking::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_StartPlaytimeTracking, PublishedFileID) == 0x000010, "Member 'SteamProUGC_StartPlaytimeTracking::PublishedFileID' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.StopPlaytimeTracking
// 0x0020 (0x0020 - 0x0000)
struct SteamProUGC_StopPlaytimeTracking final
{
public:
	TDelegate<void(struct FStopPlaytimeTrackingResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPublishedFileID>               PublishedFileIDs;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_StopPlaytimeTracking) == 0x000008, "Wrong alignment on SteamProUGC_StopPlaytimeTracking");
static_assert(sizeof(SteamProUGC_StopPlaytimeTracking) == 0x000020, "Wrong size on SteamProUGC_StopPlaytimeTracking");
static_assert(offsetof(SteamProUGC_StopPlaytimeTracking, Callback) == 0x000000, "Member 'SteamProUGC_StopPlaytimeTracking::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_StopPlaytimeTracking, PublishedFileIDs) == 0x000010, "Member 'SteamProUGC_StopPlaytimeTracking::PublishedFileIDs' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.StopPlaytimeTrackingForAllItems
// 0x0010 (0x0010 - 0x0000)
struct SteamProUGC_StopPlaytimeTrackingForAllItems final
{
public:
	TDelegate<void(struct FStopPlaytimeTrackingResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_StopPlaytimeTrackingForAllItems) == 0x000004, "Wrong alignment on SteamProUGC_StopPlaytimeTrackingForAllItems");
static_assert(sizeof(SteamProUGC_StopPlaytimeTrackingForAllItems) == 0x000010, "Wrong size on SteamProUGC_StopPlaytimeTrackingForAllItems");
static_assert(offsetof(SteamProUGC_StopPlaytimeTrackingForAllItems, Callback) == 0x000000, "Member 'SteamProUGC_StopPlaytimeTrackingForAllItems::Callback' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SubmitItemUpdate
// 0x0028 (0x0028 - 0x0000)
struct SteamProUGC_SubmitItemUpdate final
{
public:
	TDelegate<void(struct FSubmitItemUpdateResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCUpdateHandle                       Handle;                                            // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ChangeNote;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_SubmitItemUpdate) == 0x000008, "Wrong alignment on SteamProUGC_SubmitItemUpdate");
static_assert(sizeof(SteamProUGC_SubmitItemUpdate) == 0x000028, "Wrong size on SteamProUGC_SubmitItemUpdate");
static_assert(offsetof(SteamProUGC_SubmitItemUpdate, Callback) == 0x000000, "Member 'SteamProUGC_SubmitItemUpdate::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SubmitItemUpdate, Handle) == 0x000010, "Member 'SteamProUGC_SubmitItemUpdate::Handle' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SubmitItemUpdate, ChangeNote) == 0x000018, "Member 'SteamProUGC_SubmitItemUpdate::ChangeNote' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.SubscribeItem
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_SubscribeItem final
{
public:
	TDelegate<void(struct FRemoteStorageSubscribePublishedFileResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_SubscribeItem) == 0x000008, "Wrong alignment on SteamProUGC_SubscribeItem");
static_assert(sizeof(SteamProUGC_SubscribeItem) == 0x000018, "Wrong size on SteamProUGC_SubscribeItem");
static_assert(offsetof(SteamProUGC_SubscribeItem, Callback) == 0x000000, "Member 'SteamProUGC_SubscribeItem::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_SubscribeItem, PublishedFileID) == 0x000010, "Member 'SteamProUGC_SubscribeItem::PublishedFileID' has a wrong offset!");

// Function SteamCorePro.SteamProUGC.UnsubscribeItem
// 0x0018 (0x0018 - 0x0000)
struct SteamProUGC_UnsubscribeItem final
{
public:
	TDelegate<void(struct FRemoteStorageSubscribePublishedFileResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUGC_UnsubscribeItem) == 0x000008, "Wrong alignment on SteamProUGC_UnsubscribeItem");
static_assert(sizeof(SteamProUGC_UnsubscribeItem) == 0x000018, "Wrong size on SteamProUGC_UnsubscribeItem");
static_assert(offsetof(SteamProUGC_UnsubscribeItem, Callback) == 0x000000, "Member 'SteamProUGC_UnsubscribeItem::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUGC_UnsubscribeItem, PublishedFileID) == 0x000010, "Member 'SteamProUGC_UnsubscribeItem::PublishedFileID' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems.StopPlaytimeTrackingForAllItemsAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2423[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync) == 0x000018, "Wrong size on SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync, Timeout) == 0x000008, "Member 'SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync, ReturnValue) == 0x000010, "Member 'SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_StopPlaytimeTrackingForAllItemsAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems.HandleCallback
// 0x0002 (0x0002 - 0x0000)
struct SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback final
{
public:
	struct FStopPlaytimeTrackingResult            Data;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback) == 0x000002, "Wrong size on SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback, bWasSuccessful) == 0x000001, "Member 'SteamCoreProUGCAsyncActionStopPlaytimeTrackingForAllItems_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionStopPlaytimeTracking.StopPlaytimeTrackingAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPublishedFileID>               PublishedFileIDs;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2424[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionStopPlaytimeTracking* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync) == 0x000028, "Wrong size on SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync, PublishedFileIDs) == 0x000008, "Member 'SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync, Timeout) == 0x000018, "Member 'SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProUGCAsyncActionStopPlaytimeTracking_StopPlaytimeTrackingAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionStopPlaytimeTracking.HandleCallback
// 0x0002 (0x0002 - 0x0000)
struct SteamCoreProUGCAsyncActionStopPlaytimeTracking_HandleCallback final
{
public:
	struct FStopPlaytimeTrackingResult            Data;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionStopPlaytimeTracking_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreProUGCAsyncActionStopPlaytimeTracking_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionStopPlaytimeTracking_HandleCallback) == 0x000002, "Wrong size on SteamCoreProUGCAsyncActionStopPlaytimeTracking_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionStopPlaytimeTracking_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionStopPlaytimeTracking_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionStopPlaytimeTracking_HandleCallback, bWasSuccessful) == 0x000001, "Member 'SteamCoreProUGCAsyncActionStopPlaytimeTracking_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionStartPlaytimeTracking.StartPlaytimeTrackingAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPublishedFileID>               PublishedFileIDs;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2425[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionStartPlaytimeTracking* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync) == 0x000028, "Wrong size on SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync, PublishedFileIDs) == 0x000008, "Member 'SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync, Timeout) == 0x000018, "Member 'SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProUGCAsyncActionStartPlaytimeTracking_StartPlaytimeTrackingAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionStartPlaytimeTracking.HandleCallback
// 0x0002 (0x0002 - 0x0000)
struct SteamCoreProUGCAsyncActionStartPlaytimeTracking_HandleCallback final
{
public:
	struct FStartPlaytimeTrackingResult           Data;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionStartPlaytimeTracking_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreProUGCAsyncActionStartPlaytimeTracking_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionStartPlaytimeTracking_HandleCallback) == 0x000002, "Wrong size on SteamCoreProUGCAsyncActionStartPlaytimeTracking_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionStartPlaytimeTracking_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionStartPlaytimeTracking_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionStartPlaytimeTracking_HandleCallback, bWasSuccessful) == 0x000001, "Member 'SteamCoreProUGCAsyncActionStartPlaytimeTracking_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionUnsubscribeItem.UnsubscribeItemAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileIDs;                                  // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2426[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionUnsubscribeItem* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync, PublishedFileIDs) == 0x000008, "Member 'SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync, Timeout) == 0x000010, "Member 'SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProUGCAsyncActionUnsubscribeItem_UnsubscribeItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionUnsubscribeItem.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUGCAsyncActionUnsubscribeItem_HandleCallback final
{
public:
	struct FRemoteStorageSubscribePublishedFileResult Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2427[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionUnsubscribeItem_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionUnsubscribeItem_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionUnsubscribeItem_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUGCAsyncActionUnsubscribeItem_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionUnsubscribeItem_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionUnsubscribeItem_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionUnsubscribeItem_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUGCAsyncActionUnsubscribeItem_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionSubscribeItem.SubscribeItemAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileIDs;                                  // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2428[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionSubscribeItem* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync, PublishedFileIDs) == 0x000008, "Member 'SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync::PublishedFileIDs' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync, Timeout) == 0x000010, "Member 'SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProUGCAsyncActionSubscribeItem_SubscribeItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionSubscribeItem.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUGCAsyncActionSubscribeItem_HandleCallback final
{
public:
	struct FRemoteStorageSubscribePublishedFileResult Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2429[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionSubscribeItem_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionSubscribeItem_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionSubscribeItem_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUGCAsyncActionSubscribeItem_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubscribeItem_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionSubscribeItem_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubscribeItem_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUGCAsyncActionSubscribeItem_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionRemoveItemFromFavorites.RemoveItemFromFavoritesAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242B[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionRemoveItemFromFavorites* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync) == 0x000028, "Wrong size on SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync, AppID) == 0x000008, "Member 'SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync, PublishedFileID) == 0x000010, "Member 'SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync, Timeout) == 0x000018, "Member 'SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProUGCAsyncActionRemoveItemFromFavorites_RemoveItemFromFavoritesAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionRemoveItemFromFavorites.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUGCAsyncActionRemoveItemFromFavorites_HandleCallback final
{
public:
	struct FUserFavoriteItemsListChanged          Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionRemoveItemFromFavorites_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionRemoveItemFromFavorites_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionRemoveItemFromFavorites_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUGCAsyncActionRemoveItemFromFavorites_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveItemFromFavorites_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionRemoveItemFromFavorites_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveItemFromFavorites_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUGCAsyncActionRemoveItemFromFavorites_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionAddItemToFavorites.AddItemToFavoritesAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242E[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionAddItemToFavorites* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync) == 0x000028, "Wrong size on SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync, AppID) == 0x000008, "Member 'SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync, PublishedFileID) == 0x000010, "Member 'SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync, Timeout) == 0x000018, "Member 'SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProUGCAsyncActionAddItemToFavorites_AddItemToFavoritesAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionAddItemToFavorites.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUGCAsyncActionAddItemToFavorites_HandleCallback final
{
public:
	struct FUserFavoriteItemsListChanged          Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionAddItemToFavorites_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionAddItemToFavorites_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionAddItemToFavorites_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUGCAsyncActionAddItemToFavorites_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddItemToFavorites_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionAddItemToFavorites_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddItemToFavorites_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUGCAsyncActionAddItemToFavorites_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionGetUserItemVote.GetUserItemVoteAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2430[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionGetUserItemVote* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync, Timeout) == 0x000010, "Member 'SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProUGCAsyncActionGetUserItemVote_GetUserItemVoteAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionGetUserItemVote.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUGCAsyncActionGetUserItemVote_HandleCallback final
{
public:
	struct FGetUserItemVoteResult                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2431[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionGetUserItemVote_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionGetUserItemVote_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionGetUserItemVote_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUGCAsyncActionGetUserItemVote_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionGetUserItemVote_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionGetUserItemVote_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionGetUserItemVote_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUGCAsyncActionGetUserItemVote_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionSetUserItemVote.SetUserItemVoteAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bVoteUp;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2432[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProUGCAsyncActionSetUserItemVote* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync, bVoteUp) == 0x000010, "Member 'SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync::bVoteUp' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync, Timeout) == 0x000014, "Member 'SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProUGCAsyncActionSetUserItemVote_SetUserItemVoteAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionSetUserItemVote.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUGCAsyncActionSetUserItemVote_HandleCallback final
{
public:
	struct FSetUserItemVoteResult                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2433[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionSetUserItemVote_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionSetUserItemVote_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionSetUserItemVote_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUGCAsyncActionSetUserItemVote_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionSetUserItemVote_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionSetUserItemVote_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSetUserItemVote_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUGCAsyncActionSetUserItemVote_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionSubmitItemUpdate.SubmitItemUpdateAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCUpdateHandle                       Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ChangeNote;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2434[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionSubmitItemUpdate* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync) == 0x000030, "Wrong size on SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync, Handle) == 0x000008, "Member 'SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync::Handle' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync, ChangeNote) == 0x000010, "Member 'SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync::ChangeNote' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync, Timeout) == 0x000020, "Member 'SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync, ReturnValue) == 0x000028, "Member 'SteamCoreProUGCAsyncActionSubmitItemUpdate_SubmitItemUpdateAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionSubmitItemUpdate.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUGCAsyncActionSubmitItemUpdate_HandleCallback final
{
public:
	struct FSubmitItemUpdateResult                Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2435[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionSubmitItemUpdate_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionSubmitItemUpdate_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionSubmitItemUpdate_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUGCAsyncActionSubmitItemUpdate_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubmitItemUpdate_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionSubmitItemUpdate_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSubmitItemUpdate_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUGCAsyncActionSubmitItemUpdate_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionCreateItem.CreateItemAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumerAppID;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamWorkshopFileType                        FileType;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2436[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2437[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionCreateItem*  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync, ConsumerAppID) == 0x000008, "Member 'SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync::ConsumerAppID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync, FileType) == 0x00000C, "Member 'SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync::FileType' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync, Timeout) == 0x000010, "Member 'SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProUGCAsyncActionCreateItem_CreateItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionCreateItem.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionCreateItem_HandleCallback final
{
public:
	struct FCreateItemResult                      Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2438[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionCreateItem_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionCreateItem_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionCreateItem_HandleCallback) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionCreateItem_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionCreateItem_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionCreateItem_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionCreateItem_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProUGCAsyncActionCreateItem_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionSendQueryUGCRequest.SendQueryUGCRequestAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUGCQueryHandle                        Handle;                                            // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2439[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionSendQueryUGCRequest* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync, Handle) == 0x000008, "Member 'SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync::Handle' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync, Timeout) == 0x000010, "Member 'SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProUGCAsyncActionSendQueryUGCRequest_SendQueryUGCRequestAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionSendQueryUGCRequest.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionSendQueryUGCRequest_HandleCallback final
{
public:
	struct FSteamUGCQueryCompleted                Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243A[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionSendQueryUGCRequest_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionSendQueryUGCRequest_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionSendQueryUGCRequest_HandleCallback) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionSendQueryUGCRequest_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionSendQueryUGCRequest_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionSendQueryUGCRequest_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionSendQueryUGCRequest_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProUGCAsyncActionSendQueryUGCRequest_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionAddAppDependency.AddAppDependencyAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProUGCAsyncActionAddAppDependency* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync, AppID) == 0x000010, "Member 'SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync, Timeout) == 0x000014, "Member 'SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProUGCAsyncActionAddAppDependency_AddAppDependencyAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionAddAppDependency.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionAddAppDependency_HandleCallback final
{
public:
	struct FAddAppDependencyResult                Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243B[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionAddAppDependency_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionAddAppDependency_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionAddAppDependency_HandleCallback) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionAddAppDependency_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddAppDependency_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionAddAppDependency_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddAppDependency_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProUGCAsyncActionAddAppDependency_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionRemoveAppDependency.RemoveAppDependencyAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProUGCAsyncActionRemoveAppDependency* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync, AppID) == 0x000010, "Member 'SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync::AppID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync, Timeout) == 0x000014, "Member 'SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProUGCAsyncActionRemoveAppDependency_RemoveAppDependencyAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionRemoveAppDependency.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionRemoveAppDependency_HandleCallback final
{
public:
	struct FRemoveAppDependencyResult             Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243C[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionRemoveAppDependency_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionRemoveAppDependency_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionRemoveAppDependency_HandleCallback) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionRemoveAppDependency_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveAppDependency_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionRemoveAppDependency_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveAppDependency_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProUGCAsyncActionRemoveAppDependency_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionAddUGCDependency.AddDependencyAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ChildPublishedFileId;                              // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243D[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionAddUGCDependency* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync) == 0x000028, "Wrong size on SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync, ChildPublishedFileId) == 0x000010, "Member 'SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync::ChildPublishedFileId' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync, Timeout) == 0x000018, "Member 'SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProUGCAsyncActionAddUGCDependency_AddDependencyAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionAddUGCDependency.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionAddUGCDependency_HandleCallback final
{
public:
	struct FAddUGCDependencyResult                Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243E[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionAddUGCDependency_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionAddUGCDependency_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionAddUGCDependency_HandleCallback) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionAddUGCDependency_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddUGCDependency_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionAddUGCDependency_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionAddUGCDependency_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProUGCAsyncActionAddUGCDependency_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionRemoveUGCDependency.RemoveDependencyAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ChildPublishedFileId;                              // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243F[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionRemoveUGCDependency* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync) == 0x000028, "Wrong size on SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync, ChildPublishedFileId) == 0x000010, "Member 'SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync::ChildPublishedFileId' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync, Timeout) == 0x000018, "Member 'SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProUGCAsyncActionRemoveUGCDependency_RemoveDependencyAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionRemoveUGCDependency.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionRemoveUGCDependency_HandleCallback final
{
public:
	struct FRemoveUGCDependencyResult             Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2440[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionRemoveUGCDependency_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionRemoveUGCDependency_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionRemoveUGCDependency_HandleCallback) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionRemoveUGCDependency_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveUGCDependency_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionRemoveUGCDependency_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionRemoveUGCDependency_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProUGCAsyncActionRemoveUGCDependency_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionDeleteItem.DeleteItemAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2441[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionDeleteItem*  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync, Timeout) == 0x000010, "Member 'SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProUGCAsyncActionDeleteItem_DeleteItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionDeleteItem.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUGCAsyncActionDeleteItem_HandleCallback final
{
public:
	struct FUGCDeleteItemResult                   Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2442[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionDeleteItem_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionDeleteItem_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionDeleteItem_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUGCAsyncActionDeleteItem_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionDeleteItem_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionDeleteItem_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionDeleteItem_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUGCAsyncActionDeleteItem_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionGetAppDependencies.GetAppDependenciesAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2443[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUGCAsyncActionGetAppDependencies* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync, Timeout) == 0x000010, "Member 'SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProUGCAsyncActionGetAppDependencies_GetAppDependenciesAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionGetAppDependencies.HandleCallback
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreProUGCAsyncActionGetAppDependencies_HandleCallback final
{
public:
	struct FGetAppDependenciesResult              Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2444[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionGetAppDependencies_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionGetAppDependencies_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionGetAppDependencies_HandleCallback) == 0x000030, "Wrong size on SteamCoreProUGCAsyncActionGetAppDependencies_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionGetAppDependencies_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionGetAppDependencies_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionGetAppDependencies_HandleCallback, bWasSuccessful) == 0x000028, "Member 'SteamCoreProUGCAsyncActionGetAppDependencies_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionDownloadItem.DownloadItemAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHighPriority;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2445[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProUGCAsyncActionDownloadItem* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync");
static_assert(sizeof(SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync");
static_assert(offsetof(SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync, PublishedFileID) == 0x000008, "Member 'SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync, bHighPriority) == 0x000010, "Member 'SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync::bHighPriority' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync, Timeout) == 0x000014, "Member 'SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProUGCAsyncActionDownloadItem_DownloadItemAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUGCAsyncActionDownloadItem.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUGCAsyncActionDownloadItem_HandleCallback final
{
public:
	struct FDownloadItemResult                    Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2446[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUGCAsyncActionDownloadItem_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUGCAsyncActionDownloadItem_HandleCallback");
static_assert(sizeof(SteamCoreProUGCAsyncActionDownloadItem_HandleCallback) == 0x000020, "Wrong size on SteamCoreProUGCAsyncActionDownloadItem_HandleCallback");
static_assert(offsetof(SteamCoreProUGCAsyncActionDownloadItem_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUGCAsyncActionDownloadItem_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUGCAsyncActionDownloadItem_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProUGCAsyncActionDownloadItem_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamProUser.AdvertiseGame
// 0x0020 (0x0020 - 0x0000)
struct SteamProUser_AdvertiseGame final
{
public:
	struct FSteamID                               SteamIDGameServer;                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ServerIP;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2448[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUser_AdvertiseGame) == 0x000008, "Wrong alignment on SteamProUser_AdvertiseGame");
static_assert(sizeof(SteamProUser_AdvertiseGame) == 0x000020, "Wrong size on SteamProUser_AdvertiseGame");
static_assert(offsetof(SteamProUser_AdvertiseGame, SteamIDGameServer) == 0x000000, "Member 'SteamProUser_AdvertiseGame::SteamIDGameServer' has a wrong offset!");
static_assert(offsetof(SteamProUser_AdvertiseGame, ServerIP) == 0x000008, "Member 'SteamProUser_AdvertiseGame::ServerIP' has a wrong offset!");
static_assert(offsetof(SteamProUser_AdvertiseGame, ServerPort) == 0x000018, "Member 'SteamProUser_AdvertiseGame::ServerPort' has a wrong offset!");

// Function SteamCorePro.SteamProUser.BeginAuthSession
// 0x0020 (0x0020 - 0x0000)
struct SteamProUser_BeginAuthSession final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamBeginAuthSessionResult                  ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2449[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUser_BeginAuthSession) == 0x000008, "Wrong alignment on SteamProUser_BeginAuthSession");
static_assert(sizeof(SteamProUser_BeginAuthSession) == 0x000020, "Wrong size on SteamProUser_BeginAuthSession");
static_assert(offsetof(SteamProUser_BeginAuthSession, Ticket) == 0x000000, "Member 'SteamProUser_BeginAuthSession::Ticket' has a wrong offset!");
static_assert(offsetof(SteamProUser_BeginAuthSession, SteamID) == 0x000010, "Member 'SteamProUser_BeginAuthSession::SteamID' has a wrong offset!");
static_assert(offsetof(SteamProUser_BeginAuthSession, ReturnValue) == 0x000018, "Member 'SteamProUser_BeginAuthSession::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.BIsBehindNAT
// 0x0001 (0x0001 - 0x0000)
struct SteamProUser_BIsBehindNAT final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_BIsBehindNAT) == 0x000001, "Wrong alignment on SteamProUser_BIsBehindNAT");
static_assert(sizeof(SteamProUser_BIsBehindNAT) == 0x000001, "Wrong size on SteamProUser_BIsBehindNAT");
static_assert(offsetof(SteamProUser_BIsBehindNAT, ReturnValue) == 0x000000, "Member 'SteamProUser_BIsBehindNAT::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.BIsPhoneIdentifying
// 0x0001 (0x0001 - 0x0000)
struct SteamProUser_BIsPhoneIdentifying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_BIsPhoneIdentifying) == 0x000001, "Wrong alignment on SteamProUser_BIsPhoneIdentifying");
static_assert(sizeof(SteamProUser_BIsPhoneIdentifying) == 0x000001, "Wrong size on SteamProUser_BIsPhoneIdentifying");
static_assert(offsetof(SteamProUser_BIsPhoneIdentifying, ReturnValue) == 0x000000, "Member 'SteamProUser_BIsPhoneIdentifying::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.BIsPhoneRequiringVerification
// 0x0001 (0x0001 - 0x0000)
struct SteamProUser_BIsPhoneRequiringVerification final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_BIsPhoneRequiringVerification) == 0x000001, "Wrong alignment on SteamProUser_BIsPhoneRequiringVerification");
static_assert(sizeof(SteamProUser_BIsPhoneRequiringVerification) == 0x000001, "Wrong size on SteamProUser_BIsPhoneRequiringVerification");
static_assert(offsetof(SteamProUser_BIsPhoneRequiringVerification, ReturnValue) == 0x000000, "Member 'SteamProUser_BIsPhoneRequiringVerification::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.BIsPhoneVerified
// 0x0001 (0x0001 - 0x0000)
struct SteamProUser_BIsPhoneVerified final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_BIsPhoneVerified) == 0x000001, "Wrong alignment on SteamProUser_BIsPhoneVerified");
static_assert(sizeof(SteamProUser_BIsPhoneVerified) == 0x000001, "Wrong size on SteamProUser_BIsPhoneVerified");
static_assert(offsetof(SteamProUser_BIsPhoneVerified, ReturnValue) == 0x000000, "Member 'SteamProUser_BIsPhoneVerified::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.BIsTwoFactorEnabled
// 0x0001 (0x0001 - 0x0000)
struct SteamProUser_BIsTwoFactorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_BIsTwoFactorEnabled) == 0x000001, "Wrong alignment on SteamProUser_BIsTwoFactorEnabled");
static_assert(sizeof(SteamProUser_BIsTwoFactorEnabled) == 0x000001, "Wrong size on SteamProUser_BIsTwoFactorEnabled");
static_assert(offsetof(SteamProUser_BIsTwoFactorEnabled, ReturnValue) == 0x000000, "Member 'SteamProUser_BIsTwoFactorEnabled::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.BLoggedOn
// 0x0001 (0x0001 - 0x0000)
struct SteamProUser_BLoggedOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_BLoggedOn) == 0x000001, "Wrong alignment on SteamProUser_BLoggedOn");
static_assert(sizeof(SteamProUser_BLoggedOn) == 0x000001, "Wrong size on SteamProUser_BLoggedOn");
static_assert(offsetof(SteamProUser_BLoggedOn, ReturnValue) == 0x000000, "Member 'SteamProUser_BLoggedOn::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.CancelAuthTicket
// 0x0004 (0x0004 - 0x0000)
struct SteamProUser_CancelAuthTicket final
{
public:
	struct FSteamTicketHandle                     TicketHandle;                                      // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_CancelAuthTicket) == 0x000004, "Wrong alignment on SteamProUser_CancelAuthTicket");
static_assert(sizeof(SteamProUser_CancelAuthTicket) == 0x000004, "Wrong size on SteamProUser_CancelAuthTicket");
static_assert(offsetof(SteamProUser_CancelAuthTicket, TicketHandle) == 0x000000, "Member 'SteamProUser_CancelAuthTicket::TicketHandle' has a wrong offset!");

// Function SteamCorePro.SteamProUser.DecompressVoice
// 0x0030 (0x0030 - 0x0000)
struct SteamProUser_DecompressVoice final
{
public:
	TArray<uint8>                                 CompressedBuffer;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         DesiredSampleRate;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244A[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 DestBuffer;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESteamVoiceResult                             ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244B[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUser_DecompressVoice) == 0x000008, "Wrong alignment on SteamProUser_DecompressVoice");
static_assert(sizeof(SteamProUser_DecompressVoice) == 0x000030, "Wrong size on SteamProUser_DecompressVoice");
static_assert(offsetof(SteamProUser_DecompressVoice, CompressedBuffer) == 0x000000, "Member 'SteamProUser_DecompressVoice::CompressedBuffer' has a wrong offset!");
static_assert(offsetof(SteamProUser_DecompressVoice, DesiredSampleRate) == 0x000010, "Member 'SteamProUser_DecompressVoice::DesiredSampleRate' has a wrong offset!");
static_assert(offsetof(SteamProUser_DecompressVoice, DestBuffer) == 0x000018, "Member 'SteamProUser_DecompressVoice::DestBuffer' has a wrong offset!");
static_assert(offsetof(SteamProUser_DecompressVoice, ReturnValue) == 0x000028, "Member 'SteamProUser_DecompressVoice::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.EndAuthSession
// 0x0008 (0x0008 - 0x0000)
struct SteamProUser_EndAuthSession final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_EndAuthSession) == 0x000008, "Wrong alignment on SteamProUser_EndAuthSession");
static_assert(sizeof(SteamProUser_EndAuthSession) == 0x000008, "Wrong size on SteamProUser_EndAuthSession");
static_assert(offsetof(SteamProUser_EndAuthSession, SteamID) == 0x000000, "Member 'SteamProUser_EndAuthSession::SteamID' has a wrong offset!");

// Function SteamCorePro.SteamProUser.GetAuthSessionTicket
// 0x00A0 (0x00A0 - 0x0000)
struct SteamProUser_GetAuthSessionTicket final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSteamNetworkingIdentity               SteamNetworkingIdentity;                           // 0x0010(0x0088)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamTicketHandle                     ReturnValue;                                       // 0x0098(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_244C[0x4];                                     // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUser_GetAuthSessionTicket) == 0x000008, "Wrong alignment on SteamProUser_GetAuthSessionTicket");
static_assert(sizeof(SteamProUser_GetAuthSessionTicket) == 0x0000A0, "Wrong size on SteamProUser_GetAuthSessionTicket");
static_assert(offsetof(SteamProUser_GetAuthSessionTicket, Ticket) == 0x000000, "Member 'SteamProUser_GetAuthSessionTicket::Ticket' has a wrong offset!");
static_assert(offsetof(SteamProUser_GetAuthSessionTicket, SteamNetworkingIdentity) == 0x000010, "Member 'SteamProUser_GetAuthSessionTicket::SteamNetworkingIdentity' has a wrong offset!");
static_assert(offsetof(SteamProUser_GetAuthSessionTicket, ReturnValue) == 0x000098, "Member 'SteamProUser_GetAuthSessionTicket::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.GetAuthTicketForWebApi
// 0x0018 (0x0018 - 0x0000)
struct SteamProUser_GetAuthTicketForWebApi final
{
public:
	class FString                                 Identity;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamTicketHandle                     ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_244D[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUser_GetAuthTicketForWebApi) == 0x000008, "Wrong alignment on SteamProUser_GetAuthTicketForWebApi");
static_assert(sizeof(SteamProUser_GetAuthTicketForWebApi) == 0x000018, "Wrong size on SteamProUser_GetAuthTicketForWebApi");
static_assert(offsetof(SteamProUser_GetAuthTicketForWebApi, Identity) == 0x000000, "Member 'SteamProUser_GetAuthTicketForWebApi::Identity' has a wrong offset!");
static_assert(offsetof(SteamProUser_GetAuthTicketForWebApi, ReturnValue) == 0x000010, "Member 'SteamProUser_GetAuthTicketForWebApi::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.GetAvailableVoice
// 0x0010 (0x0010 - 0x0000)
struct SteamProUser_GetAvailableVoice final
{
public:
	int32                                         CompressedBytes;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UncompressedBytes;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UncompressedVoiceDesiredSampleRate;                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamVoiceResult                             ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244E[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUser_GetAvailableVoice) == 0x000004, "Wrong alignment on SteamProUser_GetAvailableVoice");
static_assert(sizeof(SteamProUser_GetAvailableVoice) == 0x000010, "Wrong size on SteamProUser_GetAvailableVoice");
static_assert(offsetof(SteamProUser_GetAvailableVoice, CompressedBytes) == 0x000000, "Member 'SteamProUser_GetAvailableVoice::CompressedBytes' has a wrong offset!");
static_assert(offsetof(SteamProUser_GetAvailableVoice, UncompressedBytes) == 0x000004, "Member 'SteamProUser_GetAvailableVoice::UncompressedBytes' has a wrong offset!");
static_assert(offsetof(SteamProUser_GetAvailableVoice, UncompressedVoiceDesiredSampleRate) == 0x000008, "Member 'SteamProUser_GetAvailableVoice::UncompressedVoiceDesiredSampleRate' has a wrong offset!");
static_assert(offsetof(SteamProUser_GetAvailableVoice, ReturnValue) == 0x00000C, "Member 'SteamProUser_GetAvailableVoice::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.GetEncryptedAppTicket
// 0x0018 (0x0018 - 0x0000)
struct SteamProUser_GetEncryptedAppTicket final
{
public:
	TArray<uint8>                                 Ticket;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUser_GetEncryptedAppTicket) == 0x000008, "Wrong alignment on SteamProUser_GetEncryptedAppTicket");
static_assert(sizeof(SteamProUser_GetEncryptedAppTicket) == 0x000018, "Wrong size on SteamProUser_GetEncryptedAppTicket");
static_assert(offsetof(SteamProUser_GetEncryptedAppTicket, Ticket) == 0x000000, "Member 'SteamProUser_GetEncryptedAppTicket::Ticket' has a wrong offset!");
static_assert(offsetof(SteamProUser_GetEncryptedAppTicket, ReturnValue) == 0x000010, "Member 'SteamProUser_GetEncryptedAppTicket::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.GetGameBadgeLevel
// 0x000C (0x000C - 0x0000)
struct SteamProUser_GetGameBadgeLevel final
{
public:
	int32                                         Series;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoil;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2450[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_GetGameBadgeLevel) == 0x000004, "Wrong alignment on SteamProUser_GetGameBadgeLevel");
static_assert(sizeof(SteamProUser_GetGameBadgeLevel) == 0x00000C, "Wrong size on SteamProUser_GetGameBadgeLevel");
static_assert(offsetof(SteamProUser_GetGameBadgeLevel, Series) == 0x000000, "Member 'SteamProUser_GetGameBadgeLevel::Series' has a wrong offset!");
static_assert(offsetof(SteamProUser_GetGameBadgeLevel, bFoil) == 0x000004, "Member 'SteamProUser_GetGameBadgeLevel::bFoil' has a wrong offset!");
static_assert(offsetof(SteamProUser_GetGameBadgeLevel, ReturnValue) == 0x000008, "Member 'SteamProUser_GetGameBadgeLevel::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.GetPlayerSteamLevel
// 0x0004 (0x0004 - 0x0000)
struct SteamProUser_GetPlayerSteamLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_GetPlayerSteamLevel) == 0x000004, "Wrong alignment on SteamProUser_GetPlayerSteamLevel");
static_assert(sizeof(SteamProUser_GetPlayerSteamLevel) == 0x000004, "Wrong size on SteamProUser_GetPlayerSteamLevel");
static_assert(offsetof(SteamProUser_GetPlayerSteamLevel, ReturnValue) == 0x000000, "Member 'SteamProUser_GetPlayerSteamLevel::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.GetSteamID
// 0x0008 (0x0008 - 0x0000)
struct SteamProUser_GetSteamID final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_GetSteamID) == 0x000008, "Wrong alignment on SteamProUser_GetSteamID");
static_assert(sizeof(SteamProUser_GetSteamID) == 0x000008, "Wrong size on SteamProUser_GetSteamID");
static_assert(offsetof(SteamProUser_GetSteamID, ReturnValue) == 0x000000, "Member 'SteamProUser_GetSteamID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.GetSteamID_Pure
// 0x0008 (0x0008 - 0x0000)
struct SteamProUser_GetSteamID_Pure final
{
public:
	struct FSteamID                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_GetSteamID_Pure) == 0x000008, "Wrong alignment on SteamProUser_GetSteamID_Pure");
static_assert(sizeof(SteamProUser_GetSteamID_Pure) == 0x000008, "Wrong size on SteamProUser_GetSteamID_Pure");
static_assert(offsetof(SteamProUser_GetSteamID_Pure, ReturnValue) == 0x000000, "Member 'SteamProUser_GetSteamID_Pure::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.GetSteamUser
// 0x0008 (0x0008 - 0x0000)
struct SteamProUser_GetSteamUser final
{
public:
	class USteamProUser*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_GetSteamUser) == 0x000008, "Wrong alignment on SteamProUser_GetSteamUser");
static_assert(sizeof(SteamProUser_GetSteamUser) == 0x000008, "Wrong size on SteamProUser_GetSteamUser");
static_assert(offsetof(SteamProUser_GetSteamUser, ReturnValue) == 0x000000, "Member 'SteamProUser_GetSteamUser::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.GetVoice
// 0x0018 (0x0018 - 0x0000)
struct SteamProUser_GetVoice final
{
public:
	TArray<uint8>                                 DestBuffer;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BytesWritten;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamVoiceResult                             ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2451[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUser_GetVoice) == 0x000008, "Wrong alignment on SteamProUser_GetVoice");
static_assert(sizeof(SteamProUser_GetVoice) == 0x000018, "Wrong size on SteamProUser_GetVoice");
static_assert(offsetof(SteamProUser_GetVoice, DestBuffer) == 0x000000, "Member 'SteamProUser_GetVoice::DestBuffer' has a wrong offset!");
static_assert(offsetof(SteamProUser_GetVoice, BytesWritten) == 0x000010, "Member 'SteamProUser_GetVoice::BytesWritten' has a wrong offset!");
static_assert(offsetof(SteamProUser_GetVoice, ReturnValue) == 0x000014, "Member 'SteamProUser_GetVoice::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.GetVoiceOptimalSampleRate
// 0x0004 (0x0004 - 0x0000)
struct SteamProUser_GetVoiceOptimalSampleRate final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_GetVoiceOptimalSampleRate) == 0x000004, "Wrong alignment on SteamProUser_GetVoiceOptimalSampleRate");
static_assert(sizeof(SteamProUser_GetVoiceOptimalSampleRate) == 0x000004, "Wrong size on SteamProUser_GetVoiceOptimalSampleRate");
static_assert(offsetof(SteamProUser_GetVoiceOptimalSampleRate, ReturnValue) == 0x000000, "Member 'SteamProUser_GetVoiceOptimalSampleRate::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.UserHasLicenseForApp
// 0x0010 (0x0010 - 0x0000)
struct SteamProUser_UserHasLicenseForApp final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamUserHasLicenseForAppResult              ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2452[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUser_UserHasLicenseForApp) == 0x000008, "Wrong alignment on SteamProUser_UserHasLicenseForApp");
static_assert(sizeof(SteamProUser_UserHasLicenseForApp) == 0x000010, "Wrong size on SteamProUser_UserHasLicenseForApp");
static_assert(offsetof(SteamProUser_UserHasLicenseForApp, SteamID) == 0x000000, "Member 'SteamProUser_UserHasLicenseForApp::SteamID' has a wrong offset!");
static_assert(offsetof(SteamProUser_UserHasLicenseForApp, AppID) == 0x000008, "Member 'SteamProUser_UserHasLicenseForApp::AppID' has a wrong offset!");
static_assert(offsetof(SteamProUser_UserHasLicenseForApp, ReturnValue) == 0x00000C, "Member 'SteamProUser_UserHasLicenseForApp::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUser.RequestEncryptedAppTicket
// 0x0020 (0x0020 - 0x0000)
struct SteamProUser_RequestEncryptedAppTicket final
{
public:
	TDelegate<void(struct FEncryptedAppTicketResponse& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 DataToInclude;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_RequestEncryptedAppTicket) == 0x000008, "Wrong alignment on SteamProUser_RequestEncryptedAppTicket");
static_assert(sizeof(SteamProUser_RequestEncryptedAppTicket) == 0x000020, "Wrong size on SteamProUser_RequestEncryptedAppTicket");
static_assert(offsetof(SteamProUser_RequestEncryptedAppTicket, Callback) == 0x000000, "Member 'SteamProUser_RequestEncryptedAppTicket::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUser_RequestEncryptedAppTicket, DataToInclude) == 0x000010, "Member 'SteamProUser_RequestEncryptedAppTicket::DataToInclude' has a wrong offset!");

// Function SteamCorePro.SteamProUser.RequestStoreAuthURL
// 0x0020 (0x0020 - 0x0000)
struct SteamProUser_RequestStoreAuthURL final
{
public:
	TDelegate<void(struct FStoreAuthURLResponse& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectURL;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUser_RequestStoreAuthURL) == 0x000008, "Wrong alignment on SteamProUser_RequestStoreAuthURL");
static_assert(sizeof(SteamProUser_RequestStoreAuthURL) == 0x000020, "Wrong size on SteamProUser_RequestStoreAuthURL");
static_assert(offsetof(SteamProUser_RequestStoreAuthURL, Callback) == 0x000000, "Member 'SteamProUser_RequestStoreAuthURL::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUser_RequestStoreAuthURL, RedirectURL) == 0x000010, "Member 'SteamProUser_RequestStoreAuthURL::RedirectURL' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserAsyncActionRequestEncryptedAppTicket.RequestEncryptedAppTicketAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 DataToInclude;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2453[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUserAsyncActionRequestEncryptedAppTicket* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync) == 0x000008, "Wrong alignment on SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync");
static_assert(sizeof(SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync) == 0x000028, "Wrong size on SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync");
static_assert(offsetof(SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync, DataToInclude) == 0x000008, "Member 'SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync::DataToInclude' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync, Timeout) == 0x000018, "Member 'SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProUserAsyncActionRequestEncryptedAppTicket_RequestEncryptedAppTicketAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserAsyncActionRequestEncryptedAppTicket.HandleCallback
// 0x0002 (0x0002 - 0x0000)
struct SteamCoreProUserAsyncActionRequestEncryptedAppTicket_HandleCallback final
{
public:
	struct FEncryptedAppTicketResponse            Data;                                              // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserAsyncActionRequestEncryptedAppTicket_HandleCallback) == 0x000001, "Wrong alignment on SteamCoreProUserAsyncActionRequestEncryptedAppTicket_HandleCallback");
static_assert(sizeof(SteamCoreProUserAsyncActionRequestEncryptedAppTicket_HandleCallback) == 0x000002, "Wrong size on SteamCoreProUserAsyncActionRequestEncryptedAppTicket_HandleCallback");
static_assert(offsetof(SteamCoreProUserAsyncActionRequestEncryptedAppTicket_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserAsyncActionRequestEncryptedAppTicket_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserAsyncActionRequestEncryptedAppTicket_HandleCallback, bWasSuccessful) == 0x000001, "Member 'SteamCoreProUserAsyncActionRequestEncryptedAppTicket_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserAsyncActionRequestStoreAuthURL.RequestStoreAuthURLAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectURL;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2454[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUserAsyncActionRequestStoreAuthURL* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync) == 0x000008, "Wrong alignment on SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync");
static_assert(sizeof(SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync) == 0x000028, "Wrong size on SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync");
static_assert(offsetof(SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync, RedirectURL) == 0x000008, "Member 'SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync::RedirectURL' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync, Timeout) == 0x000018, "Member 'SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProUserAsyncActionRequestStoreAuthURL_RequestStoreAuthURLAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserAsyncActionRequestStoreAuthURL.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUserAsyncActionRequestStoreAuthURL_HandleCallback final
{
public:
	struct FStoreAuthURLResponse                  Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2455[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUserAsyncActionRequestStoreAuthURL_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUserAsyncActionRequestStoreAuthURL_HandleCallback");
static_assert(sizeof(SteamCoreProUserAsyncActionRequestStoreAuthURL_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUserAsyncActionRequestStoreAuthURL_HandleCallback");
static_assert(offsetof(SteamCoreProUserAsyncActionRequestStoreAuthURL_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserAsyncActionRequestStoreAuthURL_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserAsyncActionRequestStoreAuthURL_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUserAsyncActionRequestStoreAuthURL_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.ClearAchievement
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_ClearAchievement final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2457[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_ClearAchievement) == 0x000008, "Wrong alignment on SteamProUserStats_ClearAchievement");
static_assert(sizeof(SteamProUserStats_ClearAchievement) == 0x000018, "Wrong size on SteamProUserStats_ClearAchievement");
static_assert(offsetof(SteamProUserStats_ClearAchievement, Param_Name) == 0x000000, "Member 'SteamProUserStats_ClearAchievement::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_ClearAchievement, ReturnValue) == 0x000010, "Member 'SteamProUserStats_ClearAchievement::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetAchievement
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_GetAchievement final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2458[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetAchievement) == 0x000008, "Wrong alignment on SteamProUserStats_GetAchievement");
static_assert(sizeof(SteamProUserStats_GetAchievement) == 0x000018, "Wrong size on SteamProUserStats_GetAchievement");
static_assert(offsetof(SteamProUserStats_GetAchievement, Param_Name) == 0x000000, "Member 'SteamProUserStats_GetAchievement::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievement, bAchieved) == 0x000010, "Member 'SteamProUserStats_GetAchievement::bAchieved' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievement, ReturnValue) == 0x000011, "Member 'SteamProUserStats_GetAchievement::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetAchievementAchievedPercent
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_GetAchievementAchievedPercent final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2459[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetAchievementAchievedPercent) == 0x000008, "Wrong alignment on SteamProUserStats_GetAchievementAchievedPercent");
static_assert(sizeof(SteamProUserStats_GetAchievementAchievedPercent) == 0x000018, "Wrong size on SteamProUserStats_GetAchievementAchievedPercent");
static_assert(offsetof(SteamProUserStats_GetAchievementAchievedPercent, Param_Name) == 0x000000, "Member 'SteamProUserStats_GetAchievementAchievedPercent::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementAchievedPercent, Percent) == 0x000010, "Member 'SteamProUserStats_GetAchievementAchievedPercent::Percent' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementAchievedPercent, ReturnValue) == 0x000014, "Member 'SteamProUserStats_GetAchievementAchievedPercent::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetAchievementAndUnlockTime
// 0x0020 (0x0020 - 0x0000)
struct SteamProUserStats_GetAchievementAndUnlockTime final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245A[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockTime;                                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245B[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetAchievementAndUnlockTime) == 0x000008, "Wrong alignment on SteamProUserStats_GetAchievementAndUnlockTime");
static_assert(sizeof(SteamProUserStats_GetAchievementAndUnlockTime) == 0x000020, "Wrong size on SteamProUserStats_GetAchievementAndUnlockTime");
static_assert(offsetof(SteamProUserStats_GetAchievementAndUnlockTime, Param_Name) == 0x000000, "Member 'SteamProUserStats_GetAchievementAndUnlockTime::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementAndUnlockTime, bAchieved) == 0x000010, "Member 'SteamProUserStats_GetAchievementAndUnlockTime::bAchieved' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementAndUnlockTime, UnlockTime) == 0x000014, "Member 'SteamProUserStats_GetAchievementAndUnlockTime::UnlockTime' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementAndUnlockTime, ReturnValue) == 0x000018, "Member 'SteamProUserStats_GetAchievementAndUnlockTime::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetAchievementDisplayAttribute
// 0x0030 (0x0030 - 0x0000)
struct SteamProUserStats_GetAchievementDisplayAttribute final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_GetAchievementDisplayAttribute) == 0x000008, "Wrong alignment on SteamProUserStats_GetAchievementDisplayAttribute");
static_assert(sizeof(SteamProUserStats_GetAchievementDisplayAttribute) == 0x000030, "Wrong size on SteamProUserStats_GetAchievementDisplayAttribute");
static_assert(offsetof(SteamProUserStats_GetAchievementDisplayAttribute, Param_Name) == 0x000000, "Member 'SteamProUserStats_GetAchievementDisplayAttribute::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementDisplayAttribute, Key) == 0x000010, "Member 'SteamProUserStats_GetAchievementDisplayAttribute::Key' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementDisplayAttribute, ReturnValue) == 0x000020, "Member 'SteamProUserStats_GetAchievementDisplayAttribute::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetAchievementIcon
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_GetAchievementIcon final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_GetAchievementIcon) == 0x000008, "Wrong alignment on SteamProUserStats_GetAchievementIcon");
static_assert(sizeof(SteamProUserStats_GetAchievementIcon) == 0x000018, "Wrong size on SteamProUserStats_GetAchievementIcon");
static_assert(offsetof(SteamProUserStats_GetAchievementIcon, Param_Name) == 0x000000, "Member 'SteamProUserStats_GetAchievementIcon::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementIcon, ReturnValue) == 0x000010, "Member 'SteamProUserStats_GetAchievementIcon::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetAchievementName
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_GetAchievementName final
{
public:
	int32                                         Achievement;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_GetAchievementName) == 0x000008, "Wrong alignment on SteamProUserStats_GetAchievementName");
static_assert(sizeof(SteamProUserStats_GetAchievementName) == 0x000018, "Wrong size on SteamProUserStats_GetAchievementName");
static_assert(offsetof(SteamProUserStats_GetAchievementName, Achievement) == 0x000000, "Member 'SteamProUserStats_GetAchievementName::Achievement' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementName, ReturnValue) == 0x000008, "Member 'SteamProUserStats_GetAchievementName::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetAchievementProgressLimits
// 0x0020 (0x0020 - 0x0000)
struct SteamProUserStats_GetAchievementProgressLimits final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinProgress;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgress;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245D[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetAchievementProgressLimits) == 0x000008, "Wrong alignment on SteamProUserStats_GetAchievementProgressLimits");
static_assert(sizeof(SteamProUserStats_GetAchievementProgressLimits) == 0x000020, "Wrong size on SteamProUserStats_GetAchievementProgressLimits");
static_assert(offsetof(SteamProUserStats_GetAchievementProgressLimits, Param_Name) == 0x000000, "Member 'SteamProUserStats_GetAchievementProgressLimits::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementProgressLimits, MinProgress) == 0x000010, "Member 'SteamProUserStats_GetAchievementProgressLimits::MinProgress' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementProgressLimits, MaxProgress) == 0x000014, "Member 'SteamProUserStats_GetAchievementProgressLimits::MaxProgress' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementProgressLimits, ReturnValue) == 0x000018, "Member 'SteamProUserStats_GetAchievementProgressLimits::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetAchievementProgressLimitsFloat
// 0x0020 (0x0020 - 0x0000)
struct SteamProUserStats_GetAchievementProgressLimitsFloat final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinProgress;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxProgress;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245E[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetAchievementProgressLimitsFloat) == 0x000008, "Wrong alignment on SteamProUserStats_GetAchievementProgressLimitsFloat");
static_assert(sizeof(SteamProUserStats_GetAchievementProgressLimitsFloat) == 0x000020, "Wrong size on SteamProUserStats_GetAchievementProgressLimitsFloat");
static_assert(offsetof(SteamProUserStats_GetAchievementProgressLimitsFloat, Param_Name) == 0x000000, "Member 'SteamProUserStats_GetAchievementProgressLimitsFloat::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementProgressLimitsFloat, MinProgress) == 0x000010, "Member 'SteamProUserStats_GetAchievementProgressLimitsFloat::MinProgress' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementProgressLimitsFloat, MaxProgress) == 0x000014, "Member 'SteamProUserStats_GetAchievementProgressLimitsFloat::MaxProgress' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetAchievementProgressLimitsFloat, ReturnValue) == 0x000018, "Member 'SteamProUserStats_GetAchievementProgressLimitsFloat::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetDownloadedLeaderboardEntry
// 0x0058 (0x0058 - 0x0000)
struct SteamProUserStats_GetDownloadedLeaderboardEntry final
{
public:
	struct FSteamLeaderboardEntries               LeaderboardEntries;                                // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamLeaderboardEntry                 LeaderboardEntry;                                  // 0x0010(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Details;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutDetails;                                        // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2460[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetDownloadedLeaderboardEntry) == 0x000008, "Wrong alignment on SteamProUserStats_GetDownloadedLeaderboardEntry");
static_assert(sizeof(SteamProUserStats_GetDownloadedLeaderboardEntry) == 0x000058, "Wrong size on SteamProUserStats_GetDownloadedLeaderboardEntry");
static_assert(offsetof(SteamProUserStats_GetDownloadedLeaderboardEntry, LeaderboardEntries) == 0x000000, "Member 'SteamProUserStats_GetDownloadedLeaderboardEntry::LeaderboardEntries' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetDownloadedLeaderboardEntry, Param_Index) == 0x000008, "Member 'SteamProUserStats_GetDownloadedLeaderboardEntry::Param_Index' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetDownloadedLeaderboardEntry, LeaderboardEntry) == 0x000010, "Member 'SteamProUserStats_GetDownloadedLeaderboardEntry::LeaderboardEntry' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetDownloadedLeaderboardEntry, Details) == 0x000030, "Member 'SteamProUserStats_GetDownloadedLeaderboardEntry::Details' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetDownloadedLeaderboardEntry, OutDetails) == 0x000040, "Member 'SteamProUserStats_GetDownloadedLeaderboardEntry::OutDetails' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetDownloadedLeaderboardEntry, ReturnValue) == 0x000050, "Member 'SteamProUserStats_GetDownloadedLeaderboardEntry::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetGlobalStatFloat
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_GetGlobalStatFloat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2461[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetGlobalStatFloat) == 0x000008, "Wrong alignment on SteamProUserStats_GetGlobalStatFloat");
static_assert(sizeof(SteamProUserStats_GetGlobalStatFloat) == 0x000018, "Wrong size on SteamProUserStats_GetGlobalStatFloat");
static_assert(offsetof(SteamProUserStats_GetGlobalStatFloat, StatName) == 0x000000, "Member 'SteamProUserStats_GetGlobalStatFloat::StatName' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetGlobalStatFloat, Data) == 0x000010, "Member 'SteamProUserStats_GetGlobalStatFloat::Data' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetGlobalStatFloat, ReturnValue) == 0x000014, "Member 'SteamProUserStats_GetGlobalStatFloat::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetGlobalStatHistoryFloat
// 0x0030 (0x0030 - 0x0000)
struct SteamProUserStats_GetGlobalStatHistoryFloat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HistoryDays;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2462[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Data;                                              // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2463[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetGlobalStatHistoryFloat) == 0x000008, "Wrong alignment on SteamProUserStats_GetGlobalStatHistoryFloat");
static_assert(sizeof(SteamProUserStats_GetGlobalStatHistoryFloat) == 0x000030, "Wrong size on SteamProUserStats_GetGlobalStatHistoryFloat");
static_assert(offsetof(SteamProUserStats_GetGlobalStatHistoryFloat, StatName) == 0x000000, "Member 'SteamProUserStats_GetGlobalStatHistoryFloat::StatName' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetGlobalStatHistoryFloat, HistoryDays) == 0x000010, "Member 'SteamProUserStats_GetGlobalStatHistoryFloat::HistoryDays' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetGlobalStatHistoryFloat, Data) == 0x000018, "Member 'SteamProUserStats_GetGlobalStatHistoryFloat::Data' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetGlobalStatHistoryFloat, ReturnValue) == 0x000028, "Member 'SteamProUserStats_GetGlobalStatHistoryFloat::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetGlobalStatHistoryInt
// 0x0030 (0x0030 - 0x0000)
struct SteamProUserStats_GetGlobalStatHistoryInt final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HistoryDays;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2464[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Data;                                              // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2465[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetGlobalStatHistoryInt) == 0x000008, "Wrong alignment on SteamProUserStats_GetGlobalStatHistoryInt");
static_assert(sizeof(SteamProUserStats_GetGlobalStatHistoryInt) == 0x000030, "Wrong size on SteamProUserStats_GetGlobalStatHistoryInt");
static_assert(offsetof(SteamProUserStats_GetGlobalStatHistoryInt, StatName) == 0x000000, "Member 'SteamProUserStats_GetGlobalStatHistoryInt::StatName' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetGlobalStatHistoryInt, HistoryDays) == 0x000010, "Member 'SteamProUserStats_GetGlobalStatHistoryInt::HistoryDays' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetGlobalStatHistoryInt, Data) == 0x000018, "Member 'SteamProUserStats_GetGlobalStatHistoryInt::Data' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetGlobalStatHistoryInt, ReturnValue) == 0x000028, "Member 'SteamProUserStats_GetGlobalStatHistoryInt::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetGlobalStatInt
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_GetGlobalStatInt final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2466[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetGlobalStatInt) == 0x000008, "Wrong alignment on SteamProUserStats_GetGlobalStatInt");
static_assert(sizeof(SteamProUserStats_GetGlobalStatInt) == 0x000018, "Wrong size on SteamProUserStats_GetGlobalStatInt");
static_assert(offsetof(SteamProUserStats_GetGlobalStatInt, StatName) == 0x000000, "Member 'SteamProUserStats_GetGlobalStatInt::StatName' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetGlobalStatInt, Data) == 0x000010, "Member 'SteamProUserStats_GetGlobalStatInt::Data' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetGlobalStatInt, ReturnValue) == 0x000014, "Member 'SteamProUserStats_GetGlobalStatInt::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetLeaderboardDisplayType
// 0x0010 (0x0010 - 0x0000)
struct SteamProUserStats_GetLeaderboardDisplayType final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamLeaderboardDisplayType                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2467[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetLeaderboardDisplayType) == 0x000008, "Wrong alignment on SteamProUserStats_GetLeaderboardDisplayType");
static_assert(sizeof(SteamProUserStats_GetLeaderboardDisplayType) == 0x000010, "Wrong size on SteamProUserStats_GetLeaderboardDisplayType");
static_assert(offsetof(SteamProUserStats_GetLeaderboardDisplayType, SteamLeaderboard) == 0x000000, "Member 'SteamProUserStats_GetLeaderboardDisplayType::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetLeaderboardDisplayType, ReturnValue) == 0x000008, "Member 'SteamProUserStats_GetLeaderboardDisplayType::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetLeaderboardEntryCount
// 0x0010 (0x0010 - 0x0000)
struct SteamProUserStats_GetLeaderboardEntryCount final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2468[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetLeaderboardEntryCount) == 0x000008, "Wrong alignment on SteamProUserStats_GetLeaderboardEntryCount");
static_assert(sizeof(SteamProUserStats_GetLeaderboardEntryCount) == 0x000010, "Wrong size on SteamProUserStats_GetLeaderboardEntryCount");
static_assert(offsetof(SteamProUserStats_GetLeaderboardEntryCount, SteamLeaderboard) == 0x000000, "Member 'SteamProUserStats_GetLeaderboardEntryCount::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetLeaderboardEntryCount, ReturnValue) == 0x000008, "Member 'SteamProUserStats_GetLeaderboardEntryCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetLeaderboardName
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_GetLeaderboardName final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_GetLeaderboardName) == 0x000008, "Wrong alignment on SteamProUserStats_GetLeaderboardName");
static_assert(sizeof(SteamProUserStats_GetLeaderboardName) == 0x000018, "Wrong size on SteamProUserStats_GetLeaderboardName");
static_assert(offsetof(SteamProUserStats_GetLeaderboardName, SteamLeaderboard) == 0x000000, "Member 'SteamProUserStats_GetLeaderboardName::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetLeaderboardName, ReturnValue) == 0x000008, "Member 'SteamProUserStats_GetLeaderboardName::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetLeaderboardSortMethod
// 0x0010 (0x0010 - 0x0000)
struct SteamProUserStats_GetLeaderboardSortMethod final
{
public:
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamLeaderboardSortMethod                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2469[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetLeaderboardSortMethod) == 0x000008, "Wrong alignment on SteamProUserStats_GetLeaderboardSortMethod");
static_assert(sizeof(SteamProUserStats_GetLeaderboardSortMethod) == 0x000010, "Wrong size on SteamProUserStats_GetLeaderboardSortMethod");
static_assert(offsetof(SteamProUserStats_GetLeaderboardSortMethod, SteamLeaderboard) == 0x000000, "Member 'SteamProUserStats_GetLeaderboardSortMethod::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetLeaderboardSortMethod, ReturnValue) == 0x000008, "Member 'SteamProUserStats_GetLeaderboardSortMethod::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetMostAchievedAchievementInfo
// 0x0020 (0x0020 - 0x0000)
struct SteamProUserStats_GetMostAchievedAchievementInfo final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246A[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246B[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetMostAchievedAchievementInfo) == 0x000008, "Wrong alignment on SteamProUserStats_GetMostAchievedAchievementInfo");
static_assert(sizeof(SteamProUserStats_GetMostAchievedAchievementInfo) == 0x000020, "Wrong size on SteamProUserStats_GetMostAchievedAchievementInfo");
static_assert(offsetof(SteamProUserStats_GetMostAchievedAchievementInfo, Param_Name) == 0x000000, "Member 'SteamProUserStats_GetMostAchievedAchievementInfo::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetMostAchievedAchievementInfo, Percent) == 0x000010, "Member 'SteamProUserStats_GetMostAchievedAchievementInfo::Percent' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetMostAchievedAchievementInfo, bAchieved) == 0x000014, "Member 'SteamProUserStats_GetMostAchievedAchievementInfo::bAchieved' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetMostAchievedAchievementInfo, ReturnValue) == 0x000018, "Member 'SteamProUserStats_GetMostAchievedAchievementInfo::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetNextMostAchievedAchievementInfo
// 0x0028 (0x0028 - 0x0000)
struct SteamProUserStats_GetNextMostAchievedAchievementInfo final
{
public:
	int32                                         IteratorPrevious;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246D[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246E[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetNextMostAchievedAchievementInfo) == 0x000008, "Wrong alignment on SteamProUserStats_GetNextMostAchievedAchievementInfo");
static_assert(sizeof(SteamProUserStats_GetNextMostAchievedAchievementInfo) == 0x000028, "Wrong size on SteamProUserStats_GetNextMostAchievedAchievementInfo");
static_assert(offsetof(SteamProUserStats_GetNextMostAchievedAchievementInfo, IteratorPrevious) == 0x000000, "Member 'SteamProUserStats_GetNextMostAchievedAchievementInfo::IteratorPrevious' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetNextMostAchievedAchievementInfo, Param_Name) == 0x000008, "Member 'SteamProUserStats_GetNextMostAchievedAchievementInfo::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetNextMostAchievedAchievementInfo, Percent) == 0x000018, "Member 'SteamProUserStats_GetNextMostAchievedAchievementInfo::Percent' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetNextMostAchievedAchievementInfo, bAchieved) == 0x00001C, "Member 'SteamProUserStats_GetNextMostAchievedAchievementInfo::bAchieved' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetNextMostAchievedAchievementInfo, ReturnValue) == 0x000020, "Member 'SteamProUserStats_GetNextMostAchievedAchievementInfo::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetNumAchievements
// 0x0004 (0x0004 - 0x0000)
struct SteamProUserStats_GetNumAchievements final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_GetNumAchievements) == 0x000004, "Wrong alignment on SteamProUserStats_GetNumAchievements");
static_assert(sizeof(SteamProUserStats_GetNumAchievements) == 0x000004, "Wrong size on SteamProUserStats_GetNumAchievements");
static_assert(offsetof(SteamProUserStats_GetNumAchievements, ReturnValue) == 0x000000, "Member 'SteamProUserStats_GetNumAchievements::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetStatFloat
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_GetStatFloat final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246F[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetStatFloat) == 0x000008, "Wrong alignment on SteamProUserStats_GetStatFloat");
static_assert(sizeof(SteamProUserStats_GetStatFloat) == 0x000018, "Wrong size on SteamProUserStats_GetStatFloat");
static_assert(offsetof(SteamProUserStats_GetStatFloat, Param_Name) == 0x000000, "Member 'SteamProUserStats_GetStatFloat::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetStatFloat, Data) == 0x000010, "Member 'SteamProUserStats_GetStatFloat::Data' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetStatFloat, ReturnValue) == 0x000014, "Member 'SteamProUserStats_GetStatFloat::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetStatInt
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_GetStatInt final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2470[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetStatInt) == 0x000008, "Wrong alignment on SteamProUserStats_GetStatInt");
static_assert(sizeof(SteamProUserStats_GetStatInt) == 0x000018, "Wrong size on SteamProUserStats_GetStatInt");
static_assert(offsetof(SteamProUserStats_GetStatInt, Param_Name) == 0x000000, "Member 'SteamProUserStats_GetStatInt::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetStatInt, Data) == 0x000010, "Member 'SteamProUserStats_GetStatInt::Data' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetStatInt, ReturnValue) == 0x000014, "Member 'SteamProUserStats_GetStatInt::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetSteamUserStats
// 0x0008 (0x0008 - 0x0000)
struct SteamProUserStats_GetSteamUserStats final
{
public:
	class USteamProUserStats*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_GetSteamUserStats) == 0x000008, "Wrong alignment on SteamProUserStats_GetSteamUserStats");
static_assert(sizeof(SteamProUserStats_GetSteamUserStats) == 0x000008, "Wrong size on SteamProUserStats_GetSteamUserStats");
static_assert(offsetof(SteamProUserStats_GetSteamUserStats, ReturnValue) == 0x000000, "Member 'SteamProUserStats_GetSteamUserStats::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetUserAchievement
// 0x0020 (0x0020 - 0x0000)
struct SteamProUserStats_GetUserAchievement final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2471[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetUserAchievement) == 0x000008, "Wrong alignment on SteamProUserStats_GetUserAchievement");
static_assert(sizeof(SteamProUserStats_GetUserAchievement) == 0x000020, "Wrong size on SteamProUserStats_GetUserAchievement");
static_assert(offsetof(SteamProUserStats_GetUserAchievement, SteamIDUser) == 0x000000, "Member 'SteamProUserStats_GetUserAchievement::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserAchievement, Param_Name) == 0x000008, "Member 'SteamProUserStats_GetUserAchievement::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserAchievement, bAchieved) == 0x000018, "Member 'SteamProUserStats_GetUserAchievement::bAchieved' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserAchievement, ReturnValue) == 0x000019, "Member 'SteamProUserStats_GetUserAchievement::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetUserAchievementAndUnlockTime
// 0x0028 (0x0028 - 0x0000)
struct SteamProUserStats_GetUserAchievementAndUnlockTime final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchieved;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2472[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockTime;                                        // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2473[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetUserAchievementAndUnlockTime) == 0x000008, "Wrong alignment on SteamProUserStats_GetUserAchievementAndUnlockTime");
static_assert(sizeof(SteamProUserStats_GetUserAchievementAndUnlockTime) == 0x000028, "Wrong size on SteamProUserStats_GetUserAchievementAndUnlockTime");
static_assert(offsetof(SteamProUserStats_GetUserAchievementAndUnlockTime, SteamIDUser) == 0x000000, "Member 'SteamProUserStats_GetUserAchievementAndUnlockTime::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserAchievementAndUnlockTime, Param_Name) == 0x000008, "Member 'SteamProUserStats_GetUserAchievementAndUnlockTime::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserAchievementAndUnlockTime, bAchieved) == 0x000018, "Member 'SteamProUserStats_GetUserAchievementAndUnlockTime::bAchieved' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserAchievementAndUnlockTime, UnlockTime) == 0x00001C, "Member 'SteamProUserStats_GetUserAchievementAndUnlockTime::UnlockTime' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserAchievementAndUnlockTime, ReturnValue) == 0x000020, "Member 'SteamProUserStats_GetUserAchievementAndUnlockTime::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetUserStatFloat
// 0x0020 (0x0020 - 0x0000)
struct SteamProUserStats_GetUserStatFloat final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2474[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetUserStatFloat) == 0x000008, "Wrong alignment on SteamProUserStats_GetUserStatFloat");
static_assert(sizeof(SteamProUserStats_GetUserStatFloat) == 0x000020, "Wrong size on SteamProUserStats_GetUserStatFloat");
static_assert(offsetof(SteamProUserStats_GetUserStatFloat, SteamIDUser) == 0x000000, "Member 'SteamProUserStats_GetUserStatFloat::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserStatFloat, Param_Name) == 0x000008, "Member 'SteamProUserStats_GetUserStatFloat::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserStatFloat, Data) == 0x000018, "Member 'SteamProUserStats_GetUserStatFloat::Data' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserStatFloat, ReturnValue) == 0x00001C, "Member 'SteamProUserStats_GetUserStatFloat::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetUserStatInteger
// 0x0020 (0x0020 - 0x0000)
struct SteamProUserStats_GetUserStatInteger final
{
public:
	struct FSteamID                               SteamIDUser;                                       // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Param_Name;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2475[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_GetUserStatInteger) == 0x000008, "Wrong alignment on SteamProUserStats_GetUserStatInteger");
static_assert(sizeof(SteamProUserStats_GetUserStatInteger) == 0x000020, "Wrong size on SteamProUserStats_GetUserStatInteger");
static_assert(offsetof(SteamProUserStats_GetUserStatInteger, SteamIDUser) == 0x000000, "Member 'SteamProUserStats_GetUserStatInteger::SteamIDUser' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserStatInteger, Param_Name) == 0x000008, "Member 'SteamProUserStats_GetUserStatInteger::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserStatInteger, Data) == 0x000018, "Member 'SteamProUserStats_GetUserStatInteger::Data' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_GetUserStatInteger, ReturnValue) == 0x00001C, "Member 'SteamProUserStats_GetUserStatInteger::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.IndicateAchievementProgress
// 0x0020 (0x0020 - 0x0000)
struct SteamProUserStats_IndicateAchievementProgress final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentProgress;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgress;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2476[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_IndicateAchievementProgress) == 0x000008, "Wrong alignment on SteamProUserStats_IndicateAchievementProgress");
static_assert(sizeof(SteamProUserStats_IndicateAchievementProgress) == 0x000020, "Wrong size on SteamProUserStats_IndicateAchievementProgress");
static_assert(offsetof(SteamProUserStats_IndicateAchievementProgress, Param_Name) == 0x000000, "Member 'SteamProUserStats_IndicateAchievementProgress::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_IndicateAchievementProgress, CurrentProgress) == 0x000010, "Member 'SteamProUserStats_IndicateAchievementProgress::CurrentProgress' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_IndicateAchievementProgress, MaxProgress) == 0x000014, "Member 'SteamProUserStats_IndicateAchievementProgress::MaxProgress' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_IndicateAchievementProgress, ReturnValue) == 0x000018, "Member 'SteamProUserStats_IndicateAchievementProgress::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.RequestCurrentStats
// 0x0001 (0x0001 - 0x0000)
struct SteamProUserStats_RequestCurrentStats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_RequestCurrentStats) == 0x000001, "Wrong alignment on SteamProUserStats_RequestCurrentStats");
static_assert(sizeof(SteamProUserStats_RequestCurrentStats) == 0x000001, "Wrong size on SteamProUserStats_RequestCurrentStats");
static_assert(offsetof(SteamProUserStats_RequestCurrentStats, ReturnValue) == 0x000000, "Member 'SteamProUserStats_RequestCurrentStats::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.ResetAllStats
// 0x0002 (0x0002 - 0x0000)
struct SteamProUserStats_ResetAllStats final
{
public:
	bool                                          bAchievementsToo;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_ResetAllStats) == 0x000001, "Wrong alignment on SteamProUserStats_ResetAllStats");
static_assert(sizeof(SteamProUserStats_ResetAllStats) == 0x000002, "Wrong size on SteamProUserStats_ResetAllStats");
static_assert(offsetof(SteamProUserStats_ResetAllStats, bAchievementsToo) == 0x000000, "Member 'SteamProUserStats_ResetAllStats::bAchievementsToo' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_ResetAllStats, ReturnValue) == 0x000001, "Member 'SteamProUserStats_ResetAllStats::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.SetAchievement
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_SetAchievement final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2477[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_SetAchievement) == 0x000008, "Wrong alignment on SteamProUserStats_SetAchievement");
static_assert(sizeof(SteamProUserStats_SetAchievement) == 0x000018, "Wrong size on SteamProUserStats_SetAchievement");
static_assert(offsetof(SteamProUserStats_SetAchievement, Param_Name) == 0x000000, "Member 'SteamProUserStats_SetAchievement::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_SetAchievement, ReturnValue) == 0x000010, "Member 'SteamProUserStats_SetAchievement::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.SetStatFloat
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_SetStatFloat final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2478[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_SetStatFloat) == 0x000008, "Wrong alignment on SteamProUserStats_SetStatFloat");
static_assert(sizeof(SteamProUserStats_SetStatFloat) == 0x000018, "Wrong size on SteamProUserStats_SetStatFloat");
static_assert(offsetof(SteamProUserStats_SetStatFloat, Param_Name) == 0x000000, "Member 'SteamProUserStats_SetStatFloat::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_SetStatFloat, Data) == 0x000010, "Member 'SteamProUserStats_SetStatFloat::Data' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_SetStatFloat, ReturnValue) == 0x000014, "Member 'SteamProUserStats_SetStatFloat::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.SetStatInt
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_SetStatInt final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2479[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_SetStatInt) == 0x000008, "Wrong alignment on SteamProUserStats_SetStatInt");
static_assert(sizeof(SteamProUserStats_SetStatInt) == 0x000018, "Wrong size on SteamProUserStats_SetStatInt");
static_assert(offsetof(SteamProUserStats_SetStatInt, Param_Name) == 0x000000, "Member 'SteamProUserStats_SetStatInt::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_SetStatInt, Data) == 0x000010, "Member 'SteamProUserStats_SetStatInt::Data' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_SetStatInt, ReturnValue) == 0x000014, "Member 'SteamProUserStats_SetStatInt::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.StoreStats
// 0x0001 (0x0001 - 0x0000)
struct SteamProUserStats_StoreStats final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_StoreStats) == 0x000001, "Wrong alignment on SteamProUserStats_StoreStats");
static_assert(sizeof(SteamProUserStats_StoreStats) == 0x000001, "Wrong size on SteamProUserStats_StoreStats");
static_assert(offsetof(SteamProUserStats_StoreStats, ReturnValue) == 0x000000, "Member 'SteamProUserStats_StoreStats::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.UpdateAvgRateStat
// 0x0020 (0x0020 - 0x0000)
struct SteamProUserStats_UpdateAvgRateStat final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CountThisSession;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SessionLength;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_247A[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_UpdateAvgRateStat) == 0x000008, "Wrong alignment on SteamProUserStats_UpdateAvgRateStat");
static_assert(sizeof(SteamProUserStats_UpdateAvgRateStat) == 0x000020, "Wrong size on SteamProUserStats_UpdateAvgRateStat");
static_assert(offsetof(SteamProUserStats_UpdateAvgRateStat, Param_Name) == 0x000000, "Member 'SteamProUserStats_UpdateAvgRateStat::Param_Name' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_UpdateAvgRateStat, CountThisSession) == 0x000010, "Member 'SteamProUserStats_UpdateAvgRateStat::CountThisSession' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_UpdateAvgRateStat, SessionLength) == 0x000014, "Member 'SteamProUserStats_UpdateAvgRateStat::SessionLength' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_UpdateAvgRateStat, ReturnValue) == 0x000018, "Member 'SteamProUserStats_UpdateAvgRateStat::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.AttachLeaderboardUGC
// 0x0020 (0x0020 - 0x0000)
struct SteamProUserStats_AttachLeaderboardUGC final
{
public:
	TDelegate<void(struct FAttachLeaderboardUGCData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamUGCHandle                        Handle;                                            // 0x0018(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_AttachLeaderboardUGC) == 0x000008, "Wrong alignment on SteamProUserStats_AttachLeaderboardUGC");
static_assert(sizeof(SteamProUserStats_AttachLeaderboardUGC) == 0x000020, "Wrong size on SteamProUserStats_AttachLeaderboardUGC");
static_assert(offsetof(SteamProUserStats_AttachLeaderboardUGC, Callback) == 0x000000, "Member 'SteamProUserStats_AttachLeaderboardUGC::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_AttachLeaderboardUGC, SteamLeaderboard) == 0x000010, "Member 'SteamProUserStats_AttachLeaderboardUGC::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_AttachLeaderboardUGC, Handle) == 0x000018, "Member 'SteamProUserStats_AttachLeaderboardUGC::Handle' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.DownloadLeaderboardEntries
// 0x0028 (0x0028 - 0x0000)
struct SteamProUserStats_DownloadLeaderboardEntries final
{
public:
	TDelegate<void(struct FLeaderboardScoresDownloaded& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamLeaderboardDataRequest                  DataRequest;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_247B[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RangeStart;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangeEnd;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_247C[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_DownloadLeaderboardEntries) == 0x000008, "Wrong alignment on SteamProUserStats_DownloadLeaderboardEntries");
static_assert(sizeof(SteamProUserStats_DownloadLeaderboardEntries) == 0x000028, "Wrong size on SteamProUserStats_DownloadLeaderboardEntries");
static_assert(offsetof(SteamProUserStats_DownloadLeaderboardEntries, Callback) == 0x000000, "Member 'SteamProUserStats_DownloadLeaderboardEntries::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_DownloadLeaderboardEntries, SteamLeaderboard) == 0x000010, "Member 'SteamProUserStats_DownloadLeaderboardEntries::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_DownloadLeaderboardEntries, DataRequest) == 0x000018, "Member 'SteamProUserStats_DownloadLeaderboardEntries::DataRequest' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_DownloadLeaderboardEntries, RangeStart) == 0x00001C, "Member 'SteamProUserStats_DownloadLeaderboardEntries::RangeStart' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_DownloadLeaderboardEntries, RangeEnd) == 0x000020, "Member 'SteamProUserStats_DownloadLeaderboardEntries::RangeEnd' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.DownloadLeaderboardEntriesForUsers
// 0x0028 (0x0028 - 0x0000)
struct SteamProUserStats_DownloadLeaderboardEntriesForUsers final
{
public:
	TDelegate<void(struct FLeaderboardScoresDownloadedForUsers& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSteamID>                       Users;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_DownloadLeaderboardEntriesForUsers) == 0x000008, "Wrong alignment on SteamProUserStats_DownloadLeaderboardEntriesForUsers");
static_assert(sizeof(SteamProUserStats_DownloadLeaderboardEntriesForUsers) == 0x000028, "Wrong size on SteamProUserStats_DownloadLeaderboardEntriesForUsers");
static_assert(offsetof(SteamProUserStats_DownloadLeaderboardEntriesForUsers, Callback) == 0x000000, "Member 'SteamProUserStats_DownloadLeaderboardEntriesForUsers::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_DownloadLeaderboardEntriesForUsers, SteamLeaderboard) == 0x000010, "Member 'SteamProUserStats_DownloadLeaderboardEntriesForUsers::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_DownloadLeaderboardEntriesForUsers, Users) == 0x000018, "Member 'SteamProUserStats_DownloadLeaderboardEntriesForUsers::Users' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.FindLeaderboard
// 0x0020 (0x0020 - 0x0000)
struct SteamProUserStats_FindLeaderboard final
{
public:
	TDelegate<void(struct FLeaderboardFindResult& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardName;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_FindLeaderboard) == 0x000008, "Wrong alignment on SteamProUserStats_FindLeaderboard");
static_assert(sizeof(SteamProUserStats_FindLeaderboard) == 0x000020, "Wrong size on SteamProUserStats_FindLeaderboard");
static_assert(offsetof(SteamProUserStats_FindLeaderboard, Callback) == 0x000000, "Member 'SteamProUserStats_FindLeaderboard::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_FindLeaderboard, LeaderboardName) == 0x000010, "Member 'SteamProUserStats_FindLeaderboard::LeaderboardName' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.FindOrCreateLeaderboard
// 0x0028 (0x0028 - 0x0000)
struct SteamProUserStats_FindOrCreateLeaderboard final
{
public:
	TDelegate<void(struct FFindOrCreateLeaderboardData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardName;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardSortMethod                   SortMethod;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardDisplayType                  DisplayType;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_247D[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUserStats_FindOrCreateLeaderboard) == 0x000008, "Wrong alignment on SteamProUserStats_FindOrCreateLeaderboard");
static_assert(sizeof(SteamProUserStats_FindOrCreateLeaderboard) == 0x000028, "Wrong size on SteamProUserStats_FindOrCreateLeaderboard");
static_assert(offsetof(SteamProUserStats_FindOrCreateLeaderboard, Callback) == 0x000000, "Member 'SteamProUserStats_FindOrCreateLeaderboard::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_FindOrCreateLeaderboard, LeaderboardName) == 0x000010, "Member 'SteamProUserStats_FindOrCreateLeaderboard::LeaderboardName' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_FindOrCreateLeaderboard, SortMethod) == 0x000020, "Member 'SteamProUserStats_FindOrCreateLeaderboard::SortMethod' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_FindOrCreateLeaderboard, DisplayType) == 0x000021, "Member 'SteamProUserStats_FindOrCreateLeaderboard::DisplayType' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.GetNumberOfCurrentPlayers
// 0x0010 (0x0010 - 0x0000)
struct SteamProUserStats_GetNumberOfCurrentPlayers final
{
public:
	TDelegate<void(struct FNumberOfCurrentPlayers& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_GetNumberOfCurrentPlayers) == 0x000004, "Wrong alignment on SteamProUserStats_GetNumberOfCurrentPlayers");
static_assert(sizeof(SteamProUserStats_GetNumberOfCurrentPlayers) == 0x000010, "Wrong size on SteamProUserStats_GetNumberOfCurrentPlayers");
static_assert(offsetof(SteamProUserStats_GetNumberOfCurrentPlayers, Callback) == 0x000000, "Member 'SteamProUserStats_GetNumberOfCurrentPlayers::Callback' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.RequestGlobalAchievementPercentages
// 0x0010 (0x0010 - 0x0000)
struct SteamProUserStats_RequestGlobalAchievementPercentages final
{
public:
	TDelegate<void(struct FGlobalAchievementPercentagesReady& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_RequestGlobalAchievementPercentages) == 0x000004, "Wrong alignment on SteamProUserStats_RequestGlobalAchievementPercentages");
static_assert(sizeof(SteamProUserStats_RequestGlobalAchievementPercentages) == 0x000010, "Wrong size on SteamProUserStats_RequestGlobalAchievementPercentages");
static_assert(offsetof(SteamProUserStats_RequestGlobalAchievementPercentages, Callback) == 0x000000, "Member 'SteamProUserStats_RequestGlobalAchievementPercentages::Callback' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.RequestGlobalStats
// 0x0014 (0x0014 - 0x0000)
struct SteamProUserStats_RequestGlobalStats final
{
public:
	TDelegate<void(struct FGlobalStatsReceived& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HistoryDays;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_RequestGlobalStats) == 0x000004, "Wrong alignment on SteamProUserStats_RequestGlobalStats");
static_assert(sizeof(SteamProUserStats_RequestGlobalStats) == 0x000014, "Wrong size on SteamProUserStats_RequestGlobalStats");
static_assert(offsetof(SteamProUserStats_RequestGlobalStats, Callback) == 0x000000, "Member 'SteamProUserStats_RequestGlobalStats::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_RequestGlobalStats, HistoryDays) == 0x000010, "Member 'SteamProUserStats_RequestGlobalStats::HistoryDays' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.RequestUserStats
// 0x0018 (0x0018 - 0x0000)
struct SteamProUserStats_RequestUserStats final
{
public:
	TDelegate<void(struct FRequestUserStatsData& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_RequestUserStats) == 0x000008, "Wrong alignment on SteamProUserStats_RequestUserStats");
static_assert(sizeof(SteamProUserStats_RequestUserStats) == 0x000018, "Wrong size on SteamProUserStats_RequestUserStats");
static_assert(offsetof(SteamProUserStats_RequestUserStats, Callback) == 0x000000, "Member 'SteamProUserStats_RequestUserStats::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_RequestUserStats, SteamID) == 0x000010, "Member 'SteamProUserStats_RequestUserStats::SteamID' has a wrong offset!");

// Function SteamCorePro.SteamProUserStats.UploadLeaderboardScore
// 0x0030 (0x0030 - 0x0000)
struct SteamProUserStats_UploadLeaderboardScore final
{
public:
	TDelegate<void(struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamLeaderboardUploadScoreMethod            UploadScoreMethod;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_247E[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ScoreDetails;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUserStats_UploadLeaderboardScore) == 0x000008, "Wrong alignment on SteamProUserStats_UploadLeaderboardScore");
static_assert(sizeof(SteamProUserStats_UploadLeaderboardScore) == 0x000030, "Wrong size on SteamProUserStats_UploadLeaderboardScore");
static_assert(offsetof(SteamProUserStats_UploadLeaderboardScore, Callback) == 0x000000, "Member 'SteamProUserStats_UploadLeaderboardScore::Callback' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_UploadLeaderboardScore, SteamLeaderboard) == 0x000010, "Member 'SteamProUserStats_UploadLeaderboardScore::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_UploadLeaderboardScore, UploadScoreMethod) == 0x000018, "Member 'SteamProUserStats_UploadLeaderboardScore::UploadScoreMethod' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_UploadLeaderboardScore, Score) == 0x00001C, "Member 'SteamProUserStats_UploadLeaderboardScore::Score' has a wrong offset!");
static_assert(offsetof(SteamProUserStats_UploadLeaderboardScore, ScoreDetails) == 0x000020, "Member 'SteamProUserStats_UploadLeaderboardScore::ScoreDetails' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionFindLeaderboard.FindLeaderboardAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_247F[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUserStatsAsyncActionFindLeaderboard* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync) == 0x000028, "Wrong size on SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync, LeaderboardName) == 0x000008, "Member 'SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync::LeaderboardName' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync, Timeout) == 0x000018, "Member 'SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProUserStatsAsyncActionFindLeaderboard_FindLeaderboardAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionFindLeaderboard.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUserStatsAsyncActionFindLeaderboard_HandleCallback final
{
public:
	struct FLeaderboardFindResult                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2480[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionFindLeaderboard_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionFindLeaderboard_HandleCallback");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionFindLeaderboard_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUserStatsAsyncActionFindLeaderboard_HandleCallback");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindLeaderboard_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionFindLeaderboard_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindLeaderboard_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionFindLeaderboard_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries.DownloadLeaderboardEntriesAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamLeaderboardDataRequest                  Request;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2481[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RangeStart;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangeEnd;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync) == 0x000028, "Wrong size on SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, SteamLeaderboard) == 0x000008, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, Request) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::Request' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, RangeStart) == 0x000014, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::RangeStart' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, RangeEnd) == 0x000018, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::RangeEnd' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, Timeout) == 0x00001C, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_DownloadLeaderboardEntriesAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback final
{
public:
	struct FLeaderboardScoresDownloaded           Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2482[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback) == 0x000020, "Wrong size on SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntries_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats.RequestGlobalStatsAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HistoryDays;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync) == 0x000018, "Wrong size on SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync, HistoryDays) == 0x000008, "Member 'SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync::HistoryDays' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync, Timeout) == 0x00000C, "Member 'SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync, ReturnValue) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_RequestGlobalStatsAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback final
{
public:
	struct FGlobalStatsReceived                   Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2483[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionDownloadRequestGlobalStats_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages.RequestGlobalAchievementPercentagesAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2484[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync) == 0x000018, "Wrong size on SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync, Timeout) == 0x000008, "Member 'SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync, ReturnValue) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_RequestGlobalAchievementPercentagesAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback final
{
public:
	struct FGlobalAchievementPercentagesReady     Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2485[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionRequestGlobalAchievementPercentages_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers.GetNumberOfCurrentPlayersAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2486[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync) == 0x000018, "Wrong size on SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync, Timeout) == 0x000008, "Member 'SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync, ReturnValue) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_GetNumberOfCurrentPlayersAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers.HandleCallback
// 0x000C (0x000C - 0x0000)
struct SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback final
{
public:
	struct FNumberOfCurrentPlayers                Data;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2487[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback) == 0x000004, "Wrong alignment on SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback) == 0x00000C, "Wrong size on SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback, bWasSuccessful) == 0x000008, "Member 'SteamCoreProUserStatsAsyncActionGetNumberOfCurrentPlayers_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionUploadLeaderboardScore.UploadLeaderboardScoreAsync
// 0x0038 (0x0038 - 0x0000)
struct SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamLeaderboardUploadScoreMethod            UploadScoreMethod;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2488[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ScoreDetails;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2489[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUserStatsAsyncActionUploadLeaderboardScore* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync) == 0x000038, "Wrong size on SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, SteamLeaderboard) == 0x000008, "Member 'SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, UploadScoreMethod) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::UploadScoreMethod' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, Score) == 0x000014, "Member 'SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::Score' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, ScoreDetails) == 0x000018, "Member 'SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::ScoreDetails' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, Timeout) == 0x000028, "Member 'SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync, ReturnValue) == 0x000030, "Member 'SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_UploadLeaderboardScoreAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionUploadLeaderboardScore.HandleCallback
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_HandleCallback final
{
public:
	struct FLeaderboardScoreUploaded              Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248A[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_HandleCallback");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_HandleCallback) == 0x000028, "Wrong size on SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_HandleCallback");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_HandleCallback, bWasSuccessful) == 0x000020, "Member 'SteamCoreProUserStatsAsyncActionUploadLeaderboardScore_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard.FindOrCreateLeaderboardAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardName;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardSortMethod                   SortMethod;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamLeaderboardDisplayType                  DisplayType;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248B[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync) == 0x000028, "Wrong size on SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, LeaderboardName) == 0x000008, "Member 'SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::LeaderboardName' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, SortMethod) == 0x000018, "Member 'SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::SortMethod' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, DisplayType) == 0x000019, "Member 'SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::DisplayType' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, Timeout) == 0x00001C, "Member 'SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_FindOrCreateLeaderboardAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback final
{
public:
	struct FFindOrCreateLeaderboardData           Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionFindOrCreateLeaderboard_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionRequestUserStats.RequestUserStatsAsync
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248D[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUserStatsAsyncActionRequestUserStats* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync) == 0x000020, "Wrong size on SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync, SteamID) == 0x000008, "Member 'SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync::SteamID' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync, Timeout) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync, ReturnValue) == 0x000018, "Member 'SteamCoreProUserStatsAsyncActionRequestUserStats_RequestUserStatsAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionRequestUserStats.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUserStatsAsyncActionRequestUserStats_HandleCallback final
{
public:
	struct FRequestUserStatsData                  Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248E[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionRequestUserStats_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionRequestUserStats_HandleCallback");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionRequestUserStats_HandleCallback) == 0x000020, "Wrong size on SteamCoreProUserStatsAsyncActionRequestUserStats_HandleCallback");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestUserStats_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionRequestUserStats_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestUserStats_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProUserStatsAsyncActionRequestUserStats_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionRequestCurrentStats.RequestCurrentStatsAsync
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUserStatsAsyncActionRequestCurrentStats_RequestCurrentStatsAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2490[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUserStatsAsyncActionRequestCurrentStats* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionRequestCurrentStats_RequestCurrentStatsAsync) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionRequestCurrentStats_RequestCurrentStatsAsync");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionRequestCurrentStats_RequestCurrentStatsAsync) == 0x000018, "Wrong size on SteamCoreProUserStatsAsyncActionRequestCurrentStats_RequestCurrentStatsAsync");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestCurrentStats_RequestCurrentStatsAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionRequestCurrentStats_RequestCurrentStatsAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestCurrentStats_RequestCurrentStatsAsync, Timeout) == 0x000008, "Member 'SteamCoreProUserStatsAsyncActionRequestCurrentStats_RequestCurrentStatsAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestCurrentStats_RequestCurrentStatsAsync, ReturnValue) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionRequestCurrentStats_RequestCurrentStatsAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionRequestCurrentStats.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUserStatsAsyncActionRequestCurrentStats_HandleCallback final
{
public:
	struct FRequestCurrentStatsData               Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2491[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionRequestCurrentStats_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionRequestCurrentStats_HandleCallback");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionRequestCurrentStats_HandleCallback) == 0x000020, "Wrong size on SteamCoreProUserStatsAsyncActionRequestCurrentStats_HandleCallback");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestCurrentStats_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionRequestCurrentStats_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionRequestCurrentStats_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProUserStatsAsyncActionRequestCurrentStats_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers.DownloadLeaderboardEntriesForUsersAsync
// 0x0030 (0x0030 - 0x0000)
struct SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSteamID>                       Users;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2492[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers* ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync) == 0x000030, "Wrong size on SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync, SteamLeaderboard) == 0x000008, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync, Users) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync::Users' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync, Timeout) == 0x000020, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync, ReturnValue) == 0x000028, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_DownloadLeaderboardEntriesForUsersAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers.HandleCallback
// 0x0020 (0x0020 - 0x0000)
struct SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback final
{
public:
	struct FLeaderboardScoresDownloadedForUsers   Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2493[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback) == 0x000020, "Wrong size on SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback, bWasSuccessful) == 0x000018, "Member 'SteamCoreProUserStatsAsyncActionDownloadLeaderboardEntriesForUsers_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC.AttachLeaderboardUGCAsync
// 0x0028 (0x0028 - 0x0000)
struct SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamLeaderboard                      SteamLeaderboard;                                  // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamUGCHandle                        Handle;                                            // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2494[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProUserStatsAsyncActionAttachLeaderboardUGC* ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync) == 0x000028, "Wrong size on SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync, WorldContextObject) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync, SteamLeaderboard) == 0x000008, "Member 'SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync::SteamLeaderboard' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync, Handle) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync::Handle' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync, Timeout) == 0x000018, "Member 'SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync::Timeout' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync, ReturnValue) == 0x000020, "Member 'SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_AttachLeaderboardUGCAsync::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC.HandleCallback
// 0x0018 (0x0018 - 0x0000)
struct SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback final
{
public:
	struct FAttachLeaderboardUGCData              Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2495[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback) == 0x000008, "Wrong alignment on SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback");
static_assert(sizeof(SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback) == 0x000018, "Wrong size on SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback, Data) == 0x000000, "Member 'SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback::Data' has a wrong offset!");
static_assert(offsetof(SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback, bWasSuccessful) == 0x000010, "Member 'SteamCoreProUserStatsAsyncActionAttachLeaderboardUGC_HandleCallback::bWasSuccessful' has a wrong offset!");

// Function SteamCorePro.SteamCoreProVoice.ConstructSteamCoreProVoice
// 0x0010 (0x0010 - 0x0000)
struct SteamCoreProVoice_ConstructSteamCoreProVoice final
{
public:
	int32                                         AudioSampleRate;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2496[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamCoreProVoice*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProVoice_ConstructSteamCoreProVoice) == 0x000008, "Wrong alignment on SteamCoreProVoice_ConstructSteamCoreProVoice");
static_assert(sizeof(SteamCoreProVoice_ConstructSteamCoreProVoice) == 0x000010, "Wrong size on SteamCoreProVoice_ConstructSteamCoreProVoice");
static_assert(offsetof(SteamCoreProVoice_ConstructSteamCoreProVoice, AudioSampleRate) == 0x000000, "Member 'SteamCoreProVoice_ConstructSteamCoreProVoice::AudioSampleRate' has a wrong offset!");
static_assert(offsetof(SteamCoreProVoice_ConstructSteamCoreProVoice, ReturnValue) == 0x000008, "Member 'SteamCoreProVoice_ConstructSteamCoreProVoice::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProVoice.DestroySteamCoreProVoice
// 0x0008 (0x0008 - 0x0000)
struct SteamCoreProVoice_DestroySteamCoreProVoice final
{
public:
	class USteamCoreProVoice*                     Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProVoice_DestroySteamCoreProVoice) == 0x000008, "Wrong alignment on SteamCoreProVoice_DestroySteamCoreProVoice");
static_assert(sizeof(SteamCoreProVoice_DestroySteamCoreProVoice) == 0x000008, "Wrong size on SteamCoreProVoice_DestroySteamCoreProVoice");
static_assert(offsetof(SteamCoreProVoice_DestroySteamCoreProVoice, Obj) == 0x000000, "Member 'SteamCoreProVoice_DestroySteamCoreProVoice::Obj' has a wrong offset!");

// Function SteamCorePro.SteamCoreProVoice.AddAudioBuffer
// 0x0010 (0x0010 - 0x0000)
struct SteamCoreProVoice_AddAudioBuffer final
{
public:
	TArray<uint8>                                 Buffer;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProVoice_AddAudioBuffer) == 0x000008, "Wrong alignment on SteamCoreProVoice_AddAudioBuffer");
static_assert(sizeof(SteamCoreProVoice_AddAudioBuffer) == 0x000010, "Wrong size on SteamCoreProVoice_AddAudioBuffer");
static_assert(offsetof(SteamCoreProVoice_AddAudioBuffer, Buffer) == 0x000000, "Member 'SteamCoreProVoice_AddAudioBuffer::Buffer' has a wrong offset!");

// Function SteamCorePro.SteamCoreProAsyncActionListenForControllerChange.ListenForControllerChange
// 0x0010 (0x0010 - 0x0000)
struct SteamCoreProAsyncActionListenForControllerChange_ListenForControllerChange final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USteamCoreProAsyncActionListenForControllerChange* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProAsyncActionListenForControllerChange_ListenForControllerChange) == 0x000008, "Wrong alignment on SteamCoreProAsyncActionListenForControllerChange_ListenForControllerChange");
static_assert(sizeof(SteamCoreProAsyncActionListenForControllerChange_ListenForControllerChange) == 0x000010, "Wrong size on SteamCoreProAsyncActionListenForControllerChange_ListenForControllerChange");
static_assert(offsetof(SteamCoreProAsyncActionListenForControllerChange_ListenForControllerChange, WorldContextObject) == 0x000000, "Member 'SteamCoreProAsyncActionListenForControllerChange_ListenForControllerChange::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamCoreProAsyncActionListenForControllerChange_ListenForControllerChange, ReturnValue) == 0x000008, "Member 'SteamCoreProAsyncActionListenForControllerChange_ListenForControllerChange::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamCoreProAsyncActionListenForControllerChange.HandleCallback
// 0x000C (0x000C - 0x0000)
struct SteamCoreProAsyncActionListenForControllerChange_HandleCallback final
{
public:
	bool                                          bIsConnected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2497[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlatformUserId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamCoreProAsyncActionListenForControllerChange_HandleCallback) == 0x000004, "Wrong alignment on SteamCoreProAsyncActionListenForControllerChange_HandleCallback");
static_assert(sizeof(SteamCoreProAsyncActionListenForControllerChange_HandleCallback) == 0x00000C, "Wrong size on SteamCoreProAsyncActionListenForControllerChange_HandleCallback");
static_assert(offsetof(SteamCoreProAsyncActionListenForControllerChange_HandleCallback, bIsConnected) == 0x000000, "Member 'SteamCoreProAsyncActionListenForControllerChange_HandleCallback::bIsConnected' has a wrong offset!");
static_assert(offsetof(SteamCoreProAsyncActionListenForControllerChange_HandleCallback, PlatformUserId) == 0x000004, "Member 'SteamCoreProAsyncActionListenForControllerChange_HandleCallback::PlatformUserId' has a wrong offset!");
static_assert(offsetof(SteamCoreProAsyncActionListenForControllerChange_HandleCallback, UserId) == 0x000008, "Member 'SteamCoreProAsyncActionListenForControllerChange_HandleCallback::UserId' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.BP_BytesToString
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_BP_BytesToString final
{
public:
	TArray<uint8>                                 Array;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BP_BytesToString) == 0x000008, "Wrong alignment on SteamUtilities_BP_BytesToString");
static_assert(sizeof(SteamUtilities_BP_BytesToString) == 0x000020, "Wrong size on SteamUtilities_BP_BytesToString");
static_assert(offsetof(SteamUtilities_BP_BytesToString, Array) == 0x000000, "Member 'SteamUtilities_BP_BytesToString::Array' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BP_BytesToString, ReturnValue) == 0x000010, "Member 'SteamUtilities_BP_BytesToString::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.BP_StringToBytes
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_BP_StringToBytes final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BP_StringToBytes) == 0x000008, "Wrong alignment on SteamUtilities_BP_StringToBytes");
static_assert(sizeof(SteamUtilities_BP_StringToBytes) == 0x000020, "Wrong size on SteamUtilities_BP_StringToBytes");
static_assert(offsetof(SteamUtilities_BP_StringToBytes, String) == 0x000000, "Member 'SteamUtilities_BP_StringToBytes::String' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BP_StringToBytes, ReturnValue) == 0x000010, "Member 'SteamUtilities_BP_StringToBytes::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.BreakInventoryUpdateHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_BreakInventoryUpdateHandle final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BreakInventoryUpdateHandle) == 0x000008, "Wrong alignment on SteamUtilities_BreakInventoryUpdateHandle");
static_assert(sizeof(SteamUtilities_BreakInventoryUpdateHandle) == 0x000018, "Wrong size on SteamUtilities_BreakInventoryUpdateHandle");
static_assert(offsetof(SteamUtilities_BreakInventoryUpdateHandle, Handle) == 0x000000, "Member 'SteamUtilities_BreakInventoryUpdateHandle::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BreakInventoryUpdateHandle, ReturnValue) == 0x000008, "Member 'SteamUtilities_BreakInventoryUpdateHandle::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.BreakPublishedFileID
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_BreakPublishedFileID final
{
public:
	struct FPublishedFileID                       FileID;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BreakPublishedFileID) == 0x000008, "Wrong alignment on SteamUtilities_BreakPublishedFileID");
static_assert(sizeof(SteamUtilities_BreakPublishedFileID) == 0x000018, "Wrong size on SteamUtilities_BreakPublishedFileID");
static_assert(offsetof(SteamUtilities_BreakPublishedFileID, FileID) == 0x000000, "Member 'SteamUtilities_BreakPublishedFileID::FileID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BreakPublishedFileID, ReturnValue) == 0x000008, "Member 'SteamUtilities_BreakPublishedFileID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.BreakSteamGameID
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_BreakSteamGameID final
{
public:
	struct FSteamGameID                           SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BreakSteamGameID) == 0x000008, "Wrong alignment on SteamUtilities_BreakSteamGameID");
static_assert(sizeof(SteamUtilities_BreakSteamGameID) == 0x000018, "Wrong size on SteamUtilities_BreakSteamGameID");
static_assert(offsetof(SteamUtilities_BreakSteamGameID, SteamID) == 0x000000, "Member 'SteamUtilities_BreakSteamGameID::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BreakSteamGameID, ReturnValue) == 0x000008, "Member 'SteamUtilities_BreakSteamGameID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.BreakSteamID
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_BreakSteamID final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BreakSteamID) == 0x000008, "Wrong alignment on SteamUtilities_BreakSteamID");
static_assert(sizeof(SteamUtilities_BreakSteamID) == 0x000018, "Wrong size on SteamUtilities_BreakSteamID");
static_assert(offsetof(SteamUtilities_BreakSteamID, SteamID) == 0x000000, "Member 'SteamUtilities_BreakSteamID::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BreakSteamID, ReturnValue) == 0x000008, "Member 'SteamUtilities_BreakSteamID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.BreakTicketHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_BreakTicketHandle final
{
public:
	struct FSteamTicketHandle                     Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2498[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BreakTicketHandle) == 0x000008, "Wrong alignment on SteamUtilities_BreakTicketHandle");
static_assert(sizeof(SteamUtilities_BreakTicketHandle) == 0x000018, "Wrong size on SteamUtilities_BreakTicketHandle");
static_assert(offsetof(SteamUtilities_BreakTicketHandle, Handle) == 0x000000, "Member 'SteamUtilities_BreakTicketHandle::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BreakTicketHandle, ReturnValue) == 0x000008, "Member 'SteamUtilities_BreakTicketHandle::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.BreakUGCHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_BreakUGCHandle final
{
public:
	struct FSteamUGCHandle                        Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_BreakUGCHandle) == 0x000008, "Wrong alignment on SteamUtilities_BreakUGCHandle");
static_assert(sizeof(SteamUtilities_BreakUGCHandle) == 0x000018, "Wrong size on SteamUtilities_BreakUGCHandle");
static_assert(offsetof(SteamUtilities_BreakUGCHandle, Handle) == 0x000000, "Member 'SteamUtilities_BreakUGCHandle::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_BreakUGCHandle, ReturnValue) == 0x000008, "Member 'SteamUtilities_BreakUGCHandle::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.ConstructServerFilter
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_ConstructServerFilter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UServerFilter*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_ConstructServerFilter) == 0x000008, "Wrong alignment on SteamUtilities_ConstructServerFilter");
static_assert(sizeof(SteamUtilities_ConstructServerFilter) == 0x000010, "Wrong size on SteamUtilities_ConstructServerFilter");
static_assert(offsetof(SteamUtilities_ConstructServerFilter, WorldContextObject) == 0x000000, "Member 'SteamUtilities_ConstructServerFilter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamUtilities_ConstructServerFilter, ReturnValue) == 0x000008, "Member 'SteamUtilities_ConstructServerFilter::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.EncryptString
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_EncryptString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_EncryptString) == 0x000008, "Wrong alignment on SteamUtilities_EncryptString");
static_assert(sizeof(SteamUtilities_EncryptString) == 0x000020, "Wrong size on SteamUtilities_EncryptString");
static_assert(offsetof(SteamUtilities_EncryptString, String) == 0x000000, "Member 'SteamUtilities_EncryptString::String' has a wrong offset!");
static_assert(offsetof(SteamUtilities_EncryptString, ReturnValue) == 0x000010, "Member 'SteamUtilities_EncryptString::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.Equal
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_Equal final
{
public:
	struct FSteamID                               A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2499[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_Equal) == 0x000008, "Wrong alignment on SteamUtilities_Equal");
static_assert(sizeof(SteamUtilities_Equal) == 0x000018, "Wrong size on SteamUtilities_Equal");
static_assert(offsetof(SteamUtilities_Equal, A) == 0x000000, "Member 'SteamUtilities_Equal::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_Equal, B) == 0x000008, "Member 'SteamUtilities_Equal::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_Equal, ReturnValue) == 0x000010, "Member 'SteamUtilities_Equal::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.Equal_Exec
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_Equal_Exec final
{
public:
	struct FSteamID                               A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               B;                                                 // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProIdentical                        Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249A[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_Equal_Exec) == 0x000008, "Wrong alignment on SteamUtilities_Equal_Exec");
static_assert(sizeof(SteamUtilities_Equal_Exec) == 0x000018, "Wrong size on SteamUtilities_Equal_Exec");
static_assert(offsetof(SteamUtilities_Equal_Exec, A) == 0x000000, "Member 'SteamUtilities_Equal_Exec::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_Equal_Exec, B) == 0x000008, "Member 'SteamUtilities_Equal_Exec::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_Equal_Exec, Result) == 0x000010, "Member 'SteamUtilities_Equal_Exec::Result' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.FromUnixTimestamp
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_FromUnixTimestamp final
{
public:
	class FString                                 Timestamp;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_FromUnixTimestamp) == 0x000008, "Wrong alignment on SteamUtilities_FromUnixTimestamp");
static_assert(sizeof(SteamUtilities_FromUnixTimestamp) == 0x000018, "Wrong size on SteamUtilities_FromUnixTimestamp");
static_assert(offsetof(SteamUtilities_FromUnixTimestamp, Timestamp) == 0x000000, "Member 'SteamUtilities_FromUnixTimestamp::Timestamp' has a wrong offset!");
static_assert(offsetof(SteamUtilities_FromUnixTimestamp, ReturnValue) == 0x000010, "Member 'SteamUtilities_FromUnixTimestamp::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.GetAccountType
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_GetAccountType final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamAccountType                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_GetAccountType) == 0x000008, "Wrong alignment on SteamUtilities_GetAccountType");
static_assert(sizeof(SteamUtilities_GetAccountType) == 0x000010, "Wrong size on SteamUtilities_GetAccountType");
static_assert(offsetof(SteamUtilities_GetAccountType, SteamID) == 0x000000, "Member 'SteamUtilities_GetAccountType::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetAccountType, ReturnValue) == 0x000008, "Member 'SteamUtilities_GetAccountType::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.GetFriendsList
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_GetFriendsList final
{
public:
	EFriendListType                               FriendListType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOnlineFriendSteamCoreBlueprint> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_GetFriendsList) == 0x000008, "Wrong alignment on SteamUtilities_GetFriendsList");
static_assert(sizeof(SteamUtilities_GetFriendsList) == 0x000018, "Wrong size on SteamUtilities_GetFriendsList");
static_assert(offsetof(SteamUtilities_GetFriendsList, FriendListType) == 0x000000, "Member 'SteamUtilities_GetFriendsList::FriendListType' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetFriendsList, ReturnValue) == 0x000008, "Member 'SteamUtilities_GetFriendsList::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.GetGameEngineInitialized
// 0x0001 (0x0001 - 0x0000)
struct SteamUtilities_GetGameEngineInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_GetGameEngineInitialized) == 0x000001, "Wrong alignment on SteamUtilities_GetGameEngineInitialized");
static_assert(sizeof(SteamUtilities_GetGameEngineInitialized) == 0x000001, "Wrong size on SteamUtilities_GetGameEngineInitialized");
static_assert(offsetof(SteamUtilities_GetGameEngineInitialized, ReturnValue) == 0x000000, "Member 'SteamUtilities_GetGameEngineInitialized::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.GetHostPingData
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_GetHostPingData final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_GetHostPingData) == 0x000008, "Wrong alignment on SteamUtilities_GetHostPingData");
static_assert(sizeof(SteamUtilities_GetHostPingData) == 0x000010, "Wrong size on SteamUtilities_GetHostPingData");
static_assert(offsetof(SteamUtilities_GetHostPingData, ReturnValue) == 0x000000, "Member 'SteamUtilities_GetHostPingData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.GetInteger
// 0x0040 (0x0040 - 0x0000)
struct SteamUtilities_GetInteger final
{
public:
	struct FSteamSessionSetting                   Settings;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutValue;                                          // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249D[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_GetInteger) == 0x000008, "Wrong alignment on SteamUtilities_GetInteger");
static_assert(sizeof(SteamUtilities_GetInteger) == 0x000040, "Wrong size on SteamUtilities_GetInteger");
static_assert(offsetof(SteamUtilities_GetInteger, Settings) == 0x000000, "Member 'SteamUtilities_GetInteger::Settings' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetInteger, Key) == 0x000028, "Member 'SteamUtilities_GetInteger::Key' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetInteger, OutValue) == 0x000038, "Member 'SteamUtilities_GetInteger::OutValue' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetInteger, ReturnValue) == 0x00003C, "Member 'SteamUtilities_GetInteger::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.GetPingFromHostData
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_GetPingFromHostData final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249E[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_GetPingFromHostData) == 0x000008, "Wrong alignment on SteamUtilities_GetPingFromHostData");
static_assert(sizeof(SteamUtilities_GetPingFromHostData) == 0x000018, "Wrong size on SteamUtilities_GetPingFromHostData");
static_assert(offsetof(SteamUtilities_GetPingFromHostData, Data) == 0x000000, "Member 'SteamUtilities_GetPingFromHostData::Data' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetPingFromHostData, ReturnValue) == 0x000010, "Member 'SteamUtilities_GetPingFromHostData::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.GetPublicIp
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_GetPublicIp final
{
public:
	TDelegate<void(const class FString& Response)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_GetPublicIp) == 0x000004, "Wrong alignment on SteamUtilities_GetPublicIp");
static_assert(sizeof(SteamUtilities_GetPublicIp) == 0x000010, "Wrong size on SteamUtilities_GetPublicIp");
static_assert(offsetof(SteamUtilities_GetPublicIp, Callback) == 0x000000, "Member 'SteamUtilities_GetPublicIp::Callback' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.GetSteamIdFromPlayerState
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_GetSteamIdFromPlayerState final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_GetSteamIdFromPlayerState) == 0x000008, "Wrong alignment on SteamUtilities_GetSteamIdFromPlayerState");
static_assert(sizeof(SteamUtilities_GetSteamIdFromPlayerState) == 0x000010, "Wrong size on SteamUtilities_GetSteamIdFromPlayerState");
static_assert(offsetof(SteamUtilities_GetSteamIdFromPlayerState, PlayerState) == 0x000000, "Member 'SteamUtilities_GetSteamIdFromPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetSteamIdFromPlayerState, ReturnValue) == 0x000008, "Member 'SteamUtilities_GetSteamIdFromPlayerState::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.GetString
// 0x0050 (0x0050 - 0x0000)
struct SteamUtilities_GetString final
{
public:
	struct FSteamSessionSetting                   Settings;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutValue;                                          // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249F[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_GetString) == 0x000008, "Wrong alignment on SteamUtilities_GetString");
static_assert(sizeof(SteamUtilities_GetString) == 0x000050, "Wrong size on SteamUtilities_GetString");
static_assert(offsetof(SteamUtilities_GetString, Settings) == 0x000000, "Member 'SteamUtilities_GetString::Settings' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetString, Key) == 0x000028, "Member 'SteamUtilities_GetString::Key' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetString, OutValue) == 0x000038, "Member 'SteamUtilities_GetString::OutValue' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetString, ReturnValue) == 0x000048, "Member 'SteamUtilities_GetString::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.GetType
// 0x0030 (0x0030 - 0x0000)
struct SteamUtilities_GetType final
{
public:
	struct FSteamSessionSetting                   Settings;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	ESteamAttributeType                           ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A0[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_GetType) == 0x000008, "Wrong alignment on SteamUtilities_GetType");
static_assert(sizeof(SteamUtilities_GetType) == 0x000030, "Wrong size on SteamUtilities_GetType");
static_assert(offsetof(SteamUtilities_GetType, Settings) == 0x000000, "Member 'SteamUtilities_GetType::Settings' has a wrong offset!");
static_assert(offsetof(SteamUtilities_GetType, ReturnValue) == 0x000028, "Member 'SteamUtilities_GetType::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsGameIDValid
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsGameIDValid final
{
public:
	struct FSteamGameID                           GameId;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsGameIDValid) == 0x000008, "Wrong alignment on SteamUtilities_IsGameIDValid");
static_assert(sizeof(SteamUtilities_IsGameIDValid) == 0x000010, "Wrong size on SteamUtilities_IsGameIDValid");
static_assert(offsetof(SteamUtilities_IsGameIDValid, GameId) == 0x000000, "Member 'SteamUtilities_IsGameIDValid::GameId' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsGameIDValid, ReturnValue) == 0x000008, "Member 'SteamUtilities_IsGameIDValid::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsGameIDValid_Exec
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsGameIDValid_Exec final
{
public:
	struct FSteamGameID                           GameId;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProValid                            Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsGameIDValid_Exec) == 0x000008, "Wrong alignment on SteamUtilities_IsGameIDValid_Exec");
static_assert(sizeof(SteamUtilities_IsGameIDValid_Exec) == 0x000010, "Wrong size on SteamUtilities_IsGameIDValid_Exec");
static_assert(offsetof(SteamUtilities_IsGameIDValid_Exec, GameId) == 0x000000, "Member 'SteamUtilities_IsGameIDValid_Exec::GameId' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsGameIDValid_Exec, Result) == 0x000008, "Member 'SteamUtilities_IsGameIDValid_Exec::Result' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsLobby
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsLobby final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsLobby) == 0x000008, "Wrong alignment on SteamUtilities_IsLobby");
static_assert(sizeof(SteamUtilities_IsLobby) == 0x000010, "Wrong size on SteamUtilities_IsLobby");
static_assert(offsetof(SteamUtilities_IsLobby, SteamID) == 0x000000, "Member 'SteamUtilities_IsLobby::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsLobby, ReturnValue) == 0x000008, "Member 'SteamUtilities_IsLobby::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsLocalPlayerTalking
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsLocalPlayerTalking final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalUserNum;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A4[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsLocalPlayerTalking) == 0x000008, "Wrong alignment on SteamUtilities_IsLocalPlayerTalking");
static_assert(sizeof(SteamUtilities_IsLocalPlayerTalking) == 0x000010, "Wrong size on SteamUtilities_IsLocalPlayerTalking");
static_assert(offsetof(SteamUtilities_IsLocalPlayerTalking, WorldContextObject) == 0x000000, "Member 'SteamUtilities_IsLocalPlayerTalking::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsLocalPlayerTalking, LocalUserNum) == 0x000008, "Member 'SteamUtilities_IsLocalPlayerTalking::LocalUserNum' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsLocalPlayerTalking, ReturnValue) == 0x00000C, "Member 'SteamUtilities_IsLocalPlayerTalking::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsPlayerMuted
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_IsPlayerMuted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A5[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsPlayerMuted) == 0x000008, "Wrong alignment on SteamUtilities_IsPlayerMuted");
static_assert(sizeof(SteamUtilities_IsPlayerMuted) == 0x000018, "Wrong size on SteamUtilities_IsPlayerMuted");
static_assert(offsetof(SteamUtilities_IsPlayerMuted, WorldContextObject) == 0x000000, "Member 'SteamUtilities_IsPlayerMuted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsPlayerMuted, Player) == 0x000008, "Member 'SteamUtilities_IsPlayerMuted::Player' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsPlayerMuted, ReturnValue) == 0x000010, "Member 'SteamUtilities_IsPlayerMuted::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsPublishedFileIDValid
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsPublishedFileIDValid final
{
public:
	struct FPublishedFileID                       PublishedFileID;                                   // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsPublishedFileIDValid) == 0x000008, "Wrong alignment on SteamUtilities_IsPublishedFileIDValid");
static_assert(sizeof(SteamUtilities_IsPublishedFileIDValid) == 0x000010, "Wrong size on SteamUtilities_IsPublishedFileIDValid");
static_assert(offsetof(SteamUtilities_IsPublishedFileIDValid, PublishedFileID) == 0x000000, "Member 'SteamUtilities_IsPublishedFileIDValid::PublishedFileID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsPublishedFileIDValid, ReturnValue) == 0x000008, "Member 'SteamUtilities_IsPublishedFileIDValid::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsPublishedFileIDValid_Exec
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsPublishedFileIDValid_Exec final
{
public:
	struct FPublishedFileID                       Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProValid                            Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A7[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsPublishedFileIDValid_Exec) == 0x000008, "Wrong alignment on SteamUtilities_IsPublishedFileIDValid_Exec");
static_assert(sizeof(SteamUtilities_IsPublishedFileIDValid_Exec) == 0x000010, "Wrong size on SteamUtilities_IsPublishedFileIDValid_Exec");
static_assert(offsetof(SteamUtilities_IsPublishedFileIDValid_Exec, Handle) == 0x000000, "Member 'SteamUtilities_IsPublishedFileIDValid_Exec::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsPublishedFileIDValid_Exec, Result) == 0x000008, "Member 'SteamUtilities_IsPublishedFileIDValid_Exec::Result' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsRecalculatingPing
// 0x0001 (0x0001 - 0x0000)
struct SteamUtilities_IsRecalculatingPing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_IsRecalculatingPing) == 0x000001, "Wrong alignment on SteamUtilities_IsRecalculatingPing");
static_assert(sizeof(SteamUtilities_IsRecalculatingPing) == 0x000001, "Wrong size on SteamUtilities_IsRecalculatingPing");
static_assert(offsetof(SteamUtilities_IsRecalculatingPing, ReturnValue) == 0x000000, "Member 'SteamUtilities_IsRecalculatingPing::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsRemotePlayerTalking
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_IsRemotePlayerTalking final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsRemotePlayerTalking) == 0x000008, "Wrong alignment on SteamUtilities_IsRemotePlayerTalking");
static_assert(sizeof(SteamUtilities_IsRemotePlayerTalking) == 0x000018, "Wrong size on SteamUtilities_IsRemotePlayerTalking");
static_assert(offsetof(SteamUtilities_IsRemotePlayerTalking, WorldContextObject) == 0x000000, "Member 'SteamUtilities_IsRemotePlayerTalking::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsRemotePlayerTalking, Player) == 0x000008, "Member 'SteamUtilities_IsRemotePlayerTalking::Player' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsRemotePlayerTalking, ReturnValue) == 0x000010, "Member 'SteamUtilities_IsRemotePlayerTalking::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsSteamAvailable
// 0x0001 (0x0001 - 0x0000)
struct SteamUtilities_IsSteamAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_IsSteamAvailable) == 0x000001, "Wrong alignment on SteamUtilities_IsSteamAvailable");
static_assert(sizeof(SteamUtilities_IsSteamAvailable) == 0x000001, "Wrong size on SteamUtilities_IsSteamAvailable");
static_assert(offsetof(SteamUtilities_IsSteamAvailable, ReturnValue) == 0x000000, "Member 'SteamUtilities_IsSteamAvailable::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsSteamIDValid_Exec
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsSteamIDValid_Exec final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProValid                            Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsSteamIDValid_Exec) == 0x000008, "Wrong alignment on SteamUtilities_IsSteamIDValid_Exec");
static_assert(sizeof(SteamUtilities_IsSteamIDValid_Exec) == 0x000010, "Wrong size on SteamUtilities_IsSteamIDValid_Exec");
static_assert(offsetof(SteamUtilities_IsSteamIDValid_Exec, SteamID) == 0x000000, "Member 'SteamUtilities_IsSteamIDValid_Exec::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsSteamIDValid_Exec, Result) == 0x000008, "Member 'SteamUtilities_IsSteamIDValid_Exec::Result' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsSteamInventoryUpdateHandleValid
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsSteamInventoryUpdateHandleValid final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24AA[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsSteamInventoryUpdateHandleValid) == 0x000008, "Wrong alignment on SteamUtilities_IsSteamInventoryUpdateHandleValid");
static_assert(sizeof(SteamUtilities_IsSteamInventoryUpdateHandleValid) == 0x000010, "Wrong size on SteamUtilities_IsSteamInventoryUpdateHandleValid");
static_assert(offsetof(SteamUtilities_IsSteamInventoryUpdateHandleValid, Handle) == 0x000000, "Member 'SteamUtilities_IsSteamInventoryUpdateHandleValid::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsSteamInventoryUpdateHandleValid, ReturnValue) == 0x000008, "Member 'SteamUtilities_IsSteamInventoryUpdateHandleValid::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsSteamInventoryUpdateHandleValid_Exec
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec final
{
public:
	struct FSteamInventoryUpdateHandle            Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProValid                            Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24AB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec) == 0x000008, "Wrong alignment on SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec");
static_assert(sizeof(SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec) == 0x000010, "Wrong size on SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec");
static_assert(offsetof(SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec, Handle) == 0x000000, "Member 'SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec, Result) == 0x000008, "Member 'SteamUtilities_IsSteamInventoryUpdateHandleValid_Exec::Result' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsSteamServerInitialized
// 0x0001 (0x0001 - 0x0000)
struct SteamUtilities_IsSteamServerInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_IsSteamServerInitialized) == 0x000001, "Wrong alignment on SteamUtilities_IsSteamServerInitialized");
static_assert(sizeof(SteamUtilities_IsSteamServerInitialized) == 0x000001, "Wrong size on SteamUtilities_IsSteamServerInitialized");
static_assert(offsetof(SteamUtilities_IsSteamServerInitialized, ReturnValue) == 0x000000, "Member 'SteamUtilities_IsSteamServerInitialized::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsSteamTicketHandleValid
// 0x0008 (0x0008 - 0x0000)
struct SteamUtilities_IsSteamTicketHandleValid final
{
public:
	struct FSteamTicketHandle                     Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24AC[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsSteamTicketHandleValid) == 0x000004, "Wrong alignment on SteamUtilities_IsSteamTicketHandleValid");
static_assert(sizeof(SteamUtilities_IsSteamTicketHandleValid) == 0x000008, "Wrong size on SteamUtilities_IsSteamTicketHandleValid");
static_assert(offsetof(SteamUtilities_IsSteamTicketHandleValid, Handle) == 0x000000, "Member 'SteamUtilities_IsSteamTicketHandleValid::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsSteamTicketHandleValid, ReturnValue) == 0x000004, "Member 'SteamUtilities_IsSteamTicketHandleValid::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsSteamTicketHandleValid_Exec
// 0x0008 (0x0008 - 0x0000)
struct SteamUtilities_IsSteamTicketHandleValid_Exec final
{
public:
	struct FSteamTicketHandle                     Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProValid                            Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24AD[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsSteamTicketHandleValid_Exec) == 0x000004, "Wrong alignment on SteamUtilities_IsSteamTicketHandleValid_Exec");
static_assert(sizeof(SteamUtilities_IsSteamTicketHandleValid_Exec) == 0x000008, "Wrong size on SteamUtilities_IsSteamTicketHandleValid_Exec");
static_assert(offsetof(SteamUtilities_IsSteamTicketHandleValid_Exec, Handle) == 0x000000, "Member 'SteamUtilities_IsSteamTicketHandleValid_Exec::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsSteamTicketHandleValid_Exec, Result) == 0x000004, "Member 'SteamUtilities_IsSteamTicketHandleValid_Exec::Result' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsUGCHandleValid
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsUGCHandleValid final
{
public:
	struct FSteamUGCHandle                        Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24AE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsUGCHandleValid) == 0x000008, "Wrong alignment on SteamUtilities_IsUGCHandleValid");
static_assert(sizeof(SteamUtilities_IsUGCHandleValid) == 0x000010, "Wrong size on SteamUtilities_IsUGCHandleValid");
static_assert(offsetof(SteamUtilities_IsUGCHandleValid, Handle) == 0x000000, "Member 'SteamUtilities_IsUGCHandleValid::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsUGCHandleValid, ReturnValue) == 0x000008, "Member 'SteamUtilities_IsUGCHandleValid::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsUGCHandleValid_Exec
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsUGCHandleValid_Exec final
{
public:
	struct FSteamUGCHandle                        Handle;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProValid                            Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24AF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsUGCHandleValid_Exec) == 0x000008, "Wrong alignment on SteamUtilities_IsUGCHandleValid_Exec");
static_assert(sizeof(SteamUtilities_IsUGCHandleValid_Exec) == 0x000010, "Wrong size on SteamUtilities_IsUGCHandleValid_Exec");
static_assert(offsetof(SteamUtilities_IsUGCHandleValid_Exec, Handle) == 0x000000, "Member 'SteamUtilities_IsUGCHandleValid_Exec::Handle' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsUGCHandleValid_Exec, Result) == 0x000008, "Member 'SteamUtilities_IsUGCHandleValid_Exec::Result' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsUsingP2PRelays
// 0x0001 (0x0001 - 0x0000)
struct SteamUtilities_IsUsingP2PRelays final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_IsUsingP2PRelays) == 0x000001, "Wrong alignment on SteamUtilities_IsUsingP2PRelays");
static_assert(sizeof(SteamUtilities_IsUsingP2PRelays) == 0x000001, "Wrong size on SteamUtilities_IsUsingP2PRelays");
static_assert(offsetof(SteamUtilities_IsUsingP2PRelays, ReturnValue) == 0x000000, "Member 'SteamUtilities_IsUsingP2PRelays::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.IsValid
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_IsValid final
{
public:
	struct FSteamID                               SteamID;                                           // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_IsValid) == 0x000008, "Wrong alignment on SteamUtilities_IsValid");
static_assert(sizeof(SteamUtilities_IsValid) == 0x000010, "Wrong size on SteamUtilities_IsValid");
static_assert(offsetof(SteamUtilities_IsValid, SteamID) == 0x000000, "Member 'SteamUtilities_IsValid::SteamID' has a wrong offset!");
static_assert(offsetof(SteamUtilities_IsValid, ReturnValue) == 0x000008, "Member 'SteamUtilities_IsValid::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.K2_HexToBytes
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_K2_HexToBytes final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_K2_HexToBytes) == 0x000008, "Wrong alignment on SteamUtilities_K2_HexToBytes");
static_assert(sizeof(SteamUtilities_K2_HexToBytes) == 0x000020, "Wrong size on SteamUtilities_K2_HexToBytes");
static_assert(offsetof(SteamUtilities_K2_HexToBytes, String) == 0x000000, "Member 'SteamUtilities_K2_HexToBytes::String' has a wrong offset!");
static_assert(offsetof(SteamUtilities_K2_HexToBytes, ReturnValue) == 0x000010, "Member 'SteamUtilities_K2_HexToBytes::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.K2_HexToString
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_K2_HexToString final
{
public:
	TArray<uint8>                                 Array;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_K2_HexToString) == 0x000008, "Wrong alignment on SteamUtilities_K2_HexToString");
static_assert(sizeof(SteamUtilities_K2_HexToString) == 0x000020, "Wrong size on SteamUtilities_K2_HexToString");
static_assert(offsetof(SteamUtilities_K2_HexToString, Array) == 0x000000, "Member 'SteamUtilities_K2_HexToString::Array' has a wrong offset!");
static_assert(offsetof(SteamUtilities_K2_HexToString, ReturnValue) == 0x000010, "Member 'SteamUtilities_K2_HexToString::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.K2_IsPlayerInSession
// 0x0008 (0x0008 - 0x0000)
struct SteamUtilities_K2_IsPlayerInSession final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B1[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_K2_IsPlayerInSession) == 0x000004, "Wrong alignment on SteamUtilities_K2_IsPlayerInSession");
static_assert(sizeof(SteamUtilities_K2_IsPlayerInSession) == 0x000008, "Wrong size on SteamUtilities_K2_IsPlayerInSession");
static_assert(offsetof(SteamUtilities_K2_IsPlayerInSession, LocalUserNum) == 0x000000, "Member 'SteamUtilities_K2_IsPlayerInSession::LocalUserNum' has a wrong offset!");
static_assert(offsetof(SteamUtilities_K2_IsPlayerInSession, ReturnValue) == 0x000004, "Member 'SteamUtilities_K2_IsPlayerInSession::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.KickPlayer
// 0x0030 (0x0030 - 0x0000)
struct SteamUtilities_KickPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      KickedPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KickReason;                                        // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B2[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_KickPlayer) == 0x000008, "Wrong alignment on SteamUtilities_KickPlayer");
static_assert(sizeof(SteamUtilities_KickPlayer) == 0x000030, "Wrong size on SteamUtilities_KickPlayer");
static_assert(offsetof(SteamUtilities_KickPlayer, WorldContextObject) == 0x000000, "Member 'SteamUtilities_KickPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamUtilities_KickPlayer, KickedPlayer) == 0x000008, "Member 'SteamUtilities_KickPlayer::KickedPlayer' has a wrong offset!");
static_assert(offsetof(SteamUtilities_KickPlayer, KickReason) == 0x000010, "Member 'SteamUtilities_KickPlayer::KickReason' has a wrong offset!");
static_assert(offsetof(SteamUtilities_KickPlayer, ReturnValue) == 0x000028, "Member 'SteamUtilities_KickPlayer::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.ListenForSessionInviteAccepted
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_ListenForSessionInviteAccepted final
{
public:
	TDelegate<void(bool bWasSuccessful, int32 LocalPlayerNum, const class FString& InvitedBy, struct FBlueprintSessionResult& Session)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_ListenForSessionInviteAccepted) == 0x000004, "Wrong alignment on SteamUtilities_ListenForSessionInviteAccepted");
static_assert(sizeof(SteamUtilities_ListenForSessionInviteAccepted) == 0x000010, "Wrong size on SteamUtilities_ListenForSessionInviteAccepted");
static_assert(offsetof(SteamUtilities_ListenForSessionInviteAccepted, Callback) == 0x000000, "Member 'SteamUtilities_ListenForSessionInviteAccepted::Callback' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.ListenForSteamMessages
// 0x0010 (0x0010 - 0x0000)
struct SteamUtilities_ListenForSteamMessages final
{
public:
	TDelegate<void(ESteamMessageType Type, const class FString& Message)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_ListenForSteamMessages) == 0x000004, "Wrong alignment on SteamUtilities_ListenForSteamMessages");
static_assert(sizeof(SteamUtilities_ListenForSteamMessages) == 0x000010, "Wrong size on SteamUtilities_ListenForSteamMessages");
static_assert(offsetof(SteamUtilities_ListenForSteamMessages, Callback) == 0x000000, "Member 'SteamUtilities_ListenForSteamMessages::Callback' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.MakeInteger
// 0x0030 (0x0030 - 0x0000)
struct SteamUtilities_MakeInteger final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamSessionSetting                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeInteger) == 0x000008, "Wrong alignment on SteamUtilities_MakeInteger");
static_assert(sizeof(SteamUtilities_MakeInteger) == 0x000030, "Wrong size on SteamUtilities_MakeInteger");
static_assert(offsetof(SteamUtilities_MakeInteger, Value) == 0x000000, "Member 'SteamUtilities_MakeInteger::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeInteger, ReturnValue) == 0x000008, "Member 'SteamUtilities_MakeInteger::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.MakeInventoryUpdateHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_MakeInventoryUpdateHandle final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamInventoryUpdateHandle            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeInventoryUpdateHandle) == 0x000008, "Wrong alignment on SteamUtilities_MakeInventoryUpdateHandle");
static_assert(sizeof(SteamUtilities_MakeInventoryUpdateHandle) == 0x000018, "Wrong size on SteamUtilities_MakeInventoryUpdateHandle");
static_assert(offsetof(SteamUtilities_MakeInventoryUpdateHandle, Value) == 0x000000, "Member 'SteamUtilities_MakeInventoryUpdateHandle::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeInventoryUpdateHandle, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeInventoryUpdateHandle::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.MakePublishedFileID
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_MakePublishedFileID final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakePublishedFileID) == 0x000008, "Wrong alignment on SteamUtilities_MakePublishedFileID");
static_assert(sizeof(SteamUtilities_MakePublishedFileID) == 0x000018, "Wrong size on SteamUtilities_MakePublishedFileID");
static_assert(offsetof(SteamUtilities_MakePublishedFileID, Value) == 0x000000, "Member 'SteamUtilities_MakePublishedFileID::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakePublishedFileID, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakePublishedFileID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.MakeSearchInteger
// 0x0028 (0x0028 - 0x0000)
struct SteamUtilities_MakeSearchInteger final
{
public:
	ESteamComparisonOp                            ComparisonOperator;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamSessionSearchSetting             ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeSearchInteger) == 0x000008, "Wrong alignment on SteamUtilities_MakeSearchInteger");
static_assert(sizeof(SteamUtilities_MakeSearchInteger) == 0x000028, "Wrong size on SteamUtilities_MakeSearchInteger");
static_assert(offsetof(SteamUtilities_MakeSearchInteger, ComparisonOperator) == 0x000000, "Member 'SteamUtilities_MakeSearchInteger::ComparisonOperator' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeSearchInteger, Value) == 0x000004, "Member 'SteamUtilities_MakeSearchInteger::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeSearchInteger, ReturnValue) == 0x000008, "Member 'SteamUtilities_MakeSearchInteger::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.MakeSearchString
// 0x0030 (0x0030 - 0x0000)
struct SteamUtilities_MakeSearchString final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamSessionSearchSetting             ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeSearchString) == 0x000008, "Wrong alignment on SteamUtilities_MakeSearchString");
static_assert(sizeof(SteamUtilities_MakeSearchString) == 0x000030, "Wrong size on SteamUtilities_MakeSearchString");
static_assert(offsetof(SteamUtilities_MakeSearchString, Value) == 0x000000, "Member 'SteamUtilities_MakeSearchString::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeSearchString, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeSearchString::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.MakeSteamGameID
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_MakeSteamGameID final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamGameID                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeSteamGameID) == 0x000008, "Wrong alignment on SteamUtilities_MakeSteamGameID");
static_assert(sizeof(SteamUtilities_MakeSteamGameID) == 0x000018, "Wrong size on SteamUtilities_MakeSteamGameID");
static_assert(offsetof(SteamUtilities_MakeSteamGameID, Value) == 0x000000, "Member 'SteamUtilities_MakeSteamGameID::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeSteamGameID, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeSteamGameID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.MakeSteamID
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_MakeSteamID final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamID                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeSteamID) == 0x000008, "Wrong alignment on SteamUtilities_MakeSteamID");
static_assert(sizeof(SteamUtilities_MakeSteamID) == 0x000018, "Wrong size on SteamUtilities_MakeSteamID");
static_assert(offsetof(SteamUtilities_MakeSteamID, Value) == 0x000000, "Member 'SteamUtilities_MakeSteamID::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeSteamID, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeSteamID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.MakeString
// 0x0038 (0x0038 - 0x0000)
struct SteamUtilities_MakeString final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamSessionSetting                   ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeString) == 0x000008, "Wrong alignment on SteamUtilities_MakeString");
static_assert(sizeof(SteamUtilities_MakeString) == 0x000038, "Wrong size on SteamUtilities_MakeString");
static_assert(offsetof(SteamUtilities_MakeString, Value) == 0x000000, "Member 'SteamUtilities_MakeString::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeString, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeString::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.MakeTicketHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_MakeTicketHandle final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamTicketHandle                     ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B5[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_MakeTicketHandle) == 0x000008, "Wrong alignment on SteamUtilities_MakeTicketHandle");
static_assert(sizeof(SteamUtilities_MakeTicketHandle) == 0x000018, "Wrong size on SteamUtilities_MakeTicketHandle");
static_assert(offsetof(SteamUtilities_MakeTicketHandle, Value) == 0x000000, "Member 'SteamUtilities_MakeTicketHandle::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeTicketHandle, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeTicketHandle::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.MakeUGCHandle
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_MakeUGCHandle final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamUGCHandle                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_MakeUGCHandle) == 0x000008, "Wrong alignment on SteamUtilities_MakeUGCHandle");
static_assert(sizeof(SteamUtilities_MakeUGCHandle) == 0x000018, "Wrong size on SteamUtilities_MakeUGCHandle");
static_assert(offsetof(SteamUtilities_MakeUGCHandle, Value) == 0x000000, "Member 'SteamUtilities_MakeUGCHandle::Value' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MakeUGCHandle, ReturnValue) == 0x000010, "Member 'SteamUtilities_MakeUGCHandle::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.MuteRemoteTalker
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_MuteRemoteTalker final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalUserNum;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B6[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           PlayerState;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSystemWide;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B7[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_MuteRemoteTalker) == 0x000008, "Wrong alignment on SteamUtilities_MuteRemoteTalker");
static_assert(sizeof(SteamUtilities_MuteRemoteTalker) == 0x000020, "Wrong size on SteamUtilities_MuteRemoteTalker");
static_assert(offsetof(SteamUtilities_MuteRemoteTalker, WorldContextObject) == 0x000000, "Member 'SteamUtilities_MuteRemoteTalker::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MuteRemoteTalker, LocalUserNum) == 0x000008, "Member 'SteamUtilities_MuteRemoteTalker::LocalUserNum' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MuteRemoteTalker, PlayerState) == 0x000010, "Member 'SteamUtilities_MuteRemoteTalker::PlayerState' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MuteRemoteTalker, bIsSystemWide) == 0x000018, "Member 'SteamUtilities_MuteRemoteTalker::bIsSystemWide' has a wrong offset!");
static_assert(offsetof(SteamUtilities_MuteRemoteTalker, ReturnValue) == 0x000019, "Member 'SteamUtilities_MuteRemoteTalker::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.NotEqual
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_NotEqual final
{
public:
	struct FSteamID                               A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_NotEqual) == 0x000008, "Wrong alignment on SteamUtilities_NotEqual");
static_assert(sizeof(SteamUtilities_NotEqual) == 0x000018, "Wrong size on SteamUtilities_NotEqual");
static_assert(offsetof(SteamUtilities_NotEqual, A) == 0x000000, "Member 'SteamUtilities_NotEqual::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_NotEqual, B) == 0x000008, "Member 'SteamUtilities_NotEqual::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_NotEqual, ReturnValue) == 0x000010, "Member 'SteamUtilities_NotEqual::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.PublishedFileID_Equals
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_PublishedFileID_Equals final
{
public:
	struct FPublishedFileID                       A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B9[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_PublishedFileID_Equals) == 0x000008, "Wrong alignment on SteamUtilities_PublishedFileID_Equals");
static_assert(sizeof(SteamUtilities_PublishedFileID_Equals) == 0x000018, "Wrong size on SteamUtilities_PublishedFileID_Equals");
static_assert(offsetof(SteamUtilities_PublishedFileID_Equals, A) == 0x000000, "Member 'SteamUtilities_PublishedFileID_Equals::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_PublishedFileID_Equals, B) == 0x000008, "Member 'SteamUtilities_PublishedFileID_Equals::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_PublishedFileID_Equals, ReturnValue) == 0x000010, "Member 'SteamUtilities_PublishedFileID_Equals::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.PublishedFileID_Equals_Exec
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_PublishedFileID_Equals_Exec final
{
public:
	struct FPublishedFileID                       A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProIdentical                        Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24BA[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_PublishedFileID_Equals_Exec) == 0x000008, "Wrong alignment on SteamUtilities_PublishedFileID_Equals_Exec");
static_assert(sizeof(SteamUtilities_PublishedFileID_Equals_Exec) == 0x000018, "Wrong size on SteamUtilities_PublishedFileID_Equals_Exec");
static_assert(offsetof(SteamUtilities_PublishedFileID_Equals_Exec, A) == 0x000000, "Member 'SteamUtilities_PublishedFileID_Equals_Exec::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_PublishedFileID_Equals_Exec, B) == 0x000008, "Member 'SteamUtilities_PublishedFileID_Equals_Exec::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_PublishedFileID_Equals_Exec, Result) == 0x000010, "Member 'SteamUtilities_PublishedFileID_Equals_Exec::Result' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.PublishedFileID_NotEquals
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_PublishedFileID_NotEquals final
{
public:
	struct FPublishedFileID                       A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPublishedFileID                       B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24BB[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_PublishedFileID_NotEquals) == 0x000008, "Wrong alignment on SteamUtilities_PublishedFileID_NotEquals");
static_assert(sizeof(SteamUtilities_PublishedFileID_NotEquals) == 0x000018, "Wrong size on SteamUtilities_PublishedFileID_NotEquals");
static_assert(offsetof(SteamUtilities_PublishedFileID_NotEquals, A) == 0x000000, "Member 'SteamUtilities_PublishedFileID_NotEquals::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_PublishedFileID_NotEquals, B) == 0x000008, "Member 'SteamUtilities_PublishedFileID_NotEquals::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_PublishedFileID_NotEquals, ReturnValue) == 0x000010, "Member 'SteamUtilities_PublishedFileID_NotEquals::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.ReadFileToBytes
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_ReadFileToBytes final
{
public:
	class FString                                 AbsoluteFilePath;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_ReadFileToBytes) == 0x000008, "Wrong alignment on SteamUtilities_ReadFileToBytes");
static_assert(sizeof(SteamUtilities_ReadFileToBytes) == 0x000020, "Wrong size on SteamUtilities_ReadFileToBytes");
static_assert(offsetof(SteamUtilities_ReadFileToBytes, AbsoluteFilePath) == 0x000000, "Member 'SteamUtilities_ReadFileToBytes::AbsoluteFilePath' has a wrong offset!");
static_assert(offsetof(SteamUtilities_ReadFileToBytes, ReturnValue) == 0x000010, "Member 'SteamUtilities_ReadFileToBytes::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.ReadFriendList
// 0x0028 (0x0028 - 0x0000)
struct SteamUtilities_ReadFriendList final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EFriendListType                               FriendListType;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24BC[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_ReadFriendList) == 0x000008, "Wrong alignment on SteamUtilities_ReadFriendList");
static_assert(sizeof(SteamUtilities_ReadFriendList) == 0x000028, "Wrong size on SteamUtilities_ReadFriendList");
static_assert(offsetof(SteamUtilities_ReadFriendList, WorldContextObject) == 0x000000, "Member 'SteamUtilities_ReadFriendList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamUtilities_ReadFriendList, LatentInfo) == 0x000008, "Member 'SteamUtilities_ReadFriendList::LatentInfo' has a wrong offset!");
static_assert(offsetof(SteamUtilities_ReadFriendList, FriendListType) == 0x000020, "Member 'SteamUtilities_ReadFriendList::FriendListType' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.SetLocalHost
// 0x0088 (0x0088 - 0x0000)
struct SteamUtilities_SetLocalHost final
{
public:
	struct FSteamNetworkingIdentity               SteamNetworkingIdentity;                           // 0x0000(0x0088)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_SetLocalHost) == 0x000001, "Wrong alignment on SteamUtilities_SetLocalHost");
static_assert(sizeof(SteamUtilities_SetLocalHost) == 0x000088, "Wrong size on SteamUtilities_SetLocalHost");
static_assert(offsetof(SteamUtilities_SetLocalHost, SteamNetworkingIdentity) == 0x000000, "Member 'SteamUtilities_SetLocalHost::SteamNetworkingIdentity' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.SetPSNId
// 0x0090 (0x0090 - 0x0000)
struct SteamUtilities_SetPSNId final
{
public:
	struct FSteamNetworkingIdentity               SteamNetworkingIdentity;                           // 0x0000(0x0088)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int64                                         ID;                                                // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_SetPSNId) == 0x000008, "Wrong alignment on SteamUtilities_SetPSNId");
static_assert(sizeof(SteamUtilities_SetPSNId) == 0x000090, "Wrong size on SteamUtilities_SetPSNId");
static_assert(offsetof(SteamUtilities_SetPSNId, SteamNetworkingIdentity) == 0x000000, "Member 'SteamUtilities_SetPSNId::SteamNetworkingIdentity' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SetPSNId, ID) == 0x000088, "Member 'SteamUtilities_SetPSNId::ID' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.SetStadiaId
// 0x0090 (0x0090 - 0x0000)
struct SteamUtilities_SetStadiaId final
{
public:
	struct FSteamNetworkingIdentity               SteamNetworkingIdentity;                           // 0x0000(0x0088)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int64                                         ID;                                                // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_SetStadiaId) == 0x000008, "Wrong alignment on SteamUtilities_SetStadiaId");
static_assert(sizeof(SteamUtilities_SetStadiaId) == 0x000090, "Wrong size on SteamUtilities_SetStadiaId");
static_assert(offsetof(SteamUtilities_SetStadiaId, SteamNetworkingIdentity) == 0x000000, "Member 'SteamUtilities_SetStadiaId::SteamNetworkingIdentity' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SetStadiaId, ID) == 0x000088, "Member 'SteamUtilities_SetStadiaId::ID' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.SetSteamId64
// 0x0090 (0x0090 - 0x0000)
struct SteamUtilities_SetSteamId64 final
{
public:
	struct FSteamNetworkingIdentity               SteamNetworkingIdentity;                           // 0x0000(0x0088)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamID                               SteamID;                                           // 0x0088(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_SetSteamId64) == 0x000008, "Wrong alignment on SteamUtilities_SetSteamId64");
static_assert(sizeof(SteamUtilities_SetSteamId64) == 0x000090, "Wrong size on SteamUtilities_SetSteamId64");
static_assert(offsetof(SteamUtilities_SetSteamId64, SteamNetworkingIdentity) == 0x000000, "Member 'SteamUtilities_SetSteamId64::SteamNetworkingIdentity' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SetSteamId64, SteamID) == 0x000088, "Member 'SteamUtilities_SetSteamId64::SteamID' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.SetType
// 0x0089 (0x0089 - 0x0000)
struct SteamUtilities_SetType final
{
public:
	struct FSteamNetworkingIdentity               SteamNetworkingIdentity;                           // 0x0000(0x0088)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreNetworkingIdentityType              Type;                                              // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_SetType) == 0x000001, "Wrong alignment on SteamUtilities_SetType");
static_assert(sizeof(SteamUtilities_SetType) == 0x000089, "Wrong size on SteamUtilities_SetType");
static_assert(offsetof(SteamUtilities_SetType, SteamNetworkingIdentity) == 0x000000, "Member 'SteamUtilities_SetType::SteamNetworkingIdentity' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SetType, Type) == 0x000088, "Member 'SteamUtilities_SetType::Type' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.SetXboxPairwiseId
// 0x0098 (0x0098 - 0x0000)
struct SteamUtilities_SetXboxPairwiseId final
{
public:
	struct FSteamNetworkingIdentity               SteamNetworkingIdentity;                           // 0x0000(0x0088)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0088(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamUtilities_SetXboxPairwiseId) == 0x000008, "Wrong alignment on SteamUtilities_SetXboxPairwiseId");
static_assert(sizeof(SteamUtilities_SetXboxPairwiseId) == 0x000098, "Wrong size on SteamUtilities_SetXboxPairwiseId");
static_assert(offsetof(SteamUtilities_SetXboxPairwiseId, SteamNetworkingIdentity) == 0x000000, "Member 'SteamUtilities_SetXboxPairwiseId::SteamNetworkingIdentity' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SetXboxPairwiseId, String) == 0x000088, "Member 'SteamUtilities_SetXboxPairwiseId::String' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.SteamItemInstanceID_Equals
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_SteamItemInstanceID_Equals final
{
public:
	struct FSteamItemInstanceID                   A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24BD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_SteamItemInstanceID_Equals) == 0x000008, "Wrong alignment on SteamUtilities_SteamItemInstanceID_Equals");
static_assert(sizeof(SteamUtilities_SteamItemInstanceID_Equals) == 0x000018, "Wrong size on SteamUtilities_SteamItemInstanceID_Equals");
static_assert(offsetof(SteamUtilities_SteamItemInstanceID_Equals, A) == 0x000000, "Member 'SteamUtilities_SteamItemInstanceID_Equals::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SteamItemInstanceID_Equals, B) == 0x000008, "Member 'SteamUtilities_SteamItemInstanceID_Equals::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SteamItemInstanceID_Equals, ReturnValue) == 0x000010, "Member 'SteamUtilities_SteamItemInstanceID_Equals::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.SteamItemInstanceID_Equals_Exec
// 0x0018 (0x0018 - 0x0000)
struct SteamUtilities_SteamItemInstanceID_Equals_Exec final
{
public:
	struct FSteamItemInstanceID                   A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSteamItemInstanceID                   B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESteamCoreProIdentical                        Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24BE[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_SteamItemInstanceID_Equals_Exec) == 0x000008, "Wrong alignment on SteamUtilities_SteamItemInstanceID_Equals_Exec");
static_assert(sizeof(SteamUtilities_SteamItemInstanceID_Equals_Exec) == 0x000018, "Wrong size on SteamUtilities_SteamItemInstanceID_Equals_Exec");
static_assert(offsetof(SteamUtilities_SteamItemInstanceID_Equals_Exec, A) == 0x000000, "Member 'SteamUtilities_SteamItemInstanceID_Equals_Exec::A' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SteamItemInstanceID_Equals_Exec, B) == 0x000008, "Member 'SteamUtilities_SteamItemInstanceID_Equals_Exec::B' has a wrong offset!");
static_assert(offsetof(SteamUtilities_SteamItemInstanceID_Equals_Exec, Result) == 0x000010, "Member 'SteamUtilities_SteamItemInstanceID_Equals_Exec::Result' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.TryJoinServer
// 0x0060 (0x0060 - 0x0000)
struct SteamUtilities_TryJoinServer final
{
public:
	class FString                                 OutErrorMessage;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSteamServerAddr                       ServerAddr;                                        // 0x0018(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class APlayerController*                      SpecificPlayer;                                    // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingSockets;                                     // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0059(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24BF[0x6];                                     // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_TryJoinServer) == 0x000008, "Wrong alignment on SteamUtilities_TryJoinServer");
static_assert(sizeof(SteamUtilities_TryJoinServer) == 0x000060, "Wrong size on SteamUtilities_TryJoinServer");
static_assert(offsetof(SteamUtilities_TryJoinServer, OutErrorMessage) == 0x000000, "Member 'SteamUtilities_TryJoinServer::OutErrorMessage' has a wrong offset!");
static_assert(offsetof(SteamUtilities_TryJoinServer, WorldContextObject) == 0x000010, "Member 'SteamUtilities_TryJoinServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamUtilities_TryJoinServer, ServerAddr) == 0x000018, "Member 'SteamUtilities_TryJoinServer::ServerAddr' has a wrong offset!");
static_assert(offsetof(SteamUtilities_TryJoinServer, SpecificPlayer) == 0x000050, "Member 'SteamUtilities_TryJoinServer::SpecificPlayer' has a wrong offset!");
static_assert(offsetof(SteamUtilities_TryJoinServer, bUsingSockets) == 0x000058, "Member 'SteamUtilities_TryJoinServer::bUsingSockets' has a wrong offset!");
static_assert(offsetof(SteamUtilities_TryJoinServer, ReturnValue) == 0x000059, "Member 'SteamUtilities_TryJoinServer::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.UnmuteRemoteTalker
// 0x0020 (0x0020 - 0x0000)
struct SteamUtilities_UnmuteRemoteTalker final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalUserNum;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C0[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           PlayerState;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSystemWide;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C1[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_UnmuteRemoteTalker) == 0x000008, "Wrong alignment on SteamUtilities_UnmuteRemoteTalker");
static_assert(sizeof(SteamUtilities_UnmuteRemoteTalker) == 0x000020, "Wrong size on SteamUtilities_UnmuteRemoteTalker");
static_assert(offsetof(SteamUtilities_UnmuteRemoteTalker, WorldContextObject) == 0x000000, "Member 'SteamUtilities_UnmuteRemoteTalker::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SteamUtilities_UnmuteRemoteTalker, LocalUserNum) == 0x000008, "Member 'SteamUtilities_UnmuteRemoteTalker::LocalUserNum' has a wrong offset!");
static_assert(offsetof(SteamUtilities_UnmuteRemoteTalker, PlayerState) == 0x000010, "Member 'SteamUtilities_UnmuteRemoteTalker::PlayerState' has a wrong offset!");
static_assert(offsetof(SteamUtilities_UnmuteRemoteTalker, bIsSystemWide) == 0x000018, "Member 'SteamUtilities_UnmuteRemoteTalker::bIsSystemWide' has a wrong offset!");
static_assert(offsetof(SteamUtilities_UnmuteRemoteTalker, ReturnValue) == 0x000019, "Member 'SteamUtilities_UnmuteRemoteTalker::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamUtilities.WriteBytesToFile
// 0x0030 (0x0030 - 0x0000)
struct SteamUtilities_WriteBytesToFile final
{
public:
	bool                                          bOverwriteIfExists;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AbsoluteFilePath;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 DataBuffer;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C3[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamUtilities_WriteBytesToFile) == 0x000008, "Wrong alignment on SteamUtilities_WriteBytesToFile");
static_assert(sizeof(SteamUtilities_WriteBytesToFile) == 0x000030, "Wrong size on SteamUtilities_WriteBytesToFile");
static_assert(offsetof(SteamUtilities_WriteBytesToFile, bOverwriteIfExists) == 0x000000, "Member 'SteamUtilities_WriteBytesToFile::bOverwriteIfExists' has a wrong offset!");
static_assert(offsetof(SteamUtilities_WriteBytesToFile, AbsoluteFilePath) == 0x000008, "Member 'SteamUtilities_WriteBytesToFile::AbsoluteFilePath' has a wrong offset!");
static_assert(offsetof(SteamUtilities_WriteBytesToFile, DataBuffer) == 0x000018, "Member 'SteamUtilities_WriteBytesToFile::DataBuffer' has a wrong offset!");
static_assert(offsetof(SteamUtilities_WriteBytesToFile, ReturnValue) == 0x000028, "Member 'SteamUtilities_WriteBytesToFile::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.BOverlayNeedsPresent
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_BOverlayNeedsPresent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_BOverlayNeedsPresent) == 0x000001, "Wrong alignment on SteamProUtils_BOverlayNeedsPresent");
static_assert(sizeof(SteamProUtils_BOverlayNeedsPresent) == 0x000001, "Wrong size on SteamProUtils_BOverlayNeedsPresent");
static_assert(offsetof(SteamProUtils_BOverlayNeedsPresent, ReturnValue) == 0x000000, "Member 'SteamProUtils_BOverlayNeedsPresent::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.DismissFloatingGamepadTextInput
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_DismissFloatingGamepadTextInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_DismissFloatingGamepadTextInput) == 0x000001, "Wrong alignment on SteamProUtils_DismissFloatingGamepadTextInput");
static_assert(sizeof(SteamProUtils_DismissFloatingGamepadTextInput) == 0x000001, "Wrong size on SteamProUtils_DismissFloatingGamepadTextInput");
static_assert(offsetof(SteamProUtils_DismissFloatingGamepadTextInput, ReturnValue) == 0x000000, "Member 'SteamProUtils_DismissFloatingGamepadTextInput::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.DismissGamepadTextInput
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_DismissGamepadTextInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_DismissGamepadTextInput) == 0x000001, "Wrong alignment on SteamProUtils_DismissGamepadTextInput");
static_assert(sizeof(SteamProUtils_DismissGamepadTextInput) == 0x000001, "Wrong size on SteamProUtils_DismissGamepadTextInput");
static_assert(offsetof(SteamProUtils_DismissGamepadTextInput, ReturnValue) == 0x000000, "Member 'SteamProUtils_DismissGamepadTextInput::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetAppID
// 0x0004 (0x0004 - 0x0000)
struct SteamProUtils_GetAppID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetAppID) == 0x000004, "Wrong alignment on SteamProUtils_GetAppID");
static_assert(sizeof(SteamProUtils_GetAppID) == 0x000004, "Wrong size on SteamProUtils_GetAppID");
static_assert(offsetof(SteamProUtils_GetAppID, ReturnValue) == 0x000000, "Member 'SteamProUtils_GetAppID::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetAppID_Pure
// 0x0004 (0x0004 - 0x0000)
struct SteamProUtils_GetAppID_Pure final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetAppID_Pure) == 0x000004, "Wrong alignment on SteamProUtils_GetAppID_Pure");
static_assert(sizeof(SteamProUtils_GetAppID_Pure) == 0x000004, "Wrong size on SteamProUtils_GetAppID_Pure");
static_assert(offsetof(SteamProUtils_GetAppID_Pure, ReturnValue) == 0x000000, "Member 'SteamProUtils_GetAppID_Pure::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetConnectedUniverse
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_GetConnectedUniverse final
{
public:
	ESteamUniverse                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetConnectedUniverse) == 0x000001, "Wrong alignment on SteamProUtils_GetConnectedUniverse");
static_assert(sizeof(SteamProUtils_GetConnectedUniverse) == 0x000001, "Wrong size on SteamProUtils_GetConnectedUniverse");
static_assert(offsetof(SteamProUtils_GetConnectedUniverse, ReturnValue) == 0x000000, "Member 'SteamProUtils_GetConnectedUniverse::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetCurrentBatteryPower
// 0x0004 (0x0004 - 0x0000)
struct SteamProUtils_GetCurrentBatteryPower final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetCurrentBatteryPower) == 0x000004, "Wrong alignment on SteamProUtils_GetCurrentBatteryPower");
static_assert(sizeof(SteamProUtils_GetCurrentBatteryPower) == 0x000004, "Wrong size on SteamProUtils_GetCurrentBatteryPower");
static_assert(offsetof(SteamProUtils_GetCurrentBatteryPower, ReturnValue) == 0x000000, "Member 'SteamProUtils_GetCurrentBatteryPower::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetEnteredGamepadTextInput
// 0x0018 (0x0018 - 0x0000)
struct SteamProUtils_GetEnteredGamepadTextInput final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C5[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUtils_GetEnteredGamepadTextInput) == 0x000008, "Wrong alignment on SteamProUtils_GetEnteredGamepadTextInput");
static_assert(sizeof(SteamProUtils_GetEnteredGamepadTextInput) == 0x000018, "Wrong size on SteamProUtils_GetEnteredGamepadTextInput");
static_assert(offsetof(SteamProUtils_GetEnteredGamepadTextInput, Text) == 0x000000, "Member 'SteamProUtils_GetEnteredGamepadTextInput::Text' has a wrong offset!");
static_assert(offsetof(SteamProUtils_GetEnteredGamepadTextInput, ReturnValue) == 0x000010, "Member 'SteamProUtils_GetEnteredGamepadTextInput::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetEnteredGamepadTextLength
// 0x0004 (0x0004 - 0x0000)
struct SteamProUtils_GetEnteredGamepadTextLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetEnteredGamepadTextLength) == 0x000004, "Wrong alignment on SteamProUtils_GetEnteredGamepadTextLength");
static_assert(sizeof(SteamProUtils_GetEnteredGamepadTextLength) == 0x000004, "Wrong size on SteamProUtils_GetEnteredGamepadTextLength");
static_assert(offsetof(SteamProUtils_GetEnteredGamepadTextLength, ReturnValue) == 0x000000, "Member 'SteamProUtils_GetEnteredGamepadTextLength::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetImageRGBA
// 0x0020 (0x0020 - 0x0000)
struct SteamProUtils_GetImageRGBA final
{
public:
	int32                                         IImage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 OutBuffer;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C7[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUtils_GetImageRGBA) == 0x000008, "Wrong alignment on SteamProUtils_GetImageRGBA");
static_assert(sizeof(SteamProUtils_GetImageRGBA) == 0x000020, "Wrong size on SteamProUtils_GetImageRGBA");
static_assert(offsetof(SteamProUtils_GetImageRGBA, IImage) == 0x000000, "Member 'SteamProUtils_GetImageRGBA::IImage' has a wrong offset!");
static_assert(offsetof(SteamProUtils_GetImageRGBA, OutBuffer) == 0x000008, "Member 'SteamProUtils_GetImageRGBA::OutBuffer' has a wrong offset!");
static_assert(offsetof(SteamProUtils_GetImageRGBA, ReturnValue) == 0x000018, "Member 'SteamProUtils_GetImageRGBA::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetImageSize
// 0x0010 (0x0010 - 0x0000)
struct SteamProUtils_GetImageSize final
{
public:
	int32                                         IImage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C8[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUtils_GetImageSize) == 0x000004, "Wrong alignment on SteamProUtils_GetImageSize");
static_assert(sizeof(SteamProUtils_GetImageSize) == 0x000010, "Wrong size on SteamProUtils_GetImageSize");
static_assert(offsetof(SteamProUtils_GetImageSize, IImage) == 0x000000, "Member 'SteamProUtils_GetImageSize::IImage' has a wrong offset!");
static_assert(offsetof(SteamProUtils_GetImageSize, Width) == 0x000004, "Member 'SteamProUtils_GetImageSize::Width' has a wrong offset!");
static_assert(offsetof(SteamProUtils_GetImageSize, Height) == 0x000008, "Member 'SteamProUtils_GetImageSize::Height' has a wrong offset!");
static_assert(offsetof(SteamProUtils_GetImageSize, ReturnValue) == 0x00000C, "Member 'SteamProUtils_GetImageSize::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetIPCCallCount
// 0x0004 (0x0004 - 0x0000)
struct SteamProUtils_GetIPCCallCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetIPCCallCount) == 0x000004, "Wrong alignment on SteamProUtils_GetIPCCallCount");
static_assert(sizeof(SteamProUtils_GetIPCCallCount) == 0x000004, "Wrong size on SteamProUtils_GetIPCCallCount");
static_assert(offsetof(SteamProUtils_GetIPCCallCount, ReturnValue) == 0x000000, "Member 'SteamProUtils_GetIPCCallCount::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetIPCountry
// 0x0010 (0x0010 - 0x0000)
struct SteamProUtils_GetIPCountry final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetIPCountry) == 0x000008, "Wrong alignment on SteamProUtils_GetIPCountry");
static_assert(sizeof(SteamProUtils_GetIPCountry) == 0x000010, "Wrong size on SteamProUtils_GetIPCountry");
static_assert(offsetof(SteamProUtils_GetIPCountry, ReturnValue) == 0x000000, "Member 'SteamProUtils_GetIPCountry::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetIPv6ConnectivityState
// 0x0002 (0x0002 - 0x0000)
struct SteamProUtils_GetIPv6ConnectivityState final
{
public:
	ESteamCoreIPv6ConnectivityProtocol            Protocol;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamCoreIPv6ConnectivityState               ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetIPv6ConnectivityState) == 0x000001, "Wrong alignment on SteamProUtils_GetIPv6ConnectivityState");
static_assert(sizeof(SteamProUtils_GetIPv6ConnectivityState) == 0x000002, "Wrong size on SteamProUtils_GetIPv6ConnectivityState");
static_assert(offsetof(SteamProUtils_GetIPv6ConnectivityState, Protocol) == 0x000000, "Member 'SteamProUtils_GetIPv6ConnectivityState::Protocol' has a wrong offset!");
static_assert(offsetof(SteamProUtils_GetIPv6ConnectivityState, ReturnValue) == 0x000001, "Member 'SteamProUtils_GetIPv6ConnectivityState::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetSecondsSinceAppActive
// 0x0004 (0x0004 - 0x0000)
struct SteamProUtils_GetSecondsSinceAppActive final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetSecondsSinceAppActive) == 0x000004, "Wrong alignment on SteamProUtils_GetSecondsSinceAppActive");
static_assert(sizeof(SteamProUtils_GetSecondsSinceAppActive) == 0x000004, "Wrong size on SteamProUtils_GetSecondsSinceAppActive");
static_assert(offsetof(SteamProUtils_GetSecondsSinceAppActive, ReturnValue) == 0x000000, "Member 'SteamProUtils_GetSecondsSinceAppActive::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetSecondsSinceComputerActive
// 0x0004 (0x0004 - 0x0000)
struct SteamProUtils_GetSecondsSinceComputerActive final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetSecondsSinceComputerActive) == 0x000004, "Wrong alignment on SteamProUtils_GetSecondsSinceComputerActive");
static_assert(sizeof(SteamProUtils_GetSecondsSinceComputerActive) == 0x000004, "Wrong size on SteamProUtils_GetSecondsSinceComputerActive");
static_assert(offsetof(SteamProUtils_GetSecondsSinceComputerActive, ReturnValue) == 0x000000, "Member 'SteamProUtils_GetSecondsSinceComputerActive::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetServerRealTime
// 0x0004 (0x0004 - 0x0000)
struct SteamProUtils_GetServerRealTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetServerRealTime) == 0x000004, "Wrong alignment on SteamProUtils_GetServerRealTime");
static_assert(sizeof(SteamProUtils_GetServerRealTime) == 0x000004, "Wrong size on SteamProUtils_GetServerRealTime");
static_assert(offsetof(SteamProUtils_GetServerRealTime, ReturnValue) == 0x000000, "Member 'SteamProUtils_GetServerRealTime::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetSteamUILanguage
// 0x0010 (0x0010 - 0x0000)
struct SteamProUtils_GetSteamUILanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetSteamUILanguage) == 0x000008, "Wrong alignment on SteamProUtils_GetSteamUILanguage");
static_assert(sizeof(SteamProUtils_GetSteamUILanguage) == 0x000010, "Wrong size on SteamProUtils_GetSteamUILanguage");
static_assert(offsetof(SteamProUtils_GetSteamUILanguage, ReturnValue) == 0x000000, "Member 'SteamProUtils_GetSteamUILanguage::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.GetSteamUtils
// 0x0008 (0x0008 - 0x0000)
struct SteamProUtils_GetSteamUtils final
{
public:
	class USteamProUtils*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_GetSteamUtils) == 0x000008, "Wrong alignment on SteamProUtils_GetSteamUtils");
static_assert(sizeof(SteamProUtils_GetSteamUtils) == 0x000008, "Wrong size on SteamProUtils_GetSteamUtils");
static_assert(offsetof(SteamProUtils_GetSteamUtils, ReturnValue) == 0x000000, "Member 'SteamProUtils_GetSteamUtils::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.InitFilterText
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_InitFilterText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_InitFilterText) == 0x000001, "Wrong alignment on SteamProUtils_InitFilterText");
static_assert(sizeof(SteamProUtils_InitFilterText) == 0x000001, "Wrong size on SteamProUtils_InitFilterText");
static_assert(offsetof(SteamProUtils_InitFilterText, ReturnValue) == 0x000000, "Member 'SteamProUtils_InitFilterText::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.IsOverlayEnabled
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_IsOverlayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_IsOverlayEnabled) == 0x000001, "Wrong alignment on SteamProUtils_IsOverlayEnabled");
static_assert(sizeof(SteamProUtils_IsOverlayEnabled) == 0x000001, "Wrong size on SteamProUtils_IsOverlayEnabled");
static_assert(offsetof(SteamProUtils_IsOverlayEnabled, ReturnValue) == 0x000000, "Member 'SteamProUtils_IsOverlayEnabled::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.IsSteamChinaLauncher
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_IsSteamChinaLauncher final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_IsSteamChinaLauncher) == 0x000001, "Wrong alignment on SteamProUtils_IsSteamChinaLauncher");
static_assert(sizeof(SteamProUtils_IsSteamChinaLauncher) == 0x000001, "Wrong size on SteamProUtils_IsSteamChinaLauncher");
static_assert(offsetof(SteamProUtils_IsSteamChinaLauncher, ReturnValue) == 0x000000, "Member 'SteamProUtils_IsSteamChinaLauncher::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.IsSteamInBigPictureMode
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_IsSteamInBigPictureMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_IsSteamInBigPictureMode) == 0x000001, "Wrong alignment on SteamProUtils_IsSteamInBigPictureMode");
static_assert(sizeof(SteamProUtils_IsSteamInBigPictureMode) == 0x000001, "Wrong size on SteamProUtils_IsSteamInBigPictureMode");
static_assert(offsetof(SteamProUtils_IsSteamInBigPictureMode, ReturnValue) == 0x000000, "Member 'SteamProUtils_IsSteamInBigPictureMode::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.IsSteamRunningInVR
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_IsSteamRunningInVR final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_IsSteamRunningInVR) == 0x000001, "Wrong alignment on SteamProUtils_IsSteamRunningInVR");
static_assert(sizeof(SteamProUtils_IsSteamRunningInVR) == 0x000001, "Wrong size on SteamProUtils_IsSteamRunningInVR");
static_assert(offsetof(SteamProUtils_IsSteamRunningInVR, ReturnValue) == 0x000000, "Member 'SteamProUtils_IsSteamRunningInVR::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.IsVRHeadsetStreamingEnabled
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_IsVRHeadsetStreamingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_IsVRHeadsetStreamingEnabled) == 0x000001, "Wrong alignment on SteamProUtils_IsVRHeadsetStreamingEnabled");
static_assert(sizeof(SteamProUtils_IsVRHeadsetStreamingEnabled) == 0x000001, "Wrong size on SteamProUtils_IsVRHeadsetStreamingEnabled");
static_assert(offsetof(SteamProUtils_IsVRHeadsetStreamingEnabled, ReturnValue) == 0x000000, "Member 'SteamProUtils_IsVRHeadsetStreamingEnabled::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.SetGameLauncherMode
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_SetGameLauncherMode final
{
public:
	bool                                          bLauncherMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_SetGameLauncherMode) == 0x000001, "Wrong alignment on SteamProUtils_SetGameLauncherMode");
static_assert(sizeof(SteamProUtils_SetGameLauncherMode) == 0x000001, "Wrong size on SteamProUtils_SetGameLauncherMode");
static_assert(offsetof(SteamProUtils_SetGameLauncherMode, bLauncherMode) == 0x000000, "Member 'SteamProUtils_SetGameLauncherMode::bLauncherMode' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.SetOverlayNotificationInset
// 0x0008 (0x0008 - 0x0000)
struct SteamProUtils_SetOverlayNotificationInset final
{
public:
	int32                                         HorizontalInset;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VerticalInset;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_SetOverlayNotificationInset) == 0x000004, "Wrong alignment on SteamProUtils_SetOverlayNotificationInset");
static_assert(sizeof(SteamProUtils_SetOverlayNotificationInset) == 0x000008, "Wrong size on SteamProUtils_SetOverlayNotificationInset");
static_assert(offsetof(SteamProUtils_SetOverlayNotificationInset, HorizontalInset) == 0x000000, "Member 'SteamProUtils_SetOverlayNotificationInset::HorizontalInset' has a wrong offset!");
static_assert(offsetof(SteamProUtils_SetOverlayNotificationInset, VerticalInset) == 0x000004, "Member 'SteamProUtils_SetOverlayNotificationInset::VerticalInset' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.SetOverlayNotificationPosition
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_SetOverlayNotificationPosition final
{
public:
	ESteamNotificationPosition                    NotificationPosition;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_SetOverlayNotificationPosition) == 0x000001, "Wrong alignment on SteamProUtils_SetOverlayNotificationPosition");
static_assert(sizeof(SteamProUtils_SetOverlayNotificationPosition) == 0x000001, "Wrong size on SteamProUtils_SetOverlayNotificationPosition");
static_assert(offsetof(SteamProUtils_SetOverlayNotificationPosition, NotificationPosition) == 0x000000, "Member 'SteamProUtils_SetOverlayNotificationPosition::NotificationPosition' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.SetVRHeadsetStreamingEnabled
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_SetVRHeadsetStreamingEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_SetVRHeadsetStreamingEnabled) == 0x000001, "Wrong alignment on SteamProUtils_SetVRHeadsetStreamingEnabled");
static_assert(sizeof(SteamProUtils_SetVRHeadsetStreamingEnabled) == 0x000001, "Wrong size on SteamProUtils_SetVRHeadsetStreamingEnabled");
static_assert(offsetof(SteamProUtils_SetVRHeadsetStreamingEnabled, bEnabled) == 0x000000, "Member 'SteamProUtils_SetVRHeadsetStreamingEnabled::bEnabled' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.ShowFloatingGamepadTextInput
// 0x0018 (0x0018 - 0x0000)
struct SteamProUtils_ShowFloatingGamepadTextInput final
{
public:
	ESteamFloatingGamepadTextInputMode            KeyboardMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TextFieldXPosition;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextFieldYPosition;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextFieldWidth;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextFieldHeight;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24CA[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUtils_ShowFloatingGamepadTextInput) == 0x000004, "Wrong alignment on SteamProUtils_ShowFloatingGamepadTextInput");
static_assert(sizeof(SteamProUtils_ShowFloatingGamepadTextInput) == 0x000018, "Wrong size on SteamProUtils_ShowFloatingGamepadTextInput");
static_assert(offsetof(SteamProUtils_ShowFloatingGamepadTextInput, KeyboardMode) == 0x000000, "Member 'SteamProUtils_ShowFloatingGamepadTextInput::KeyboardMode' has a wrong offset!");
static_assert(offsetof(SteamProUtils_ShowFloatingGamepadTextInput, TextFieldXPosition) == 0x000004, "Member 'SteamProUtils_ShowFloatingGamepadTextInput::TextFieldXPosition' has a wrong offset!");
static_assert(offsetof(SteamProUtils_ShowFloatingGamepadTextInput, TextFieldYPosition) == 0x000008, "Member 'SteamProUtils_ShowFloatingGamepadTextInput::TextFieldYPosition' has a wrong offset!");
static_assert(offsetof(SteamProUtils_ShowFloatingGamepadTextInput, TextFieldWidth) == 0x00000C, "Member 'SteamProUtils_ShowFloatingGamepadTextInput::TextFieldWidth' has a wrong offset!");
static_assert(offsetof(SteamProUtils_ShowFloatingGamepadTextInput, TextFieldHeight) == 0x000010, "Member 'SteamProUtils_ShowFloatingGamepadTextInput::TextFieldHeight' has a wrong offset!");
static_assert(offsetof(SteamProUtils_ShowFloatingGamepadTextInput, ReturnValue) == 0x000014, "Member 'SteamProUtils_ShowFloatingGamepadTextInput::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.ShowGamepadTextInput
// 0x0038 (0x0038 - 0x0000)
struct SteamProUtils_ShowGamepadTextInput final
{
public:
	ESteamGamepadTextInputMode                    InputMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamGamepadTextInputLineMode                LineInputMode;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24CB[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharMax;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24CC[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExistingText;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24CD[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProUtils_ShowGamepadTextInput) == 0x000008, "Wrong alignment on SteamProUtils_ShowGamepadTextInput");
static_assert(sizeof(SteamProUtils_ShowGamepadTextInput) == 0x000038, "Wrong size on SteamProUtils_ShowGamepadTextInput");
static_assert(offsetof(SteamProUtils_ShowGamepadTextInput, InputMode) == 0x000000, "Member 'SteamProUtils_ShowGamepadTextInput::InputMode' has a wrong offset!");
static_assert(offsetof(SteamProUtils_ShowGamepadTextInput, LineInputMode) == 0x000001, "Member 'SteamProUtils_ShowGamepadTextInput::LineInputMode' has a wrong offset!");
static_assert(offsetof(SteamProUtils_ShowGamepadTextInput, Description) == 0x000008, "Member 'SteamProUtils_ShowGamepadTextInput::Description' has a wrong offset!");
static_assert(offsetof(SteamProUtils_ShowGamepadTextInput, CharMax) == 0x000018, "Member 'SteamProUtils_ShowGamepadTextInput::CharMax' has a wrong offset!");
static_assert(offsetof(SteamProUtils_ShowGamepadTextInput, ExistingText) == 0x000020, "Member 'SteamProUtils_ShowGamepadTextInput::ExistingText' has a wrong offset!");
static_assert(offsetof(SteamProUtils_ShowGamepadTextInput, ReturnValue) == 0x000030, "Member 'SteamProUtils_ShowGamepadTextInput::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProUtils.IsSteamRunningOnSteamDeck
// 0x0001 (0x0001 - 0x0000)
struct SteamProUtils_IsSteamRunningOnSteamDeck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProUtils_IsSteamRunningOnSteamDeck) == 0x000001, "Wrong alignment on SteamProUtils_IsSteamRunningOnSteamDeck");
static_assert(sizeof(SteamProUtils_IsSteamRunningOnSteamDeck) == 0x000001, "Wrong size on SteamProUtils_IsSteamRunningOnSteamDeck");
static_assert(offsetof(SteamProUtils_IsSteamRunningOnSteamDeck, ReturnValue) == 0x000000, "Member 'SteamProUtils_IsSteamRunningOnSteamDeck::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProVideo.GetOPFSettings
// 0x0004 (0x0004 - 0x0000)
struct SteamProVideo_GetOPFSettings final
{
public:
	int32                                         VideoAppID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProVideo_GetOPFSettings) == 0x000004, "Wrong alignment on SteamProVideo_GetOPFSettings");
static_assert(sizeof(SteamProVideo_GetOPFSettings) == 0x000004, "Wrong size on SteamProVideo_GetOPFSettings");
static_assert(offsetof(SteamProVideo_GetOPFSettings, VideoAppID) == 0x000000, "Member 'SteamProVideo_GetOPFSettings::VideoAppID' has a wrong offset!");

// Function SteamCorePro.SteamProVideo.GetOPFStringForApp
// 0x0020 (0x0020 - 0x0000)
struct SteamProVideo_GetOPFStringForApp final
{
public:
	int32                                         VideoAppID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24CF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutBuffer;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D0[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProVideo_GetOPFStringForApp) == 0x000008, "Wrong alignment on SteamProVideo_GetOPFStringForApp");
static_assert(sizeof(SteamProVideo_GetOPFStringForApp) == 0x000020, "Wrong size on SteamProVideo_GetOPFStringForApp");
static_assert(offsetof(SteamProVideo_GetOPFStringForApp, VideoAppID) == 0x000000, "Member 'SteamProVideo_GetOPFStringForApp::VideoAppID' has a wrong offset!");
static_assert(offsetof(SteamProVideo_GetOPFStringForApp, OutBuffer) == 0x000008, "Member 'SteamProVideo_GetOPFStringForApp::OutBuffer' has a wrong offset!");
static_assert(offsetof(SteamProVideo_GetOPFStringForApp, ReturnValue) == 0x000018, "Member 'SteamProVideo_GetOPFStringForApp::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProVideo.GetSteamVideo
// 0x0008 (0x0008 - 0x0000)
struct SteamProVideo_GetSteamVideo final
{
public:
	class USteamProVideo*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProVideo_GetSteamVideo) == 0x000008, "Wrong alignment on SteamProVideo_GetSteamVideo");
static_assert(sizeof(SteamProVideo_GetSteamVideo) == 0x000008, "Wrong size on SteamProVideo_GetSteamVideo");
static_assert(offsetof(SteamProVideo_GetSteamVideo, ReturnValue) == 0x000000, "Member 'SteamProVideo_GetSteamVideo::ReturnValue' has a wrong offset!");

// Function SteamCorePro.SteamProVideo.GetVideoURL
// 0x0004 (0x0004 - 0x0000)
struct SteamProVideo_GetVideoURL final
{
public:
	int32                                         VideoAppID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamProVideo_GetVideoURL) == 0x000004, "Wrong alignment on SteamProVideo_GetVideoURL");
static_assert(sizeof(SteamProVideo_GetVideoURL) == 0x000004, "Wrong size on SteamProVideo_GetVideoURL");
static_assert(offsetof(SteamProVideo_GetVideoURL, VideoAppID) == 0x000000, "Member 'SteamProVideo_GetVideoURL::VideoAppID' has a wrong offset!");

// Function SteamCorePro.SteamProVideo.IsBroadcasting
// 0x0008 (0x0008 - 0x0000)
struct SteamProVideo_IsBroadcasting final
{
public:
	int32                                         NumViewers;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D1[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamProVideo_IsBroadcasting) == 0x000004, "Wrong alignment on SteamProVideo_IsBroadcasting");
static_assert(sizeof(SteamProVideo_IsBroadcasting) == 0x000008, "Wrong size on SteamProVideo_IsBroadcasting");
static_assert(offsetof(SteamProVideo_IsBroadcasting, NumViewers) == 0x000000, "Member 'SteamProVideo_IsBroadcasting::NumViewers' has a wrong offset!");
static_assert(offsetof(SteamProVideo_IsBroadcasting, ReturnValue) == 0x000004, "Member 'SteamProVideo_IsBroadcasting::ReturnValue' has a wrong offset!");

}

