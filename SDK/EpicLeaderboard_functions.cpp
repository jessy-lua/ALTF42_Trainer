#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicLeaderboard

#include "Basic.hpp"

#include "EpicLeaderboard_classes.hpp"
#include "EpicLeaderboard_parameters.hpp"


namespace SDK
{

// Function EpicLeaderboard.EpicLeaderboardObject.CleanupName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UEpicLeaderboardObject::CleanupName(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicLeaderboardObject", "CleanupName");

	Params::EpicLeaderboardObject_CleanupName Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EpicLeaderboard.EpicLeaderboardObject.GetEpicLeaderboard
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           LeaderboardID                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LeaderboardKey                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEpicLeaderboardObject*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEpicLeaderboardObject* UEpicLeaderboardObject::GetEpicLeaderboard(const class FString& LeaderboardID, const class FString& LeaderboardKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicLeaderboardObject", "GetEpicLeaderboard");

	Params::EpicLeaderboardObject_GetEpicLeaderboard Parms{};

	Parms.LeaderboardID = std::move(LeaderboardID);
	Parms.LeaderboardKey = std::move(LeaderboardKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EpicLeaderboard.EpicLeaderboardObject.GetLeaderboardEntries
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AroundPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEpicLeaderboardObject::GetLeaderboardEntries(const class FString& PlayerName, bool AroundPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EpicLeaderboardObject", "GetLeaderboardEntries");

	Params::EpicLeaderboardObject_GetLeaderboardEntries Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.AroundPlayer = AroundPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EpicLeaderboard.EpicLeaderboardObject.SubmitEntry
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayerScore                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEpicLeaderboardObject::SubmitEntry(const class FString& PlayerName, float PlayerScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EpicLeaderboardObject", "SubmitEntry");

	Params::EpicLeaderboardObject_SubmitEntry Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.PlayerScore = PlayerScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EpicLeaderboard.EpicLeaderboardObject.SubmitEntryWithMetadata
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayerScore                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      MetaData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEpicLeaderboardObject::SubmitEntryWithMetadata(const class FString& PlayerName, float PlayerScore, const TMap<class FString, class FString>& MetaData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EpicLeaderboardObject", "SubmitEntryWithMetadata");

	Params::EpicLeaderboardObject_SubmitEntryWithMetadata Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.PlayerScore = PlayerScore;
	Parms.MetaData = std::move(MetaData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

