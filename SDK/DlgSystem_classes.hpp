#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DlgSystem

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DlgSystem_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class DlgSystem.DlgObject
// 0x0000 (0x0028 - 0x0028)
class UDlgObject : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgObject">();
	}
	static class UDlgObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgObject>();
	}
};
static_assert(alignof(UDlgObject) == 0x000008, "Wrong alignment on UDlgObject");
static_assert(sizeof(UDlgObject) == 0x000028, "Wrong size on UDlgObject");

// Class DlgSystem.DlgConditionCustom
// 0x0000 (0x0028 - 0x0028)
class UDlgConditionCustom : public UDlgObject
{
public:
	class FString GetEditorDisplayString(class UDlgDialogue* OwnerDialogue, class FName ParticipantName);
	bool IsConditionMet(const class UDlgContext* Context, const class UObject* Participant);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgConditionCustom">();
	}
	static class UDlgConditionCustom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgConditionCustom>();
	}
};
static_assert(alignof(UDlgConditionCustom) == 0x000008, "Wrong alignment on UDlgConditionCustom");
static_assert(sizeof(UDlgConditionCustom) == 0x000028, "Wrong size on UDlgConditionCustom");

// Class DlgSystem.DlgConditionCustomHideCategories
// 0x0000 (0x0028 - 0x0028)
class UDlgConditionCustomHideCategories final : public UDlgConditionCustom
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgConditionCustomHideCategories">();
	}
	static class UDlgConditionCustomHideCategories* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgConditionCustomHideCategories>();
	}
};
static_assert(alignof(UDlgConditionCustomHideCategories) == 0x000008, "Wrong alignment on UDlgConditionCustomHideCategories");
static_assert(sizeof(UDlgConditionCustomHideCategories) == 0x000028, "Wrong size on UDlgConditionCustomHideCategories");

// Class DlgSystem.DlgContext
// 0x0188 (0x01B0 - 0x0028)
class UDlgContext final : public UDlgObject
{
public:
	class UDlgDialogue*                           Dialogue;                                          // 0x0028(0x0008)(Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UObject*>                        SerializedParticipants;                            // 0x0030(0x0010)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UObject*>             Participants;                                      // 0x0040(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_17B5[0x120];                                   // 0x0090(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ChooseChild(int32 OptionIndex);
	bool ChooseOption(int32 OptionIndex);
	bool ChooseOptionFromAll(int32 Param_Index);
	bool ChooseSpeechSequenceOptionFromReplicated(int32 OptionIndex);
	class UObject* GetParticipantFromName(const struct FDlgParticipantName& Participant);
	void OnRep_SerializedParticipants();
	bool ReevaluateChildren();
	bool ReevaluateOptions();

	class UDlgNodeData* GetActiveNodeData() const;
	class UObject* GetActiveNodeGenericData() const;
	struct FGuid GetActiveNodeGUID() const;
	int32 GetActiveNodeIndex() const;
	class UObject* GetActiveNodeParticipant() const;
	class FText GetActiveNodeParticipantDisplayName() const;
	class UTexture2D* GetActiveNodeParticipantIcon() const;
	class FName GetActiveNodeParticipantName() const;
	class FName GetActiveNodeSpeakerState() const;
	const class FText GetActiveNodeText() const;
	class UDialogueWave* GetActiveNodeVoiceDialogueWave() const;
	class USoundBase* GetActiveNodeVoiceSoundBase() const;
	class USoundWave* GetActiveNodeVoiceSoundWave() const;
	const TArray<struct FDlgEdgeData> GetAllOptionsArray() const;
	int32 GetAllOptionsNum() const;
	class FString GetContextString() const;
	class UDlgDialogue* GetDialogue() const;
	struct FGuid GetDialogueGUID() const;
	class FName GetDialogueName() const;
	class FString GetDialoguePathName() const;
	class UDlgNode* GetMutableActiveNode() const;
	class UDlgNode_SpeechSequence* GetMutableActiveNodeAsSpeechSequence() const;
	class UDlgNode* GetMutableNodeFromGUID(const struct FGuid& NodeGuid) const;
	class UDlgNode* GetMutableNodeFromIndex(int32 NodeIndex) const;
	class UObject* GetMutableParticipant(class FName ParticipantName) const;
	struct FGuid GetNodeGUIDForIndex(int32 NodeIndex) const;
	int32 GetNodeIndexForGUID(const struct FGuid& NodeGuid) const;
	const struct FDlgEdge GetOption(int32 OptionIndex) const;
	const TArray<struct FDlgCondition> GetOptionEnterConditions(int32 OptionIndex) const;
	const struct FDlgEdgeData GetOptionFromAll(int32 Param_Index) const;
	const TArray<struct FDlgEdge> GetOptionsArray() const;
	int32 GetOptionsNum() const;
	class FName GetOptionSpeakerState(int32 OptionIndex) const;
	class FName GetOptionSpeakerStateFromAll(int32 Param_Index) const;
	const class FText GetOptionText(int32 OptionIndex) const;
	const class FText GetOptionTextFromAll(int32 Param_Index) const;
	const TMap<class FName, class UObject*> GetParticipants() const;
	const TMap<class FName, class UObject*> GetParticipantsMap() const;
	const TSet<struct FGuid> GetVisitedNodeGUIDs() const;
	const TSet<int32> GetVisitedNodeIndices() const;
	bool HasDialogueEnded() const;
	bool IsNodeVisited(int32 NodeIndex, const struct FGuid& NodeGuid, bool bLocalHistory) const;
	bool IsOptionConnectedToEndNode(int32 Param_Index, bool bIndexSkipsUnsatisfiedEdges) const;
	bool IsOptionConnectedToVisitedNode(int32 Param_Index, bool bLocalHistory, bool bIndexSkipsUnsatisfiedEdges) const;
	bool IsOptionSatisfied(int32 Param_Index) const;
	bool IsValidAllOptionIndex(int32 Param_Index) const;
	bool IsValidNodeGUID(const struct FGuid& NodeGuid) const;
	bool IsValidNodeIndex(int32 NodeIndex) const;
	bool IsValidOptionIndex(int32 OptionIndex) const;
	bool WasNodeGUIDVisitedInThisContext(const struct FGuid& NodeGuid) const;
	bool WasNodeIndexVisitedInThisContext(int32 NodeIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgContext">();
	}
	static class UDlgContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgContext>();
	}
};
static_assert(alignof(UDlgContext) == 0x000008, "Wrong alignment on UDlgContext");
static_assert(sizeof(UDlgContext) == 0x0001B0, "Wrong size on UDlgContext");
static_assert(offsetof(UDlgContext, Dialogue) == 0x000028, "Member 'UDlgContext::Dialogue' has a wrong offset!");
static_assert(offsetof(UDlgContext, SerializedParticipants) == 0x000030, "Member 'UDlgContext::SerializedParticipants' has a wrong offset!");
static_assert(offsetof(UDlgContext, Participants) == 0x000040, "Member 'UDlgContext::Participants' has a wrong offset!");

// Class DlgSystem.DlgDialogue
// 0x0168 (0x0190 - 0x0028)
class UDlgDialogue final : public UObject
{
public:
	uint8                                         Pad_17CA[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Version;                                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Name_DlgDialogue;                                  // 0x0034(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  Guid;                                              // 0x003C(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17CB[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDlgParticipantClass>           ParticipantsClasses;                               // 0x0050(0x0010)(Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FDlgParticipantData> ParticipantsData;                                  // 0x0060(0x0050)(Edit, EditConst, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	TSet<class FName>                             AllSpeakerStates;                                  // 0x00B0(0x0050)(Edit, EditConst, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	class UDlgNode*                               StartNode;                                         // 0x0100(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UDlgNode*>                       StartNodes;                                        // 0x0108(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UDlgNode*>                       Nodes;                                             // 0x0118(0x0010)(ExportObject, EditFixedSize, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGuid, int32>                     NodesGUIDToIndexMap;                               // 0x0128(0x0050)(Edit, EditConst, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_17CC[0x8];                                     // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAssetUserData*>                 AssetUserData;                                     // 0x0180(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	const TArray<class UDlgNode*> GetMutableStartNodes();

	void GetAllParticipantNames(TSet<class FName>* OutSet) const;
	void GetAllSpeakerStates(TSet<class FName>* OutSet) const;
	void GetBoolNames(class FName ParticipantName, TSet<class FName>* OutSet) const;
	void GetClassBoolNames(class FName ParticipantName, TSet<class FName>* OutSet) const;
	void GetClassFloatNames(class FName ParticipantName, TSet<class FName>* OutSet) const;
	void GetClassIntNames(class FName ParticipantName, TSet<class FName>* OutSet) const;
	void GetClassNameNames(class FName ParticipantName, TSet<class FName>* OutSet) const;
	void GetClassTextNames(class FName ParticipantName, TSet<class FName>* OutSet) const;
	void GetConditions(class FName ParticipantName, TSet<class FName>* OutSet) const;
	void GetCustomEvents(class FName ParticipantName, TSet<class UClass*>* OutSet) const;
	class FName GetDialogueFName() const;
	class FString GetDialogueName() const;
	int32 GetDialogueVersion() const;
	void GetEvents(class FName ParticipantName, TSet<class FName>* OutSet) const;
	void GetFloatNames(class FName ParticipantName, TSet<class FName>* OutSet) const;
	struct FGuid GetGUID() const;
	void GetIntNames(class FName ParticipantName, TSet<class FName>* OutSet) const;
	class UDlgNode* GetMutableNodeFromGUID(const struct FGuid& NodeGuid) const;
	class UDlgNode* GetMutableNodeFromIndex(int32 NodeIndex) const;
	class UDlgNode* GetMutableStartNode() const;
	void GetNameNames(class FName ParticipantName, TSet<class FName>* OutSet) const;
	struct FGuid GetNodeGUIDForIndex(int32 NodeIndex) const;
	int32 GetNodeIndexForGUID(const struct FGuid& NodeGuid) const;
	const TArray<class UDlgNode*> GetNodes() const;
	TSet<class FName> GetParticipantBoolNames(class FName ParticipantName) const;
	class UClass* GetParticipantClass(class FName ParticipantName) const;
	TSet<class FName> GetParticipantClassBoolNames(class FName ParticipantName) const;
	const TArray<struct FDlgParticipantClass> GetParticipantClasses() const;
	TSet<class FName> GetParticipantClassFloatNames(class FName ParticipantName) const;
	TSet<class FName> GetParticipantClassFNameNames(class FName ParticipantName) const;
	TSet<class FName> GetParticipantClassFTextNames(class FName ParticipantName) const;
	TSet<class FName> GetParticipantClassIntNames(class FName ParticipantName) const;
	TSet<class FName> GetParticipantConditionNames(class FName ParticipantName) const;
	TSet<class UClass*> GetParticipantCustomConditions(class FName ParticipantName) const;
	TSet<class UClass*> GetParticipantCustomEvents(class FName ParticipantName) const;
	TSet<class UClass*> GetParticipantCustomTextArguments(class FName ParticipantName) const;
	TSet<class FName> GetParticipantEventNames(class FName ParticipantName) const;
	TSet<class FName> GetParticipantFloatNames(class FName ParticipantName) const;
	TSet<class FName> GetParticipantFNameNames(class FName ParticipantName) const;
	TSet<class FName> GetParticipantFunctionNames(class FName ParticipantName) const;
	TSet<class FName> GetParticipantIntNames(class FName ParticipantName) const;
	TSet<class FName> GetParticipantNames() const;
	const TMap<class FName, struct FDlgParticipantData> GetParticipantsData() const;
	int32 GetParticipantsNum() const;
	TSet<class FName> GetSpeakerStates() const;
	bool HasGUID() const;
	bool HasParticipant(class FName ParticipantName) const;
	bool IsValidNodeGUID(const struct FGuid& NodeGuid) const;
	bool IsValidNodeIndex(int32 NodeIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgDialogue">();
	}
	static class UDlgDialogue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgDialogue>();
	}
};
static_assert(alignof(UDlgDialogue) == 0x000008, "Wrong alignment on UDlgDialogue");
static_assert(sizeof(UDlgDialogue) == 0x000190, "Wrong size on UDlgDialogue");
static_assert(offsetof(UDlgDialogue, Version) == 0x000030, "Member 'UDlgDialogue::Version' has a wrong offset!");
static_assert(offsetof(UDlgDialogue, Name_DlgDialogue) == 0x000034, "Member 'UDlgDialogue::Name_DlgDialogue' has a wrong offset!");
static_assert(offsetof(UDlgDialogue, Guid) == 0x00003C, "Member 'UDlgDialogue::Guid' has a wrong offset!");
static_assert(offsetof(UDlgDialogue, ParticipantsClasses) == 0x000050, "Member 'UDlgDialogue::ParticipantsClasses' has a wrong offset!");
static_assert(offsetof(UDlgDialogue, ParticipantsData) == 0x000060, "Member 'UDlgDialogue::ParticipantsData' has a wrong offset!");
static_assert(offsetof(UDlgDialogue, AllSpeakerStates) == 0x0000B0, "Member 'UDlgDialogue::AllSpeakerStates' has a wrong offset!");
static_assert(offsetof(UDlgDialogue, StartNode) == 0x000100, "Member 'UDlgDialogue::StartNode' has a wrong offset!");
static_assert(offsetof(UDlgDialogue, StartNodes) == 0x000108, "Member 'UDlgDialogue::StartNodes' has a wrong offset!");
static_assert(offsetof(UDlgDialogue, Nodes) == 0x000118, "Member 'UDlgDialogue::Nodes' has a wrong offset!");
static_assert(offsetof(UDlgDialogue, NodesGUIDToIndexMap) == 0x000128, "Member 'UDlgDialogue::NodesGUIDToIndexMap' has a wrong offset!");
static_assert(offsetof(UDlgDialogue, AssetUserData) == 0x000180, "Member 'UDlgDialogue::AssetUserData' has a wrong offset!");

// Class DlgSystem.DlgDialogueParticipant
// 0x0000 (0x0028 - 0x0028)
class IDlgDialogueParticipant final : public IInterface
{
public:
	bool ModifyBoolValue(class FName ValueName, bool bNewValue);
	bool ModifyFloatValue(class FName ValueName, bool bDelta, float Value);
	bool ModifyIntValue(class FName ValueName, bool bDelta, int32 Value);
	bool ModifyNameValue(class FName ValueName, class FName NameValue);
	bool OnDialogueEvent(class UDlgContext* Context, class FName EventName);

	bool CheckCondition(const class UDlgContext* Context, class FName ConditionName) const;
	bool GetBoolValue(class FName ValueName) const;
	float GetFloatValue(class FName ValueName) const;
	int32 GetIntValue(class FName ValueName) const;
	class FName GetNameValue(class FName ValueName) const;
	class FText GetParticipantDisplayName(class FName ActiveSpeaker) const;
	ETextGender GetParticipantGender() const;
	class UTexture2D* GetParticipantIcon(class FName ActiveSpeaker, class FName ActiveSpeakerState) const;
	class FName GetParticipantName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgDialogueParticipant">();
	}
	static class IDlgDialogueParticipant* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDlgDialogueParticipant>();
	}
};
static_assert(alignof(IDlgDialogueParticipant) == 0x000008, "Wrong alignment on IDlgDialogueParticipant");
static_assert(sizeof(IDlgDialogueParticipant) == 0x000028, "Wrong size on IDlgDialogueParticipant");

// Class DlgSystem.DlgEventCustom
// 0x0000 (0x0028 - 0x0028)
class UDlgEventCustom : public UDlgObject
{
public:
	void EnterEvent(class UDlgContext* Context, class UObject* Participant);
	class FString GetEditorDisplayString(class UDlgDialogue* OwnerDialogue, class FName ParticipantName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgEventCustom">();
	}
	static class UDlgEventCustom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgEventCustom>();
	}
};
static_assert(alignof(UDlgEventCustom) == 0x000008, "Wrong alignment on UDlgEventCustom");
static_assert(sizeof(UDlgEventCustom) == 0x000028, "Wrong size on UDlgEventCustom");

// Class DlgSystem.DlgEventCustomHideCategories
// 0x0000 (0x0028 - 0x0028)
class UDlgEventCustomHideCategories final : public UDlgEventCustom
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgEventCustomHideCategories">();
	}
	static class UDlgEventCustomHideCategories* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgEventCustomHideCategories>();
	}
};
static_assert(alignof(UDlgEventCustomHideCategories) == 0x000008, "Wrong alignment on UDlgEventCustomHideCategories");
static_assert(sizeof(UDlgEventCustomHideCategories) == 0x000028, "Wrong size on UDlgEventCustomHideCategories");

// Class DlgSystem.DlgTestObjectPrimitivesBase
// 0x0020 (0x0048 - 0x0028)
class UDlgTestObjectPrimitivesBase : public UObject
{
public:
	uint8                                         Pad_17DA[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Integer;                                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17DB[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgTestObjectPrimitivesBase">();
	}
	static class UDlgTestObjectPrimitivesBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgTestObjectPrimitivesBase>();
	}
};
static_assert(alignof(UDlgTestObjectPrimitivesBase) == 0x000008, "Wrong alignment on UDlgTestObjectPrimitivesBase");
static_assert(sizeof(UDlgTestObjectPrimitivesBase) == 0x000048, "Wrong size on UDlgTestObjectPrimitivesBase");
static_assert(offsetof(UDlgTestObjectPrimitivesBase, Integer) == 0x000030, "Member 'UDlgTestObjectPrimitivesBase::Integer' has a wrong offset!");
static_assert(offsetof(UDlgTestObjectPrimitivesBase, String) == 0x000038, "Member 'UDlgTestObjectPrimitivesBase::String' has a wrong offset!");

// Class DlgSystem.DlgTestObjectPrimitives_DefaultToInstanced
// 0x0010 (0x0058 - 0x0048)
class UDlgTestObjectPrimitives_DefaultToInstanced final : public UDlgTestObjectPrimitivesBase
{
public:
	uint8                                         Pad_17DC[0x8];                                     // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstancedChild;                                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17DD[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgTestObjectPrimitives_DefaultToInstanced">();
	}
	static class UDlgTestObjectPrimitives_DefaultToInstanced* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgTestObjectPrimitives_DefaultToInstanced>();
	}
};
static_assert(alignof(UDlgTestObjectPrimitives_DefaultToInstanced) == 0x000008, "Wrong alignment on UDlgTestObjectPrimitives_DefaultToInstanced");
static_assert(sizeof(UDlgTestObjectPrimitives_DefaultToInstanced) == 0x000058, "Wrong size on UDlgTestObjectPrimitives_DefaultToInstanced");
static_assert(offsetof(UDlgTestObjectPrimitives_DefaultToInstanced, InstancedChild) == 0x000050, "Member 'UDlgTestObjectPrimitives_DefaultToInstanced::InstancedChild' has a wrong offset!");

// Class DlgSystem.DlgTestObjectPrimitives_ChildA
// 0x0010 (0x0058 - 0x0048)
class UDlgTestObjectPrimitives_ChildA : public UDlgTestObjectPrimitivesBase
{
public:
	uint8                                         Pad_17DE[0x8];                                     // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntegerChildA;                                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17DF[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgTestObjectPrimitives_ChildA">();
	}
	static class UDlgTestObjectPrimitives_ChildA* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgTestObjectPrimitives_ChildA>();
	}
};
static_assert(alignof(UDlgTestObjectPrimitives_ChildA) == 0x000008, "Wrong alignment on UDlgTestObjectPrimitives_ChildA");
static_assert(sizeof(UDlgTestObjectPrimitives_ChildA) == 0x000058, "Wrong size on UDlgTestObjectPrimitives_ChildA");
static_assert(offsetof(UDlgTestObjectPrimitives_ChildA, IntegerChildA) == 0x000050, "Member 'UDlgTestObjectPrimitives_ChildA::IntegerChildA' has a wrong offset!");

// Class DlgSystem.DlgTestObjectPrimitives_ChildB
// 0x0018 (0x0060 - 0x0048)
class UDlgTestObjectPrimitives_ChildB final : public UDlgTestObjectPrimitivesBase
{
public:
	uint8                                         Pad_17E0[0x8];                                     // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringChildB;                                      // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgTestObjectPrimitives_ChildB">();
	}
	static class UDlgTestObjectPrimitives_ChildB* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgTestObjectPrimitives_ChildB>();
	}
};
static_assert(alignof(UDlgTestObjectPrimitives_ChildB) == 0x000008, "Wrong alignment on UDlgTestObjectPrimitives_ChildB");
static_assert(sizeof(UDlgTestObjectPrimitives_ChildB) == 0x000060, "Wrong size on UDlgTestObjectPrimitives_ChildB");
static_assert(offsetof(UDlgTestObjectPrimitives_ChildB, StringChildB) == 0x000050, "Member 'UDlgTestObjectPrimitives_ChildB::StringChildB' has a wrong offset!");

// Class DlgSystem.DlgTestObjectPrimitives_GrandChildA_Of_ChildA
// 0x0010 (0x0068 - 0x0058)
class UDlgTestObjectPrimitives_GrandChildA_Of_ChildA final : public UDlgTestObjectPrimitives_ChildA
{
public:
	uint8                                         Pad_17E1[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntegerGrandChildA_Of_ChildA;                      // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E2[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgTestObjectPrimitives_GrandChildA_Of_ChildA">();
	}
	static class UDlgTestObjectPrimitives_GrandChildA_Of_ChildA* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgTestObjectPrimitives_GrandChildA_Of_ChildA>();
	}
};
static_assert(alignof(UDlgTestObjectPrimitives_GrandChildA_Of_ChildA) == 0x000008, "Wrong alignment on UDlgTestObjectPrimitives_GrandChildA_Of_ChildA");
static_assert(sizeof(UDlgTestObjectPrimitives_GrandChildA_Of_ChildA) == 0x000068, "Wrong size on UDlgTestObjectPrimitives_GrandChildA_Of_ChildA");
static_assert(offsetof(UDlgTestObjectPrimitives_GrandChildA_Of_ChildA, IntegerGrandChildA_Of_ChildA) == 0x000060, "Member 'UDlgTestObjectPrimitives_GrandChildA_Of_ChildA::IntegerGrandChildA_Of_ChildA' has a wrong offset!");

// Class DlgSystem.DlgManager
// 0x0000 (0x0028 - 0x0028)
class UDlgManager final : public UBlueprintFunctionLibrary
{
public:
	static bool CanStartDialogue(class UDlgDialogue* Dialogue, const TArray<class UObject*>& Participants);
	static void ClearDialogueHistory();
	static void ClearDialoguePersistentWorldContextObject();
	static bool DoesObjectImplementDialogueParticipantInterface(const class UObject* Object);
	static void GetAllDialoguesBoolNames(class FName ParticipantName, TArray<class FName>* OutArray);
	static void GetAllDialoguesConditionNames(class FName ParticipantName, TArray<class FName>* OutArray);
	static void GetAllDialoguesEventNames(class FName ParticipantName, TArray<class FName>* OutArray);
	static void GetAllDialoguesFloatNames(class FName ParticipantName, TArray<class FName>* OutArray);
	static void GetAllDialoguesIntNames(class FName ParticipantName, TArray<class FName>* OutArray);
	static void GetAllDialoguesNameNames(class FName ParticipantName, TArray<class FName>* OutArray);
	static void GetAllDialoguesParticipantNames(TArray<class FName>* OutArray);
	static void GetAllDialoguesSpeakerStates(TArray<class FName>* OutArray);
	static const TMap<struct FGuid, struct FDlgHistory> GetDialogueHistory();
	static TArray<class FName> GetDialoguesParticipantBoolNames(class FName ParticipantName);
	static TArray<class FName> GetDialoguesParticipantConditionNames(class FName ParticipantName);
	static TArray<class FName> GetDialoguesParticipantEventNames(class FName ParticipantName);
	static TArray<class FName> GetDialoguesParticipantFloatNames(class FName ParticipantName);
	static TArray<class FName> GetDialoguesParticipantFNameNames(class FName ParticipantName);
	static TArray<class FName> GetDialoguesParticipantIntNames(class FName ParticipantName);
	static TArray<class FName> GetDialoguesParticipantNames();
	static TArray<class FName> GetDialoguesSpeakerStates();
	static class UWorld* GetDialogueWorld();
	static TMap<class FName, struct FDlgObjectsArray> GetObjectsMapWithDialogueParticipantInterface(class UObject* WorldContextObject);
	static TArray<class UObject*> GetObjectsWithDialogueParticipantInterface(class UObject* WorldContextObject);
	static bool IsObjectACustomCondition(const class UObject* Object);
	static bool IsObjectACustomEvent(const class UObject* Object);
	static bool IsObjectACustomTextArgument(const class UObject* Object);
	static bool IsObjectANodeData(const class UObject* Object);
	static bool RegisterDialogueConsoleCommands();
	static class UDlgContext* ResumeDialogueFromNodeGUID(class UDlgDialogue* Dialogue, const TArray<class UObject*>& Participants, const struct FGuid& StartNodeGUID, const TSet<struct FGuid>& AlreadyVisitedNodes, bool bFireEnterEvents);
	static class UDlgContext* ResumeDialogueFromNodeIndex(class UDlgDialogue* Dialogue, const TArray<class UObject*>& Participants, int32 StartIndex, const TSet<int32>& AlreadyVisitedNodes, bool bFireEnterEvents);
	static void SetDialogueHistory(const TMap<struct FGuid, struct FDlgHistory>& DlgHistory);
	static void SetDialoguePersistentWorldContextObject(const class UObject* WorldContextObject);
	static class UDlgContext* StartDialogue(class UDlgDialogue* Dialogue, const TArray<class UObject*>& Participants);
	static class UDlgContext* StartDialogue2(class UDlgDialogue* Dialogue, class UObject* Participant0, class UObject* Participant1);
	static class UDlgContext* StartDialogue3(class UDlgDialogue* Dialogue, class UObject* Participant0, class UObject* Participant1, class UObject* Participant2);
	static class UDlgContext* StartDialogue4(class UDlgDialogue* Dialogue, class UObject* Participant0, class UObject* Participant1, class UObject* Participant2, class UObject* Participant3);
	static class UDlgContext* StartDialogueWithDefaultParticipants(class UObject* WorldContextObject, class UDlgDialogue* Dialogue);
	static class UDlgContext* StartMonologue(class UDlgDialogue* Dialogue, class UObject* Participant);
	static bool UnregisterDialogueConsoleCommands();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgManager">();
	}
	static class UDlgManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgManager>();
	}
};
static_assert(alignof(UDlgManager) == 0x000008, "Wrong alignment on UDlgManager");
static_assert(sizeof(UDlgManager) == 0x000028, "Wrong size on UDlgManager");

// Class DlgSystem.DlgNode
// 0x0070 (0x0098 - 0x0028)
class UDlgNode : public UObject
{
public:
	uint8                                         Pad_17EC[0x18];                                    // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OwnerName;                                         // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCheckChildrenOnEvaluation;                        // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17ED[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDlgCondition>                  EnterConditions;                                   // 0x0050(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	EDlgEntryRestriction                          EnterRestriction;                                  // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17EE[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDlgEvent>                      EnterEvents;                                       // 0x0068(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FGuid                                  NodeGuid;                                          // 0x0078(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDlgEdge>                       Children;                                          // 0x0088(0x0010)(Edit, EditFixedSize, ZeroConstructor, EditConst, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)

public:
	bool GetCheckChildrenOnEvaluation() const;
	struct FGuid GetGUID() const;
	const struct FDlgEdge GetNodeChildAt(int32 EdgeIndex) const;
	const TArray<struct FDlgEdge> GetNodeChildren() const;
	class UDlgNodeData* GetNodeData() const;
	const TArray<struct FDlgCondition> GetNodeEnterConditions() const;
	const TArray<struct FDlgEvent> GetNodeEnterEvents() const;
	class UObject* GetNodeGenericData() const;
	class FName GetNodeParticipantName() const;
	const class FText GetNodeText() const;
	const class FText GetNodeUnformattedText() const;
	class UDialogueWave* GetNodeVoiceDialogueWave() const;
	class USoundBase* GetNodeVoiceSoundBase() const;
	class USoundWave* GetNodeVoiceSoundWave() const;
	int32 GetNumNodeChildren() const;
	class FName GetSpeakerState() const;
	const TArray<struct FDlgTextArgument> GetTextArguments() const;
	bool HasAnyEnterConditions() const;
	bool HasAnyEnterEvents() const;
	bool HasGUID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgNode">();
	}
	static class UDlgNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgNode>();
	}
};
static_assert(alignof(UDlgNode) == 0x000008, "Wrong alignment on UDlgNode");
static_assert(sizeof(UDlgNode) == 0x000098, "Wrong size on UDlgNode");
static_assert(offsetof(UDlgNode, OwnerName) == 0x000040, "Member 'UDlgNode::OwnerName' has a wrong offset!");
static_assert(offsetof(UDlgNode, bCheckChildrenOnEvaluation) == 0x000048, "Member 'UDlgNode::bCheckChildrenOnEvaluation' has a wrong offset!");
static_assert(offsetof(UDlgNode, EnterConditions) == 0x000050, "Member 'UDlgNode::EnterConditions' has a wrong offset!");
static_assert(offsetof(UDlgNode, EnterRestriction) == 0x000060, "Member 'UDlgNode::EnterRestriction' has a wrong offset!");
static_assert(offsetof(UDlgNode, EnterEvents) == 0x000068, "Member 'UDlgNode::EnterEvents' has a wrong offset!");
static_assert(offsetof(UDlgNode, NodeGuid) == 0x000078, "Member 'UDlgNode::NodeGuid' has a wrong offset!");
static_assert(offsetof(UDlgNode, Children) == 0x000088, "Member 'UDlgNode::Children' has a wrong offset!");

// Class DlgSystem.DlgNodeData
// 0x0000 (0x0028 - 0x0028)
class UDlgNodeData : public UDlgObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgNodeData">();
	}
	static class UDlgNodeData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgNodeData>();
	}
};
static_assert(alignof(UDlgNodeData) == 0x000008, "Wrong alignment on UDlgNodeData");
static_assert(sizeof(UDlgNodeData) == 0x000028, "Wrong size on UDlgNodeData");

// Class DlgSystem.DlgNodeDataHideCategories
// 0x0000 (0x0028 - 0x0028)
class UDlgNodeDataHideCategories final : public UDlgNodeData
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgNodeDataHideCategories">();
	}
	static class UDlgNodeDataHideCategories* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgNodeDataHideCategories>();
	}
};
static_assert(alignof(UDlgNodeDataHideCategories) == 0x000008, "Wrong alignment on UDlgNodeDataHideCategories");
static_assert(sizeof(UDlgNodeDataHideCategories) == 0x000028, "Wrong size on UDlgNodeDataHideCategories");

// Class DlgSystem.DlgNode_Custom
// 0x0000 (0x0098 - 0x0098)
class UDlgNode_Custom final : public UDlgNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgNode_Custom">();
	}
	static class UDlgNode_Custom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgNode_Custom>();
	}
};
static_assert(alignof(UDlgNode_Custom) == 0x000008, "Wrong alignment on UDlgNode_Custom");
static_assert(sizeof(UDlgNode_Custom) == 0x000098, "Wrong size on UDlgNode_Custom");

// Class DlgSystem.DlgNode_End
// 0x0000 (0x0098 - 0x0098)
class UDlgNode_End final : public UDlgNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgNode_End">();
	}
	static class UDlgNode_End* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgNode_End>();
	}
};
static_assert(alignof(UDlgNode_End) == 0x000008, "Wrong alignment on UDlgNode_End");
static_assert(sizeof(UDlgNode_End) == 0x000098, "Wrong size on UDlgNode_End");

// Class DlgSystem.DlgNode_Proxy
// 0x0008 (0x00A0 - 0x0098)
class UDlgNode_Proxy final : public UDlgNode
{
public:
	int32                                         NodeIndex;                                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17F0[0x4];                                     // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgNode_Proxy">();
	}
	static class UDlgNode_Proxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgNode_Proxy>();
	}
};
static_assert(alignof(UDlgNode_Proxy) == 0x000008, "Wrong alignment on UDlgNode_Proxy");
static_assert(sizeof(UDlgNode_Proxy) == 0x0000A0, "Wrong size on UDlgNode_Proxy");
static_assert(offsetof(UDlgNode_Proxy, NodeIndex) == 0x000098, "Member 'UDlgNode_Proxy::NodeIndex' has a wrong offset!");

// Class DlgSystem.DlgNode_Selector
// 0x0020 (0x00B8 - 0x0098)
class UDlgNode_Selector final : public UDlgNode
{
public:
	EDlgNodeSelectorType                          SelectorType;                                      // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAvoidPickingSameOptionTwiceInARow;                // 0x0099(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCycleThroughSatisfiedOptionsWithoutRepetition;    // 0x009A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17F1[0x5];                                     // 0x009B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DynamicDisplayText;                                // 0x00A0(0x0018)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	EDlgNodeSelectorType GetSelectorType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgNode_Selector">();
	}
	static class UDlgNode_Selector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgNode_Selector>();
	}
};
static_assert(alignof(UDlgNode_Selector) == 0x000008, "Wrong alignment on UDlgNode_Selector");
static_assert(sizeof(UDlgNode_Selector) == 0x0000B8, "Wrong size on UDlgNode_Selector");
static_assert(offsetof(UDlgNode_Selector, SelectorType) == 0x000098, "Member 'UDlgNode_Selector::SelectorType' has a wrong offset!");
static_assert(offsetof(UDlgNode_Selector, bAvoidPickingSameOptionTwiceInARow) == 0x000099, "Member 'UDlgNode_Selector::bAvoidPickingSameOptionTwiceInARow' has a wrong offset!");
static_assert(offsetof(UDlgNode_Selector, bCycleThroughSatisfiedOptionsWithoutRepetition) == 0x00009A, "Member 'UDlgNode_Selector::bCycleThroughSatisfiedOptionsWithoutRepetition' has a wrong offset!");
static_assert(offsetof(UDlgNode_Selector, DynamicDisplayText) == 0x0000A0, "Member 'UDlgNode_Selector::DynamicDisplayText' has a wrong offset!");

// Class DlgSystem.DlgNode_Speech
// 0x0078 (0x0110 - 0x0098)
class UDlgNode_Speech final : public UDlgNode
{
public:
	bool                                          bIsVirtualParent;                                  // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bVirtualParentFireDirectChildEnterEvents;          // 0x0099(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17F2[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x00A0(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDlgTextArgument>               TextArguments;                                     // 0x00B8(0x0010)(Edit, EditFixedSize, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FName                                   SpeakerState;                                      // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDlgNodeData*                           NodeData;                                          // 0x00D0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             VoiceSoundWave;                                    // 0x00D8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDialogueWave*                          VoiceDialogueWave;                                 // 0x00E0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                GenericData;                                       // 0x00E8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17F3[0x20];                                    // 0x00F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsVirtualParent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgNode_Speech">();
	}
	static class UDlgNode_Speech* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgNode_Speech>();
	}
};
static_assert(alignof(UDlgNode_Speech) == 0x000008, "Wrong alignment on UDlgNode_Speech");
static_assert(sizeof(UDlgNode_Speech) == 0x000110, "Wrong size on UDlgNode_Speech");
static_assert(offsetof(UDlgNode_Speech, bIsVirtualParent) == 0x000098, "Member 'UDlgNode_Speech::bIsVirtualParent' has a wrong offset!");
static_assert(offsetof(UDlgNode_Speech, bVirtualParentFireDirectChildEnterEvents) == 0x000099, "Member 'UDlgNode_Speech::bVirtualParentFireDirectChildEnterEvents' has a wrong offset!");
static_assert(offsetof(UDlgNode_Speech, Text) == 0x0000A0, "Member 'UDlgNode_Speech::Text' has a wrong offset!");
static_assert(offsetof(UDlgNode_Speech, TextArguments) == 0x0000B8, "Member 'UDlgNode_Speech::TextArguments' has a wrong offset!");
static_assert(offsetof(UDlgNode_Speech, SpeakerState) == 0x0000C8, "Member 'UDlgNode_Speech::SpeakerState' has a wrong offset!");
static_assert(offsetof(UDlgNode_Speech, NodeData) == 0x0000D0, "Member 'UDlgNode_Speech::NodeData' has a wrong offset!");
static_assert(offsetof(UDlgNode_Speech, VoiceSoundWave) == 0x0000D8, "Member 'UDlgNode_Speech::VoiceSoundWave' has a wrong offset!");
static_assert(offsetof(UDlgNode_Speech, VoiceDialogueWave) == 0x0000E0, "Member 'UDlgNode_Speech::VoiceDialogueWave' has a wrong offset!");
static_assert(offsetof(UDlgNode_Speech, GenericData) == 0x0000E8, "Member 'UDlgNode_Speech::GenericData' has a wrong offset!");

// Class DlgSystem.DlgNode_SpeechSequence
// 0x0028 (0x00C0 - 0x0098)
class UDlgNode_SpeechSequence final : public UDlgNode
{
public:
	TArray<struct FDlgSpeechSequenceEntry>        SpeechSequence;                                    // 0x0098(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDlgEdge>                       InnerEdges;                                        // 0x00A8(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_17F4[0x8];                                     // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const TArray<struct FDlgSpeechSequenceEntry> GetNodeSpeechSequence() const;
	bool HasSpeechSequences() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgNode_SpeechSequence">();
	}
	static class UDlgNode_SpeechSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgNode_SpeechSequence>();
	}
};
static_assert(alignof(UDlgNode_SpeechSequence) == 0x000008, "Wrong alignment on UDlgNode_SpeechSequence");
static_assert(sizeof(UDlgNode_SpeechSequence) == 0x0000C0, "Wrong size on UDlgNode_SpeechSequence");
static_assert(offsetof(UDlgNode_SpeechSequence, SpeechSequence) == 0x000098, "Member 'UDlgNode_SpeechSequence::SpeechSequence' has a wrong offset!");
static_assert(offsetof(UDlgNode_SpeechSequence, InnerEdges) == 0x0000A8, "Member 'UDlgNode_SpeechSequence::InnerEdges' has a wrong offset!");

// Class DlgSystem.DlgNode_Start
// 0x0000 (0x0098 - 0x0098)
class UDlgNode_Start final : public UDlgNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgNode_Start">();
	}
	static class UDlgNode_Start* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgNode_Start>();
	}
};
static_assert(alignof(UDlgNode_Start) == 0x000008, "Wrong alignment on UDlgNode_Start");
static_assert(sizeof(UDlgNode_Start) == 0x000098, "Wrong size on UDlgNode_Start");

// Class DlgSystem.DlgSystemSettings
// 0x0440 (0x0478 - 0x0038)
class UDlgSystemSettings final : public UDeveloperSettings
{
public:
	bool                                          bClearDialogueHistoryAutomatically;                // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRegisterDialogueConsoleCommandsAutomatically;     // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlgNoSatisfiedChildBehavior                  NoSatisfiedChildBehavior;                          // 0x003A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlgDialogueTextFormat                        DialogueTextFormat;                                // 0x003B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlgTextInputKeyForNewLine                    DialogueTextInputKeyForNewLine;                    // 0x003C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSetDefaultParticipantClasses;                 // 0x003D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowNodeData;                                     // 0x003E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowEdgeData;                                     // 0x003F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlgSpeakerStateVisibility                    DialogueSpeakerStateVisibility;                    // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlgVoiceDisplayedFields                      DialogueDisplayedVoiceFields;                      // 0x0041(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowGenericData;                                  // 0x0042(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAdvancedChildren;                             // 0x0043(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F5[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         BlacklistedReflectionClasses;                      // 0x0048(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DefaultCustomNodeDataClass;                        // 0x0058(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDlgClassPickerDisplayMode                    ClassPickerDisplayMode;                            // 0x0080(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBatchOnlyInGameDialogues;                         // 0x0081(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F6[0x6];                                     // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FString>                           AdditionalTextFormatFileExtensionsToLookFor;       // 0x0088(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                          bSetDefaultEdgeTexts;                              // 0x00D8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDefaultEdgeTextOnFirstChildOnly;               // 0x00D9(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F7[0x6];                                     // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DefaultTextEdgeToEndNode;                          // 0x00E0(0x0018)(Edit, Config, NativeAccessSpecifierPublic)
	class FText                                   DefaultTextEdgeToNormalNode;                       // 0x00F8(0x0018)(Edit, Config, NativeAccessSpecifierPublic)
	EDlgTextNamespaceLocalization                 DialogueTextNamespaceLocalization;                 // 0x0110(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F8[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DialogueTextGlobalNamespaceName;                   // 0x0118(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueTextPrefixNamespaceName;                   // 0x0128(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FString>                           LocalizationIgnoredStrings;                        // 0x0138(0x0050)(Edit, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	TMap<class FString, class FText>              LocalizationRemapSourceStringsToTexts;             // 0x0188(0x0050)(Edit, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bEnableMessageLog;                                 // 0x01D8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMessageLogMirrorToOutputLog;                      // 0x01D9(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMessageLogOpen;                                   // 0x01DA(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOutputLog;                                  // 0x01DB(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENYLoggerLogLevel                             RedirectMessageLogLevelsHigherThan;                // 0x01DC(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENYLoggerLogLevel                             OpenMessageLogLevelsHigherThan;                    // 0x01DD(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideEmptyDialogueBrowserCategories;               // 0x01DE(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowExternalURLsToolbar;                          // 0x01DF(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F9[0x50];                                    // 0x01E0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DescriptionWrapTextAt;                             // 0x0230(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                DescriptionTextMargin;                             // 0x0234(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          TitleHorizontalAlignment;                          // 0x0244(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowHasEnterConditionsIcon;                       // 0x0245(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowHasEnterEventsIcon;                           // 0x0246(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowHasVoiceIcon;                                 // 0x0247(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowHasGenericDataIcon;                           // 0x0248(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FA[0x3];                                     // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SpeechNodeColor;                                   // 0x024C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RootNodeColor;                                     // 0x025C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EndNodeColor;                                      // 0x026C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VirtualParentNodeColor;                            // 0x027C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SelectorFirstNodeColor;                            // 0x028C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SelectorRandomNodeColor;                           // 0x029C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SpeechSequenceNodeColor;                           // 0x02AC(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ProxyNodeColor;                                    // 0x02BC(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BorderBackgroundColor;                             // 0x02CC(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BorderHoveredBackgroundColor;                      // 0x02DC(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BorderBackgroundColorNoChildren;                   // 0x02EC(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BorderHoveredBackgroundColorNoChildren;            // 0x02FC(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BorderBackgroundColorHighlighted;                  // 0x030C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                DescriptionSpeakerMargin;                          // 0x031C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          DescriptionSpeakerHorizontalAlignment;             // 0x032C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FB[0x3];                                     // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WireThickness;                                     // 0x0330(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWireDrawBubbles;                                  // 0x0334(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowEdgeHasConditionsIcon;                        // 0x0335(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowEdgeText;                                     // 0x0336(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FC[0x1];                                     // 0x0337(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GraphEdgeTextWrapAt;                               // 0x0338(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GraphEdgeTextCharLimit;                            // 0x033C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                GraphEdgeTextMargin;                               // 0x0340(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           GraphEdgeTextColor;                                // 0x0350(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GraphEdgeTextBackgroundColor;                      // 0x0360(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WireBaseColor;                                     // 0x0370(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDifferentColorForConditionWires;              // 0x0380(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FD[0x3];                                     // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           WireWithConditionsColor;                           // 0x0384(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WireHoveredColor;                                  // 0x0394(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPrimarySecondaryEdges;                        // 0x03A4(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawPrimaryEdges;                                 // 0x03A5(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawSecondaryEdges;                               // 0x03A6(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FE[0x1];                                     // 0x03A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           WirePrimaryEdgeColor;                              // 0x03A8(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WireSecondaryEdgeColor;                            // 0x03B8(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowEventsAndConditions;                          // 0x03C8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17FF[0x3];                                     // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           GraphConditionBackgroundColor;                     // 0x03CC(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GraphConditionBorderColor;                         // 0x03DC(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GraphConditionTextColor;                           // 0x03EC(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                GraphConditionBorderSize;                          // 0x03FC(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                GraphConditionTextMargin;                          // 0x040C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           GraphEventBackgroundColor;                         // 0x041C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GraphEventBorderColor;                             // 0x042C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GraphEventTextColor;                               // 0x043C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                GraphEventBorderSize;                              // 0x044C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                GraphEventTextMargin;                              // 0x045C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OffsetBetweenColumnsX;                             // 0x046C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetBetweenRowsY;                                // 0x0470(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1800[0x4];                                     // 0x0474(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgSystemSettings">();
	}
	static class UDlgSystemSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgSystemSettings>();
	}
};
static_assert(alignof(UDlgSystemSettings) == 0x000008, "Wrong alignment on UDlgSystemSettings");
static_assert(sizeof(UDlgSystemSettings) == 0x000478, "Wrong size on UDlgSystemSettings");
static_assert(offsetof(UDlgSystemSettings, bClearDialogueHistoryAutomatically) == 0x000038, "Member 'UDlgSystemSettings::bClearDialogueHistoryAutomatically' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bRegisterDialogueConsoleCommandsAutomatically) == 0x000039, "Member 'UDlgSystemSettings::bRegisterDialogueConsoleCommandsAutomatically' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, NoSatisfiedChildBehavior) == 0x00003A, "Member 'UDlgSystemSettings::NoSatisfiedChildBehavior' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DialogueTextFormat) == 0x00003B, "Member 'UDlgSystemSettings::DialogueTextFormat' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DialogueTextInputKeyForNewLine) == 0x00003C, "Member 'UDlgSystemSettings::DialogueTextInputKeyForNewLine' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bAutoSetDefaultParticipantClasses) == 0x00003D, "Member 'UDlgSystemSettings::bAutoSetDefaultParticipantClasses' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowNodeData) == 0x00003E, "Member 'UDlgSystemSettings::bShowNodeData' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowEdgeData) == 0x00003F, "Member 'UDlgSystemSettings::bShowEdgeData' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DialogueSpeakerStateVisibility) == 0x000040, "Member 'UDlgSystemSettings::DialogueSpeakerStateVisibility' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DialogueDisplayedVoiceFields) == 0x000041, "Member 'UDlgSystemSettings::DialogueDisplayedVoiceFields' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowGenericData) == 0x000042, "Member 'UDlgSystemSettings::bShowGenericData' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowAdvancedChildren) == 0x000043, "Member 'UDlgSystemSettings::bShowAdvancedChildren' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, BlacklistedReflectionClasses) == 0x000048, "Member 'UDlgSystemSettings::BlacklistedReflectionClasses' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DefaultCustomNodeDataClass) == 0x000058, "Member 'UDlgSystemSettings::DefaultCustomNodeDataClass' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, ClassPickerDisplayMode) == 0x000080, "Member 'UDlgSystemSettings::ClassPickerDisplayMode' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bBatchOnlyInGameDialogues) == 0x000081, "Member 'UDlgSystemSettings::bBatchOnlyInGameDialogues' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, AdditionalTextFormatFileExtensionsToLookFor) == 0x000088, "Member 'UDlgSystemSettings::AdditionalTextFormatFileExtensionsToLookFor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bSetDefaultEdgeTexts) == 0x0000D8, "Member 'UDlgSystemSettings::bSetDefaultEdgeTexts' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bSetDefaultEdgeTextOnFirstChildOnly) == 0x0000D9, "Member 'UDlgSystemSettings::bSetDefaultEdgeTextOnFirstChildOnly' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DefaultTextEdgeToEndNode) == 0x0000E0, "Member 'UDlgSystemSettings::DefaultTextEdgeToEndNode' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DefaultTextEdgeToNormalNode) == 0x0000F8, "Member 'UDlgSystemSettings::DefaultTextEdgeToNormalNode' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DialogueTextNamespaceLocalization) == 0x000110, "Member 'UDlgSystemSettings::DialogueTextNamespaceLocalization' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DialogueTextGlobalNamespaceName) == 0x000118, "Member 'UDlgSystemSettings::DialogueTextGlobalNamespaceName' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DialogueTextPrefixNamespaceName) == 0x000128, "Member 'UDlgSystemSettings::DialogueTextPrefixNamespaceName' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, LocalizationIgnoredStrings) == 0x000138, "Member 'UDlgSystemSettings::LocalizationIgnoredStrings' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, LocalizationRemapSourceStringsToTexts) == 0x000188, "Member 'UDlgSystemSettings::LocalizationRemapSourceStringsToTexts' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bEnableMessageLog) == 0x0001D8, "Member 'UDlgSystemSettings::bEnableMessageLog' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bMessageLogMirrorToOutputLog) == 0x0001D9, "Member 'UDlgSystemSettings::bMessageLogMirrorToOutputLog' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bMessageLogOpen) == 0x0001DA, "Member 'UDlgSystemSettings::bMessageLogOpen' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bEnableOutputLog) == 0x0001DB, "Member 'UDlgSystemSettings::bEnableOutputLog' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, RedirectMessageLogLevelsHigherThan) == 0x0001DC, "Member 'UDlgSystemSettings::RedirectMessageLogLevelsHigherThan' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, OpenMessageLogLevelsHigherThan) == 0x0001DD, "Member 'UDlgSystemSettings::OpenMessageLogLevelsHigherThan' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bHideEmptyDialogueBrowserCategories) == 0x0001DE, "Member 'UDlgSystemSettings::bHideEmptyDialogueBrowserCategories' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowExternalURLsToolbar) == 0x0001DF, "Member 'UDlgSystemSettings::bShowExternalURLsToolbar' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DescriptionWrapTextAt) == 0x000230, "Member 'UDlgSystemSettings::DescriptionWrapTextAt' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DescriptionTextMargin) == 0x000234, "Member 'UDlgSystemSettings::DescriptionTextMargin' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, TitleHorizontalAlignment) == 0x000244, "Member 'UDlgSystemSettings::TitleHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowHasEnterConditionsIcon) == 0x000245, "Member 'UDlgSystemSettings::bShowHasEnterConditionsIcon' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowHasEnterEventsIcon) == 0x000246, "Member 'UDlgSystemSettings::bShowHasEnterEventsIcon' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowHasVoiceIcon) == 0x000247, "Member 'UDlgSystemSettings::bShowHasVoiceIcon' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowHasGenericDataIcon) == 0x000248, "Member 'UDlgSystemSettings::bShowHasGenericDataIcon' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, SpeechNodeColor) == 0x00024C, "Member 'UDlgSystemSettings::SpeechNodeColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, RootNodeColor) == 0x00025C, "Member 'UDlgSystemSettings::RootNodeColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, EndNodeColor) == 0x00026C, "Member 'UDlgSystemSettings::EndNodeColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, VirtualParentNodeColor) == 0x00027C, "Member 'UDlgSystemSettings::VirtualParentNodeColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, SelectorFirstNodeColor) == 0x00028C, "Member 'UDlgSystemSettings::SelectorFirstNodeColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, SelectorRandomNodeColor) == 0x00029C, "Member 'UDlgSystemSettings::SelectorRandomNodeColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, SpeechSequenceNodeColor) == 0x0002AC, "Member 'UDlgSystemSettings::SpeechSequenceNodeColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, ProxyNodeColor) == 0x0002BC, "Member 'UDlgSystemSettings::ProxyNodeColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, BorderBackgroundColor) == 0x0002CC, "Member 'UDlgSystemSettings::BorderBackgroundColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, BorderHoveredBackgroundColor) == 0x0002DC, "Member 'UDlgSystemSettings::BorderHoveredBackgroundColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, BorderBackgroundColorNoChildren) == 0x0002EC, "Member 'UDlgSystemSettings::BorderBackgroundColorNoChildren' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, BorderHoveredBackgroundColorNoChildren) == 0x0002FC, "Member 'UDlgSystemSettings::BorderHoveredBackgroundColorNoChildren' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, BorderBackgroundColorHighlighted) == 0x00030C, "Member 'UDlgSystemSettings::BorderBackgroundColorHighlighted' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DescriptionSpeakerMargin) == 0x00031C, "Member 'UDlgSystemSettings::DescriptionSpeakerMargin' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, DescriptionSpeakerHorizontalAlignment) == 0x00032C, "Member 'UDlgSystemSettings::DescriptionSpeakerHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, WireThickness) == 0x000330, "Member 'UDlgSystemSettings::WireThickness' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bWireDrawBubbles) == 0x000334, "Member 'UDlgSystemSettings::bWireDrawBubbles' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowEdgeHasConditionsIcon) == 0x000335, "Member 'UDlgSystemSettings::bShowEdgeHasConditionsIcon' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowEdgeText) == 0x000336, "Member 'UDlgSystemSettings::bShowEdgeText' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphEdgeTextWrapAt) == 0x000338, "Member 'UDlgSystemSettings::GraphEdgeTextWrapAt' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphEdgeTextCharLimit) == 0x00033C, "Member 'UDlgSystemSettings::GraphEdgeTextCharLimit' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphEdgeTextMargin) == 0x000340, "Member 'UDlgSystemSettings::GraphEdgeTextMargin' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphEdgeTextColor) == 0x000350, "Member 'UDlgSystemSettings::GraphEdgeTextColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphEdgeTextBackgroundColor) == 0x000360, "Member 'UDlgSystemSettings::GraphEdgeTextBackgroundColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, WireBaseColor) == 0x000370, "Member 'UDlgSystemSettings::WireBaseColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowDifferentColorForConditionWires) == 0x000380, "Member 'UDlgSystemSettings::bShowDifferentColorForConditionWires' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, WireWithConditionsColor) == 0x000384, "Member 'UDlgSystemSettings::WireWithConditionsColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, WireHoveredColor) == 0x000394, "Member 'UDlgSystemSettings::WireHoveredColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowPrimarySecondaryEdges) == 0x0003A4, "Member 'UDlgSystemSettings::bShowPrimarySecondaryEdges' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bDrawPrimaryEdges) == 0x0003A5, "Member 'UDlgSystemSettings::bDrawPrimaryEdges' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bDrawSecondaryEdges) == 0x0003A6, "Member 'UDlgSystemSettings::bDrawSecondaryEdges' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, WirePrimaryEdgeColor) == 0x0003A8, "Member 'UDlgSystemSettings::WirePrimaryEdgeColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, WireSecondaryEdgeColor) == 0x0003B8, "Member 'UDlgSystemSettings::WireSecondaryEdgeColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, bShowEventsAndConditions) == 0x0003C8, "Member 'UDlgSystemSettings::bShowEventsAndConditions' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphConditionBackgroundColor) == 0x0003CC, "Member 'UDlgSystemSettings::GraphConditionBackgroundColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphConditionBorderColor) == 0x0003DC, "Member 'UDlgSystemSettings::GraphConditionBorderColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphConditionTextColor) == 0x0003EC, "Member 'UDlgSystemSettings::GraphConditionTextColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphConditionBorderSize) == 0x0003FC, "Member 'UDlgSystemSettings::GraphConditionBorderSize' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphConditionTextMargin) == 0x00040C, "Member 'UDlgSystemSettings::GraphConditionTextMargin' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphEventBackgroundColor) == 0x00041C, "Member 'UDlgSystemSettings::GraphEventBackgroundColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphEventBorderColor) == 0x00042C, "Member 'UDlgSystemSettings::GraphEventBorderColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphEventTextColor) == 0x00043C, "Member 'UDlgSystemSettings::GraphEventTextColor' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphEventBorderSize) == 0x00044C, "Member 'UDlgSystemSettings::GraphEventBorderSize' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, GraphEventTextMargin) == 0x00045C, "Member 'UDlgSystemSettings::GraphEventTextMargin' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, OffsetBetweenColumnsX) == 0x00046C, "Member 'UDlgSystemSettings::OffsetBetweenColumnsX' has a wrong offset!");
static_assert(offsetof(UDlgSystemSettings, OffsetBetweenRowsY) == 0x000470, "Member 'UDlgSystemSettings::OffsetBetweenRowsY' has a wrong offset!");

// Class DlgSystem.DlgTextArgumentCustom
// 0x0000 (0x0028 - 0x0028)
class UDlgTextArgumentCustom : public UDlgObject
{
public:
	class FText GetText(const class UDlgContext* Context, const class UObject* Participant, const class FString& DisplayStringParam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgTextArgumentCustom">();
	}
	static class UDlgTextArgumentCustom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgTextArgumentCustom>();
	}
};
static_assert(alignof(UDlgTextArgumentCustom) == 0x000008, "Wrong alignment on UDlgTextArgumentCustom");
static_assert(sizeof(UDlgTextArgumentCustom) == 0x000028, "Wrong size on UDlgTextArgumentCustom");

// Class DlgSystem.DlgTextArgumentCustomHideCategories
// 0x0000 (0x0028 - 0x0028)
class UDlgTextArgumentCustomHideCategories final : public UDlgTextArgumentCustom
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DlgTextArgumentCustomHideCategories">();
	}
	static class UDlgTextArgumentCustomHideCategories* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDlgTextArgumentCustomHideCategories>();
	}
};
static_assert(alignof(UDlgTextArgumentCustomHideCategories) == 0x000008, "Wrong alignment on UDlgTextArgumentCustomHideCategories");
static_assert(sizeof(UDlgTextArgumentCustomHideCategories) == 0x000028, "Wrong size on UDlgTextArgumentCustomHideCategories");

}

