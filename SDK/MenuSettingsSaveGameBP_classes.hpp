#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MenuSettingsSaveGameBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MenuSettingsSaveGameBP.MenuSettingsSaveGameBP_C
// 0x0108 (0x0130 - 0x0028)
class UMenuSettingsSaveGameBP_C final : public USaveGame
{
public:
	bool                                          bBenchmarkAlreadyRan;                              // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPostProcessingFirstRun;                           // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRaytracingFirstRun;                               // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisplaySettingsFirstRun;                          // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAudioSettingsFirstRun;                            // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGameSettingsFirstRun;                             // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bControlsSettingsFirstRun;                         // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_330A[0x1];                                     // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            PersistentVariables;                               // 0x0030(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          MotionBlur;                                        // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LensFlares;                                        // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SSR;                                               // 0x0082(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bloom;                                             // 0x0083(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AntiAliasing;                                      // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AmbientOcclusion;                                  // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDefaultBindingsFirstRun;                          // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_330B[0x6];                                     // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInputActionKeyMapping>         DefaultActionMappings;                             // 0x0090(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FInputAxisKeyMapping>           DefaultAxisMappings;                               // 0x00A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         RaytracedShadows;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RaytracedReflections;                              // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RaytracedTranslucency;                             // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RaytracedAmbientOcclusion;                         // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RaytracedGlobalIllumination;                       // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DLSS;                                              // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Brightness;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FieldOfView;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MasterAudioVolume;                                 // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MusicAudioVolume;                                  // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SFXAudioVolume;                                    // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VoiceAudioVolume;                                  // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         LanguageCodeArray;                                 // 0x00F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Difficulty;                                        // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Language;                                          // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SubtitlesEnabled;                                  // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvertLookY;                                       // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvertLookX;                                       // 0x0112(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_330C[0x5];                                     // 0x0113(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CameraSpeedX;                                      // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CameraSpeedY;                                      // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rumble;                                            // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_330D[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GraphicsPreset;                                    // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetPersistentVar(const class FString& Param_Name, class FString* Value, bool* bFound);
	void SetPersistentVar(const class FString& Param_Name, const class FString& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MenuSettingsSaveGameBP_C">();
	}
	static class UMenuSettingsSaveGameBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuSettingsSaveGameBP_C>();
	}
};
static_assert(alignof(UMenuSettingsSaveGameBP_C) == 0x000008, "Wrong alignment on UMenuSettingsSaveGameBP_C");
static_assert(sizeof(UMenuSettingsSaveGameBP_C) == 0x000130, "Wrong size on UMenuSettingsSaveGameBP_C");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, bBenchmarkAlreadyRan) == 0x000028, "Member 'UMenuSettingsSaveGameBP_C::bBenchmarkAlreadyRan' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, bPostProcessingFirstRun) == 0x000029, "Member 'UMenuSettingsSaveGameBP_C::bPostProcessingFirstRun' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, bRaytracingFirstRun) == 0x00002A, "Member 'UMenuSettingsSaveGameBP_C::bRaytracingFirstRun' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, bDisplaySettingsFirstRun) == 0x00002B, "Member 'UMenuSettingsSaveGameBP_C::bDisplaySettingsFirstRun' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, bAudioSettingsFirstRun) == 0x00002C, "Member 'UMenuSettingsSaveGameBP_C::bAudioSettingsFirstRun' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, bGameSettingsFirstRun) == 0x00002D, "Member 'UMenuSettingsSaveGameBP_C::bGameSettingsFirstRun' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, bControlsSettingsFirstRun) == 0x00002E, "Member 'UMenuSettingsSaveGameBP_C::bControlsSettingsFirstRun' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, PersistentVariables) == 0x000030, "Member 'UMenuSettingsSaveGameBP_C::PersistentVariables' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, MotionBlur) == 0x000080, "Member 'UMenuSettingsSaveGameBP_C::MotionBlur' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, LensFlares) == 0x000081, "Member 'UMenuSettingsSaveGameBP_C::LensFlares' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, SSR) == 0x000082, "Member 'UMenuSettingsSaveGameBP_C::SSR' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, Bloom) == 0x000083, "Member 'UMenuSettingsSaveGameBP_C::Bloom' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, AntiAliasing) == 0x000084, "Member 'UMenuSettingsSaveGameBP_C::AntiAliasing' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, AmbientOcclusion) == 0x000088, "Member 'UMenuSettingsSaveGameBP_C::AmbientOcclusion' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, bDefaultBindingsFirstRun) == 0x000089, "Member 'UMenuSettingsSaveGameBP_C::bDefaultBindingsFirstRun' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, DefaultActionMappings) == 0x000090, "Member 'UMenuSettingsSaveGameBP_C::DefaultActionMappings' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, DefaultAxisMappings) == 0x0000A0, "Member 'UMenuSettingsSaveGameBP_C::DefaultAxisMappings' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, RaytracedShadows) == 0x0000B0, "Member 'UMenuSettingsSaveGameBP_C::RaytracedShadows' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, RaytracedReflections) == 0x0000B4, "Member 'UMenuSettingsSaveGameBP_C::RaytracedReflections' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, RaytracedTranslucency) == 0x0000B8, "Member 'UMenuSettingsSaveGameBP_C::RaytracedTranslucency' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, RaytracedAmbientOcclusion) == 0x0000BC, "Member 'UMenuSettingsSaveGameBP_C::RaytracedAmbientOcclusion' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, RaytracedGlobalIllumination) == 0x0000C0, "Member 'UMenuSettingsSaveGameBP_C::RaytracedGlobalIllumination' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, DLSS) == 0x0000C4, "Member 'UMenuSettingsSaveGameBP_C::DLSS' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, Brightness) == 0x0000C8, "Member 'UMenuSettingsSaveGameBP_C::Brightness' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, FieldOfView) == 0x0000D0, "Member 'UMenuSettingsSaveGameBP_C::FieldOfView' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, MasterAudioVolume) == 0x0000D8, "Member 'UMenuSettingsSaveGameBP_C::MasterAudioVolume' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, MusicAudioVolume) == 0x0000E0, "Member 'UMenuSettingsSaveGameBP_C::MusicAudioVolume' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, SFXAudioVolume) == 0x0000E8, "Member 'UMenuSettingsSaveGameBP_C::SFXAudioVolume' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, VoiceAudioVolume) == 0x0000F0, "Member 'UMenuSettingsSaveGameBP_C::VoiceAudioVolume' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, LanguageCodeArray) == 0x0000F8, "Member 'UMenuSettingsSaveGameBP_C::LanguageCodeArray' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, Difficulty) == 0x000108, "Member 'UMenuSettingsSaveGameBP_C::Difficulty' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, Language) == 0x00010C, "Member 'UMenuSettingsSaveGameBP_C::Language' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, SubtitlesEnabled) == 0x000110, "Member 'UMenuSettingsSaveGameBP_C::SubtitlesEnabled' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, InvertLookY) == 0x000111, "Member 'UMenuSettingsSaveGameBP_C::InvertLookY' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, InvertLookX) == 0x000112, "Member 'UMenuSettingsSaveGameBP_C::InvertLookX' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, CameraSpeedX) == 0x000118, "Member 'UMenuSettingsSaveGameBP_C::CameraSpeedX' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, CameraSpeedY) == 0x000120, "Member 'UMenuSettingsSaveGameBP_C::CameraSpeedY' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, Rumble) == 0x000128, "Member 'UMenuSettingsSaveGameBP_C::Rumble' has a wrong offset!");
static_assert(offsetof(UMenuSettingsSaveGameBP_C, GraphicsPreset) == 0x00012C, "Member 'UMenuSettingsSaveGameBP_C::GraphicsPreset' has a wrong offset!");

}

