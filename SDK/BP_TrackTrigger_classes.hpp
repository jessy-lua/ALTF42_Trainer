#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TrackTrigger

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TrackTrigger.BP_TrackTrigger_C
// 0x0088 (0x0320 - 0x0298)
class ABP_TrackTrigger_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    EditorIconBB;                                      // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       RadiusSphere;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_TrainTrack_C*                       Track;                                             // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackSplineIndex;                                  // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyToAllTrackSplines;                            // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28BF[0x3];                                     // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TriggerRadius;                                     // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C0[0x3];                                     // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DistanceSampleCount;                               // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AutoSet_DistanceOnSpline;                          // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreHelperBogies;                                // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TrigerOnce;                                        // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseEnableTimer;                                    // 0x02DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C1[0x5];                                     // 0x02DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ResetDelay;                                        // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeRemainingForReset;                             // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_TrainTrack_C*>               TracksWithRegions;                                 // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          TriggerOncePerCarriage;                            // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C2[0x7];                                     // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_TrainCarriage_C*>            TriggeredCarriages;                                // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          PrintOnTriggerFire;                                // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AttachToTrackAndBuildRegions();
	void DisableTrigger();
	void EnableAndResetTrigger();
	void ExecuteUbergraph_BP_TrackTrigger(int32 EntryPoint);
	void FireTrackTrigger(class UAC_Bogie_C* Bogie, class ABP_TrainCarriage_C* Carriage);
	void InitalizeTrackTrigger();
	void InternalTriggerEvent(class UAC_Bogie_C* Bogie, class ABP_TrainCarriage_C* Carriage);
	void PostTriggerResetEvent();
	void ReceiveTick(float DeltaSeconds);
	void TickEnableTimer(double& DeltaSeconds);
	void TriggerFireCheck(class UAC_Bogie_C* Bogie, class ABP_TrainCarriage_C* Carriage, bool* CanFire);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TrackTrigger_C">();
	}
	static class ABP_TrackTrigger_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TrackTrigger_C>();
	}
};
static_assert(alignof(ABP_TrackTrigger_C) == 0x000008, "Wrong alignment on ABP_TrackTrigger_C");
static_assert(sizeof(ABP_TrackTrigger_C) == 0x000320, "Wrong size on ABP_TrackTrigger_C");
static_assert(offsetof(ABP_TrackTrigger_C, UberGraphFrame) == 0x000298, "Member 'ABP_TrackTrigger_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, EditorIconBB) == 0x0002A0, "Member 'ABP_TrackTrigger_C::EditorIconBB' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, RadiusSphere) == 0x0002A8, "Member 'ABP_TrackTrigger_C::RadiusSphere' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, Track) == 0x0002B0, "Member 'ABP_TrackTrigger_C::Track' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, TrackSplineIndex) == 0x0002B8, "Member 'ABP_TrackTrigger_C::TrackSplineIndex' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, ApplyToAllTrackSplines) == 0x0002BC, "Member 'ABP_TrackTrigger_C::ApplyToAllTrackSplines' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, TriggerRadius) == 0x0002C0, "Member 'ABP_TrackTrigger_C::TriggerRadius' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, Active) == 0x0002C8, "Member 'ABP_TrackTrigger_C::Active' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, DistanceSampleCount) == 0x0002CC, "Member 'ABP_TrackTrigger_C::DistanceSampleCount' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, AutoSet_DistanceOnSpline) == 0x0002D0, "Member 'ABP_TrackTrigger_C::AutoSet_DistanceOnSpline' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, IgnoreHelperBogies) == 0x0002D8, "Member 'ABP_TrackTrigger_C::IgnoreHelperBogies' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, TrigerOnce) == 0x0002D9, "Member 'ABP_TrackTrigger_C::TrigerOnce' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, UseEnableTimer) == 0x0002DA, "Member 'ABP_TrackTrigger_C::UseEnableTimer' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, ResetDelay) == 0x0002E0, "Member 'ABP_TrackTrigger_C::ResetDelay' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, TimeRemainingForReset) == 0x0002E8, "Member 'ABP_TrackTrigger_C::TimeRemainingForReset' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, TracksWithRegions) == 0x0002F0, "Member 'ABP_TrackTrigger_C::TracksWithRegions' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, TriggerOncePerCarriage) == 0x000300, "Member 'ABP_TrackTrigger_C::TriggerOncePerCarriage' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, TriggeredCarriages) == 0x000308, "Member 'ABP_TrackTrigger_C::TriggeredCarriages' has a wrong offset!");
static_assert(offsetof(ABP_TrackTrigger_C, PrintOnTriggerFire) == 0x000318, "Member 'ABP_TrackTrigger_C::PrintOnTriggerFire' has a wrong offset!");

}

