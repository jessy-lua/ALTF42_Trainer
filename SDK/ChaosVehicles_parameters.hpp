#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChaosVehicles

#include "Basic.hpp"

#include "ChaosVehicles_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ChaosVehicles.ChaosVehicleMovementComponent.DecreaseThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_DecreaseThrottleInput final
{
public:
	float                                         ThrottleDelta;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_DecreaseThrottleInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_DecreaseThrottleInput");
static_assert(sizeof(ChaosVehicleMovementComponent_DecreaseThrottleInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_DecreaseThrottleInput");
static_assert(offsetof(ChaosVehicleMovementComponent_DecreaseThrottleInput, ThrottleDelta) == 0x000000, "Member 'ChaosVehicleMovementComponent_DecreaseThrottleInput::ThrottleDelta' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.EnableSelfRighting
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_EnableSelfRighting final
{
public:
	bool                                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_EnableSelfRighting) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_EnableSelfRighting");
static_assert(sizeof(ChaosVehicleMovementComponent_EnableSelfRighting) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_EnableSelfRighting");
static_assert(offsetof(ChaosVehicleMovementComponent_EnableSelfRighting, InState) == 0x000000, "Member 'ChaosVehicleMovementComponent_EnableSelfRighting::InState' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetBrakeInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_GetBrakeInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetBrakeInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_GetBrakeInput");
static_assert(sizeof(ChaosVehicleMovementComponent_GetBrakeInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_GetBrakeInput");
static_assert(offsetof(ChaosVehicleMovementComponent_GetBrakeInput, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetBrakeInput::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetSteeringInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_GetSteeringInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetSteeringInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_GetSteeringInput");
static_assert(sizeof(ChaosVehicleMovementComponent_GetSteeringInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_GetSteeringInput");
static_assert(offsetof(ChaosVehicleMovementComponent_GetSteeringInput, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetSteeringInput::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_GetThrottleInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetThrottleInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_GetThrottleInput");
static_assert(sizeof(ChaosVehicleMovementComponent_GetThrottleInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_GetThrottleInput");
static_assert(offsetof(ChaosVehicleMovementComponent_GetThrottleInput, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetThrottleInput::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.IncreaseThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_IncreaseThrottleInput final
{
public:
	float                                         ThrottleDelta;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_IncreaseThrottleInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_IncreaseThrottleInput");
static_assert(sizeof(ChaosVehicleMovementComponent_IncreaseThrottleInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_IncreaseThrottleInput");
static_assert(offsetof(ChaosVehicleMovementComponent_IncreaseThrottleInput, ThrottleDelta) == 0x000000, "Member 'ChaosVehicleMovementComponent_IncreaseThrottleInput::ThrottleDelta' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.ServerUpdateState
// 0x0020 (0x0020 - 0x0000)
struct ChaosVehicleMovementComponent_ServerUpdateState final
{
public:
	float                                         InSteeringInput;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InThrottleInput;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBrakeInput;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHandbrakeInput;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCurrentGear;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRollInput;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPitchInput;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InYawInput;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_ServerUpdateState) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_ServerUpdateState");
static_assert(sizeof(ChaosVehicleMovementComponent_ServerUpdateState) == 0x000020, "Wrong size on ChaosVehicleMovementComponent_ServerUpdateState");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InSteeringInput) == 0x000000, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InSteeringInput' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InThrottleInput) == 0x000004, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InThrottleInput' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InBrakeInput) == 0x000008, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InBrakeInput' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InHandbrakeInput) == 0x00000C, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InHandbrakeInput' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InCurrentGear) == 0x000010, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InCurrentGear' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InRollInput) == 0x000014, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InRollInput' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InPitchInput) == 0x000018, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InPitchInput' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_ServerUpdateState, InYawInput) == 0x00001C, "Member 'ChaosVehicleMovementComponent_ServerUpdateState::InYawInput' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetBrakeInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_SetBrakeInput final
{
public:
	float                                         brake;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetBrakeInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetBrakeInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetBrakeInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_SetBrakeInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetBrakeInput, brake) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetBrakeInput::brake' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetChangeDownInput
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_SetChangeDownInput final
{
public:
	bool                                          bNewGearDown;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetChangeDownInput) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_SetChangeDownInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetChangeDownInput) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_SetChangeDownInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetChangeDownInput, bNewGearDown) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetChangeDownInput::bNewGearDown' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetChangeUpInput
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_SetChangeUpInput final
{
public:
	bool                                          bNewGearUp;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetChangeUpInput) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_SetChangeUpInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetChangeUpInput) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_SetChangeUpInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetChangeUpInput, bNewGearUp) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetChangeUpInput::bNewGearUp' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetHandbrakeInput
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_SetHandbrakeInput final
{
public:
	bool                                          bNewHandbrake;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetHandbrakeInput) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_SetHandbrakeInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetHandbrakeInput) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_SetHandbrakeInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetHandbrakeInput, bNewHandbrake) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetHandbrakeInput::bNewHandbrake' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetParked
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_SetParked final
{
public:
	bool                                          bParked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetParked) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_SetParked");
static_assert(sizeof(ChaosVehicleMovementComponent_SetParked) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_SetParked");
static_assert(offsetof(ChaosVehicleMovementComponent_SetParked, bParked) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetParked::bParked' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetPitchInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_SetPitchInput final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetPitchInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetPitchInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetPitchInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_SetPitchInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetPitchInput, Pitch) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetPitchInput::Pitch' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetRequiresControllerForInputs
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_SetRequiresControllerForInputs final
{
public:
	bool                                          bRequiresController;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetRequiresControllerForInputs) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_SetRequiresControllerForInputs");
static_assert(sizeof(ChaosVehicleMovementComponent_SetRequiresControllerForInputs) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_SetRequiresControllerForInputs");
static_assert(offsetof(ChaosVehicleMovementComponent_SetRequiresControllerForInputs, bRequiresController) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetRequiresControllerForInputs::bRequiresController' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetRollInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_SetRollInput final
{
public:
	float                                         Roll;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetRollInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetRollInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetRollInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_SetRollInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetRollInput, Roll) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetRollInput::Roll' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetSleeping
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_SetSleeping final
{
public:
	bool                                          bEnableSleep;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetSleeping) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_SetSleeping");
static_assert(sizeof(ChaosVehicleMovementComponent_SetSleeping) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_SetSleeping");
static_assert(offsetof(ChaosVehicleMovementComponent_SetSleeping, bEnableSleep) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetSleeping::bEnableSleep' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetSteeringInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_SetSteeringInput final
{
public:
	float                                         Steering;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetSteeringInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetSteeringInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetSteeringInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_SetSteeringInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetSteeringInput, Steering) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetSteeringInput::Steering' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetTargetGear
// 0x0008 (0x0008 - 0x0000)
struct ChaosVehicleMovementComponent_SetTargetGear final
{
public:
	int32                                         GearNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1855[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosVehicleMovementComponent_SetTargetGear) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetTargetGear");
static_assert(sizeof(ChaosVehicleMovementComponent_SetTargetGear) == 0x000008, "Wrong size on ChaosVehicleMovementComponent_SetTargetGear");
static_assert(offsetof(ChaosVehicleMovementComponent_SetTargetGear, GearNum) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetTargetGear::GearNum' has a wrong offset!");
static_assert(offsetof(ChaosVehicleMovementComponent_SetTargetGear, bImmediate) == 0x000004, "Member 'ChaosVehicleMovementComponent_SetTargetGear::bImmediate' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_SetThrottleInput final
{
public:
	float                                         Throttle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetThrottleInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetThrottleInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetThrottleInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_SetThrottleInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetThrottleInput, Throttle) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetThrottleInput::Throttle' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetUseAutomaticGears
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_SetUseAutomaticGears final
{
public:
	bool                                          bUseAuto;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetUseAutomaticGears) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_SetUseAutomaticGears");
static_assert(sizeof(ChaosVehicleMovementComponent_SetUseAutomaticGears) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_SetUseAutomaticGears");
static_assert(offsetof(ChaosVehicleMovementComponent_SetUseAutomaticGears, bUseAuto) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetUseAutomaticGears::bUseAuto' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.SetYawInput
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_SetYawInput final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_SetYawInput) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_SetYawInput");
static_assert(sizeof(ChaosVehicleMovementComponent_SetYawInput) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_SetYawInput");
static_assert(offsetof(ChaosVehicleMovementComponent_SetYawInput, Yaw) == 0x000000, "Member 'ChaosVehicleMovementComponent_SetYawInput::Yaw' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetCurrentGear
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_GetCurrentGear final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetCurrentGear) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_GetCurrentGear");
static_assert(sizeof(ChaosVehicleMovementComponent_GetCurrentGear) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_GetCurrentGear");
static_assert(offsetof(ChaosVehicleMovementComponent_GetCurrentGear, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetCurrentGear::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetForwardSpeed
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_GetForwardSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetForwardSpeed) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_GetForwardSpeed");
static_assert(sizeof(ChaosVehicleMovementComponent_GetForwardSpeed) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_GetForwardSpeed");
static_assert(offsetof(ChaosVehicleMovementComponent_GetForwardSpeed, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetForwardSpeed::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetForwardSpeedMPH
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_GetForwardSpeedMPH final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetForwardSpeedMPH) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_GetForwardSpeedMPH");
static_assert(sizeof(ChaosVehicleMovementComponent_GetForwardSpeedMPH) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_GetForwardSpeedMPH");
static_assert(offsetof(ChaosVehicleMovementComponent_GetForwardSpeedMPH, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetForwardSpeedMPH::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetHandbrakeInput
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_GetHandbrakeInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetHandbrakeInput) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_GetHandbrakeInput");
static_assert(sizeof(ChaosVehicleMovementComponent_GetHandbrakeInput) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_GetHandbrakeInput");
static_assert(offsetof(ChaosVehicleMovementComponent_GetHandbrakeInput, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetHandbrakeInput::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetTargetGear
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleMovementComponent_GetTargetGear final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetTargetGear) == 0x000004, "Wrong alignment on ChaosVehicleMovementComponent_GetTargetGear");
static_assert(sizeof(ChaosVehicleMovementComponent_GetTargetGear) == 0x000004, "Wrong size on ChaosVehicleMovementComponent_GetTargetGear");
static_assert(offsetof(ChaosVehicleMovementComponent_GetTargetGear, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetTargetGear::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.GetUseAutoGears
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_GetUseAutoGears final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_GetUseAutoGears) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_GetUseAutoGears");
static_assert(sizeof(ChaosVehicleMovementComponent_GetUseAutoGears) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_GetUseAutoGears");
static_assert(offsetof(ChaosVehicleMovementComponent_GetUseAutoGears, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_GetUseAutoGears::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleMovementComponent.IsParked
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleMovementComponent_IsParked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleMovementComponent_IsParked) == 0x000001, "Wrong alignment on ChaosVehicleMovementComponent_IsParked");
static_assert(sizeof(ChaosVehicleMovementComponent_IsParked) == 0x000001, "Wrong size on ChaosVehicleMovementComponent_IsParked");
static_assert(offsetof(ChaosVehicleMovementComponent_IsParked, ReturnValue) == 0x000000, "Member 'ChaosVehicleMovementComponent_IsParked::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.GetAxleType
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleWheel_GetAxleType final
{
public:
	EAxleType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_GetAxleType) == 0x000001, "Wrong alignment on ChaosVehicleWheel_GetAxleType");
static_assert(sizeof(ChaosVehicleWheel_GetAxleType) == 0x000001, "Wrong size on ChaosVehicleWheel_GetAxleType");
static_assert(offsetof(ChaosVehicleWheel_GetAxleType, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_GetAxleType::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.GetRotationAngle
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleWheel_GetRotationAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_GetRotationAngle) == 0x000004, "Wrong alignment on ChaosVehicleWheel_GetRotationAngle");
static_assert(sizeof(ChaosVehicleWheel_GetRotationAngle) == 0x000004, "Wrong size on ChaosVehicleWheel_GetRotationAngle");
static_assert(offsetof(ChaosVehicleWheel_GetRotationAngle, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_GetRotationAngle::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.GetRotationAngularVelocity
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleWheel_GetRotationAngularVelocity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_GetRotationAngularVelocity) == 0x000004, "Wrong alignment on ChaosVehicleWheel_GetRotationAngularVelocity");
static_assert(sizeof(ChaosVehicleWheel_GetRotationAngularVelocity) == 0x000004, "Wrong size on ChaosVehicleWheel_GetRotationAngularVelocity");
static_assert(offsetof(ChaosVehicleWheel_GetRotationAngularVelocity, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_GetRotationAngularVelocity::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.GetSteerAngle
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleWheel_GetSteerAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_GetSteerAngle) == 0x000004, "Wrong alignment on ChaosVehicleWheel_GetSteerAngle");
static_assert(sizeof(ChaosVehicleWheel_GetSteerAngle) == 0x000004, "Wrong size on ChaosVehicleWheel_GetSteerAngle");
static_assert(offsetof(ChaosVehicleWheel_GetSteerAngle, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_GetSteerAngle::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.GetSuspensionAxis
// 0x0018 (0x0018 - 0x0000)
struct ChaosVehicleWheel_GetSuspensionAxis final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_GetSuspensionAxis) == 0x000008, "Wrong alignment on ChaosVehicleWheel_GetSuspensionAxis");
static_assert(sizeof(ChaosVehicleWheel_GetSuspensionAxis) == 0x000018, "Wrong size on ChaosVehicleWheel_GetSuspensionAxis");
static_assert(offsetof(ChaosVehicleWheel_GetSuspensionAxis, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_GetSuspensionAxis::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.GetSuspensionOffset
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleWheel_GetSuspensionOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_GetSuspensionOffset) == 0x000004, "Wrong alignment on ChaosVehicleWheel_GetSuspensionOffset");
static_assert(sizeof(ChaosVehicleWheel_GetSuspensionOffset) == 0x000004, "Wrong size on ChaosVehicleWheel_GetSuspensionOffset");
static_assert(offsetof(ChaosVehicleWheel_GetSuspensionOffset, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_GetSuspensionOffset::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.GetWheelAngularVelocity
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleWheel_GetWheelAngularVelocity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_GetWheelAngularVelocity) == 0x000004, "Wrong alignment on ChaosVehicleWheel_GetWheelAngularVelocity");
static_assert(sizeof(ChaosVehicleWheel_GetWheelAngularVelocity) == 0x000004, "Wrong size on ChaosVehicleWheel_GetWheelAngularVelocity");
static_assert(offsetof(ChaosVehicleWheel_GetWheelAngularVelocity, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_GetWheelAngularVelocity::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.GetWheelRadius
// 0x0004 (0x0004 - 0x0000)
struct ChaosVehicleWheel_GetWheelRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_GetWheelRadius) == 0x000004, "Wrong alignment on ChaosVehicleWheel_GetWheelRadius");
static_assert(sizeof(ChaosVehicleWheel_GetWheelRadius) == 0x000004, "Wrong size on ChaosVehicleWheel_GetWheelRadius");
static_assert(offsetof(ChaosVehicleWheel_GetWheelRadius, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_GetWheelRadius::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosVehicleWheel.IsInAir
// 0x0001 (0x0001 - 0x0000)
struct ChaosVehicleWheel_IsInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosVehicleWheel_IsInAir) == 0x000001, "Wrong alignment on ChaosVehicleWheel_IsInAir");
static_assert(sizeof(ChaosVehicleWheel_IsInAir) == 0x000001, "Wrong size on ChaosVehicleWheel_IsInAir");
static_assert(offsetof(ChaosVehicleWheel_IsInAir, ReturnValue) == 0x000000, "Member 'ChaosVehicleWheel_IsInAir::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.BreakWheeledSnapshot
// 0x0160 (0x0160 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot final
{
public:
	struct FWheeledSnaphotData                    Snapshot;                                          // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x00B0(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearVelocity;                                    // 0x0110(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0128(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedGear;                                      // 0x0140(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineRPM;                                         // 0x0144(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWheelSnapshot>                 WheelSnapshots;                                    // 0x0148(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1860[0x8];                                     // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot) == 0x000010, "Wrong alignment on ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot) == 0x000160, "Wrong size on ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot, Snapshot) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot::Snapshot' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot, Transform) == 0x0000B0, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot::Transform' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot, LinearVelocity) == 0x000110, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot::LinearVelocity' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot, AngularVelocity) == 0x000128, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot::AngularVelocity' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot, SelectedGear) == 0x000140, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot::SelectedGear' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot, EngineRPM) == 0x000144, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot::EngineRPM' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot, WheelSnapshots) == 0x000148, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheeledSnapshot::WheelSnapshots' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.BreakWheelSnapshot
// 0x0028 (0x0028 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot final
{
public:
	struct FWheelSnapshot                         Snapshot;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SuspensionOffset;                                  // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelRotationAngle;                                // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringAngle;                                     // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelRadius;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelAngularVelocity;                              // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot) == 0x000028, "Wrong size on ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot, Snapshot) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot::Snapshot' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot, SuspensionOffset) == 0x000014, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot::SuspensionOffset' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot, WheelRotationAngle) == 0x000018, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot::WheelRotationAngle' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot, SteeringAngle) == 0x00001C, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot::SteeringAngle' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot, WheelRadius) == 0x000020, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot::WheelRadius' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot, WheelAngularVelocity) == 0x000024, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelSnapshot::WheelAngularVelocity' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.BreakWheelStatus
// 0x00F8 (0x00F8 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_BreakWheelStatus final
{
public:
	struct FWheelStatus                           Status;                                            // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInContact;                                        // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1861[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ContactPoint;                                      // 0x0090(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedSuspensionLength;                        // 0x00B0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringForce;                                       // 0x00B4(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlipAngle;                                         // 0x00B8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSlipping;                                       // 0x00BC(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1862[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlipMagnitude;                                     // 0x00C0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkidding;                                       // 0x00C4(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1863[0x3];                                     // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkidMagnitude;                                     // 0x00C8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1864[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SkidNormal;                                        // 0x00D0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriveTorque;                                       // 0x00E8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakeTorque;                                       // 0x00EC(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bABSActivated;                                     // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1865[0x7];                                     // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus) == 0x000008, "Wrong alignment on ChaosWheeledVehicleMovementComponent_BreakWheelStatus");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus) == 0x0000F8, "Wrong size on ChaosWheeledVehicleMovementComponent_BreakWheelStatus");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, Status) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::Status' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, bInContact) == 0x000088, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::bInContact' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, ContactPoint) == 0x000090, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::ContactPoint' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, PhysMaterial) == 0x0000A8, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::PhysMaterial' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, NormalizedSuspensionLength) == 0x0000B0, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::NormalizedSuspensionLength' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, SpringForce) == 0x0000B4, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::SpringForce' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, SlipAngle) == 0x0000B8, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::SlipAngle' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, bIsSlipping) == 0x0000BC, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::bIsSlipping' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, SlipMagnitude) == 0x0000C0, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::SlipMagnitude' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, bIsSkidding) == 0x0000C4, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::bIsSkidding' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, SkidMagnitude) == 0x0000C8, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::SkidMagnitude' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, SkidNormal) == 0x0000D0, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::SkidNormal' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, DriveTorque) == 0x0000E8, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::DriveTorque' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, BrakeTorque) == 0x0000EC, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::BrakeTorque' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_BreakWheelStatus, bABSActivated) == 0x0000F0, "Member 'ChaosWheeledVehicleMovementComponent_BreakWheelStatus::bABSActivated' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.MakeWheeledSnapshot
// 0x0160 (0x0160 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearVelocity;                                    // 0x0060(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0078(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedGear;                                      // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineRPM;                                         // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWheelSnapshot>                 WheelSnapshots;                                    // 0x0098(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_1866[0x8];                                     // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWheeledSnaphotData                    ReturnValue;                                       // 0x00B0(0x00B0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot) == 0x000010, "Wrong alignment on ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot) == 0x000160, "Wrong size on ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot, Transform) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot::Transform' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot, LinearVelocity) == 0x000060, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot::LinearVelocity' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot, AngularVelocity) == 0x000078, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot::AngularVelocity' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot, SelectedGear) == 0x000090, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot::SelectedGear' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot, EngineRPM) == 0x000094, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot::EngineRPM' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot, WheelSnapshots) == 0x000098, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot::WheelSnapshots' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot, ReturnValue) == 0x0000B0, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheeledSnapshot::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.MakeWheelSnapshot
// 0x0028 (0x0028 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot final
{
public:
	float                                         SuspensionOffset;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelRotationAngle;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringAngle;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelRadius;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelAngularVelocity;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWheelSnapshot                         ReturnValue;                                       // 0x0014(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot) == 0x000028, "Wrong size on ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot, SuspensionOffset) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot::SuspensionOffset' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot, WheelRotationAngle) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot::WheelRotationAngle' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot, SteeringAngle) == 0x000008, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot::SteeringAngle' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot, WheelRadius) == 0x00000C, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot::WheelRadius' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot, WheelAngularVelocity) == 0x000010, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot::WheelAngularVelocity' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot, ReturnValue) == 0x000014, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelSnapshot::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.MakeWheelStatus
// 0x00F8 (0x00F8 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_MakeWheelStatus final
{
public:
	bool                                          bInContact;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1867[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ContactPoint;                                      // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedSuspensionLength;                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringForce;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlipAngle;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSlipping;                                       // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1868[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlipMagnitude;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkidding;                                       // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1869[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkidMagnitude;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_186A[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SkidNormal;                                        // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriveTorque;                                       // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakeTorque;                                       // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bABSActivated;                                     // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_186B[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWheelStatus                           ReturnValue;                                       // 0x0070(0x0088)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus) == 0x000008, "Wrong alignment on ChaosWheeledVehicleMovementComponent_MakeWheelStatus");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus) == 0x0000F8, "Wrong size on ChaosWheeledVehicleMovementComponent_MakeWheelStatus");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, bInContact) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::bInContact' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, ContactPoint) == 0x000008, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::ContactPoint' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, PhysMaterial) == 0x000020, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::PhysMaterial' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, NormalizedSuspensionLength) == 0x000028, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::NormalizedSuspensionLength' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, SpringForce) == 0x00002C, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::SpringForce' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, SlipAngle) == 0x000030, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::SlipAngle' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, bIsSlipping) == 0x000034, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::bIsSlipping' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, SlipMagnitude) == 0x000038, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::SlipMagnitude' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, bIsSkidding) == 0x00003C, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::bIsSkidding' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, SkidMagnitude) == 0x000040, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::SkidMagnitude' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, SkidNormal) == 0x000048, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::SkidNormal' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, DriveTorque) == 0x000060, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::DriveTorque' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, BrakeTorque) == 0x000064, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::BrakeTorque' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, bABSActivated) == 0x000068, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::bABSActivated' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_MakeWheelStatus, ReturnValue) == 0x000070, "Member 'ChaosWheeledVehicleMovementComponent_MakeWheelStatus::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.EnableMechanicalSim
// 0x0001 (0x0001 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_EnableMechanicalSim final
{
public:
	bool                                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_EnableMechanicalSim) == 0x000001, "Wrong alignment on ChaosWheeledVehicleMovementComponent_EnableMechanicalSim");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_EnableMechanicalSim) == 0x000001, "Wrong size on ChaosWheeledVehicleMovementComponent_EnableMechanicalSim");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_EnableMechanicalSim, InState) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_EnableMechanicalSim::InState' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.EnableSuspension
// 0x0001 (0x0001 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_EnableSuspension final
{
public:
	bool                                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_EnableSuspension) == 0x000001, "Wrong alignment on ChaosWheeledVehicleMovementComponent_EnableSuspension");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_EnableSuspension) == 0x000001, "Wrong size on ChaosWheeledVehicleMovementComponent_EnableSuspension");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_EnableSuspension, InState) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_EnableSuspension::InState' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.EnableWheelFriction
// 0x0001 (0x0001 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_EnableWheelFriction final
{
public:
	bool                                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_EnableWheelFriction) == 0x000001, "Wrong alignment on ChaosWheeledVehicleMovementComponent_EnableWheelFriction");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_EnableWheelFriction) == 0x000001, "Wrong size on ChaosWheeledVehicleMovementComponent_EnableWheelFriction");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_EnableWheelFriction, InState) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_EnableWheelFriction::InState' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetABSEnabled
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetABSEnabled final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_186C[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetABSEnabled) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetABSEnabled");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetABSEnabled) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetABSEnabled");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetABSEnabled, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetABSEnabled::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetABSEnabled, Enabled) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetABSEnabled::Enabled' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetAffectedByBrake
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetAffectedByBrake final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_186D[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetAffectedByBrake) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetAffectedByBrake");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetAffectedByBrake) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetAffectedByBrake");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetAffectedByBrake, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetAffectedByBrake::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetAffectedByBrake, Enabled) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetAffectedByBrake::Enabled' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetAffectedByEngine
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetAffectedByEngine final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_186E[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetAffectedByEngine) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetAffectedByEngine");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetAffectedByEngine) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetAffectedByEngine");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetAffectedByEngine, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetAffectedByEngine::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetAffectedByEngine, Enabled) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetAffectedByEngine::Enabled' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetAffectedByHandbrake
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetAffectedByHandbrake final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_186F[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetAffectedByHandbrake) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetAffectedByHandbrake");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetAffectedByHandbrake) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetAffectedByHandbrake");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetAffectedByHandbrake, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetAffectedByHandbrake::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetAffectedByHandbrake, Enabled) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetAffectedByHandbrake::Enabled' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetAffectedBySteering
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetAffectedBySteering final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1870[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetAffectedBySteering) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetAffectedBySteering");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetAffectedBySteering) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetAffectedBySteering");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetAffectedBySteering, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetAffectedBySteering::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetAffectedBySteering, Enabled) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetAffectedBySteering::Enabled' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetBrakeTorque
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetBrakeTorque final
{
public:
	float                                         BrakeTorque;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetBrakeTorque) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetBrakeTorque");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetBrakeTorque) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetBrakeTorque");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetBrakeTorque, BrakeTorque) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetBrakeTorque::BrakeTorque' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetBrakeTorque, WheelIndex) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetBrakeTorque::WheelIndex' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetDifferentialFrontRearSplit
// 0x0004 (0x0004 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetDifferentialFrontRearSplit final
{
public:
	float                                         FrontRearSlpit;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetDifferentialFrontRearSplit) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetDifferentialFrontRearSplit");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetDifferentialFrontRearSplit) == 0x000004, "Wrong size on ChaosWheeledVehicleMovementComponent_SetDifferentialFrontRearSplit");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetDifferentialFrontRearSplit, FrontRearSlpit) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetDifferentialFrontRearSplit::FrontRearSlpit' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetDownforceCoefficient
// 0x0004 (0x0004 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetDownforceCoefficient final
{
public:
	float                                         DownforceCoeff;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetDownforceCoefficient) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetDownforceCoefficient");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetDownforceCoefficient) == 0x000004, "Wrong size on ChaosWheeledVehicleMovementComponent_SetDownforceCoefficient");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetDownforceCoefficient, DownforceCoeff) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetDownforceCoefficient::DownforceCoeff' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetDragCoefficient
// 0x0004 (0x0004 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetDragCoefficient final
{
public:
	float                                         DragCoeff;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetDragCoefficient) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetDragCoefficient");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetDragCoefficient) == 0x000004, "Wrong size on ChaosWheeledVehicleMovementComponent_SetDragCoefficient");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetDragCoefficient, DragCoeff) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetDragCoefficient::DragCoeff' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetDriveTorque
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetDriveTorque final
{
public:
	float                                         DriveTorque;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetDriveTorque) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetDriveTorque");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetDriveTorque) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetDriveTorque");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetDriveTorque, DriveTorque) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetDriveTorque::DriveTorque' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetDriveTorque, WheelIndex) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetDriveTorque::WheelIndex' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetMaxEngineTorque
// 0x0004 (0x0004 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetMaxEngineTorque final
{
public:
	float                                         Torque;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetMaxEngineTorque) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetMaxEngineTorque");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetMaxEngineTorque) == 0x000004, "Wrong size on ChaosWheeledVehicleMovementComponent_SetMaxEngineTorque");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetMaxEngineTorque, Torque) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetMaxEngineTorque::Torque' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetSnapshot
// 0x00B0 (0x00B0 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetSnapshot final
{
public:
	struct FWheeledSnaphotData                    SnapshotIn;                                        // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetSnapshot) == 0x000010, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetSnapshot");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetSnapshot) == 0x0000B0, "Wrong size on ChaosWheeledVehicleMovementComponent_SetSnapshot");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetSnapshot, SnapshotIn) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetSnapshot::SnapshotIn' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetSuspensionParams
// 0x0018 (0x0018 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetSuspensionParams final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Preload;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRaise;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDrop;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetSuspensionParams) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetSuspensionParams");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetSuspensionParams) == 0x000018, "Wrong size on ChaosWheeledVehicleMovementComponent_SetSuspensionParams");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetSuspensionParams, Rate) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetSuspensionParams::Rate' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetSuspensionParams, Damping) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetSuspensionParams::Damping' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetSuspensionParams, Preload) == 0x000008, "Member 'ChaosWheeledVehicleMovementComponent_SetSuspensionParams::Preload' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetSuspensionParams, MaxRaise) == 0x00000C, "Member 'ChaosWheeledVehicleMovementComponent_SetSuspensionParams::MaxRaise' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetSuspensionParams, MaxDrop) == 0x000010, "Member 'ChaosWheeledVehicleMovementComponent_SetSuspensionParams::MaxDrop' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetSuspensionParams, WheelIndex) == 0x000014, "Member 'ChaosWheeledVehicleMovementComponent_SetSuspensionParams::WheelIndex' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetTorqueCombineMethod
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetTorqueCombineMethod final
{
public:
	ETorqueCombineMethod                          InCombineMethod;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1871[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WheelIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetTorqueCombineMethod) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetTorqueCombineMethod");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetTorqueCombineMethod) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetTorqueCombineMethod");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetTorqueCombineMethod, InCombineMethod) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetTorqueCombineMethod::InCombineMethod' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetTorqueCombineMethod, WheelIndex) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetTorqueCombineMethod::WheelIndex' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetTractionControlEnabled
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetTractionControlEnabled final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1872[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetTractionControlEnabled) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetTractionControlEnabled");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetTractionControlEnabled) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetTractionControlEnabled");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetTractionControlEnabled, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetTractionControlEnabled::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetTractionControlEnabled, Enabled) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetTractionControlEnabled::Enabled' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetWheelClass
// 0x0010 (0x0010 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetWheelClass final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1873[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UChaosVehicleWheel>         InWheelClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetWheelClass) == 0x000008, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetWheelClass");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetWheelClass) == 0x000010, "Wrong size on ChaosWheeledVehicleMovementComponent_SetWheelClass");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelClass, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelClass::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelClass, InWheelClass) == 0x000008, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelClass::InWheelClass' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetWheelFrictionMultiplier
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetWheelFrictionMultiplier final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetWheelFrictionMultiplier) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetWheelFrictionMultiplier");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetWheelFrictionMultiplier) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetWheelFrictionMultiplier");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelFrictionMultiplier, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelFrictionMultiplier::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelFrictionMultiplier, Friction) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelFrictionMultiplier::Friction' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetWheelHandbrakeTorque
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetWheelHandbrakeTorque final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Torque;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetWheelHandbrakeTorque) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetWheelHandbrakeTorque");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetWheelHandbrakeTorque) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetWheelHandbrakeTorque");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelHandbrakeTorque, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelHandbrakeTorque::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelHandbrakeTorque, Torque) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelHandbrakeTorque::Torque' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetWheelMaxBrakeTorque
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetWheelMaxBrakeTorque final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Torque;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetWheelMaxBrakeTorque) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetWheelMaxBrakeTorque");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetWheelMaxBrakeTorque) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetWheelMaxBrakeTorque");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelMaxBrakeTorque, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelMaxBrakeTorque::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelMaxBrakeTorque, Torque) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelMaxBrakeTorque::Torque' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetWheelMaxSteerAngle
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetWheelMaxSteerAngle final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleDegrees;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetWheelMaxSteerAngle) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetWheelMaxSteerAngle");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetWheelMaxSteerAngle) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetWheelMaxSteerAngle");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelMaxSteerAngle, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelMaxSteerAngle::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelMaxSteerAngle, AngleDegrees) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelMaxSteerAngle::AngleDegrees' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetWheelRadius
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetWheelRadius final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetWheelRadius) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetWheelRadius");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetWheelRadius) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetWheelRadius");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelRadius, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelRadius::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelRadius, Radius) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelRadius::Radius' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.SetWheelSlipGraphMultiplier
// 0x0008 (0x0008 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_SetWheelSlipGraphMultiplier final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_SetWheelSlipGraphMultiplier) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_SetWheelSlipGraphMultiplier");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_SetWheelSlipGraphMultiplier) == 0x000008, "Wrong size on ChaosWheeledVehicleMovementComponent_SetWheelSlipGraphMultiplier");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelSlipGraphMultiplier, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelSlipGraphMultiplier::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_SetWheelSlipGraphMultiplier, Multiplier) == 0x000004, "Member 'ChaosWheeledVehicleMovementComponent_SetWheelSlipGraphMultiplier::Multiplier' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.GetEngineMaxRotationSpeed
// 0x0004 (0x0004 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed) == 0x000004, "Wrong size on ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed, ReturnValue) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.GetEngineRotationSpeed
// 0x0004 (0x0004 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed) == 0x000004, "Wrong size on ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed, ReturnValue) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_GetEngineRotationSpeed::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.GetNumWheels
// 0x0004 (0x0004 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_GetNumWheels final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_GetNumWheels) == 0x000004, "Wrong alignment on ChaosWheeledVehicleMovementComponent_GetNumWheels");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_GetNumWheels) == 0x000004, "Wrong size on ChaosWheeledVehicleMovementComponent_GetNumWheels");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_GetNumWheels, ReturnValue) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_GetNumWheels::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.GetSnapshot
// 0x00B0 (0x00B0 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_GetSnapshot final
{
public:
	struct FWheeledSnaphotData                    ReturnValue;                                       // 0x0000(0x00B0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_GetSnapshot) == 0x000010, "Wrong alignment on ChaosWheeledVehicleMovementComponent_GetSnapshot");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_GetSnapshot) == 0x0000B0, "Wrong size on ChaosWheeledVehicleMovementComponent_GetSnapshot");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_GetSnapshot, ReturnValue) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_GetSnapshot::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.ChaosWheeledVehicleMovementComponent.GetWheelState
// 0x0090 (0x0090 - 0x0000)
struct ChaosWheeledVehicleMovementComponent_GetWheelState final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1874[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWheelStatus                           ReturnValue;                                       // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaosWheeledVehicleMovementComponent_GetWheelState) == 0x000008, "Wrong alignment on ChaosWheeledVehicleMovementComponent_GetWheelState");
static_assert(sizeof(ChaosWheeledVehicleMovementComponent_GetWheelState) == 0x000090, "Wrong size on ChaosWheeledVehicleMovementComponent_GetWheelState");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_GetWheelState, WheelIndex) == 0x000000, "Member 'ChaosWheeledVehicleMovementComponent_GetWheelState::WheelIndex' has a wrong offset!");
static_assert(offsetof(ChaosWheeledVehicleMovementComponent_GetWheelState, ReturnValue) == 0x000008, "Member 'ChaosWheeledVehicleMovementComponent_GetWheelState::ReturnValue' has a wrong offset!");

// Function ChaosVehicles.VehicleAnimationInstance.GetVehicle
// 0x0008 (0x0008 - 0x0000)
struct VehicleAnimationInstance_GetVehicle final
{
public:
	class AWheeledVehiclePawn*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleAnimationInstance_GetVehicle) == 0x000008, "Wrong alignment on VehicleAnimationInstance_GetVehicle");
static_assert(sizeof(VehicleAnimationInstance_GetVehicle) == 0x000008, "Wrong size on VehicleAnimationInstance_GetVehicle");
static_assert(offsetof(VehicleAnimationInstance_GetVehicle, ReturnValue) == 0x000000, "Member 'VehicleAnimationInstance_GetVehicle::ReturnValue' has a wrong offset!");

}

