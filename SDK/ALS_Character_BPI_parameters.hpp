#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_Character_BPI

#include "Basic.hpp"

#include "AI_StepTalk_WhoOrWhere_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "ALS_MovementAction_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "Engine_structs.hpp"
#include "ALS_Stance_structs.hpp"


namespace SDK::Params
{

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Get_CaptainKnight_Attack
// 0x0001 (0x0001 - 0x0000)
struct ALS_Character_BPI_C_BPI_Get_CaptainKnight_Attack final
{
public:
	bool                                          SimpleAttack_;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Character_BPI_C_BPI_Get_CaptainKnight_Attack) == 0x000001, "Wrong alignment on ALS_Character_BPI_C_BPI_Get_CaptainKnight_Attack");
static_assert(sizeof(ALS_Character_BPI_C_BPI_Get_CaptainKnight_Attack) == 0x000001, "Wrong size on ALS_Character_BPI_C_BPI_Get_CaptainKnight_Attack");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_CaptainKnight_Attack, SimpleAttack_) == 0x000000, "Member 'ALS_Character_BPI_C_BPI_Get_CaptainKnight_Attack::SimpleAttack_' has a wrong offset!");

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Get_CurrentStates
// 0x0009 (0x0009 - 0x0000)
struct ALS_Character_BPI_C_BPI_Get_CurrentStates final
{
public:
	EMovementMode                                 PawnMovementMode;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            MovementState;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            PrevMovementState;                                 // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           MovementAction;                                    // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             RotationMode;                                      // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     ActualGait;                                        // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   ActualStance;                                      // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 ViewMode;                                          // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             OverlayState;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Character_BPI_C_BPI_Get_CurrentStates) == 0x000001, "Wrong alignment on ALS_Character_BPI_C_BPI_Get_CurrentStates");
static_assert(sizeof(ALS_Character_BPI_C_BPI_Get_CurrentStates) == 0x000009, "Wrong size on ALS_Character_BPI_C_BPI_Get_CurrentStates");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_CurrentStates, PawnMovementMode) == 0x000000, "Member 'ALS_Character_BPI_C_BPI_Get_CurrentStates::PawnMovementMode' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_CurrentStates, MovementState) == 0x000001, "Member 'ALS_Character_BPI_C_BPI_Get_CurrentStates::MovementState' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_CurrentStates, PrevMovementState) == 0x000002, "Member 'ALS_Character_BPI_C_BPI_Get_CurrentStates::PrevMovementState' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_CurrentStates, MovementAction) == 0x000003, "Member 'ALS_Character_BPI_C_BPI_Get_CurrentStates::MovementAction' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_CurrentStates, RotationMode) == 0x000004, "Member 'ALS_Character_BPI_C_BPI_Get_CurrentStates::RotationMode' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_CurrentStates, ActualGait) == 0x000005, "Member 'ALS_Character_BPI_C_BPI_Get_CurrentStates::ActualGait' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_CurrentStates, ActualStance) == 0x000006, "Member 'ALS_Character_BPI_C_BPI_Get_CurrentStates::ActualStance' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_CurrentStates, ViewMode) == 0x000007, "Member 'ALS_Character_BPI_C_BPI_Get_CurrentStates::ViewMode' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_CurrentStates, OverlayState) == 0x000008, "Member 'ALS_Character_BPI_C_BPI_Get_CurrentStates::OverlayState' has a wrong offset!");

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Get_EssentialValues
// 0x0080 (0x0080 - 0x0000)
struct ALS_Character_BPI_C_BPI_Get_EssentialValues final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Acceleration;                                      // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MovementInput;                                     // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IK_Possible;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SprintJUMP_;                                       // 0x004A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMovementInput;                                  // 0x004B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371A[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Speed;                                             // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementInputAmount;                               // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AimingRotation;                                    // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        AimYawRate;                                        // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Character_BPI_C_BPI_Get_EssentialValues) == 0x000008, "Wrong alignment on ALS_Character_BPI_C_BPI_Get_EssentialValues");
static_assert(sizeof(ALS_Character_BPI_C_BPI_Get_EssentialValues) == 0x000080, "Wrong size on ALS_Character_BPI_C_BPI_Get_EssentialValues");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_EssentialValues, Velocity) == 0x000000, "Member 'ALS_Character_BPI_C_BPI_Get_EssentialValues::Velocity' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_EssentialValues, Acceleration) == 0x000018, "Member 'ALS_Character_BPI_C_BPI_Get_EssentialValues::Acceleration' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_EssentialValues, MovementInput) == 0x000030, "Member 'ALS_Character_BPI_C_BPI_Get_EssentialValues::MovementInput' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_EssentialValues, IsMoving) == 0x000048, "Member 'ALS_Character_BPI_C_BPI_Get_EssentialValues::IsMoving' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_EssentialValues, IK_Possible) == 0x000049, "Member 'ALS_Character_BPI_C_BPI_Get_EssentialValues::IK_Possible' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_EssentialValues, SprintJUMP_) == 0x00004A, "Member 'ALS_Character_BPI_C_BPI_Get_EssentialValues::SprintJUMP_' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_EssentialValues, HasMovementInput) == 0x00004B, "Member 'ALS_Character_BPI_C_BPI_Get_EssentialValues::HasMovementInput' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_EssentialValues, Speed) == 0x000050, "Member 'ALS_Character_BPI_C_BPI_Get_EssentialValues::Speed' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_EssentialValues, MovementInputAmount) == 0x000058, "Member 'ALS_Character_BPI_C_BPI_Get_EssentialValues::MovementInputAmount' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_EssentialValues, AimingRotation) == 0x000060, "Member 'ALS_Character_BPI_C_BPI_Get_EssentialValues::AimingRotation' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_EssentialValues, AimYawRate) == 0x000078, "Member 'ALS_Character_BPI_C_BPI_Get_EssentialValues::AimYawRate' has a wrong offset!");

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Get_PlayerbleChar_Status
// 0x0030 (0x0030 - 0x0000)
struct ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status final
{
public:
	double                                        ChickThrowAnimBP;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TubeIdleON;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flamingo_;                                         // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AgingMode_;                                        // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371B[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      CostumeDanceAnim;                                  // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CostumeDanceTime_;                                 // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TimeSlowMode_Active_;                              // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371C[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeSlow_SelfCustom_Value;                         // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeSlow_CameraAlpha;                              // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status) == 0x000008, "Wrong alignment on ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status");
static_assert(sizeof(ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status) == 0x000030, "Wrong size on ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status, ChickThrowAnimBP) == 0x000000, "Member 'ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status::ChickThrowAnimBP' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status, TubeIdleON) == 0x000008, "Member 'ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status::TubeIdleON' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status, Flamingo_) == 0x000009, "Member 'ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status::Flamingo_' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status, AgingMode_) == 0x00000A, "Member 'ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status::AgingMode_' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status, CostumeDanceAnim) == 0x000010, "Member 'ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status::CostumeDanceAnim' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status, CostumeDanceTime_) == 0x000018, "Member 'ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status::CostumeDanceTime_' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status, TimeSlowMode_Active_) == 0x000019, "Member 'ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status::TimeSlowMode_Active_' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status, TimeSlow_SelfCustom_Value) == 0x000020, "Member 'ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status::TimeSlow_SelfCustom_Value' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status, TimeSlow_CameraAlpha) == 0x000028, "Member 'ALS_Character_BPI_C_BPI_Get_PlayerbleChar_Status::TimeSlow_CameraAlpha' has a wrong offset!");

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Get_RagdollFalling_FlailOnOFF
// 0x0010 (0x0010 - 0x0000)
struct ALS_Character_BPI_C_BPI_Get_RagdollFalling_FlailOnOFF final
{
public:
	bool                                          RagdollFlail_Off;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RagdollFlail_Value;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Character_BPI_C_BPI_Get_RagdollFalling_FlailOnOFF) == 0x000008, "Wrong alignment on ALS_Character_BPI_C_BPI_Get_RagdollFalling_FlailOnOFF");
static_assert(sizeof(ALS_Character_BPI_C_BPI_Get_RagdollFalling_FlailOnOFF) == 0x000010, "Wrong size on ALS_Character_BPI_C_BPI_Get_RagdollFalling_FlailOnOFF");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_RagdollFalling_FlailOnOFF, RagdollFlail_Off) == 0x000000, "Member 'ALS_Character_BPI_C_BPI_Get_RagdollFalling_FlailOnOFF::RagdollFlail_Off' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Get_RagdollFalling_FlailOnOFF, RagdollFlail_Value) == 0x000008, "Member 'ALS_Character_BPI_C_BPI_Get_RagdollFalling_FlailOnOFF::RagdollFlail_Value' has a wrong offset!");

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_GetAI_NPC_ActionMode
// 0x0020 (0x0020 - 0x0000)
struct ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode final
{
public:
	bool                                          NPC_ActionMode;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ActionStartTime;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      NPC_ActionAnim;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          LoopActive;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAI_StepTalk_WhoOrWhere                       Who_NPC;                                           // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit_;                                              // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode) == 0x000008, "Wrong alignment on ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode");
static_assert(sizeof(ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode) == 0x000020, "Wrong size on ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode");
static_assert(offsetof(ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode, NPC_ActionMode) == 0x000000, "Member 'ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode::NPC_ActionMode' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode, ActionStartTime) == 0x000008, "Member 'ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode::ActionStartTime' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode, NPC_ActionAnim) == 0x000010, "Member 'ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode::NPC_ActionAnim' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode, LoopActive) == 0x000018, "Member 'ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode::LoopActive' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode, Who_NPC) == 0x000019, "Member 'ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode::Who_NPC' has a wrong offset!");
static_assert(offsetof(ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode, Hit_) == 0x00001A, "Member 'ALS_Character_BPI_C_BPI_GetAI_NPC_ActionMode::Hit_' has a wrong offset!");

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_Gait
// 0x0001 (0x0001 - 0x0000)
struct ALS_Character_BPI_C_BPI_Set_Gait final
{
public:
	EALS_Gait                                     NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Character_BPI_C_BPI_Set_Gait) == 0x000001, "Wrong alignment on ALS_Character_BPI_C_BPI_Set_Gait");
static_assert(sizeof(ALS_Character_BPI_C_BPI_Set_Gait) == 0x000001, "Wrong size on ALS_Character_BPI_C_BPI_Set_Gait");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Set_Gait, NewGait) == 0x000000, "Member 'ALS_Character_BPI_C_BPI_Set_Gait::NewGait' has a wrong offset!");

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_MovementAction
// 0x0001 (0x0001 - 0x0000)
struct ALS_Character_BPI_C_BPI_Set_MovementAction final
{
public:
	EALS_MovementAction                           NewMovementAction;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Character_BPI_C_BPI_Set_MovementAction) == 0x000001, "Wrong alignment on ALS_Character_BPI_C_BPI_Set_MovementAction");
static_assert(sizeof(ALS_Character_BPI_C_BPI_Set_MovementAction) == 0x000001, "Wrong size on ALS_Character_BPI_C_BPI_Set_MovementAction");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Set_MovementAction, NewMovementAction) == 0x000000, "Member 'ALS_Character_BPI_C_BPI_Set_MovementAction::NewMovementAction' has a wrong offset!");

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_MovementState
// 0x0001 (0x0001 - 0x0000)
struct ALS_Character_BPI_C_BPI_Set_MovementState final
{
public:
	EALS_MovementState                            NewMovementState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Character_BPI_C_BPI_Set_MovementState) == 0x000001, "Wrong alignment on ALS_Character_BPI_C_BPI_Set_MovementState");
static_assert(sizeof(ALS_Character_BPI_C_BPI_Set_MovementState) == 0x000001, "Wrong size on ALS_Character_BPI_C_BPI_Set_MovementState");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Set_MovementState, NewMovementState) == 0x000000, "Member 'ALS_Character_BPI_C_BPI_Set_MovementState::NewMovementState' has a wrong offset!");

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_OverlayState
// 0x0001 (0x0001 - 0x0000)
struct ALS_Character_BPI_C_BPI_Set_OverlayState final
{
public:
	EALS_OverlayState                             NewOverlayState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Character_BPI_C_BPI_Set_OverlayState) == 0x000001, "Wrong alignment on ALS_Character_BPI_C_BPI_Set_OverlayState");
static_assert(sizeof(ALS_Character_BPI_C_BPI_Set_OverlayState) == 0x000001, "Wrong size on ALS_Character_BPI_C_BPI_Set_OverlayState");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Set_OverlayState, NewOverlayState) == 0x000000, "Member 'ALS_Character_BPI_C_BPI_Set_OverlayState::NewOverlayState' has a wrong offset!");

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_RotationMode
// 0x0001 (0x0001 - 0x0000)
struct ALS_Character_BPI_C_BPI_Set_RotationMode final
{
public:
	EALS_RotationMode                             NewRotationMode;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Character_BPI_C_BPI_Set_RotationMode) == 0x000001, "Wrong alignment on ALS_Character_BPI_C_BPI_Set_RotationMode");
static_assert(sizeof(ALS_Character_BPI_C_BPI_Set_RotationMode) == 0x000001, "Wrong size on ALS_Character_BPI_C_BPI_Set_RotationMode");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Set_RotationMode, NewRotationMode) == 0x000000, "Member 'ALS_Character_BPI_C_BPI_Set_RotationMode::NewRotationMode' has a wrong offset!");

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_ViewMode
// 0x0001 (0x0001 - 0x0000)
struct ALS_Character_BPI_C_BPI_Set_ViewMode final
{
public:
	EALS_ViewMode                                 NewViewMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_Character_BPI_C_BPI_Set_ViewMode) == 0x000001, "Wrong alignment on ALS_Character_BPI_C_BPI_Set_ViewMode");
static_assert(sizeof(ALS_Character_BPI_C_BPI_Set_ViewMode) == 0x000001, "Wrong size on ALS_Character_BPI_C_BPI_Set_ViewMode");
static_assert(offsetof(ALS_Character_BPI_C_BPI_Set_ViewMode, NewViewMode) == 0x000000, "Member 'ALS_Character_BPI_C_BPI_Set_ViewMode::NewViewMode' has a wrong offset!");

}

