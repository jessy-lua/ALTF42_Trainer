#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Horse_Enemy

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Horse_Enemy.BP_Horse_Enemy_C
// 0x0090 (0x03B0 - 0x0320)
class ABP_Horse_Enemy_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          OverlapCheck;                                      // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        HorseLoop_RUN_Cue;                                 // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPFPathFollowerComponent*               PFPathFollower;                                    // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Tail;                                           // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Black_Adma_SK;                                     // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_AK_Skirt;                                       // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Mane;                                           // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_AK_Saddle;                                      // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Root;                                              // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 HorseBody;                                         // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SK_AK_BigSword;                                    // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HorseStart_;                                       // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attack_;                                           // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FrontHorseMan;                                     // 0x0382(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364E[0x5];                                     // 0x0383(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Path_Owner;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AALTF4_Loco_BP_C*                       ALTF42_Char;                                       // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerDistance;                                    // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Up_MoveSpeed;                                      // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Down_MoveSpeed;                                    // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attack_Activate;                                   // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364F[0x3];                                     // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Sprint_MoveSpeed;                                  // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sprint_Activate;                                   // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EndTutorial;                                       // 0x03AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_Horse_Enemy_OverlapCheck_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Horse_Enemy_PFPathFollower_K2Node_ComponentBoundEvent_0_ReachedEndSignature__DelegateSignature(class UPFPathFollowerComponent* FollowerComp);
	void ExecuteUbergraph_BP_Horse_Enemy(int32 EntryPoint);
	void HorseMan_GOGOGO();
	void HorseMan_MoveSpeed_Down();
	void HorseMan_MoveSpeed_Max();
	void HorseMan_MoveSpeed_UP();
	void HorseMan_Reset();
	void HorseMan_Stop_PlaySequence();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SlowEvent_Stop_Horse();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Horse_Enemy_C">();
	}
	static class ABP_Horse_Enemy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Horse_Enemy_C>();
	}
};
static_assert(alignof(ABP_Horse_Enemy_C) == 0x000008, "Wrong alignment on ABP_Horse_Enemy_C");
static_assert(sizeof(ABP_Horse_Enemy_C) == 0x0003B0, "Wrong size on ABP_Horse_Enemy_C");
static_assert(offsetof(ABP_Horse_Enemy_C, UberGraphFrame) == 0x000320, "Member 'ABP_Horse_Enemy_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, OverlapCheck) == 0x000328, "Member 'ABP_Horse_Enemy_C::OverlapCheck' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, HorseLoop_RUN_Cue) == 0x000330, "Member 'ABP_Horse_Enemy_C::HorseLoop_RUN_Cue' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, PFPathFollower) == 0x000338, "Member 'ABP_Horse_Enemy_C::PFPathFollower' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, SK_Tail) == 0x000340, "Member 'ABP_Horse_Enemy_C::SK_Tail' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, Black_Adma_SK) == 0x000348, "Member 'ABP_Horse_Enemy_C::Black_Adma_SK' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, SK_AK_Skirt) == 0x000350, "Member 'ABP_Horse_Enemy_C::SK_AK_Skirt' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, SK_Mane) == 0x000358, "Member 'ABP_Horse_Enemy_C::SK_Mane' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, SK_AK_Saddle) == 0x000360, "Member 'ABP_Horse_Enemy_C::SK_AK_Saddle' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, Root) == 0x000368, "Member 'ABP_Horse_Enemy_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, HorseBody) == 0x000370, "Member 'ABP_Horse_Enemy_C::HorseBody' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, SK_AK_BigSword) == 0x000378, "Member 'ABP_Horse_Enemy_C::SK_AK_BigSword' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, HorseStart_) == 0x000380, "Member 'ABP_Horse_Enemy_C::HorseStart_' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, Attack_) == 0x000381, "Member 'ABP_Horse_Enemy_C::Attack_' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, FrontHorseMan) == 0x000382, "Member 'ABP_Horse_Enemy_C::FrontHorseMan' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, Path_Owner) == 0x000388, "Member 'ABP_Horse_Enemy_C::Path_Owner' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, ALTF42_Char) == 0x000390, "Member 'ABP_Horse_Enemy_C::ALTF42_Char' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, PlayerDistance) == 0x000398, "Member 'ABP_Horse_Enemy_C::PlayerDistance' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, Up_MoveSpeed) == 0x00039C, "Member 'ABP_Horse_Enemy_C::Up_MoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, Down_MoveSpeed) == 0x0003A0, "Member 'ABP_Horse_Enemy_C::Down_MoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, Attack_Activate) == 0x0003A4, "Member 'ABP_Horse_Enemy_C::Attack_Activate' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, Sprint_MoveSpeed) == 0x0003A8, "Member 'ABP_Horse_Enemy_C::Sprint_MoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, Sprint_Activate) == 0x0003AC, "Member 'ABP_Horse_Enemy_C::Sprint_Activate' has a wrong offset!");
static_assert(offsetof(ABP_Horse_Enemy_C, EndTutorial) == 0x0003AD, "Member 'ABP_Horse_Enemy_C::EndTutorial' has a wrong offset!");

}

