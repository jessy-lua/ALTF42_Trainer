#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALTF42_Bike_BP_Origin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ALTF42_Bike_BP_Origin.ALTF42_Bike_BP_Origin_C
// 0x0340 (0x09C0 - 0x0680)
class AALTF42_Bike_BP_Origin_C final : public ACharacter
{
public:
	uint8                                         Pad_3905[0x8];                                     // 0x0678(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0680(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTickOptToolkitAnimUpdateRateOptComponent* TickOptToolkitAnimUpdateRateOpt;                   // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USignificanceOptimizerComponent*        SignificanceOptimizer;                             // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GrainSack_SM;                                      // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Chicken;                                        // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTickOptToolkitTargetComponent*         TickOptToolkitTarget;                              // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        BrakeSound;                                        // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        PedalingSound;                                     // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FreeHubSound;                                      // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        TireSound;                                         // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       JumpDetect_UP;                                     // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DismountPoint;                                     // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Attachpoint;                                       // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Interactive_CheckOverlap;                          // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       JumpDetect_Down;                                   // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BrakeLever1;                                       // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BrakeLever;                                        // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pulley1;                                           // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pulley;                                            // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Frame_Front;                                       // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Frame_Back;                                        // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tire_B;                                            // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tire_F;                                            // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Susp_Bottom;                                       // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pedal_R;                                           // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pedal_L;                                           // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cranks_m;                                          // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Fork_Bottom;                                       // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Fork_Top;                                          // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Susp_Top;                                          // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FollowCamera;                                      // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CameraBoom;                                        // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 bike_basic;                                        // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ReverseTL_NewTrack_0_83A0A700465E61C3F2A9E7858BA1B8CB; // 0x0788(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ReverseTL__Direction_83A0A700465E61C3F2A9E7858BA1B8CB; // 0x078C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3906[0x3];                                     // 0x078D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ReverseTL;                                         // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        BaseTurnRate;                                      // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseLookUpRate;                                    // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MF_value;                                          // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FW_Hit;                                            // 0x07B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BW_Hit;                                            // 0x07C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SteeringAngle;                                     // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsManual;                                          // 0x07E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPedaling;                                        // 0x07E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPreload;                                         // 0x07EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTrickStarted;                                    // 0x07EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTrickFinished;                                   // 0x07EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3907[0x3];                                     // 0x07ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PedalingPower;                                     // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrakePower;                                        // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Speed;                                             // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEjected;                                         // 0x0804(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3908[0x3];                                     // 0x0805(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Speed_Old;                                         // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed_Current;                                     // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableSusp;                                        // 0x0818(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3909[0x7];                                     // 0x0819(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AngleStart;                                        // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Range;                                             // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RaysRadial;                                        // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_390A[0x4];                                     // 0x0834(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AngleIncrement;                                    // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelR;                                            // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        AvarageHitPoint;                                   // 0x0848(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<bool>                                  IsCompressing;                                     // 0x0858(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                SuspentionMove;                                    // 0x0868(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        TimeDelta;                                         // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                ControllerReference;                               // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                DirectionOnJump;                                   // 0x0888(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinCrashSpeed;                                     // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UphillDecelerateMult;                              // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DownhillAccelerateMult;                            // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBraking;                                         // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReversing;                                       // 0x08B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_390B[0x6];                                     // 0x08BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SpeedMS;                                           // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               New_Rotation;                                      // 0x08C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AALTF42_InGame_PC_Loco_C*               ALTF4_2_PC;                                        // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ALandscape*                             LS_SM;                                             // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CrashBike;                                         // 0x08F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SafetyArea_;                                       // 0x08F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DownHill_ON;                                       // 0x08F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Forward_Input_Active_;                             // 0x08F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaterDie_;                                         // 0x08F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_390C[0x3];                                     // 0x08F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BikeRotation_Value;                                // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Select_Item_Value;                                 // 0x0900(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Char_Health;                                       // 0x0904(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Z;                                           // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Water_Overlap_Location;                            // 0x0910(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Char_Costume_Integer;                              // 0x0928(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_390D[0x4];                                     // 0x092C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACostume_Moai_BP_C*                     Zero1_CostumeMoai;                                 // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACostume_Giraffe_BP_C*                  Zero2_CostumeGiraffe;                              // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACostume_Flamingo_BP_C*                 Zero3_CostumeFlamingo;                             // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACostume_Unicorn_BP_C*                  Zero4_CostumeUnicorn;                              // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACostume_Horse_BP_C*                    Zero5_CostumeHorse;                                // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACostume_Cannabis_BP_C*                 Zero6_Cannabis;                                    // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Crash_;                                            // 0x0960(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Get_Save_;                                         // 0x0961(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_390E[0x6];                                     // 0x0962(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Get_Save_Location;                                 // 0x0968(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BikeEndArea;                                       // 0x0980(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SonicModeON;                                       // 0x0981(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_390F[0x6];                                     // 0x0982(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sonic_DontBrake;                                   // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACostume_Santa_BP_C*                    Zero8_CostumeSanta;                                // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACostume_Bikini_BP_C*                   Zero7_CostumeBikini;                               // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACostume_Rocket_BP_C*                   Zero9_CostumeRocket;                               // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Invert_X_Value;                                    // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Invert_Y_Value;                                    // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ride_;                                             // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Begin_Test();
	void Bike_MaxSpeed_UP();
	void Bike_Safty_Area_Land();
	void BikeEndArea_Event(bool Param_Crash_, const struct FVector& SpawnLocation);
	void BndEvt__ALTF4_2_Bike_BP_Interactive_CheckOverlap_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__ALTF4_2_Bike_BP_Interactive_CheckOverlap_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CalculateSuspMoveValues();
	void Costume_Bikini_Equipment();
	void Costume_Cannabis_Equipment();
	void Costume_FlamingoTube_Equipment();
	void Costume_Giraffe_Equip();
	void Costume_HorseTube_Equipment();
	void Costume_Moai_Equip();
	void Costume_Rocket_Equipment();
	void Costume_Santa_Equipment();
	void Costume_Unicorn_Equipment();
	void CustomPhysics();
	void ExecuteUbergraph_ALTF42_Bike_BP_Origin(int32 EntryPoint);
	void F_Feather_OnOff(const float ParameterValue);
	void F_Head_OnOff(const float ParameterValue_01, const float ParameterValue_02);
	void FearterAndHeadOpacity(bool Feather_ON_, bool Head_Opacity_);
	void Get_Arms_IK(struct FVector* L_Arm, struct FVector* R_Arm, struct FVector* L_Leg, struct FVector* R_Leg);
	void InitStates();
	void InpActEvt_IA_Suicide_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_Jump_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_40(float AxisValue);
	void InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_53(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_79(float AxisValue);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_90(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_47(float AxisValue);
	void InpAxisEvt_TurnRate_K2Node_InputAxisEvent_38(float AxisValue);
	void MovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void OnLanded(const struct FHitResult& Hit);
	void PlayerCrashed();
	void ReceiveBeginPlay();
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void ReverseTL__FinishedFunc();
	void ReverseTL__UpdateFunc();
	void Ride_BikeEvent(int32 Select_Projectile_Value, int32 Param_Char_Health, int32 Param_Char_Costume_Integer, bool GetSave_, const struct FVector& Param_Get_Save_Location);
	void Show_Loading_Widget();
	void ShowStory_EndStageWidget();
	void Sound_Reset();
	void UnRide_BikeEvent(bool Param_Crash_);
	void UpdateSpeed();
	void WaterDie_Event(double WaterZ, const struct FVector& WaterOverlapLocation);
	void WheelTrace(const struct FVector& SocketLocation, struct FVector* HitLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ALTF42_Bike_BP_Origin_C">();
	}
	static class AALTF42_Bike_BP_Origin_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALTF42_Bike_BP_Origin_C>();
	}
};
static_assert(alignof(AALTF42_Bike_BP_Origin_C) == 0x000010, "Wrong alignment on AALTF42_Bike_BP_Origin_C");
static_assert(sizeof(AALTF42_Bike_BP_Origin_C) == 0x0009C0, "Wrong size on AALTF42_Bike_BP_Origin_C");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, UberGraphFrame) == 0x000680, "Member 'AALTF42_Bike_BP_Origin_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, TickOptToolkitAnimUpdateRateOpt) == 0x000688, "Member 'AALTF42_Bike_BP_Origin_C::TickOptToolkitAnimUpdateRateOpt' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, SignificanceOptimizer) == 0x000690, "Member 'AALTF42_Bike_BP_Origin_C::SignificanceOptimizer' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, GrainSack_SM) == 0x000698, "Member 'AALTF42_Bike_BP_Origin_C::GrainSack_SM' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, SK_Chicken) == 0x0006A0, "Member 'AALTF42_Bike_BP_Origin_C::SK_Chicken' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, TickOptToolkitTarget) == 0x0006A8, "Member 'AALTF42_Bike_BP_Origin_C::TickOptToolkitTarget' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, BrakeSound) == 0x0006B0, "Member 'AALTF42_Bike_BP_Origin_C::BrakeSound' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, PedalingSound) == 0x0006B8, "Member 'AALTF42_Bike_BP_Origin_C::PedalingSound' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, FreeHubSound) == 0x0006C0, "Member 'AALTF42_Bike_BP_Origin_C::FreeHubSound' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, TireSound) == 0x0006C8, "Member 'AALTF42_Bike_BP_Origin_C::TireSound' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, JumpDetect_UP) == 0x0006D0, "Member 'AALTF42_Bike_BP_Origin_C::JumpDetect_UP' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, DismountPoint) == 0x0006D8, "Member 'AALTF42_Bike_BP_Origin_C::DismountPoint' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Attachpoint) == 0x0006E0, "Member 'AALTF42_Bike_BP_Origin_C::Attachpoint' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Interactive_CheckOverlap) == 0x0006E8, "Member 'AALTF42_Bike_BP_Origin_C::Interactive_CheckOverlap' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, JumpDetect_Down) == 0x0006F0, "Member 'AALTF42_Bike_BP_Origin_C::JumpDetect_Down' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, BrakeLever1) == 0x0006F8, "Member 'AALTF42_Bike_BP_Origin_C::BrakeLever1' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, BrakeLever) == 0x000700, "Member 'AALTF42_Bike_BP_Origin_C::BrakeLever' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Pulley1) == 0x000708, "Member 'AALTF42_Bike_BP_Origin_C::Pulley1' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Pulley) == 0x000710, "Member 'AALTF42_Bike_BP_Origin_C::Pulley' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Frame_Front) == 0x000718, "Member 'AALTF42_Bike_BP_Origin_C::Frame_Front' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Frame_Back) == 0x000720, "Member 'AALTF42_Bike_BP_Origin_C::Frame_Back' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Tire_B) == 0x000728, "Member 'AALTF42_Bike_BP_Origin_C::Tire_B' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Tire_F) == 0x000730, "Member 'AALTF42_Bike_BP_Origin_C::Tire_F' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Susp_Bottom) == 0x000738, "Member 'AALTF42_Bike_BP_Origin_C::Susp_Bottom' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Pedal_R) == 0x000740, "Member 'AALTF42_Bike_BP_Origin_C::Pedal_R' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Pedal_L) == 0x000748, "Member 'AALTF42_Bike_BP_Origin_C::Pedal_L' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Cranks_m) == 0x000750, "Member 'AALTF42_Bike_BP_Origin_C::Cranks_m' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Fork_Bottom) == 0x000758, "Member 'AALTF42_Bike_BP_Origin_C::Fork_Bottom' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Fork_Top) == 0x000760, "Member 'AALTF42_Bike_BP_Origin_C::Fork_Top' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Susp_Top) == 0x000768, "Member 'AALTF42_Bike_BP_Origin_C::Susp_Top' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, FollowCamera) == 0x000770, "Member 'AALTF42_Bike_BP_Origin_C::FollowCamera' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, CameraBoom) == 0x000778, "Member 'AALTF42_Bike_BP_Origin_C::CameraBoom' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, bike_basic) == 0x000780, "Member 'AALTF42_Bike_BP_Origin_C::bike_basic' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, ReverseTL_NewTrack_0_83A0A700465E61C3F2A9E7858BA1B8CB) == 0x000788, "Member 'AALTF42_Bike_BP_Origin_C::ReverseTL_NewTrack_0_83A0A700465E61C3F2A9E7858BA1B8CB' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, ReverseTL__Direction_83A0A700465E61C3F2A9E7858BA1B8CB) == 0x00078C, "Member 'AALTF42_Bike_BP_Origin_C::ReverseTL__Direction_83A0A700465E61C3F2A9E7858BA1B8CB' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, ReverseTL) == 0x000790, "Member 'AALTF42_Bike_BP_Origin_C::ReverseTL' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, BaseTurnRate) == 0x000798, "Member 'AALTF42_Bike_BP_Origin_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, BaseLookUpRate) == 0x0007A0, "Member 'AALTF42_Bike_BP_Origin_C::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, MF_value) == 0x0007A8, "Member 'AALTF42_Bike_BP_Origin_C::MF_value' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, FW_Hit) == 0x0007B0, "Member 'AALTF42_Bike_BP_Origin_C::FW_Hit' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, BW_Hit) == 0x0007C8, "Member 'AALTF42_Bike_BP_Origin_C::BW_Hit' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, SteeringAngle) == 0x0007E0, "Member 'AALTF42_Bike_BP_Origin_C::SteeringAngle' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, IsManual) == 0x0007E8, "Member 'AALTF42_Bike_BP_Origin_C::IsManual' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, IsPedaling) == 0x0007E9, "Member 'AALTF42_Bike_BP_Origin_C::IsPedaling' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, IsPreload) == 0x0007EA, "Member 'AALTF42_Bike_BP_Origin_C::IsPreload' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, IsTrickStarted) == 0x0007EB, "Member 'AALTF42_Bike_BP_Origin_C::IsTrickStarted' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, IsTrickFinished) == 0x0007EC, "Member 'AALTF42_Bike_BP_Origin_C::IsTrickFinished' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, PedalingPower) == 0x0007F0, "Member 'AALTF42_Bike_BP_Origin_C::PedalingPower' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, BrakePower) == 0x0007F8, "Member 'AALTF42_Bike_BP_Origin_C::BrakePower' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Speed) == 0x000800, "Member 'AALTF42_Bike_BP_Origin_C::Speed' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, IsEjected) == 0x000804, "Member 'AALTF42_Bike_BP_Origin_C::IsEjected' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Speed_Old) == 0x000808, "Member 'AALTF42_Bike_BP_Origin_C::Speed_Old' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Speed_Current) == 0x000810, "Member 'AALTF42_Bike_BP_Origin_C::Speed_Current' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, EnableSusp) == 0x000818, "Member 'AALTF42_Bike_BP_Origin_C::EnableSusp' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, AngleStart) == 0x000820, "Member 'AALTF42_Bike_BP_Origin_C::AngleStart' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Range) == 0x000828, "Member 'AALTF42_Bike_BP_Origin_C::Range' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, RaysRadial) == 0x000830, "Member 'AALTF42_Bike_BP_Origin_C::RaysRadial' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, AngleIncrement) == 0x000838, "Member 'AALTF42_Bike_BP_Origin_C::AngleIncrement' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, WheelR) == 0x000840, "Member 'AALTF42_Bike_BP_Origin_C::WheelR' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, AvarageHitPoint) == 0x000848, "Member 'AALTF42_Bike_BP_Origin_C::AvarageHitPoint' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, IsCompressing) == 0x000858, "Member 'AALTF42_Bike_BP_Origin_C::IsCompressing' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, SuspentionMove) == 0x000868, "Member 'AALTF42_Bike_BP_Origin_C::SuspentionMove' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, TimeDelta) == 0x000878, "Member 'AALTF42_Bike_BP_Origin_C::TimeDelta' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, ControllerReference) == 0x000880, "Member 'AALTF42_Bike_BP_Origin_C::ControllerReference' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, DirectionOnJump) == 0x000888, "Member 'AALTF42_Bike_BP_Origin_C::DirectionOnJump' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, MinCrashSpeed) == 0x0008A0, "Member 'AALTF42_Bike_BP_Origin_C::MinCrashSpeed' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, UphillDecelerateMult) == 0x0008A8, "Member 'AALTF42_Bike_BP_Origin_C::UphillDecelerateMult' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, DownhillAccelerateMult) == 0x0008B0, "Member 'AALTF42_Bike_BP_Origin_C::DownhillAccelerateMult' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, IsBraking) == 0x0008B8, "Member 'AALTF42_Bike_BP_Origin_C::IsBraking' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, IsReversing) == 0x0008B9, "Member 'AALTF42_Bike_BP_Origin_C::IsReversing' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, SpeedMS) == 0x0008C0, "Member 'AALTF42_Bike_BP_Origin_C::SpeedMS' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, New_Rotation) == 0x0008C8, "Member 'AALTF42_Bike_BP_Origin_C::New_Rotation' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, ALTF4_2_PC) == 0x0008E0, "Member 'AALTF42_Bike_BP_Origin_C::ALTF4_2_PC' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, LS_SM) == 0x0008E8, "Member 'AALTF42_Bike_BP_Origin_C::LS_SM' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, CrashBike) == 0x0008F0, "Member 'AALTF42_Bike_BP_Origin_C::CrashBike' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, SafetyArea_) == 0x0008F1, "Member 'AALTF42_Bike_BP_Origin_C::SafetyArea_' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, DownHill_ON) == 0x0008F2, "Member 'AALTF42_Bike_BP_Origin_C::DownHill_ON' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Forward_Input_Active_) == 0x0008F3, "Member 'AALTF42_Bike_BP_Origin_C::Forward_Input_Active_' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, WaterDie_) == 0x0008F4, "Member 'AALTF42_Bike_BP_Origin_C::WaterDie_' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, BikeRotation_Value) == 0x0008F8, "Member 'AALTF42_Bike_BP_Origin_C::BikeRotation_Value' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Select_Item_Value) == 0x000900, "Member 'AALTF42_Bike_BP_Origin_C::Select_Item_Value' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Char_Health) == 0x000904, "Member 'AALTF42_Bike_BP_Origin_C::Char_Health' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Water_Z) == 0x000908, "Member 'AALTF42_Bike_BP_Origin_C::Water_Z' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Water_Overlap_Location) == 0x000910, "Member 'AALTF42_Bike_BP_Origin_C::Water_Overlap_Location' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Char_Costume_Integer) == 0x000928, "Member 'AALTF42_Bike_BP_Origin_C::Char_Costume_Integer' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Zero1_CostumeMoai) == 0x000930, "Member 'AALTF42_Bike_BP_Origin_C::Zero1_CostumeMoai' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Zero2_CostumeGiraffe) == 0x000938, "Member 'AALTF42_Bike_BP_Origin_C::Zero2_CostumeGiraffe' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Zero3_CostumeFlamingo) == 0x000940, "Member 'AALTF42_Bike_BP_Origin_C::Zero3_CostumeFlamingo' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Zero4_CostumeUnicorn) == 0x000948, "Member 'AALTF42_Bike_BP_Origin_C::Zero4_CostumeUnicorn' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Zero5_CostumeHorse) == 0x000950, "Member 'AALTF42_Bike_BP_Origin_C::Zero5_CostumeHorse' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Zero6_Cannabis) == 0x000958, "Member 'AALTF42_Bike_BP_Origin_C::Zero6_Cannabis' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Crash_) == 0x000960, "Member 'AALTF42_Bike_BP_Origin_C::Crash_' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Get_Save_) == 0x000961, "Member 'AALTF42_Bike_BP_Origin_C::Get_Save_' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Get_Save_Location) == 0x000968, "Member 'AALTF42_Bike_BP_Origin_C::Get_Save_Location' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, BikeEndArea) == 0x000980, "Member 'AALTF42_Bike_BP_Origin_C::BikeEndArea' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, SonicModeON) == 0x000981, "Member 'AALTF42_Bike_BP_Origin_C::SonicModeON' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Sonic_DontBrake) == 0x000988, "Member 'AALTF42_Bike_BP_Origin_C::Sonic_DontBrake' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Zero8_CostumeSanta) == 0x000990, "Member 'AALTF42_Bike_BP_Origin_C::Zero8_CostumeSanta' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Zero7_CostumeBikini) == 0x000998, "Member 'AALTF42_Bike_BP_Origin_C::Zero7_CostumeBikini' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Zero9_CostumeRocket) == 0x0009A0, "Member 'AALTF42_Bike_BP_Origin_C::Zero9_CostumeRocket' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Invert_X_Value) == 0x0009A8, "Member 'AALTF42_Bike_BP_Origin_C::Invert_X_Value' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Invert_Y_Value) == 0x0009B0, "Member 'AALTF42_Bike_BP_Origin_C::Invert_Y_Value' has a wrong offset!");
static_assert(offsetof(AALTF42_Bike_BP_Origin_C, Ride_) == 0x0009B8, "Member 'AALTF42_Bike_BP_Origin_C::Ride_' has a wrong offset!");

}

