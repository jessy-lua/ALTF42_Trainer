#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicLeaderboard

#include "Basic.hpp"

#include "EpicLeaderboard_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class EpicLeaderboard.EpicLeaderboardObject
// 0x00E8 (0x0110 - 0x0028)
class UEpicLeaderboardObject final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEpicLeaderboardEntry>          LeaderboardEntries;                                // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FEpicLeaderboardEntry                  PlayerEntry;                                       // 0x0078(0x0098)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)

public:
	static class FString CleanupName(const class FString& Param_Name);
	static class UEpicLeaderboardObject* GetEpicLeaderboard(const class FString& LeaderboardID, const class FString& LeaderboardKey);

	void GetLeaderboardEntries(const class FString& PlayerName, bool AroundPlayer);
	void SubmitEntry(const class FString& PlayerName, float PlayerScore);
	void SubmitEntryWithMetadata(const class FString& PlayerName, float PlayerScore, const TMap<class FString, class FString>& MetaData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EpicLeaderboardObject">();
	}
	static class UEpicLeaderboardObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEpicLeaderboardObject>();
	}
};
static_assert(alignof(UEpicLeaderboardObject) == 0x000008, "Wrong alignment on UEpicLeaderboardObject");
static_assert(sizeof(UEpicLeaderboardObject) == 0x000110, "Wrong size on UEpicLeaderboardObject");
static_assert(offsetof(UEpicLeaderboardObject, OnSuccess) == 0x000028, "Member 'UEpicLeaderboardObject::OnSuccess' has a wrong offset!");
static_assert(offsetof(UEpicLeaderboardObject, OnFailure) == 0x000038, "Member 'UEpicLeaderboardObject::OnFailure' has a wrong offset!");
static_assert(offsetof(UEpicLeaderboardObject, ID) == 0x000048, "Member 'UEpicLeaderboardObject::ID' has a wrong offset!");
static_assert(offsetof(UEpicLeaderboardObject, Key) == 0x000058, "Member 'UEpicLeaderboardObject::Key' has a wrong offset!");
static_assert(offsetof(UEpicLeaderboardObject, LeaderboardEntries) == 0x000068, "Member 'UEpicLeaderboardObject::LeaderboardEntries' has a wrong offset!");
static_assert(offsetof(UEpicLeaderboardObject, PlayerEntry) == 0x000078, "Member 'UEpicLeaderboardObject::PlayerEntry' has a wrong offset!");

}

