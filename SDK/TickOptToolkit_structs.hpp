#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TickOptToolkit

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum TickOptToolkit.ETickOptToolkitAnimUROMode
// NumValues: 0x0004
enum class ETickOptToolkitAnimUROMode : uint8
{
	ScreenSize                               = 0,
	LOD                                      = 1,
	MinLOD                                   = 2,
	ETickOptToolkitAnimUROMode_MAX           = 3,
};

// Enum TickOptToolkit.ETickOptToolkitFocusLayer
// NumValues: 0x0012
enum class ETickOptToolkitFocusLayer : uint8
{
	Layer1                                   = 0,
	Layer2                                   = 1,
	Layer3                                   = 2,
	Layer4                                   = 3,
	Layer5                                   = 4,
	Layer6                                   = 5,
	Layer7                                   = 6,
	Layer8                                   = 7,
	Layer9                                   = 8,
	Layer10                                  = 9,
	Layer11                                  = 10,
	Layer12                                  = 11,
	Layer13                                  = 12,
	Layer14                                  = 13,
	Layer15                                  = 14,
	Layer16                                  = 15,
	Count                                    = 16,
	ETickOptToolkitFocusLayer_MAX            = 17,
};

// Enum TickOptToolkit.ETickOptToolkitDistanceMode
// NumValues: 0x0004
enum class ETickOptToolkitDistanceMode : uint8
{
	None                                     = 0,
	Sphere                                   = 1,
	Box                                      = 2,
	ETickOptToolkitDistanceMode_MAX          = 3,
};

// Enum TickOptToolkit.ETickByVisibilityMode
// NumValues: 0x0004
enum class ETickByVisibilityMode : uint8
{
	None                                     = 0,
	Front                                    = 1,
	Rendered                                 = 2,
	ETickByVisibilityMode_MAX                = 3,
};

// ScriptStruct TickOptToolkit.TickOptToolkitUROOptimizationLevel
// 0x0028 (0x0028 - 0x0000)
struct FTickOptToolkitUROOptimizationLevel final
{
public:
	TArray<float>                                 FramesSkippedScreenSizeThresholds;                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LODToFramesSkipped;                                // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NonRenderedFramesSkipped;                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFramesSkippedForInterpolation;                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTickOptToolkitUROOptimizationLevel) == 0x000008, "Wrong alignment on FTickOptToolkitUROOptimizationLevel");
static_assert(sizeof(FTickOptToolkitUROOptimizationLevel) == 0x000028, "Wrong size on FTickOptToolkitUROOptimizationLevel");
static_assert(offsetof(FTickOptToolkitUROOptimizationLevel, FramesSkippedScreenSizeThresholds) == 0x000000, "Member 'FTickOptToolkitUROOptimizationLevel::FramesSkippedScreenSizeThresholds' has a wrong offset!");
static_assert(offsetof(FTickOptToolkitUROOptimizationLevel, LODToFramesSkipped) == 0x000010, "Member 'FTickOptToolkitUROOptimizationLevel::LODToFramesSkipped' has a wrong offset!");
static_assert(offsetof(FTickOptToolkitUROOptimizationLevel, NonRenderedFramesSkipped) == 0x000020, "Member 'FTickOptToolkitUROOptimizationLevel::NonRenderedFramesSkipped' has a wrong offset!");
static_assert(offsetof(FTickOptToolkitUROOptimizationLevel, MaxFramesSkippedForInterpolation) == 0x000024, "Member 'FTickOptToolkitUROOptimizationLevel::MaxFramesSkippedForInterpolation' has a wrong offset!");

// ScriptStruct TickOptToolkit.TickOptToolkitTickSettings
// 0x000C (0x000C - 0x0000)
struct FTickOptToolkitTickSettings final
{
public:
	float                                         IntervalVisible;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalHidden;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledVisible;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledHidden;                                    // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2132[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTickOptToolkitTickSettings) == 0x000004, "Wrong alignment on FTickOptToolkitTickSettings");
static_assert(sizeof(FTickOptToolkitTickSettings) == 0x00000C, "Wrong size on FTickOptToolkitTickSettings");
static_assert(offsetof(FTickOptToolkitTickSettings, IntervalVisible) == 0x000000, "Member 'FTickOptToolkitTickSettings::IntervalVisible' has a wrong offset!");
static_assert(offsetof(FTickOptToolkitTickSettings, IntervalHidden) == 0x000004, "Member 'FTickOptToolkitTickSettings::IntervalHidden' has a wrong offset!");
static_assert(offsetof(FTickOptToolkitTickSettings, bEnabledVisible) == 0x000008, "Member 'FTickOptToolkitTickSettings::bEnabledVisible' has a wrong offset!");
static_assert(offsetof(FTickOptToolkitTickSettings, bEnabledHidden) == 0x000009, "Member 'FTickOptToolkitTickSettings::bEnabledHidden' has a wrong offset!");

// ScriptStruct TickOptToolkit.TickOptToolkitOptimizationLevel
// 0x0048 (0x0048 - 0x0000)
struct FTickOptToolkitOptimizationLevel final
{
public:
	float                                         SphereRadius;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2133[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxExtents;                                        // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BufferSize;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2134[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 MidZoneSizes;                                      // 0x0028(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTickOptToolkitTickSettings>    TickSettings;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTickOptToolkitOptimizationLevel) == 0x000008, "Wrong alignment on FTickOptToolkitOptimizationLevel");
static_assert(sizeof(FTickOptToolkitOptimizationLevel) == 0x000048, "Wrong size on FTickOptToolkitOptimizationLevel");
static_assert(offsetof(FTickOptToolkitOptimizationLevel, SphereRadius) == 0x000000, "Member 'FTickOptToolkitOptimizationLevel::SphereRadius' has a wrong offset!");
static_assert(offsetof(FTickOptToolkitOptimizationLevel, BoxExtents) == 0x000008, "Member 'FTickOptToolkitOptimizationLevel::BoxExtents' has a wrong offset!");
static_assert(offsetof(FTickOptToolkitOptimizationLevel, BufferSize) == 0x000020, "Member 'FTickOptToolkitOptimizationLevel::BufferSize' has a wrong offset!");
static_assert(offsetof(FTickOptToolkitOptimizationLevel, MidZoneSizes) == 0x000028, "Member 'FTickOptToolkitOptimizationLevel::MidZoneSizes' has a wrong offset!");
static_assert(offsetof(FTickOptToolkitOptimizationLevel, TickSettings) == 0x000038, "Member 'FTickOptToolkitOptimizationLevel::TickSettings' has a wrong offset!");

// ScriptStruct TickOptToolkit.TickControlledTimeline
// 0x0010 (0x0010 - 0x0000)
struct FTickControlledTimeline final
{
public:
	class UTimelineComponent*                     Timeline;                                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSyncTimelineToWorld;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2135[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTickControlledTimeline) == 0x000008, "Wrong alignment on FTickControlledTimeline");
static_assert(sizeof(FTickControlledTimeline) == 0x000010, "Wrong size on FTickControlledTimeline");
static_assert(offsetof(FTickControlledTimeline, Timeline) == 0x000000, "Member 'FTickControlledTimeline::Timeline' has a wrong offset!");
static_assert(offsetof(FTickControlledTimeline, bSyncTimelineToWorld) == 0x000008, "Member 'FTickControlledTimeline::bSyncTimelineToWorld' has a wrong offset!");

}

