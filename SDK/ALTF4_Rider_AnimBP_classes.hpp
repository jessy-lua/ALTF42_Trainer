#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALTF4_Rider_AnimBP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ALTF4_Rider_AnimBP_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ALTF4_Rider_AnimBP.ALTF4_Rider_AnimBP_C
// 0x1130 (0x1480 - 0x0350)
class UALTF4_Rider_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2DC9[0x8];                                     // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ALTF4_Rider_AnimBP::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0358(0x000C)(HasGetValueTypeHash)
	uint8                                         Pad_2DCA[0x4];                                     // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0368(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0370(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0378(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0398(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x03C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x03E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0410(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0438(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0460(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0488(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x04D0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x04F0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0538(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0558(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x05A0(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x05C0(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0630(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0650(0x00C8)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0718(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0738(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0758(0x0048)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_3;                         // 0x07A0(0x0280)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_2;                         // 0x0A20(0x0280)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_1;                         // 0x0CA0(0x0280)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK;                           // 0x0F20(0x0280)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x11A0(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x12C8(0x0128)()
	double                                        Speed;                                             // 0x13F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SteeringAngle;                                     // 0x13F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x1400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsManual;                                          // 0x1401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPedaling;                                        // 0x1402(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPreload;                                         // 0x1403(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DCB[0x4];                                     // 0x1404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                L_Arm_IK;                                          // 0x1408(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                R_Arm_IK;                                          // 0x1420(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_Leg_IK;                                          // 0x1438(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                R_Leg_IK;                                          // 0x1450(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FeetIKAlpha;                                       // 0x1468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ArmsIKAlpha;                                       // 0x1470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableFootIK;                                     // 0x1478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableArmsIK;                                     // 0x1479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReversing;                                       // 0x147A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotify_IsManualEnd();
	void AnimNotify_IsPreload();
	void AnimNotify_startIK();
	void AnimNotify_stopIK();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ALTF4_Rider_AnimBP_AnimGraphNode_TransitionResult_56021D744B3C176B53E46B870453186C();
	void ExecuteUbergraph_ALTF4_Rider_AnimBP(int32 EntryPoint);
	void Manual();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ALTF4_Rider_AnimBP_C">();
	}
	static class UALTF4_Rider_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UALTF4_Rider_AnimBP_C>();
	}
};
static_assert(alignof(UALTF4_Rider_AnimBP_C) == 0x000010, "Wrong alignment on UALTF4_Rider_AnimBP_C");
static_assert(sizeof(UALTF4_Rider_AnimBP_C) == 0x001480, "Wrong size on UALTF4_Rider_AnimBP_C");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, UberGraphFrame) == 0x000350, "Member 'UALTF4_Rider_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, __AnimBlueprintMutables) == 0x000358, "Member 'UALTF4_Rider_AnimBP_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimBlueprintExtension_PropertyAccess) == 0x000368, "Member 'UALTF4_Rider_AnimBP_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimBlueprintExtension_Base) == 0x000370, "Member 'UALTF4_Rider_AnimBP_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_Root) == 0x000378, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_TransitionResult_5) == 0x000398, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_TransitionResult_4) == 0x0003C0, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_TransitionResult_3) == 0x0003E8, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_TransitionResult_2) == 0x000410, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_TransitionResult_1) == 0x000438, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_TransitionResult) == 0x000460, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x000488, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_StateResult_3) == 0x0004D0, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x0004F0, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_StateResult_2) == 0x000538, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x000558, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_StateResult_1) == 0x0005A0, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x0005C0, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_StateResult) == 0x000630, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_StateMachine) == 0x000650, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_LocalToComponentSpace) == 0x000718, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_ComponentToLocalSpace) == 0x000738, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_Slot) == 0x000758, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_TwoBoneIK_3) == 0x0007A0, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_TwoBoneIK_3' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_TwoBoneIK_2) == 0x000A20, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_TwoBoneIK_2' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_TwoBoneIK_1) == 0x000CA0, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_TwoBoneIK_1' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_TwoBoneIK) == 0x000F20, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_TwoBoneIK' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_ModifyBone_1) == 0x0011A0, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, AnimGraphNode_ModifyBone) == 0x0012C8, "Member 'UALTF4_Rider_AnimBP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, Speed) == 0x0013F0, "Member 'UALTF4_Rider_AnimBP_C::Speed' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, SteeringAngle) == 0x0013F8, "Member 'UALTF4_Rider_AnimBP_C::SteeringAngle' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, IsInAir) == 0x001400, "Member 'UALTF4_Rider_AnimBP_C::IsInAir' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, IsManual) == 0x001401, "Member 'UALTF4_Rider_AnimBP_C::IsManual' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, IsPedaling) == 0x001402, "Member 'UALTF4_Rider_AnimBP_C::IsPedaling' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, IsPreload) == 0x001403, "Member 'UALTF4_Rider_AnimBP_C::IsPreload' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, L_Arm_IK) == 0x001408, "Member 'UALTF4_Rider_AnimBP_C::L_Arm_IK' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, R_Arm_IK) == 0x001420, "Member 'UALTF4_Rider_AnimBP_C::R_Arm_IK' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, L_Leg_IK) == 0x001438, "Member 'UALTF4_Rider_AnimBP_C::L_Leg_IK' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, R_Leg_IK) == 0x001450, "Member 'UALTF4_Rider_AnimBP_C::R_Leg_IK' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, FeetIKAlpha) == 0x001468, "Member 'UALTF4_Rider_AnimBP_C::FeetIKAlpha' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, ArmsIKAlpha) == 0x001470, "Member 'UALTF4_Rider_AnimBP_C::ArmsIKAlpha' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, DisableFootIK) == 0x001478, "Member 'UALTF4_Rider_AnimBP_C::DisableFootIK' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, DisableArmsIK) == 0x001479, "Member 'UALTF4_Rider_AnimBP_C::DisableArmsIK' has a wrong offset!");
static_assert(offsetof(UALTF4_Rider_AnimBP_C, IsReversing) == 0x00147A, "Member 'UALTF4_Rider_AnimBP_C::IsReversing' has a wrong offset!");

}

