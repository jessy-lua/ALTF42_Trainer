#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFL_TrainAndRail

#include "Basic.hpp"

#include "BFL_TrainAndRail_classes.hpp"
#include "BFL_TrainAndRail_parameters.hpp"


namespace SDK
{

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.FindLocationOnTracks
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_TrainTrack_C*                 StartingTrack                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FS_TrackSpline                   StartingTrackSpline                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// double                                  StartingDistance                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RequestedDistance                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Invert                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_TrackPassThroughInfo>  CurrentPassThroughInfo                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_TrainTrack_C*                 EndTrack                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FS_TrackSpline                   EndTrackSpline                                         (Parm, OutParm, HasGetValueTypeHash)
// double                                  EndDistance                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EndReached                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InvertedDirOfTravel                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_TrackPassThroughInfo>  TravelInfo                                             (Parm, OutParm)

void UBFL_TrainAndRail_C::FindLocationOnTracks(class ABP_TrainTrack_C* StartingTrack, struct FS_TrackSpline& StartingTrackSpline, double& StartingDistance, double& RequestedDistance, bool Invert, TArray<struct FS_TrackPassThroughInfo>& CurrentPassThroughInfo, class UObject* __WorldContext, class ABP_TrainTrack_C** EndTrack, struct FS_TrackSpline* EndTrackSpline, double* EndDistance, bool* EndReached, bool* InvertedDirOfTravel, TArray<struct FS_TrackPassThroughInfo>* TravelInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_TrainAndRail_C", "FindLocationOnTracks");

	Params::BFL_TrainAndRail_C_FindLocationOnTracks Parms{};

	Parms.StartingTrack = StartingTrack;
	Parms.StartingTrackSpline = std::move(StartingTrackSpline);
	Parms.StartingDistance = StartingDistance;
	Parms.RequestedDistance = RequestedDistance;
	Parms.Invert = Invert;
	Parms.CurrentPassThroughInfo = std::move(CurrentPassThroughInfo);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	StartingTrackSpline = std::move(Parms.StartingTrackSpline);
	StartingDistance = Parms.StartingDistance;
	RequestedDistance = Parms.RequestedDistance;
	CurrentPassThroughInfo = std::move(Parms.CurrentPassThroughInfo);

	if (EndTrack != nullptr)
		*EndTrack = Parms.EndTrack;

	if (EndTrackSpline != nullptr)
		*EndTrackSpline = std::move(Parms.EndTrackSpline);

	if (EndDistance != nullptr)
		*EndDistance = Parms.EndDistance;

	if (EndReached != nullptr)
		*EndReached = Parms.EndReached;

	if (InvertedDirOfTravel != nullptr)
		*InvertedDirOfTravel = Parms.InvertedDirOfTravel;

	if (TravelInfo != nullptr)
		*TravelInfo = std::move(Parms.TravelInfo);
}


// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetClosestDistanceBetweenSplinePoints
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 Spline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   PointA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PointB                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NumDistanceSamples                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ClosestDistance                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_TrainAndRail_C::GetClosestDistanceBetweenSplinePoints(class USplineComponent* Spline, int32& PointA, int32& PointB, struct FVector& WorldLocation, int32 NumDistanceSamples, class UObject* __WorldContext, double* ClosestDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_TrainAndRail_C", "GetClosestDistanceBetweenSplinePoints");

	Params::BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints Parms{};

	Parms.Spline = Spline;
	Parms.PointA = PointA;
	Parms.PointB = PointB;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.NumDistanceSamples = NumDistanceSamples;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	PointA = Parms.PointA;
	PointB = Parms.PointB;
	WorldLocation = std::move(Parms.WorldLocation);

	if (ClosestDistance != nullptr)
		*ClosestDistance = Parms.ClosestDistance;
}


// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetClosestDistanceOnSpline
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 Spline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DistanceSampleCount                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  DistanceOnSpline                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ValidDistance                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_TrainAndRail_C::GetClosestDistanceOnSpline(class USplineComponent*& Spline, struct FVector& WorldLocation, int32& DistanceSampleCount, class UObject* __WorldContext, double* DistanceOnSpline, bool* ValidDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_TrainAndRail_C", "GetClosestDistanceOnSpline");

	Params::BFL_TrainAndRail_C_GetClosestDistanceOnSpline Parms{};

	Parms.Spline = Spline;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.DistanceSampleCount = DistanceSampleCount;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Spline = Parms.Spline;
	WorldLocation = std::move(Parms.WorldLocation);
	DistanceSampleCount = Parms.DistanceSampleCount;

	if (DistanceOnSpline != nullptr)
		*DistanceOnSpline = Parms.DistanceOnSpline;

	if (ValidDistance != nullptr)
		*ValidDistance = Parms.ValidDistance;
}


// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetClosestSplinePoint
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 Spline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           IgnorePoints                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   ClosestPointIndex                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_TrainAndRail_C::GetClosestSplinePoint(class USplineComponent*& Spline, TArray<int32>& IgnorePoints, struct FVector& Location, class UObject* __WorldContext, int32* ClosestPointIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_TrainAndRail_C", "GetClosestSplinePoint");

	Params::BFL_TrainAndRail_C_GetClosestSplinePoint Parms{};

	Parms.Spline = Spline;
	Parms.IgnorePoints = std::move(IgnorePoints);
	Parms.Location = std::move(Location);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Spline = Parms.Spline;
	IgnorePoints = std::move(Parms.IgnorePoints);
	Location = std::move(Parms.Location);

	if (ClosestPointIndex != nullptr)
		*ClosestPointIndex = Parms.ClosestPointIndex;
}


// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetDistanceBetweenLocations
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          PointA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PointB                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_TrainAndRail_C::GetDistanceBetweenLocations(const struct FVector& PointA, const struct FVector& PointB, class UObject* __WorldContext, double* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_TrainAndRail_C", "GetDistanceBetweenLocations");

	Params::BFL_TrainAndRail_C_GetDistanceBetweenLocations Parms{};

	Parms.PointA = std::move(PointA);
	Parms.PointB = std::move(PointB);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetInternalCompTag
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             IgnoreTag                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_TrainAndRail_C::GetInternalCompTag(class UObject* __WorldContext, class FName* IgnoreTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_TrainAndRail_C", "GetInternalCompTag");

	Params::BFL_TrainAndRail_C_GetInternalCompTag Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IgnoreTag != nullptr)
		*IgnoreTag = Parms.IgnoreTag;
}


// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetLowestFloat
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ValueA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ValueB                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Lowest                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Highest                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_TrainAndRail_C::GetLowestFloat(double& ValueA, double& ValueB, class UObject* __WorldContext, double* Lowest, double* Highest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_TrainAndRail_C", "GetLowestFloat");

	Params::BFL_TrainAndRail_C_GetLowestFloat Parms{};

	Parms.ValueA = ValueA;
	Parms.ValueB = ValueB;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ValueA = Parms.ValueA;
	ValueB = Parms.ValueB;

	if (Lowest != nullptr)
		*Lowest = Parms.Lowest;

	if (Highest != nullptr)
		*Highest = Parms.Highest;
}


// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetStartAndEndLocationOfSpline
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USplineComponent*                 SplineComp                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          StartPoint                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndPoint                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_TrainAndRail_C::GetStartAndEndLocationOfSpline(class USplineComponent* SplineComp, class UObject* __WorldContext, struct FVector* StartPoint, struct FVector* EndPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_TrainAndRail_C", "GetStartAndEndLocationOfSpline");

	Params::BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline Parms{};

	Parms.SplineComp = SplineComp;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (StartPoint != nullptr)
		*StartPoint = std::move(Parms.StartPoint);

	if (EndPoint != nullptr)
		*EndPoint = std::move(Parms.EndPoint);
}


// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetTrackIgnoreTag
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             IgnoreTag                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_TrainAndRail_C::GetTrackIgnoreTag(class UObject* __WorldContext, class FName* IgnoreTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_TrainAndRail_C", "GetTrackIgnoreTag");

	Params::BFL_TrainAndRail_C_GetTrackIgnoreTag Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IgnoreTag != nullptr)
		*IgnoreTag = Parms.IgnoreTag;
}


// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetUsableSplinesFromTrack
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_TrainTrack_C*                 SourceTrack                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class USplineComponent*>         UsableSplineComponents                                 (Parm, OutParm, ContainsInstancedReference)

void UBFL_TrainAndRail_C::GetUsableSplinesFromTrack(class ABP_TrainTrack_C* SourceTrack, class UObject* __WorldContext, TArray<class USplineComponent*>* UsableSplineComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_TrainAndRail_C", "GetUsableSplinesFromTrack");

	Params::BFL_TrainAndRail_C_GetUsableSplinesFromTrack Parms{};

	Parms.SourceTrack = SourceTrack;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (UsableSplineComponents != nullptr)
		*UsableSplineComponents = std::move(Parms.UsableSplineComponents);
}


// Function BFL_TrainAndRail.BFL_TrainAndRail_C.HasTrackSplines
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_TrainTrack_C*                 Track                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_HasTrackSplines                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_TrainAndRail_C::HasTrackSplines(class ABP_TrainTrack_C* Track, class UObject* __WorldContext, bool* Param_HasTrackSplines)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_TrainAndRail_C", "HasTrackSplines");

	Params::BFL_TrainAndRail_C_HasTrackSplines Parms{};

	Parms.Track = Track;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Param_HasTrackSplines != nullptr)
		*Param_HasTrackSplines = Parms.Param_HasTrackSplines;
}


// Function BFL_TrainAndRail.BFL_TrainAndRail_C.IsValidTrackSplineIndex
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_TrainTrack_C*                 Track                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SplineIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ValidIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_TrainAndRail_C::IsValidTrackSplineIndex(class ABP_TrainTrack_C* Track, int32& SplineIndex, class UObject* __WorldContext, bool* ValidIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_TrainAndRail_C", "IsValidTrackSplineIndex");

	Params::BFL_TrainAndRail_C_IsValidTrackSplineIndex Parms{};

	Parms.Track = Track;
	Parms.SplineIndex = SplineIndex;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	SplineIndex = Parms.SplineIndex;

	if (ValidIndex != nullptr)
		*ValidIndex = Parms.ValidIndex;
}

}

