#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AI_SkelZombie_Ver02_BP

#include "Basic.hpp"

#include "Mantle_Asset_structs.hpp"
#include "ALS_Base_CharacterBP_classes.hpp"
#include "Engine_structs.hpp"
#include "MantleType_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AI_SkelZombie_Ver02_BP.AI_SkelZombie_Ver02_BP_C
// 0x0310 (0x0E60 - 0x0B50)
class AAI_SkelZombie_Ver02_BP_C final : public AALS_Base_CharacterBP_C
{
public:
	uint8                                         Pad_3AAD[0x6];                                     // 0x0B42(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_AI_SkelZombie_Ver02_BP_C;           // 0x0B48(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Zombie_Spawn_Cue;                                  // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Zombie_Idle_Cue;                                   // 0x0B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Zombie_Sound_Cue;                                  // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x0B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          UnderOverlapCheck;                                 // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EyeGlossy_R;                                       // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EyeGlossy_L;                                       // 0x0B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPawnSensingComponent*                  PawnSensing;                                       // 0x0B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Forward_Detect;                                    // 0x0B90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Foot_Block_SM;                                     // 0x0B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BodyMesh;                                          // 0x0BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VisualMeshes;                                      // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HeldObjectRoot;                                    // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0BC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_2m_Default;                                 // 0x0BC8(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_Default;                                 // 0x0C08(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_RH;                                      // 0x0C48(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_LH;                                      // 0x0C88(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_2H;                                      // 0x0CC8(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Asset                          Mantle_1m_Box;                                     // 0x0D08(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandRoll_Default;                                  // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpFront_Default;                                // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandRoll_RH;                                       // 0x0D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandRoll_LH;                                       // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandRoll_2H;                                       // 0x0D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpFront_RH;                                     // 0x0D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpFront_LH;                                     // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpFront_2H;                                     // 0x0D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpBack_Default;                                 // 0x0D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpBack_RH;                                      // 0x0D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpBack_LH;                                      // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GetUpBack_2H;                                      // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit_;                                              // 0x0DA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dash_;                                             // 0x0DA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ImPlayer;                                          // 0x0DAA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          SeePlayer;                                         // 0x0DAB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AtkPossible_;                                      // 0x0DAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Random_Roam_;                                      // 0x0DAD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AAE[0x2];                                     // 0x0DAE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackAnd_Delay;                                   // 0x0DB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AAF[0x4];                                     // 0x0DB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           PowerAttack_Montage;                               // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PowerAttack_Play_Rate;                             // 0x0DC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AB0[0x4];                                     // 0x0DC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PowerAttack_Distance;                              // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PowerAttack_Persentage;                            // 0x0DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AB1[0x4];                                     // 0x0DD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           JUMP_Attack_Montage;                               // 0x0DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         JUMP_Attack_Play_Rate;                             // 0x0DE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AB2[0x4];                                     // 0x0DE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        JUMP_Attack_Distance;                              // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimpleAtk_Active;                                  // 0x0DF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PowerAtk_Active;                                   // 0x0DF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attack_Landing;                                    // 0x0DF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attack_ing_;                                       // 0x0DF3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomHit_Value;                                   // 0x0DF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Hit_ReactionValue;                                 // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ragdoll_Check_;                                    // 0x0E00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerbleSensing_;                                 // 0x0E01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TestDeActive_;                                     // 0x0E02(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3AB3[0x1];                                     // 0x0E03(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpAtk_Speed;                                     // 0x0E04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OpenMouth;                                         // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BA_Material_ID;                                    // 0x0E10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AB4[0x4];                                     // 0x0E14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             BA_SkeletonMaterialsArray;                         // 0x0E18(0x0010)(Edit, BlueprintVisible)
	int32                                         BB_Material_ID;                                    // 0x0E28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AB5[0x4];                                     // 0x0E2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             BB_SkeletonBBMaterialsArray;                       // 0x0E30(0x0010)(Edit, BlueprintVisible)
	double                                        Launch_Velocity_Z;                                 // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Spawner_ID;                                        // 0x0E48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3AB6[0x4];                                     // 0x0E4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             New_Sound;                                         // 0x0E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AI_Zone_InPlayer_Event(bool Param_SeePlayer);
	void AttachToHand(class UStaticMesh* NewStaticMesh, class USkeletalMesh* NewSkeletalMesh, class UClass* NewAnimClass, bool LeftHand, const struct FVector& Offset);
	void AttackReset();
	void BndEvt__AI_Enemy_RedKnight_BP_Foot_Block_SM_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__AI_SkelZombie_BP_PawnSensing_K2Node_ComponentBoundEvent_0_SeePawnDelegate__DelegateSignature(class APawn* Pawn);
	void BndEvt__AI_SkelZombie_Ver02_BP_UnderOverlapCheck_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ClearHeldObject();
	void Destroy_SkelVer02();
	void ExecuteUbergraph_AI_SkelZombie_Ver02_BP(int32 EntryPoint);
	void F_AtkPossible_Caculation();
	void Hit_And_Reset();
	void Hit_Event(bool BombHit_);
	void OnFail_13AAA33C475D5E984E31C18F149BF1E2(EPathFollowingResult MovementResult);
	void OnFail_13AAA33C475D5E984E31C18F729E411A(EPathFollowingResult MovementResult);
	void OnFail_13AAA33C475D5E984E31C18FABFB5F35(EPathFollowingResult MovementResult);
	void OnSuccess_13AAA33C475D5E984E31C18F149BF1E2(EPathFollowingResult MovementResult);
	void OnSuccess_13AAA33C475D5E984E31C18F729E411A(EPathFollowingResult MovementResult);
	void OnSuccess_13AAA33C475D5E984E31C18FABFB5F35(EPathFollowingResult MovementResult);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Search_And_Reset();
	void SimpleAttack();
	void SpawnZombie_Event();
	void UpdateHeldObject();
	void UpdateHeldObjectAnimations();
	void UserConstructionScript();
	void Zombie_AttackPossibleON();
	void Zombie_AttackPossibleONAttackPossibleOFF();
	struct FTransform BPI_Get_3P_PivotTarget();
	void BPI_Get_3P_TraceParams(struct FVector* TraceOrigin, double* TraceRadius, ETraceTypeQuery* TraceChannel);
	void BPI_Get_CaptainKnight_Attack(bool* SimpleAttack_);
	struct FVector BPI_Get_FP_CameraTarget();
	class UAnimMontage* GetGetUpAnimation(bool Param_RagdollFaceUp);
	struct FMantle_Asset GetMantleAsset(EMantleType MantleType);
	class UAnimMontage* GetRollAnimation();
	void MantleEnd();
	void MantleStart(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType);
	void OnLanded(const struct FHitResult& Hit);
	void OnOverlayStateChanged(EALS_OverlayState NewOverlayState);
	void RagdollEnd();
	void RagdollStart();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AI_SkelZombie_Ver02_BP_C">();
	}
	static class AAI_SkelZombie_Ver02_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAI_SkelZombie_Ver02_BP_C>();
	}
};
static_assert(alignof(AAI_SkelZombie_Ver02_BP_C) == 0x000010, "Wrong alignment on AAI_SkelZombie_Ver02_BP_C");
static_assert(sizeof(AAI_SkelZombie_Ver02_BP_C) == 0x000E60, "Wrong size on AAI_SkelZombie_Ver02_BP_C");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, UberGraphFrame_AI_SkelZombie_Ver02_BP_C) == 0x000B48, "Member 'AAI_SkelZombie_Ver02_BP_C::UberGraphFrame_AI_SkelZombie_Ver02_BP_C' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Zombie_Spawn_Cue) == 0x000B50, "Member 'AAI_SkelZombie_Ver02_BP_C::Zombie_Spawn_Cue' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Zombie_Idle_Cue) == 0x000B58, "Member 'AAI_SkelZombie_Ver02_BP_C::Zombie_Idle_Cue' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Zombie_Sound_Cue) == 0x000B60, "Member 'AAI_SkelZombie_Ver02_BP_C::Zombie_Sound_Cue' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Cube) == 0x000B68, "Member 'AAI_SkelZombie_Ver02_BP_C::Cube' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, UnderOverlapCheck) == 0x000B70, "Member 'AAI_SkelZombie_Ver02_BP_C::UnderOverlapCheck' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, EyeGlossy_R) == 0x000B78, "Member 'AAI_SkelZombie_Ver02_BP_C::EyeGlossy_R' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, EyeGlossy_L) == 0x000B80, "Member 'AAI_SkelZombie_Ver02_BP_C::EyeGlossy_L' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, PawnSensing) == 0x000B88, "Member 'AAI_SkelZombie_Ver02_BP_C::PawnSensing' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Forward_Detect) == 0x000B90, "Member 'AAI_SkelZombie_Ver02_BP_C::Forward_Detect' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Foot_Block_SM) == 0x000B98, "Member 'AAI_SkelZombie_Ver02_BP_C::Foot_Block_SM' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, BodyMesh) == 0x000BA0, "Member 'AAI_SkelZombie_Ver02_BP_C::BodyMesh' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, VisualMeshes) == 0x000BA8, "Member 'AAI_SkelZombie_Ver02_BP_C::VisualMeshes' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, HeldObjectRoot) == 0x000BB0, "Member 'AAI_SkelZombie_Ver02_BP_C::HeldObjectRoot' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, StaticMesh) == 0x000BB8, "Member 'AAI_SkelZombie_Ver02_BP_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, SkeletalMesh) == 0x000BC0, "Member 'AAI_SkelZombie_Ver02_BP_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Mantle_2m_Default) == 0x000BC8, "Member 'AAI_SkelZombie_Ver02_BP_C::Mantle_2m_Default' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Mantle_1m_Default) == 0x000C08, "Member 'AAI_SkelZombie_Ver02_BP_C::Mantle_1m_Default' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Mantle_1m_RH) == 0x000C48, "Member 'AAI_SkelZombie_Ver02_BP_C::Mantle_1m_RH' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Mantle_1m_LH) == 0x000C88, "Member 'AAI_SkelZombie_Ver02_BP_C::Mantle_1m_LH' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Mantle_1m_2H) == 0x000CC8, "Member 'AAI_SkelZombie_Ver02_BP_C::Mantle_1m_2H' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Mantle_1m_Box) == 0x000D08, "Member 'AAI_SkelZombie_Ver02_BP_C::Mantle_1m_Box' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, LandRoll_Default) == 0x000D48, "Member 'AAI_SkelZombie_Ver02_BP_C::LandRoll_Default' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, GetUpFront_Default) == 0x000D50, "Member 'AAI_SkelZombie_Ver02_BP_C::GetUpFront_Default' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, LandRoll_RH) == 0x000D58, "Member 'AAI_SkelZombie_Ver02_BP_C::LandRoll_RH' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, LandRoll_LH) == 0x000D60, "Member 'AAI_SkelZombie_Ver02_BP_C::LandRoll_LH' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, LandRoll_2H) == 0x000D68, "Member 'AAI_SkelZombie_Ver02_BP_C::LandRoll_2H' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, GetUpFront_RH) == 0x000D70, "Member 'AAI_SkelZombie_Ver02_BP_C::GetUpFront_RH' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, GetUpFront_LH) == 0x000D78, "Member 'AAI_SkelZombie_Ver02_BP_C::GetUpFront_LH' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, GetUpFront_2H) == 0x000D80, "Member 'AAI_SkelZombie_Ver02_BP_C::GetUpFront_2H' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, GetUpBack_Default) == 0x000D88, "Member 'AAI_SkelZombie_Ver02_BP_C::GetUpBack_Default' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, GetUpBack_RH) == 0x000D90, "Member 'AAI_SkelZombie_Ver02_BP_C::GetUpBack_RH' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, GetUpBack_LH) == 0x000D98, "Member 'AAI_SkelZombie_Ver02_BP_C::GetUpBack_LH' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, GetUpBack_2H) == 0x000DA0, "Member 'AAI_SkelZombie_Ver02_BP_C::GetUpBack_2H' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Hit_) == 0x000DA8, "Member 'AAI_SkelZombie_Ver02_BP_C::Hit_' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Dash_) == 0x000DA9, "Member 'AAI_SkelZombie_Ver02_BP_C::Dash_' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, ImPlayer) == 0x000DAA, "Member 'AAI_SkelZombie_Ver02_BP_C::ImPlayer' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, SeePlayer) == 0x000DAB, "Member 'AAI_SkelZombie_Ver02_BP_C::SeePlayer' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, AtkPossible_) == 0x000DAC, "Member 'AAI_SkelZombie_Ver02_BP_C::AtkPossible_' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Random_Roam_) == 0x000DAD, "Member 'AAI_SkelZombie_Ver02_BP_C::Random_Roam_' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, AttackAnd_Delay) == 0x000DB0, "Member 'AAI_SkelZombie_Ver02_BP_C::AttackAnd_Delay' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, PowerAttack_Montage) == 0x000DB8, "Member 'AAI_SkelZombie_Ver02_BP_C::PowerAttack_Montage' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, PowerAttack_Play_Rate) == 0x000DC0, "Member 'AAI_SkelZombie_Ver02_BP_C::PowerAttack_Play_Rate' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, PowerAttack_Distance) == 0x000DC8, "Member 'AAI_SkelZombie_Ver02_BP_C::PowerAttack_Distance' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, PowerAttack_Persentage) == 0x000DD0, "Member 'AAI_SkelZombie_Ver02_BP_C::PowerAttack_Persentage' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, JUMP_Attack_Montage) == 0x000DD8, "Member 'AAI_SkelZombie_Ver02_BP_C::JUMP_Attack_Montage' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, JUMP_Attack_Play_Rate) == 0x000DE0, "Member 'AAI_SkelZombie_Ver02_BP_C::JUMP_Attack_Play_Rate' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, JUMP_Attack_Distance) == 0x000DE8, "Member 'AAI_SkelZombie_Ver02_BP_C::JUMP_Attack_Distance' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, SimpleAtk_Active) == 0x000DF0, "Member 'AAI_SkelZombie_Ver02_BP_C::SimpleAtk_Active' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, PowerAtk_Active) == 0x000DF1, "Member 'AAI_SkelZombie_Ver02_BP_C::PowerAtk_Active' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Attack_Landing) == 0x000DF2, "Member 'AAI_SkelZombie_Ver02_BP_C::Attack_Landing' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Attack_ing_) == 0x000DF3, "Member 'AAI_SkelZombie_Ver02_BP_C::Attack_ing_' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, RandomHit_Value) == 0x000DF4, "Member 'AAI_SkelZombie_Ver02_BP_C::RandomHit_Value' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Hit_ReactionValue) == 0x000DF8, "Member 'AAI_SkelZombie_Ver02_BP_C::Hit_ReactionValue' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Ragdoll_Check_) == 0x000E00, "Member 'AAI_SkelZombie_Ver02_BP_C::Ragdoll_Check_' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, PlayerbleSensing_) == 0x000E01, "Member 'AAI_SkelZombie_Ver02_BP_C::PlayerbleSensing_' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, TestDeActive_) == 0x000E02, "Member 'AAI_SkelZombie_Ver02_BP_C::TestDeActive_' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, JumpAtk_Speed) == 0x000E04, "Member 'AAI_SkelZombie_Ver02_BP_C::JumpAtk_Speed' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, OpenMouth) == 0x000E08, "Member 'AAI_SkelZombie_Ver02_BP_C::OpenMouth' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, BA_Material_ID) == 0x000E10, "Member 'AAI_SkelZombie_Ver02_BP_C::BA_Material_ID' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, BA_SkeletonMaterialsArray) == 0x000E18, "Member 'AAI_SkelZombie_Ver02_BP_C::BA_SkeletonMaterialsArray' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, BB_Material_ID) == 0x000E28, "Member 'AAI_SkelZombie_Ver02_BP_C::BB_Material_ID' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, BB_SkeletonBBMaterialsArray) == 0x000E30, "Member 'AAI_SkelZombie_Ver02_BP_C::BB_SkeletonBBMaterialsArray' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Launch_Velocity_Z) == 0x000E40, "Member 'AAI_SkelZombie_Ver02_BP_C::Launch_Velocity_Z' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, Spawner_ID) == 0x000E48, "Member 'AAI_SkelZombie_Ver02_BP_C::Spawner_ID' has a wrong offset!");
static_assert(offsetof(AAI_SkelZombie_Ver02_BP_C, New_Sound) == 0x000E50, "Member 'AAI_SkelZombie_Ver02_BP_C::New_Sound' has a wrong offset!");

}

