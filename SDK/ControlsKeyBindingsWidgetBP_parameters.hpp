#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ControlsKeyBindingsWidgetBP

#include "Basic.hpp"

#include "EnhancedInput_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ControlsKeyBindingsWidgetBP.ControlsKeyBindingsWidgetBP_C.ExecuteUbergraph_ControlsKeyBindingsWidgetBP
// 0x0028 (0x0028 - 0x0000)
struct ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3319[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractableMenuWidgetBP_C*            K2Node_Event_NavigateToMenu;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UInteractableMenuWidgetBP_C*            K2Node_Event_NavigateFromMenu_1;                   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UInteractableMenuWidgetBP_C*            K2Node_Event_NavigateFromMenu;                     // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsGamepadBeingUsed;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331A[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_PlayerIndex;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP) == 0x000008, "Wrong alignment on ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP");
static_assert(sizeof(ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP) == 0x000028, "Wrong size on ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP, EntryPoint) == 0x000000, "Member 'ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP, K2Node_Event_IsDesignTime) == 0x000004, "Member 'ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP, K2Node_Event_NavigateToMenu) == 0x000008, "Member 'ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP::K2Node_Event_NavigateToMenu' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP, K2Node_Event_NavigateFromMenu_1) == 0x000010, "Member 'ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP::K2Node_Event_NavigateFromMenu_1' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP, K2Node_Event_NavigateFromMenu) == 0x000018, "Member 'ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP::K2Node_Event_NavigateFromMenu' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP, K2Node_Event_bIsGamepadBeingUsed) == 0x000020, "Member 'ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP::K2Node_Event_bIsGamepadBeingUsed' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP, K2Node_Event_PlayerIndex) == 0x000024, "Member 'ControlsKeyBindingsWidgetBP_C_ExecuteUbergraph_ControlsKeyBindingsWidgetBP::K2Node_Event_PlayerIndex' has a wrong offset!");

// Function ControlsKeyBindingsWidgetBP.ControlsKeyBindingsWidgetBP_C.f_Get Input by Name
// 0x00B0 (0x00B0 - 0x0000)
struct ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name final
{
public:
	class FString                                 Input_Name;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	EInputActionValueType                         Value_Type;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331B[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0018(0x0018)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEnhancedActionKeyMapping              CallFunc_Array_Get_Item;                           // 0x0040(0x0050)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331C[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name) == 0x000008, "Wrong alignment on ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name");
static_assert(sizeof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name) == 0x0000B0, "Wrong size on ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, Input_Name) == 0x000000, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::Input_Name' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, Value_Type) == 0x000010, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::Value_Type' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, Key) == 0x000018, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::Key' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, Temp_int_Array_Index_Variable) == 0x000030, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, CallFunc_Array_Get_Item) == 0x000040, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, CallFunc_Less_IntInt_ReturnValue) == 0x000090, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, CallFunc_GetDisplayName_ReturnValue) == 0x000098, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000A8, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x0000A9, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name, CallFunc_BooleanAND_ReturnValue) == 0x0000AA, "Member 'ControlsKeyBindingsWidgetBP_C_F_Get_Input_by_Name::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ControlsKeyBindingsWidgetBP.ControlsKeyBindingsWidgetBP_C.Old_LeaveEditMode
// 0x0030 (0x0030 - 0x0000)
struct ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractableUserWidget_C*              CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331D[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOptionsActionBinder_C*                 K2Node_DynamicCast_AsOptions_Action_Binder;        // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode) == 0x000008, "Wrong alignment on ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode");
static_assert(sizeof(ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode) == 0x000030, "Wrong size on ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode, Temp_int_Array_Index_Variable) == 0x000000, "Member 'ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode, CallFunc_Array_Get_Item) == 0x000010, "Member 'ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode, K2Node_DynamicCast_AsOptions_Action_Binder) == 0x000020, "Member 'ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode::K2Node_DynamicCast_AsOptions_Action_Binder' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'ControlsKeyBindingsWidgetBP_C_Old_LeaveEditMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ControlsKeyBindingsWidgetBP.ControlsKeyBindingsWidgetBP_C.ResetKeyBindings
// 0x0020 (0x0020 - 0x0000)
struct ControlsKeyBindingsWidgetBP_C_ResetKeyBindings final
{
public:
	TArray<struct FInputAxisKeyMapping>           DefaultAxisMappings;                               // 0x0000(0x0010)(Edit, BlueprintVisible)
	TArray<struct FInputActionKeyMapping>         DefaultActionMappings;                             // 0x0010(0x0010)(Edit, BlueprintVisible)
};
static_assert(alignof(ControlsKeyBindingsWidgetBP_C_ResetKeyBindings) == 0x000008, "Wrong alignment on ControlsKeyBindingsWidgetBP_C_ResetKeyBindings");
static_assert(sizeof(ControlsKeyBindingsWidgetBP_C_ResetKeyBindings) == 0x000020, "Wrong size on ControlsKeyBindingsWidgetBP_C_ResetKeyBindings");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_ResetKeyBindings, DefaultAxisMappings) == 0x000000, "Member 'ControlsKeyBindingsWidgetBP_C_ResetKeyBindings::DefaultAxisMappings' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_ResetKeyBindings, DefaultActionMappings) == 0x000010, "Member 'ControlsKeyBindingsWidgetBP_C_ResetKeyBindings::DefaultActionMappings' has a wrong offset!");

// Function ControlsKeyBindingsWidgetBP.ControlsKeyBindingsWidgetBP_C.UpdateDescription
// 0x0008 (0x0008 - 0x0000)
struct ControlsKeyBindingsWidgetBP_C_UpdateDescription final
{
public:
	class UInteractableUserWidget_C*              InWidget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ControlsKeyBindingsWidgetBP_C_UpdateDescription) == 0x000008, "Wrong alignment on ControlsKeyBindingsWidgetBP_C_UpdateDescription");
static_assert(sizeof(ControlsKeyBindingsWidgetBP_C_UpdateDescription) == 0x000008, "Wrong size on ControlsKeyBindingsWidgetBP_C_UpdateDescription");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_UpdateDescription, InWidget) == 0x000000, "Member 'ControlsKeyBindingsWidgetBP_C_UpdateDescription::InWidget' has a wrong offset!");

// Function ControlsKeyBindingsWidgetBP.ControlsKeyBindingsWidgetBP_C.OnNavigationEnter
// 0x0010 (0x0010 - 0x0000)
struct ControlsKeyBindingsWidgetBP_C_OnNavigationEnter final
{
public:
	class UInteractableMenuWidgetBP_C*            NavigateFromMenu;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_bIsGamepadBeingUsed;                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_PlayerIndex;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ControlsKeyBindingsWidgetBP_C_OnNavigationEnter) == 0x000008, "Wrong alignment on ControlsKeyBindingsWidgetBP_C_OnNavigationEnter");
static_assert(sizeof(ControlsKeyBindingsWidgetBP_C_OnNavigationEnter) == 0x000010, "Wrong size on ControlsKeyBindingsWidgetBP_C_OnNavigationEnter");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_OnNavigationEnter, NavigateFromMenu) == 0x000000, "Member 'ControlsKeyBindingsWidgetBP_C_OnNavigationEnter::NavigateFromMenu' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_OnNavigationEnter, Param_bIsGamepadBeingUsed) == 0x000008, "Member 'ControlsKeyBindingsWidgetBP_C_OnNavigationEnter::Param_bIsGamepadBeingUsed' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_OnNavigationEnter, Param_PlayerIndex) == 0x00000C, "Member 'ControlsKeyBindingsWidgetBP_C_OnNavigationEnter::Param_PlayerIndex' has a wrong offset!");

// Function ControlsKeyBindingsWidgetBP.ControlsKeyBindingsWidgetBP_C.OnNavigationExit
// 0x0010 (0x0010 - 0x0000)
struct ControlsKeyBindingsWidgetBP_C_OnNavigationExit final
{
public:
	class UInteractableMenuWidgetBP_C*            NavigateToMenu;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UInteractableMenuWidgetBP_C*            NavigateFromMenu;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ControlsKeyBindingsWidgetBP_C_OnNavigationExit) == 0x000008, "Wrong alignment on ControlsKeyBindingsWidgetBP_C_OnNavigationExit");
static_assert(sizeof(ControlsKeyBindingsWidgetBP_C_OnNavigationExit) == 0x000010, "Wrong size on ControlsKeyBindingsWidgetBP_C_OnNavigationExit");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_OnNavigationExit, NavigateToMenu) == 0x000000, "Member 'ControlsKeyBindingsWidgetBP_C_OnNavigationExit::NavigateToMenu' has a wrong offset!");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_OnNavigationExit, NavigateFromMenu) == 0x000008, "Member 'ControlsKeyBindingsWidgetBP_C_OnNavigationExit::NavigateFromMenu' has a wrong offset!");

// Function ControlsKeyBindingsWidgetBP.ControlsKeyBindingsWidgetBP_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ControlsKeyBindingsWidgetBP_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ControlsKeyBindingsWidgetBP_C_PreConstruct) == 0x000001, "Wrong alignment on ControlsKeyBindingsWidgetBP_C_PreConstruct");
static_assert(sizeof(ControlsKeyBindingsWidgetBP_C_PreConstruct) == 0x000001, "Wrong size on ControlsKeyBindingsWidgetBP_C_PreConstruct");
static_assert(offsetof(ControlsKeyBindingsWidgetBP_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ControlsKeyBindingsWidgetBP_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

