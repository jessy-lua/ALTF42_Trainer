#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFL_TrainAndRail

#include "Basic.hpp"

#include "S_TrackSpline_structs.hpp"
#include "S_TrackPassThroughInfo_structs.hpp"
#include "S_TrackConnection_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.FindLocationOnTracks
// 0x0530 (0x0530 - 0x0000)
struct BFL_TrainAndRail_C_FindLocationOnTracks final
{
public:
	class ABP_TrainTrack_C*                       StartingTrack;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_TrackSpline                         StartingTrackSpline;                               // 0x0008(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	double                                        StartingDistance;                                  // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RequestedDistance;                                 // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert;                                            // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_216B[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_TrackPassThroughInfo>        CurrentPassThroughInfo;                            // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_TrainTrack_C*                       EndTrack;                                          // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_TrackSpline                         EndTrackSpline;                                    // 0x0078(0x0038)(Parm, OutParm, HasGetValueTypeHash)
	double                                        EndDistance;                                       // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EndReached;                                        // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvertedDirOfTravel;                               // 0x00B9(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_216C[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_TrackPassThroughInfo>        TravelInfo;                                        // 0x00C0(0x0010)(Parm, OutParm)
	TArray<struct FS_TrackPassThroughInfo>        UpdatedPassThroughInfo;                            // 0x00D0(0x0010)(Edit, BlueprintVisible)
	bool                                          PassedInDoInvert;                                  // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoInvert;                                          // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_216D[0x6];                                     // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StartTrackSplineLength;                            // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReqDistance;                                       // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartDistance;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_TrackSpline                         StartTrackSpline;                                  // 0x0100(0x0038)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class ABP_TrainTrack_C*                       StartTrack;                                        // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLowestFloat_Lowest;                    // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLowestFloat_Highest;                   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLowestFloat_Lowest_1;                  // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLowestFloat_Highest_1;                 // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_TrackPassThroughInfo                K2Node_MakeStruct_S_TrackPassThroughInfo;          // 0x0198(0x0050)(HasGetValueTypeHash)
	double                                        CallFunc_GetLowestFloat_Lowest_2;                  // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLowestFloat_Highest_2;                 // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_216E[0x4];                                     // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_TrackPassThroughInfo                K2Node_MakeStruct_S_TrackPassThroughInfo_1;        // 0x0200(0x0050)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_216F[0x4];                                     // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_TrackPassThroughInfo                K2Node_MakeStruct_S_TrackPassThroughInfo_2;        // 0x0258(0x0050)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2170[0x4];                                     // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLowestFloat_Lowest_3;                  // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLowestFloat_Highest_3;                 // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_TrackPassThroughInfo                K2Node_MakeStruct_S_TrackPassThroughInfo_3;        // 0x02C8(0x0050)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2171[0x4];                                     // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_TrackConnection                     CallFunc_PickConnectionToUse_Connection;           // 0x0320(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PickConnectionToUse_ConnectionFound;      // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2172[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_4;           // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2173[0x7];                                     // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_TrackSpline                         CallFunc_GetTrackSplineByIndex_TrackSpline;        // 0x0348(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_GetTrackSplineByIndex_ValidTrackSpline;   // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2174[0x3];                                     // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_TrainTrack_C*                       CallFunc_FindLocationOnTracks_EndTrack;            // 0x0390(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_TrackSpline                         CallFunc_FindLocationOnTracks_EndTrackSpline;      // 0x0398(0x0038)(HasGetValueTypeHash)
	double                                        CallFunc_FindLocationOnTracks_EndDistance;         // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindLocationOnTracks_EndReached;          // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindLocationOnTracks_InvertedDirOfTravel; // 0x03D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2175[0x6];                                     // 0x03DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_TrackPassThroughInfo>        CallFunc_FindLocationOnTracks_TravelInfo;          // 0x03E0(0x0010)(ReferenceParm)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_5;           // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2176[0x7];                                     // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_TrackConnection                     CallFunc_PickConnectionToUse_Connection_1;         // 0x0408(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PickConnectionToUse_ConnectionFound_1;    // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0419(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2177[0x6];                                     // 0x041A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_TrackSpline                         CallFunc_GetTrackSplineByIndex_TrackSpline_1;      // 0x0430(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_GetTrackSplineByIndex_ValidTrackSpline_1; // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2178[0x3];                                     // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSplineLength_ReturnValue_1;            // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_TrainTrack_C*                       CallFunc_FindLocationOnTracks_EndTrack_1;          // 0x0478(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_TrackSpline                         CallFunc_FindLocationOnTracks_EndTrackSpline_1;    // 0x0480(0x0038)(HasGetValueTypeHash)
	double                                        CallFunc_FindLocationOnTracks_EndDistance_1;       // 0x04B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindLocationOnTracks_EndReached_1;        // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindLocationOnTracks_InvertedDirOfTravel_1; // 0x04C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2179[0x6];                                     // 0x04C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_TrackPassThroughInfo>        CallFunc_FindLocationOnTracks_TravelInfo_1;        // 0x04C8(0x0010)(ReferenceParm)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_6;           // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_7;           // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_217A[0x3];                                     // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSplineLength_ReturnValue_2;            // 0x04EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_217B[0x3];                                     // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_MakeStruct_StartDistance_10_254658894684CF04A117679404B3A21E_ImplicitCast; // 0x04F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_EndDistance_11_9675F6B64780FA1902EA6D97613C751E_ImplicitCast; // 0x04F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_StartDistance_10_254658894684CF04A117679404B3A21E_ImplicitCast_1; // 0x04FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_EndDistance_11_9675F6B64780FA1902EA6D97613C751E_ImplicitCast_1; // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_StartDistance_10_254658894684CF04A117679404B3A21E_ImplicitCast_2; // 0x0504(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_EndDistance_11_9675F6B64780FA1902EA6D97613C751E_ImplicitCast_2; // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_StartDistance_10_254658894684CF04A117679404B3A21E_ImplicitCast_3; // 0x050C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_EndDistance_11_9675F6B64780FA1902EA6D97613C751E_ImplicitCast_3; // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_217C[0x4];                                     // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_B_ImplicitCast;               // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_StartTrackSplineLength_ImplicitCast; // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TrainAndRail_C_FindLocationOnTracks) == 0x000008, "Wrong alignment on BFL_TrainAndRail_C_FindLocationOnTracks");
static_assert(sizeof(BFL_TrainAndRail_C_FindLocationOnTracks) == 0x000530, "Wrong size on BFL_TrainAndRail_C_FindLocationOnTracks");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, StartingTrack) == 0x000000, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::StartingTrack' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, StartingTrackSpline) == 0x000008, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::StartingTrackSpline' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, StartingDistance) == 0x000040, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::StartingDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, RequestedDistance) == 0x000048, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::RequestedDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, Invert) == 0x000050, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::Invert' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CurrentPassThroughInfo) == 0x000058, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CurrentPassThroughInfo' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, __WorldContext) == 0x000068, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, EndTrack) == 0x000070, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::EndTrack' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, EndTrackSpline) == 0x000078, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::EndTrackSpline' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, EndDistance) == 0x0000B0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::EndDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, EndReached) == 0x0000B8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::EndReached' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, InvertedDirOfTravel) == 0x0000B9, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::InvertedDirOfTravel' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, TravelInfo) == 0x0000C0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::TravelInfo' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, UpdatedPassThroughInfo) == 0x0000D0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::UpdatedPassThroughInfo' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, PassedInDoInvert) == 0x0000E0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::PassedInDoInvert' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, DoInvert) == 0x0000E1, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::DoInvert' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, StartTrackSplineLength) == 0x0000E8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::StartTrackSplineLength' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, ReqDistance) == 0x0000F0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::ReqDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, StartDistance) == 0x0000F8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::StartDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, StartTrackSpline) == 0x000100, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::StartTrackSpline' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, StartTrack) == 0x000138, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::StartTrack' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000140, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000148, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000150, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetLowestFloat_Lowest) == 0x000158, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetLowestFloat_Lowest' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetLowestFloat_Highest) == 0x000160, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetLowestFloat_Highest' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_SelectFloat_ReturnValue) == 0x000168, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000170, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetLowestFloat_Lowest_1) == 0x000178, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetLowestFloat_Lowest_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetLowestFloat_Highest_1) == 0x000180, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetLowestFloat_Highest_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000188, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FClamp_ReturnValue) == 0x000190, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_MakeStruct_S_TrackPassThroughInfo) == 0x000198, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_MakeStruct_S_TrackPassThroughInfo' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetLowestFloat_Lowest_2) == 0x0001E8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetLowestFloat_Lowest_2' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetLowestFloat_Highest_2) == 0x0001F0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetLowestFloat_Highest_2' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Array_Add_ReturnValue) == 0x0001F8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_MakeStruct_S_TrackPassThroughInfo_1) == 0x000200, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_MakeStruct_S_TrackPassThroughInfo_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Array_Add_ReturnValue_1) == 0x000250, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_MakeStruct_S_TrackPassThroughInfo_2) == 0x000258, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_MakeStruct_S_TrackPassThroughInfo_2' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Array_Add_ReturnValue_2) == 0x0002A8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x0002B0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetLowestFloat_Lowest_3) == 0x0002B8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetLowestFloat_Lowest_3' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetLowestFloat_Highest_3) == 0x0002C0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetLowestFloat_Highest_3' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_MakeStruct_S_TrackPassThroughInfo_3) == 0x0002C8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_MakeStruct_S_TrackPassThroughInfo_3' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Array_Add_ReturnValue_3) == 0x000318, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_PickConnectionToUse_Connection) == 0x000320, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_PickConnectionToUse_Connection' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_PickConnectionToUse_ConnectionFound) == 0x000330, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_PickConnectionToUse_ConnectionFound' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Add_DoubleDouble_ReturnValue_4) == 0x000338, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Add_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000340, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetTrackSplineByIndex_TrackSpline) == 0x000348, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetTrackSplineByIndex_TrackSpline' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetTrackSplineByIndex_ValidTrackSpline) == 0x000380, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetTrackSplineByIndex_ValidTrackSpline' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetSplineLength_ReturnValue) == 0x000384, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_SelectFloat_ReturnValue_1) == 0x000388, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FindLocationOnTracks_EndTrack) == 0x000390, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FindLocationOnTracks_EndTrack' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FindLocationOnTracks_EndTrackSpline) == 0x000398, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FindLocationOnTracks_EndTrackSpline' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FindLocationOnTracks_EndDistance) == 0x0003D0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FindLocationOnTracks_EndDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FindLocationOnTracks_EndReached) == 0x0003D8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FindLocationOnTracks_EndReached' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FindLocationOnTracks_InvertedDirOfTravel) == 0x0003D9, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FindLocationOnTracks_InvertedDirOfTravel' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FindLocationOnTracks_TravelInfo) == 0x0003E0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FindLocationOnTracks_TravelInfo' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Add_DoubleDouble_ReturnValue_5) == 0x0003F0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Add_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Abs_ReturnValue) == 0x0003F8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000400, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_PickConnectionToUse_Connection_1) == 0x000408, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_PickConnectionToUse_Connection_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_PickConnectionToUse_ConnectionFound_1) == 0x000418, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_PickConnectionToUse_ConnectionFound_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000419, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000420, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000428, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetTrackSplineByIndex_TrackSpline_1) == 0x000430, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetTrackSplineByIndex_TrackSpline_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetTrackSplineByIndex_ValidTrackSpline_1) == 0x000468, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetTrackSplineByIndex_ValidTrackSpline_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetSplineLength_ReturnValue_1) == 0x00046C, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetSplineLength_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_SelectFloat_ReturnValue_2) == 0x000470, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FindLocationOnTracks_EndTrack_1) == 0x000478, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FindLocationOnTracks_EndTrack_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FindLocationOnTracks_EndTrackSpline_1) == 0x000480, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FindLocationOnTracks_EndTrackSpline_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FindLocationOnTracks_EndDistance_1) == 0x0004B8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FindLocationOnTracks_EndDistance_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FindLocationOnTracks_EndReached_1) == 0x0004C0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FindLocationOnTracks_EndReached_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FindLocationOnTracks_InvertedDirOfTravel_1) == 0x0004C1, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FindLocationOnTracks_InvertedDirOfTravel_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_FindLocationOnTracks_TravelInfo_1) == 0x0004C8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_FindLocationOnTracks_TravelInfo_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Add_DoubleDouble_ReturnValue_6) == 0x0004D8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Add_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Add_DoubleDouble_ReturnValue_7) == 0x0004E0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Add_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x0004E8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_GetSplineLength_ReturnValue_2) == 0x0004EC, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_GetSplineLength_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0004F0, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_MakeStruct_StartDistance_10_254658894684CF04A117679404B3A21E_ImplicitCast) == 0x0004F4, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_MakeStruct_StartDistance_10_254658894684CF04A117679404B3A21E_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_MakeStruct_EndDistance_11_9675F6B64780FA1902EA6D97613C751E_ImplicitCast) == 0x0004F8, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_MakeStruct_EndDistance_11_9675F6B64780FA1902EA6D97613C751E_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_MakeStruct_StartDistance_10_254658894684CF04A117679404B3A21E_ImplicitCast_1) == 0x0004FC, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_MakeStruct_StartDistance_10_254658894684CF04A117679404B3A21E_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_MakeStruct_EndDistance_11_9675F6B64780FA1902EA6D97613C751E_ImplicitCast_1) == 0x000500, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_MakeStruct_EndDistance_11_9675F6B64780FA1902EA6D97613C751E_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_MakeStruct_StartDistance_10_254658894684CF04A117679404B3A21E_ImplicitCast_2) == 0x000504, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_MakeStruct_StartDistance_10_254658894684CF04A117679404B3A21E_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_MakeStruct_EndDistance_11_9675F6B64780FA1902EA6D97613C751E_ImplicitCast_2) == 0x000508, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_MakeStruct_EndDistance_11_9675F6B64780FA1902EA6D97613C751E_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_MakeStruct_StartDistance_10_254658894684CF04A117679404B3A21E_ImplicitCast_3) == 0x00050C, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_MakeStruct_StartDistance_10_254658894684CF04A117679404B3A21E_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_MakeStruct_EndDistance_11_9675F6B64780FA1902EA6D97613C751E_ImplicitCast_3) == 0x000510, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_MakeStruct_EndDistance_11_9675F6B64780FA1902EA6D97613C751E_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_SelectFloat_B_ImplicitCast) == 0x000518, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_SelectFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, CallFunc_SelectFloat_A_ImplicitCast) == 0x000520, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_FindLocationOnTracks, K2Node_VariableSet_StartTrackSplineLength_ImplicitCast) == 0x000528, "Member 'BFL_TrainAndRail_C_FindLocationOnTracks::K2Node_VariableSet_StartTrackSplineLength_ImplicitCast' has a wrong offset!");

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetClosestDistanceBetweenSplinePoints
// 0x0108 (0x0108 - 0x0000)
struct BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         PointA;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PointB;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLocation;                                     // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumDistanceSamples;                                // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_217D[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ClosestDistance;                                   // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnDistance;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceToClosestPoint;                            // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentSampleDistance;                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceSample;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndPoint;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartPoint;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EndDistance;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartDistance;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_217E[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_217F[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2180[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDistanceBetweenLocations_Distance;     // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2181[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue; // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1; // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2182[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast; // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2183[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_EndDistance_ImplicitCast;       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_StartDistance_ImplicitCast;     // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints) == 0x000008, "Wrong alignment on BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints");
static_assert(sizeof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints) == 0x000108, "Wrong size on BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, Spline) == 0x000000, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::Spline' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, PointA) == 0x000008, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::PointA' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, PointB) == 0x00000C, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::PointB' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, WorldLocation) == 0x000010, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::WorldLocation' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, NumDistanceSamples) == 0x000028, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::NumDistanceSamples' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, __WorldContext) == 0x000030, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, ClosestDistance) == 0x000038, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::ClosestDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, ReturnDistance) == 0x000040, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::ReturnDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, DistanceToClosestPoint) == 0x000048, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::DistanceToClosestPoint' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CurrentSampleDistance) == 0x000050, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CurrentSampleDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, DistanceSample) == 0x000058, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::DistanceSample' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, EndPoint) == 0x000060, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::EndPoint' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, StartPoint) == 0x000064, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::StartPoint' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, EndDistance) == 0x000068, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::EndDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, StartDistance) == 0x000070, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::StartDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, Temp_int_Variable) == 0x000078, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000080, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000088, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_Add_IntInt_ReturnValue) == 0x00008C, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_Greater_IntInt_ReturnValue) == 0x000090, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_SelectInt_ReturnValue) == 0x000094, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000098, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x0000A8, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_GetDistanceBetweenLocations_Distance) == 0x0000C0, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_GetDistanceBetweenLocations_Distance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue) == 0x0000E0, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1) == 0x0000E4, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000E8, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_SelectInt_ReturnValue_1) == 0x0000EC, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast) == 0x0000F0, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, K2Node_VariableSet_EndDistance_ImplicitCast) == 0x0000F8, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::K2Node_VariableSet_EndDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints, K2Node_VariableSet_StartDistance_ImplicitCast) == 0x000100, "Member 'BFL_TrainAndRail_C_GetClosestDistanceBetweenSplinePoints::K2Node_VariableSet_StartDistance_ImplicitCast' has a wrong offset!");

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetClosestDistanceOnSpline
// 0x00E8 (0x00E8 - 0x0000)
struct BFL_TrainAndRail_C_GetClosestDistanceOnSpline final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DistanceSampleCount;                               // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2184[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceOnSpline;                                  // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ValidDistance;                                     // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ValidReturn;                                       // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2185[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PointB;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PointA;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2186[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LowestDistance;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetClosestDistanceBetweenSplinePoints_ClosestDistance; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetClosestSplinePoint_ClosestPointIndex;  // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2187[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x0070(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetClosestSplinePoint_ClosestPointIndex_1; // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2188[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2189[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline) == 0x000008, "Wrong alignment on BFL_TrainAndRail_C_GetClosestDistanceOnSpline");
static_assert(sizeof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline) == 0x0000E8, "Wrong size on BFL_TrainAndRail_C_GetClosestDistanceOnSpline");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, Spline) == 0x000000, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::Spline' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, WorldLocation) == 0x000008, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::WorldLocation' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, DistanceSampleCount) == 0x000020, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::DistanceSampleCount' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, __WorldContext) == 0x000028, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, DistanceOnSpline) == 0x000030, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::DistanceOnSpline' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, ValidDistance) == 0x000038, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::ValidDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, ValidReturn) == 0x000039, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::ValidReturn' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, PointB) == 0x00003C, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::PointB' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, PointA) == 0x000040, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::PointA' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, LowestDistance) == 0x000048, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::LowestDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, CallFunc_GetClosestDistanceBetweenSplinePoints_ClosestDistance) == 0x000050, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::CallFunc_GetClosestDistanceBetweenSplinePoints_ClosestDistance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, K2Node_MakeArray_Array) == 0x000058, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, CallFunc_GetClosestSplinePoint_ClosestPointIndex) == 0x000068, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::CallFunc_GetClosestSplinePoint_ClosestPointIndex' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, K2Node_MakeArray_Array_1) == 0x000070, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, CallFunc_GetClosestSplinePoint_ClosestPointIndex_1) == 0x000080, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::CallFunc_GetClosestSplinePoint_ClosestPointIndex_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, CallFunc_Conv_IntToString_ReturnValue) == 0x000088, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000098, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, CallFunc_Concat_StrStr_ReturnValue) == 0x0000A8, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000B8, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000C8, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000D0, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x0000E0, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestDistanceOnSpline, CallFunc_BooleanAND_ReturnValue) == 0x0000E1, "Member 'BFL_TrainAndRail_C_GetClosestDistanceOnSpline::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetClosestSplinePoint
// 0x0088 (0x0088 - 0x0000)
struct BFL_TrainAndRail_C_GetClosestSplinePoint final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 IgnorePoints;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                Location;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ClosestPointIndex;                                 // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnIndex;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceToPoint;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_218A[0x6];                                     // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_218B[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetDistanceBetweenLocations_Distance;     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TrainAndRail_C_GetClosestSplinePoint) == 0x000008, "Wrong alignment on BFL_TrainAndRail_C_GetClosestSplinePoint");
static_assert(sizeof(BFL_TrainAndRail_C_GetClosestSplinePoint) == 0x000088, "Wrong size on BFL_TrainAndRail_C_GetClosestSplinePoint");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, Spline) == 0x000000, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::Spline' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, IgnorePoints) == 0x000008, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::IgnorePoints' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, Location) == 0x000018, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::Location' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, __WorldContext) == 0x000030, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, ClosestPointIndex) == 0x000038, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::ClosestPointIndex' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, ReturnIndex) == 0x00003C, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::ReturnIndex' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, DistanceToPoint) == 0x000040, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::DistanceToPoint' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, Temp_int_Variable) == 0x000048, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x00004C, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000050, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000051, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x000058, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, CallFunc_Array_Contains_ReturnValue) == 0x000070, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, CallFunc_GetDistanceBetweenLocations_Distance) == 0x000078, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::CallFunc_GetDistanceBetweenLocations_Distance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetClosestSplinePoint, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000084, "Member 'BFL_TrainAndRail_C_GetClosestSplinePoint::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetDistanceBetweenLocations
// 0x0060 (0x0060 - 0x0000)
struct BFL_TrainAndRail_C_GetDistanceBetweenLocations final
{
public:
	struct FVector                                PointA;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PointB;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Distance;                                          // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TrainAndRail_C_GetDistanceBetweenLocations) == 0x000008, "Wrong alignment on BFL_TrainAndRail_C_GetDistanceBetweenLocations");
static_assert(sizeof(BFL_TrainAndRail_C_GetDistanceBetweenLocations) == 0x000060, "Wrong size on BFL_TrainAndRail_C_GetDistanceBetweenLocations");
static_assert(offsetof(BFL_TrainAndRail_C_GetDistanceBetweenLocations, PointA) == 0x000000, "Member 'BFL_TrainAndRail_C_GetDistanceBetweenLocations::PointA' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetDistanceBetweenLocations, PointB) == 0x000018, "Member 'BFL_TrainAndRail_C_GetDistanceBetweenLocations::PointB' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetDistanceBetweenLocations, __WorldContext) == 0x000030, "Member 'BFL_TrainAndRail_C_GetDistanceBetweenLocations::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetDistanceBetweenLocations, Distance) == 0x000038, "Member 'BFL_TrainAndRail_C_GetDistanceBetweenLocations::Distance' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetDistanceBetweenLocations, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000040, "Member 'BFL_TrainAndRail_C_GetDistanceBetweenLocations::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetDistanceBetweenLocations, CallFunc_VSize_ReturnValue) == 0x000058, "Member 'BFL_TrainAndRail_C_GetDistanceBetweenLocations::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetInternalCompTag
// 0x0010 (0x0010 - 0x0000)
struct BFL_TrainAndRail_C_GetInternalCompTag final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   IgnoreTag;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TrainAndRail_C_GetInternalCompTag) == 0x000008, "Wrong alignment on BFL_TrainAndRail_C_GetInternalCompTag");
static_assert(sizeof(BFL_TrainAndRail_C_GetInternalCompTag) == 0x000010, "Wrong size on BFL_TrainAndRail_C_GetInternalCompTag");
static_assert(offsetof(BFL_TrainAndRail_C_GetInternalCompTag, __WorldContext) == 0x000000, "Member 'BFL_TrainAndRail_C_GetInternalCompTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetInternalCompTag, IgnoreTag) == 0x000008, "Member 'BFL_TrainAndRail_C_GetInternalCompTag::IgnoreTag' has a wrong offset!");

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetLowestFloat
// 0x0040 (0x0040 - 0x0000)
struct BFL_TrainAndRail_C_GetLowestFloat final
{
public:
	double                                        ValueA;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ValueB;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Lowest;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Highest;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_218C[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TrainAndRail_C_GetLowestFloat) == 0x000008, "Wrong alignment on BFL_TrainAndRail_C_GetLowestFloat");
static_assert(sizeof(BFL_TrainAndRail_C_GetLowestFloat) == 0x000040, "Wrong size on BFL_TrainAndRail_C_GetLowestFloat");
static_assert(offsetof(BFL_TrainAndRail_C_GetLowestFloat, ValueA) == 0x000000, "Member 'BFL_TrainAndRail_C_GetLowestFloat::ValueA' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetLowestFloat, ValueB) == 0x000008, "Member 'BFL_TrainAndRail_C_GetLowestFloat::ValueB' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetLowestFloat, __WorldContext) == 0x000010, "Member 'BFL_TrainAndRail_C_GetLowestFloat::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetLowestFloat, Lowest) == 0x000018, "Member 'BFL_TrainAndRail_C_GetLowestFloat::Lowest' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetLowestFloat, Highest) == 0x000020, "Member 'BFL_TrainAndRail_C_GetLowestFloat::Highest' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetLowestFloat, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000028, "Member 'BFL_TrainAndRail_C_GetLowestFloat::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetLowestFloat, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000029, "Member 'BFL_TrainAndRail_C_GetLowestFloat::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetLowestFloat, CallFunc_SelectFloat_ReturnValue) == 0x000030, "Member 'BFL_TrainAndRail_C_GetLowestFloat::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetLowestFloat, CallFunc_SelectFloat_ReturnValue_1) == 0x000038, "Member 'BFL_TrainAndRail_C_GetLowestFloat::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetStartAndEndLocationOfSpline
// 0x0080 (0x0080 - 0x0000)
struct BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline final
{
public:
	class USplineComponent*                       SplineComp;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartPoint;                                        // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPoint;                                          // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_218D[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_218E[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_1;   // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline) == 0x000008, "Wrong alignment on BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline");
static_assert(sizeof(BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline) == 0x000080, "Wrong size on BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline");
static_assert(offsetof(BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline, SplineComp) == 0x000000, "Member 'BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline::SplineComp' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline, __WorldContext) == 0x000008, "Member 'BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline, StartPoint) == 0x000010, "Member 'BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline::StartPoint' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline, EndPoint) == 0x000028, "Member 'BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline::EndPoint' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000040, "Member 'BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x000048, "Member 'BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline, CallFunc_Subtract_IntInt_ReturnValue) == 0x000060, "Member 'BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline, CallFunc_GetLocationAtSplinePoint_ReturnValue_1) == 0x000068, "Member 'BFL_TrainAndRail_C_GetStartAndEndLocationOfSpline::CallFunc_GetLocationAtSplinePoint_ReturnValue_1' has a wrong offset!");

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetTrackIgnoreTag
// 0x0010 (0x0010 - 0x0000)
struct BFL_TrainAndRail_C_GetTrackIgnoreTag final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   IgnoreTag;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TrainAndRail_C_GetTrackIgnoreTag) == 0x000008, "Wrong alignment on BFL_TrainAndRail_C_GetTrackIgnoreTag");
static_assert(sizeof(BFL_TrainAndRail_C_GetTrackIgnoreTag) == 0x000010, "Wrong size on BFL_TrainAndRail_C_GetTrackIgnoreTag");
static_assert(offsetof(BFL_TrainAndRail_C_GetTrackIgnoreTag, __WorldContext) == 0x000000, "Member 'BFL_TrainAndRail_C_GetTrackIgnoreTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetTrackIgnoreTag, IgnoreTag) == 0x000008, "Member 'BFL_TrainAndRail_C_GetTrackIgnoreTag::IgnoreTag' has a wrong offset!");

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.GetUsableSplinesFromTrack
// 0x0078 (0x0078 - 0x0000)
struct BFL_TrainAndRail_C_GetUsableSplinesFromTrack final
{
public:
	class ABP_TrainTrack_C*                       SourceTrack;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineComponent*>               UsableSplineComponents;                            // 0x0010(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class USplineComponent*>               UsableComponents;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetTrackIgnoreTag_IgnoreTag;              // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_218F[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USplineComponent*>               CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2190[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComponentHasTag_ReturnValue;              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2191[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2192[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack) == 0x000008, "Wrong alignment on BFL_TrainAndRail_C_GetUsableSplinesFromTrack");
static_assert(sizeof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack) == 0x000078, "Wrong size on BFL_TrainAndRail_C_GetUsableSplinesFromTrack");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, SourceTrack) == 0x000000, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::SourceTrack' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, __WorldContext) == 0x000008, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, UsableSplineComponents) == 0x000010, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::UsableSplineComponents' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, UsableComponents) == 0x000020, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::UsableComponents' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, CallFunc_GetTrackIgnoreTag_IgnoreTag) == 0x000034, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::CallFunc_GetTrackIgnoreTag_IgnoreTag' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000040, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, CallFunc_Array_Get_Item) == 0x000058, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, CallFunc_ComponentHasTag_ReturnValue) == 0x000060, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::CallFunc_ComponentHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_GetUsableSplinesFromTrack, CallFunc_Array_Add_ReturnValue) == 0x000070, "Member 'BFL_TrainAndRail_C_GetUsableSplinesFromTrack::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.HasTrackSplines
// 0x0020 (0x0020 - 0x0000)
struct BFL_TrainAndRail_C_HasTrackSplines final
{
public:
	class ABP_TrainTrack_C*                       Track;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_HasTrackSplines;                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2193[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TrainAndRail_C_HasTrackSplines) == 0x000008, "Wrong alignment on BFL_TrainAndRail_C_HasTrackSplines");
static_assert(sizeof(BFL_TrainAndRail_C_HasTrackSplines) == 0x000020, "Wrong size on BFL_TrainAndRail_C_HasTrackSplines");
static_assert(offsetof(BFL_TrainAndRail_C_HasTrackSplines, Track) == 0x000000, "Member 'BFL_TrainAndRail_C_HasTrackSplines::Track' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_HasTrackSplines, __WorldContext) == 0x000008, "Member 'BFL_TrainAndRail_C_HasTrackSplines::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_HasTrackSplines, Param_HasTrackSplines) == 0x000010, "Member 'BFL_TrainAndRail_C_HasTrackSplines::Param_HasTrackSplines' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_HasTrackSplines, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BFL_TrainAndRail_C_HasTrackSplines::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_HasTrackSplines, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'BFL_TrainAndRail_C_HasTrackSplines::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BFL_TrainAndRail.BFL_TrainAndRail_C.IsValidTrackSplineIndex
// 0x0028 (0x0028 - 0x0000)
struct BFL_TrainAndRail_C_IsValidTrackSplineIndex final
{
public:
	class ABP_TrainTrack_C*                       Track;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         SplineIndex;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2194[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ValidIndex;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2195[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TrainAndRail_C_IsValidTrackSplineIndex) == 0x000008, "Wrong alignment on BFL_TrainAndRail_C_IsValidTrackSplineIndex");
static_assert(sizeof(BFL_TrainAndRail_C_IsValidTrackSplineIndex) == 0x000028, "Wrong size on BFL_TrainAndRail_C_IsValidTrackSplineIndex");
static_assert(offsetof(BFL_TrainAndRail_C_IsValidTrackSplineIndex, Track) == 0x000000, "Member 'BFL_TrainAndRail_C_IsValidTrackSplineIndex::Track' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_IsValidTrackSplineIndex, SplineIndex) == 0x000008, "Member 'BFL_TrainAndRail_C_IsValidTrackSplineIndex::SplineIndex' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_IsValidTrackSplineIndex, __WorldContext) == 0x000010, "Member 'BFL_TrainAndRail_C_IsValidTrackSplineIndex::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_IsValidTrackSplineIndex, ValidIndex) == 0x000018, "Member 'BFL_TrainAndRail_C_IsValidTrackSplineIndex::ValidIndex' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_IsValidTrackSplineIndex, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BFL_TrainAndRail_C_IsValidTrackSplineIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TrainAndRail_C_IsValidTrackSplineIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BFL_TrainAndRail_C_IsValidTrackSplineIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

