#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DefaultAI_DetectPlayerZone

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DefaultAI_DetectPlayerZone.DefaultAI_DetectPlayerZone_C
// 0x0030 (0x02C8 - 0x0298)
class ADefaultAI_DetectPlayerZone_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          OverlapCheck;                                      // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AAI_FieldDefault_Enemy_BP_C*>    CloseAI_List;                                      // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AALTF4_Loco_BP_C*                       ALTF4_Char;                                        // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Kniht_DetectArea_BP_OverlapCheck_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Kniht_DetectArea_BP_OverlapCheck_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void Enemy_ArrayList(bool Range_, class AAI_FieldDefault_Enemy_BP_C* CloseAI);
	void Enemy_DeleteArrayList(int32 Ai_ArrayInteger);
	void ExecuteUbergraph_DefaultAI_DetectPlayerZone(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DefaultAI_DetectPlayerZone_C">();
	}
	static class ADefaultAI_DetectPlayerZone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADefaultAI_DetectPlayerZone_C>();
	}
};
static_assert(alignof(ADefaultAI_DetectPlayerZone_C) == 0x000008, "Wrong alignment on ADefaultAI_DetectPlayerZone_C");
static_assert(sizeof(ADefaultAI_DetectPlayerZone_C) == 0x0002C8, "Wrong size on ADefaultAI_DetectPlayerZone_C");
static_assert(offsetof(ADefaultAI_DetectPlayerZone_C, UberGraphFrame) == 0x000298, "Member 'ADefaultAI_DetectPlayerZone_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ADefaultAI_DetectPlayerZone_C, OverlapCheck) == 0x0002A0, "Member 'ADefaultAI_DetectPlayerZone_C::OverlapCheck' has a wrong offset!");
static_assert(offsetof(ADefaultAI_DetectPlayerZone_C, DefaultSceneRoot) == 0x0002A8, "Member 'ADefaultAI_DetectPlayerZone_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ADefaultAI_DetectPlayerZone_C, CloseAI_List) == 0x0002B0, "Member 'ADefaultAI_DetectPlayerZone_C::CloseAI_List' has a wrong offset!");
static_assert(offsetof(ADefaultAI_DetectPlayerZone_C, ALTF4_Char) == 0x0002C0, "Member 'ADefaultAI_DetectPlayerZone_C::ALTF4_Char' has a wrong offset!");

}

