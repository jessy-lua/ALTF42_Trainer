#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FuncLib

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FuncLib.BP_FuncLib_C
// 0x0000 (0x0028 - 0x0028)
class UBP_FuncLib_C final : public UBlueprintFunctionLibrary
{
public:
	static void CombineTransform(const struct FTransform& A, const struct FTransform& B, class UObject* __WorldContext, struct FTransform* Out);
	static void GetHitBaseInfo(const struct FHitResult& Hit, class UObject* __WorldContext, struct FVector* Location, struct FVector* Normal);
	static void GetTransformLoc(const struct FTransform& Transform, class UObject* __WorldContext, struct FVector* Loc);
	static void GetTransformRot(const struct FTransform& Transform, class UObject* __WorldContext, struct FRotator* Rot);
	static void GetTransformScale(const struct FTransform& Transform, class UObject* __WorldContext, struct FVector* Scale);
	static void RandomRot(const struct FRotator& Min, const struct FRotator& Max, class UObject* __WorldContext, struct FRotator* Out);
	static void RandomRotSeeded(const struct FRotator& Min, const struct FRotator& Max, struct FRandomStream& Seed, class UObject* __WorldContext, struct FRotator* Out);
	static void RandomVector(const struct FVector& Min, const struct FVector& Max, class UObject* __WorldContext, struct FVector* Out);
	static void RandomVectorSeeded(const struct FVector& Min, const struct FVector& Max, const struct FRandomStream& Seed, class UObject* __WorldContext, struct FVector* Out);
	static void RelativeLocToWorld(const struct FVector& Relative, const struct FTransform& World, class UObject* __WorldContext, struct FVector* Return);
	static void RotatorMirror(const struct FRotator& Rotator, const struct FVector& Mirror, class UObject* __WorldContext, struct FRotator* Return);
	static void SetTransformLoc(struct FTransform& Transform, const struct FVector& Loc, class UObject* __WorldContext);
	static void SetTransformRot(struct FTransform& Transform, const struct FRotator& Rot, class UObject* __WorldContext);
	static void SetTransformScale(struct FTransform& Transform, const struct FVector& Scale, class UObject* __WorldContext);
	static bool TraceDown(const struct FVector& Original, double Distance, class UObject* __WorldContext, struct FHitResult* OutHit);
	static void WorldLocToRelative(const struct FVector& World, const struct FTransform& Relative, class UObject* __WorldContext, struct FVector* Return);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FuncLib_C">();
	}
	static class UBP_FuncLib_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FuncLib_C>();
	}
};
static_assert(alignof(UBP_FuncLib_C) == 0x000008, "Wrong alignment on UBP_FuncLib_C");
static_assert(sizeof(UBP_FuncLib_C) == 0x000028, "Wrong size on UBP_FuncLib_C");

}

