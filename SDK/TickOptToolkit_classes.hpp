#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TickOptToolkit

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "TickOptToolkit_structs.hpp"


namespace SDK
{

// Class TickOptToolkit.TickOptToolkitAnimUpdateRateOptComponent
// 0x0068 (0x0108 - 0x00A0)
class UTickOptToolkitAnimUpdateRateOptComponent final : public UActorComponent
{
public:
	ETickOptToolkitAnimUROMode                    AnimUpdateRateOptimizationsMode;                   // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2136[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 FramesSkippedScreenSizeThresholds;                 // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 LODToFramesSkipped;                                // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         NonRenderedFramesSkipped;                          // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxFramesSkippedForInterpolation;                  // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bForceEnableAnimUpdateRateOptimizations;           // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bDisableScreenSizeScale;                           // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2137[0x6];                                     // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTickOptToolkitUROOptimizationLevel> OptimizationLevels;                                // 0x00D8(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPrivate)
	TArray<class USkinnedMeshComponent*>          RegisteredSkinnedMeshComponents;                   // 0x00E8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2138[0x10];                                    // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RegisterDynamicSkinnedMeshComponent(class USkinnedMeshComponent* SkinnedMeshComponent);
	void SetAnimUpdateRateOptimizationsMode(ETickOptToolkitAnimUROMode InAnimUpdateRateOptimizationsMode);
	void SetDisableScreenSizeScale(bool bInDisableScreenSizeScale);
	void SetForceEnableAnimUpdateRateOptimizations(bool bInForceEnableAnimUpdateRateOptimizations);
	void SetFramesSkippedScreenSizeThresholds(const TArray<float>& InFramesSkippedScreenSizeThresholds);
	void SetLODToFramesSkipped(const TArray<int32>& InLODToFramesSkipped);
	void SetMaxFramesSkippedForInterpolation(int32 InMaxFramesSkippedForInterpolation);
	void SetNonRenderedFramesSkipped(int32 InNonRenderedFramesSkipped);

	ETickOptToolkitAnimUROMode GetAnimUpdateRateOptimizationsMode() const;
	const TArray<float> GetFramesSkippedScreenSizeThresholds() const;
	const TArray<int32> GetLODToFramesSkipped() const;
	int32 GetMaxFramesSkippedForInterpolation() const;
	int32 GetNonRenderedFramesSkipped() const;
	bool ShouldDisableScreenSizeScale() const;
	bool ShouldForceEnableAnimUpdateRateOptimizations() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickOptToolkitAnimUpdateRateOptComponent">();
	}
	static class UTickOptToolkitAnimUpdateRateOptComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickOptToolkitAnimUpdateRateOptComponent>();
	}
};
static_assert(alignof(UTickOptToolkitAnimUpdateRateOptComponent) == 0x000008, "Wrong alignment on UTickOptToolkitAnimUpdateRateOptComponent");
static_assert(sizeof(UTickOptToolkitAnimUpdateRateOptComponent) == 0x000108, "Wrong size on UTickOptToolkitAnimUpdateRateOptComponent");
static_assert(offsetof(UTickOptToolkitAnimUpdateRateOptComponent, AnimUpdateRateOptimizationsMode) == 0x0000A0, "Member 'UTickOptToolkitAnimUpdateRateOptComponent::AnimUpdateRateOptimizationsMode' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitAnimUpdateRateOptComponent, FramesSkippedScreenSizeThresholds) == 0x0000A8, "Member 'UTickOptToolkitAnimUpdateRateOptComponent::FramesSkippedScreenSizeThresholds' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitAnimUpdateRateOptComponent, LODToFramesSkipped) == 0x0000B8, "Member 'UTickOptToolkitAnimUpdateRateOptComponent::LODToFramesSkipped' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitAnimUpdateRateOptComponent, NonRenderedFramesSkipped) == 0x0000C8, "Member 'UTickOptToolkitAnimUpdateRateOptComponent::NonRenderedFramesSkipped' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitAnimUpdateRateOptComponent, MaxFramesSkippedForInterpolation) == 0x0000CC, "Member 'UTickOptToolkitAnimUpdateRateOptComponent::MaxFramesSkippedForInterpolation' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitAnimUpdateRateOptComponent, bForceEnableAnimUpdateRateOptimizations) == 0x0000D0, "Member 'UTickOptToolkitAnimUpdateRateOptComponent::bForceEnableAnimUpdateRateOptimizations' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitAnimUpdateRateOptComponent, bDisableScreenSizeScale) == 0x0000D1, "Member 'UTickOptToolkitAnimUpdateRateOptComponent::bDisableScreenSizeScale' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitAnimUpdateRateOptComponent, OptimizationLevels) == 0x0000D8, "Member 'UTickOptToolkitAnimUpdateRateOptComponent::OptimizationLevels' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitAnimUpdateRateOptComponent, RegisteredSkinnedMeshComponents) == 0x0000E8, "Member 'UTickOptToolkitAnimUpdateRateOptComponent::RegisteredSkinnedMeshComponents' has a wrong offset!");

// Class TickOptToolkit.TickOptToolkitFocusComponent
// 0x0010 (0x02B0 - 0x02A0)
class UTickOptToolkitFocusComponent final : public USceneComponent
{
public:
	class UTickOptToolkitSubsystem*               Subsystem;                                         // 0x02A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2139[0x4];                                     // 0x02A8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	ETickOptToolkitFocusLayer                     FocusLayer;                                        // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_213A[0x3];                                     // 0x02AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFocusLayer(ETickOptToolkitFocusLayer InFocusLayer);
	bool ShouldTrack();

	ETickOptToolkitFocusLayer GetFocusLayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickOptToolkitFocusComponent">();
	}
	static class UTickOptToolkitFocusComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickOptToolkitFocusComponent>();
	}
};
static_assert(alignof(UTickOptToolkitFocusComponent) == 0x000010, "Wrong alignment on UTickOptToolkitFocusComponent");
static_assert(sizeof(UTickOptToolkitFocusComponent) == 0x0002B0, "Wrong size on UTickOptToolkitFocusComponent");
static_assert(offsetof(UTickOptToolkitFocusComponent, Subsystem) == 0x0002A0, "Member 'UTickOptToolkitFocusComponent::Subsystem' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitFocusComponent, FocusLayer) == 0x0002AC, "Member 'UTickOptToolkitFocusComponent::FocusLayer' has a wrong offset!");

// Class TickOptToolkit.TickOptToolkitMimicComponent
// 0x0070 (0x0110 - 0x00A0)
class UTickOptToolkitMimicComponent final : public UActorComponent
{
public:
	TArray<class UActorComponent*>                TickControlledComponents;                          // 0x00A0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FTickControlledTimeline>        TickControlledTimelines;                           // 0x00B0(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UTickOptToolkitTargetComponent*         MimicTarget;                                       // 0x00C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bActorTickControl;                                 // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bComponentsTickControl;                            // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bTimelinesTickControl;                             // 0x00CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSyncTimelinesToWorld;                             // 0x00CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_213B[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTickChanged;                                     // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTickZoneChanged;                                 // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTickVisibilityChanged;                           // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTickEnabledChanged;                              // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void AddComponentTickControl(class UActorComponent* Component);
	void AddTimelineTickControl(class UTimelineComponent* Timeline, bool bSyncToWorld);
	void OnNewPawn(class APawn* Pawn);
	void RegisterMimicTarget(class UTickOptToolkitTargetComponent* Target);
	void RemoveComponentTickControl(class UActorComponent* Component);
	void RemoveTimelineTickControl(class UTimelineComponent* Timeline);
	void SetActorTickControl(bool bInActorTickControl);
	void SetComponentsTickControl(bool bInComponentsTickControl);
	void SetSyncTimelinesToWorld(bool bInSyncTimelinesToWorld);
	void SetTimelinesTickControl(bool bInTimelinesTickControl);
	void UnregisterMimicTarget();

	bool IsActorTickControl() const;
	bool IsComponentsTickControl() const;
	bool IsSyncTimelinesToWorld() const;
	bool IsTimelinesTickControl() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickOptToolkitMimicComponent">();
	}
	static class UTickOptToolkitMimicComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickOptToolkitMimicComponent>();
	}
};
static_assert(alignof(UTickOptToolkitMimicComponent) == 0x000008, "Wrong alignment on UTickOptToolkitMimicComponent");
static_assert(sizeof(UTickOptToolkitMimicComponent) == 0x000110, "Wrong size on UTickOptToolkitMimicComponent");
static_assert(offsetof(UTickOptToolkitMimicComponent, TickControlledComponents) == 0x0000A0, "Member 'UTickOptToolkitMimicComponent::TickControlledComponents' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitMimicComponent, TickControlledTimelines) == 0x0000B0, "Member 'UTickOptToolkitMimicComponent::TickControlledTimelines' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitMimicComponent, MimicTarget) == 0x0000C0, "Member 'UTickOptToolkitMimicComponent::MimicTarget' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitMimicComponent, bActorTickControl) == 0x0000C8, "Member 'UTickOptToolkitMimicComponent::bActorTickControl' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitMimicComponent, bComponentsTickControl) == 0x0000C9, "Member 'UTickOptToolkitMimicComponent::bComponentsTickControl' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitMimicComponent, bTimelinesTickControl) == 0x0000CA, "Member 'UTickOptToolkitMimicComponent::bTimelinesTickControl' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitMimicComponent, bSyncTimelinesToWorld) == 0x0000CB, "Member 'UTickOptToolkitMimicComponent::bSyncTimelinesToWorld' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitMimicComponent, OnTickChanged) == 0x0000D0, "Member 'UTickOptToolkitMimicComponent::OnTickChanged' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitMimicComponent, OnTickZoneChanged) == 0x0000E0, "Member 'UTickOptToolkitMimicComponent::OnTickZoneChanged' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitMimicComponent, OnTickVisibilityChanged) == 0x0000F0, "Member 'UTickOptToolkitMimicComponent::OnTickVisibilityChanged' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitMimicComponent, OnTickEnabledChanged) == 0x000100, "Member 'UTickOptToolkitMimicComponent::OnTickEnabledChanged' has a wrong offset!");

// Class TickOptToolkit.TickOptToolkitSettings
// 0x0088 (0x00B0 - 0x0028)
class UTickOptToolkitSettings final : public UObject
{
public:
	bool                                          bLimitTargetVisualizations;                        // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportFocusLayers;                               // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213D[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FocusLayerNameOverrides[0x10];                     // 0x002C(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BalancingFramesNum;                                // 0x00AC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickOptToolkitSettings">();
	}
	static class UTickOptToolkitSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickOptToolkitSettings>();
	}
};
static_assert(alignof(UTickOptToolkitSettings) == 0x000008, "Wrong alignment on UTickOptToolkitSettings");
static_assert(sizeof(UTickOptToolkitSettings) == 0x0000B0, "Wrong size on UTickOptToolkitSettings");
static_assert(offsetof(UTickOptToolkitSettings, bLimitTargetVisualizations) == 0x000028, "Member 'UTickOptToolkitSettings::bLimitTargetVisualizations' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitSettings, bSupportFocusLayers) == 0x000029, "Member 'UTickOptToolkitSettings::bSupportFocusLayers' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitSettings, FocusLayerNameOverrides) == 0x00002C, "Member 'UTickOptToolkitSettings::FocusLayerNameOverrides' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitSettings, BalancingFramesNum) == 0x0000AC, "Member 'UTickOptToolkitSettings::BalancingFramesNum' has a wrong offset!");

// Class TickOptToolkit.TickOptToolkitSubsystem
// 0x0158 (0x0188 - 0x0030)
class UTickOptToolkitSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_213E[0x8];                                     // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTickOptToolkitSettings*                Settings;                                          // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UTickOptToolkitFocusComponent*>  Focuses;                                           // 0x0040(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UTickOptToolkitTargetComponent*> SphereRangeTargets;                                // 0x0050(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_213F[0x20];                                    // 0x0060(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTickOptToolkitTargetComponent*> SphereZoneTargets;                                 // 0x0080(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2140[0x10];                                    // 0x0090(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTickOptToolkitTargetComponent*> BoxRangeTargets;                                   // 0x00A0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2141[0x20];                                    // 0x00B0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTickOptToolkitTargetComponent*> BoxZoneTargets;                                    // 0x00D0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2142[0x10];                                    // 0x00E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTickOptToolkitTargetComponent*> VisFrontTargets;                                   // 0x00F0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2143[0x20];                                    // 0x0100(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTickOptToolkitTargetComponent*> VisRenderedTargets;                                // 0x0120(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2144[0x58];                                    // 0x0130(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickOptToolkitSubsystem">();
	}
	static class UTickOptToolkitSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickOptToolkitSubsystem>();
	}
};
static_assert(alignof(UTickOptToolkitSubsystem) == 0x000008, "Wrong alignment on UTickOptToolkitSubsystem");
static_assert(sizeof(UTickOptToolkitSubsystem) == 0x000188, "Wrong size on UTickOptToolkitSubsystem");
static_assert(offsetof(UTickOptToolkitSubsystem, Settings) == 0x000038, "Member 'UTickOptToolkitSubsystem::Settings' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitSubsystem, Focuses) == 0x000040, "Member 'UTickOptToolkitSubsystem::Focuses' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitSubsystem, SphereRangeTargets) == 0x000050, "Member 'UTickOptToolkitSubsystem::SphereRangeTargets' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitSubsystem, SphereZoneTargets) == 0x000080, "Member 'UTickOptToolkitSubsystem::SphereZoneTargets' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitSubsystem, BoxRangeTargets) == 0x0000A0, "Member 'UTickOptToolkitSubsystem::BoxRangeTargets' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitSubsystem, BoxZoneTargets) == 0x0000D0, "Member 'UTickOptToolkitSubsystem::BoxZoneTargets' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitSubsystem, VisFrontTargets) == 0x0000F0, "Member 'UTickOptToolkitSubsystem::VisFrontTargets' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitSubsystem, VisRenderedTargets) == 0x000120, "Member 'UTickOptToolkitSubsystem::VisRenderedTargets' has a wrong offset!");

// Class TickOptToolkit.TickOptToolkitTargetComponent
// 0x0100 (0x03A0 - 0x02A0)
class UTickOptToolkitTargetComponent final : public USceneComponent
{
public:
	class UTickOptToolkitSubsystem*               Subsystem;                                         // 0x02A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2145[0x18];                                    // 0x02A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UActorComponent*>                TickControlledComponents;                          // 0x02C0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FTickControlledTimeline>        TickControlledTimelines;                           // 0x02D0(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UTickOptToolkitMimicComponent*>  Mimics;                                            // 0x02E0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	ETickOptToolkitDistanceMode                   DistanceMode;                                      // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2146[0x3];                                     // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereRadius;                                      // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                BoxExtents;                                        // 0x02F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BoxRotation;                                       // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BufferSize;                                        // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<float>                                 MidZoneSizes;                                      // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	ETickByVisibilityMode                         VisibilityMode;                                    // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bActorTickControl;                                 // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bComponentsTickControl;                            // 0x032A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bTimelinesTickControl;                             // 0x032B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSyncTimelinesToWorld;                             // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bForceExecuteFirstTick;                            // 0x032D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2147[0x2];                                     // 0x032E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTickOptToolkitTickSettings>    TickSettings;                                      // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FTickOptToolkitOptimizationLevel> OptimizationLevels;                                // 0x0340(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPrivate)
	int32                                         FocusLayerMask;                                    // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bDisableDistanceScale;                             // 0x0354(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bForced;                                           // 0x0355(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2148[0x2];                                     // 0x0356(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TickZone;                                          // 0x0358(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTickVisible;                                      // 0x035C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2149[0x3];                                     // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTickChanged;                                     // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTickZoneChanged;                                 // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTickVisibilityChanged;                           // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTickEnabledChanged;                              // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void AddComponentTickControl(class UActorComponent* Component);
	void AddTimelineTickControl(class UTimelineComponent* Timeline, bool bSyncToWorld);
	void Force(int32 InZone, bool bInVisible);
	void Release();
	void RemoveComponentTickControl(class UActorComponent* Component);
	void RemoveTimelineTickControl(class UTimelineComponent* Timeline);
	void SetActorTickControl(bool bInActorTickControl);
	void SetBoxExtents(const struct FVector& InExtents);
	void SetBoxRotation(float InRotation);
	void SetBufferSize(float InBufferSize);
	void SetComponentsTickControl(bool bInComponentsTickControl);
	void SetDisableDistanceScale(bool bInDisableDistanceScale);
	void SetDistanceMode(ETickOptToolkitDistanceMode InDistanceMode);
	void SetFocusLayerMask(int32 InFocusLayerMask);
	void SetForceExecuteFirstTick(bool bInForceExecuteFirstTick);
	void SetMidZoneSizes(const TArray<float>& InMidZoneSizes);
	void SetSphereRadius(float InRadius);
	void SetSyncTimelinesToWorld(bool bInSyncTimelinesToWorld);
	void SetTickSettings(const TArray<struct FTickOptToolkitTickSettings>& InTickSettings);
	void SetTimelinesTickControl(bool bInTimelinesTickControl);
	void SetVisibilityMode(ETickByVisibilityMode InVisibilityMode);

	struct FVector GetBoxExtents() const;
	float GetBoxRotation() const;
	float GetBufferSize() const;
	ETickOptToolkitDistanceMode GetDistanceMode() const;
	int32 GetFocusLayerMask() const;
	const TArray<float> GetMidZoneSizes() const;
	float GetSphereRadius() const;
	const TArray<struct FTickOptToolkitTickSettings> GetTickSettings() const;
	int32 GetTickZone() const;
	ETickByVisibilityMode GetVisibilityMode() const;
	bool IsActorTickControl() const;
	bool IsComponentsTickControl() const;
	bool IsForced() const;
	bool IsSyncTimelinesToWorld() const;
	bool IsTickVisible() const;
	bool IsTimelinesTickControl() const;
	bool ShouldDisableDistanceScale() const;
	bool ShouldForceExecuteFirstTick() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickOptToolkitTargetComponent">();
	}
	static class UTickOptToolkitTargetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickOptToolkitTargetComponent>();
	}
};
static_assert(alignof(UTickOptToolkitTargetComponent) == 0x000010, "Wrong alignment on UTickOptToolkitTargetComponent");
static_assert(sizeof(UTickOptToolkitTargetComponent) == 0x0003A0, "Wrong size on UTickOptToolkitTargetComponent");
static_assert(offsetof(UTickOptToolkitTargetComponent, Subsystem) == 0x0002A0, "Member 'UTickOptToolkitTargetComponent::Subsystem' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, TickControlledComponents) == 0x0002C0, "Member 'UTickOptToolkitTargetComponent::TickControlledComponents' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, TickControlledTimelines) == 0x0002D0, "Member 'UTickOptToolkitTargetComponent::TickControlledTimelines' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, Mimics) == 0x0002E0, "Member 'UTickOptToolkitTargetComponent::Mimics' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, DistanceMode) == 0x0002F0, "Member 'UTickOptToolkitTargetComponent::DistanceMode' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, SphereRadius) == 0x0002F4, "Member 'UTickOptToolkitTargetComponent::SphereRadius' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, BoxExtents) == 0x0002F8, "Member 'UTickOptToolkitTargetComponent::BoxExtents' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, BoxRotation) == 0x000310, "Member 'UTickOptToolkitTargetComponent::BoxRotation' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, BufferSize) == 0x000314, "Member 'UTickOptToolkitTargetComponent::BufferSize' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, MidZoneSizes) == 0x000318, "Member 'UTickOptToolkitTargetComponent::MidZoneSizes' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, VisibilityMode) == 0x000328, "Member 'UTickOptToolkitTargetComponent::VisibilityMode' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, bActorTickControl) == 0x000329, "Member 'UTickOptToolkitTargetComponent::bActorTickControl' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, bComponentsTickControl) == 0x00032A, "Member 'UTickOptToolkitTargetComponent::bComponentsTickControl' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, bTimelinesTickControl) == 0x00032B, "Member 'UTickOptToolkitTargetComponent::bTimelinesTickControl' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, bSyncTimelinesToWorld) == 0x00032C, "Member 'UTickOptToolkitTargetComponent::bSyncTimelinesToWorld' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, bForceExecuteFirstTick) == 0x00032D, "Member 'UTickOptToolkitTargetComponent::bForceExecuteFirstTick' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, TickSettings) == 0x000330, "Member 'UTickOptToolkitTargetComponent::TickSettings' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, OptimizationLevels) == 0x000340, "Member 'UTickOptToolkitTargetComponent::OptimizationLevels' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, FocusLayerMask) == 0x000350, "Member 'UTickOptToolkitTargetComponent::FocusLayerMask' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, bDisableDistanceScale) == 0x000354, "Member 'UTickOptToolkitTargetComponent::bDisableDistanceScale' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, bForced) == 0x000355, "Member 'UTickOptToolkitTargetComponent::bForced' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, TickZone) == 0x000358, "Member 'UTickOptToolkitTargetComponent::TickZone' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, bTickVisible) == 0x00035C, "Member 'UTickOptToolkitTargetComponent::bTickVisible' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, OnTickChanged) == 0x000360, "Member 'UTickOptToolkitTargetComponent::OnTickChanged' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, OnTickZoneChanged) == 0x000370, "Member 'UTickOptToolkitTargetComponent::OnTickZoneChanged' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, OnTickVisibilityChanged) == 0x000380, "Member 'UTickOptToolkitTargetComponent::OnTickVisibilityChanged' has a wrong offset!");
static_assert(offsetof(UTickOptToolkitTargetComponent, OnTickEnabledChanged) == 0x000390, "Member 'UTickOptToolkitTargetComponent::OnTickEnabledChanged' has a wrong offset!");

}

