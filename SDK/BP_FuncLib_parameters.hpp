#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FuncLib

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_FuncLib.BP_FuncLib_C.CombineTransform
// 0x0270 (0x0270 - 0x0000)
struct BP_FuncLib_C_CombineTransform final
{
public:
	struct FTransform                             A;                                                 // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             B;                                                 // 0x0060(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A1[0x8];                                     // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Out;                                               // 0x00D0(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35A2[0x8];                                     // 0x0208(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0210(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_CombineTransform) == 0x000010, "Wrong alignment on BP_FuncLib_C_CombineTransform");
static_assert(sizeof(BP_FuncLib_C_CombineTransform) == 0x000270, "Wrong size on BP_FuncLib_C_CombineTransform");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, A) == 0x000000, "Member 'BP_FuncLib_C_CombineTransform::A' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, B) == 0x000060, "Member 'BP_FuncLib_C_CombineTransform::B' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, __WorldContext) == 0x0000C0, "Member 'BP_FuncLib_C_CombineTransform::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, Out) == 0x0000D0, "Member 'BP_FuncLib_C_CombineTransform::Out' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, CallFunc_BreakTransform_Location) == 0x000130, "Member 'BP_FuncLib_C_CombineTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, CallFunc_BreakTransform_Rotation) == 0x000148, "Member 'BP_FuncLib_C_CombineTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, CallFunc_BreakTransform_Scale) == 0x000160, "Member 'BP_FuncLib_C_CombineTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, CallFunc_BreakTransform_Location_1) == 0x000178, "Member 'BP_FuncLib_C_CombineTransform::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, CallFunc_BreakTransform_Rotation_1) == 0x000190, "Member 'BP_FuncLib_C_CombineTransform::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, CallFunc_BreakTransform_Scale_1) == 0x0001A8, "Member 'BP_FuncLib_C_CombineTransform::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, CallFunc_Add_VectorVector_ReturnValue) == 0x0001C0, "Member 'BP_FuncLib_C_CombineTransform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0001D8, "Member 'BP_FuncLib_C_CombineTransform::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, CallFunc_ComposeRotators_ReturnValue) == 0x0001F0, "Member 'BP_FuncLib_C_CombineTransform::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_CombineTransform, CallFunc_MakeTransform_ReturnValue) == 0x000210, "Member 'BP_FuncLib_C_CombineTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.GetHitBaseInfo
// 0x01F8 (0x01F8 - 0x0000)
struct BP_FuncLib_C_GetHitBaseInfo final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UObject*                                __WorldContext;                                    // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x00F0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0108(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A3[0x2];                                     // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A4[0x4];                                     // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A5[0x4];                                     // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_GetHitBaseInfo) == 0x000008, "Wrong alignment on BP_FuncLib_C_GetHitBaseInfo");
static_assert(sizeof(BP_FuncLib_C_GetHitBaseInfo) == 0x0001F8, "Wrong size on BP_FuncLib_C_GetHitBaseInfo");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, Hit) == 0x000000, "Member 'BP_FuncLib_C_GetHitBaseInfo::Hit' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, __WorldContext) == 0x0000E8, "Member 'BP_FuncLib_C_GetHitBaseInfo::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, Location) == 0x0000F0, "Member 'BP_FuncLib_C_GetHitBaseInfo::Location' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, Normal) == 0x000108, "Member 'BP_FuncLib_C_GetHitBaseInfo::Normal' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_bBlockingHit) == 0x000120, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_bInitialOverlap) == 0x000121, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_Time) == 0x000124, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_Distance) == 0x000128, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_Location) == 0x000130, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_ImpactPoint) == 0x000148, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_Normal) == 0x000160, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_ImpactNormal) == 0x000178, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_PhysMat) == 0x000190, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_HitActor) == 0x000198, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_HitComponent) == 0x0001A0, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_HitBoneName) == 0x0001A8, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_BoneName) == 0x0001B0, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_HitItem) == 0x0001B8, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_ElementIndex) == 0x0001BC, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_FaceIndex) == 0x0001C0, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_TraceStart) == 0x0001C8, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetHitBaseInfo, CallFunc_BreakHitResult_TraceEnd) == 0x0001E0, "Member 'BP_FuncLib_C_GetHitBaseInfo::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.GetTransformLoc
// 0x00D0 (0x00D0 - 0x0000)
struct BP_FuncLib_C_GetTransformLoc final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loc;                                               // 0x0068(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_GetTransformLoc) == 0x000010, "Wrong alignment on BP_FuncLib_C_GetTransformLoc");
static_assert(sizeof(BP_FuncLib_C_GetTransformLoc) == 0x0000D0, "Wrong size on BP_FuncLib_C_GetTransformLoc");
static_assert(offsetof(BP_FuncLib_C_GetTransformLoc, Transform) == 0x000000, "Member 'BP_FuncLib_C_GetTransformLoc::Transform' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformLoc, __WorldContext) == 0x000060, "Member 'BP_FuncLib_C_GetTransformLoc::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformLoc, Loc) == 0x000068, "Member 'BP_FuncLib_C_GetTransformLoc::Loc' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformLoc, CallFunc_BreakTransform_Location) == 0x000080, "Member 'BP_FuncLib_C_GetTransformLoc::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformLoc, CallFunc_BreakTransform_Rotation) == 0x000098, "Member 'BP_FuncLib_C_GetTransformLoc::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformLoc, CallFunc_BreakTransform_Scale) == 0x0000B0, "Member 'BP_FuncLib_C_GetTransformLoc::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.GetTransformRot
// 0x00D0 (0x00D0 - 0x0000)
struct BP_FuncLib_C_GetTransformRot final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rot;                                               // 0x0068(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_GetTransformRot) == 0x000010, "Wrong alignment on BP_FuncLib_C_GetTransformRot");
static_assert(sizeof(BP_FuncLib_C_GetTransformRot) == 0x0000D0, "Wrong size on BP_FuncLib_C_GetTransformRot");
static_assert(offsetof(BP_FuncLib_C_GetTransformRot, Transform) == 0x000000, "Member 'BP_FuncLib_C_GetTransformRot::Transform' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformRot, __WorldContext) == 0x000060, "Member 'BP_FuncLib_C_GetTransformRot::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformRot, Rot) == 0x000068, "Member 'BP_FuncLib_C_GetTransformRot::Rot' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformRot, CallFunc_BreakTransform_Location) == 0x000080, "Member 'BP_FuncLib_C_GetTransformRot::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformRot, CallFunc_BreakTransform_Rotation) == 0x000098, "Member 'BP_FuncLib_C_GetTransformRot::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformRot, CallFunc_BreakTransform_Scale) == 0x0000B0, "Member 'BP_FuncLib_C_GetTransformRot::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.GetTransformScale
// 0x00D0 (0x00D0 - 0x0000)
struct BP_FuncLib_C_GetTransformScale final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Scale;                                             // 0x0068(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_GetTransformScale) == 0x000010, "Wrong alignment on BP_FuncLib_C_GetTransformScale");
static_assert(sizeof(BP_FuncLib_C_GetTransformScale) == 0x0000D0, "Wrong size on BP_FuncLib_C_GetTransformScale");
static_assert(offsetof(BP_FuncLib_C_GetTransformScale, Transform) == 0x000000, "Member 'BP_FuncLib_C_GetTransformScale::Transform' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformScale, __WorldContext) == 0x000060, "Member 'BP_FuncLib_C_GetTransformScale::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformScale, Scale) == 0x000068, "Member 'BP_FuncLib_C_GetTransformScale::Scale' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformScale, CallFunc_BreakTransform_Location) == 0x000080, "Member 'BP_FuncLib_C_GetTransformScale::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformScale, CallFunc_BreakTransform_Rotation) == 0x000098, "Member 'BP_FuncLib_C_GetTransformScale::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_GetTransformScale, CallFunc_BreakTransform_Scale) == 0x0000B0, "Member 'BP_FuncLib_C_GetTransformScale::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.RandomRot
// 0x00D8 (0x00D8 - 0x0000)
struct BP_FuncLib_C_RandomRot final
{
public:
	struct FRotator                               Min;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Max;                                               // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Out;                                               // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast_1;    // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast_2;    // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast_1;    // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast_2;    // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_RandomRot) == 0x000008, "Wrong alignment on BP_FuncLib_C_RandomRot");
static_assert(sizeof(BP_FuncLib_C_RandomRot) == 0x0000D8, "Wrong size on BP_FuncLib_C_RandomRot");
static_assert(offsetof(BP_FuncLib_C_RandomRot, Min) == 0x000000, "Member 'BP_FuncLib_C_RandomRot::Min' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, Max) == 0x000018, "Member 'BP_FuncLib_C_RandomRot::Max' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, __WorldContext) == 0x000030, "Member 'BP_FuncLib_C_RandomRot::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, Out) == 0x000038, "Member 'BP_FuncLib_C_RandomRot::Out' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'BP_FuncLib_C_RandomRot::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'BP_FuncLib_C_RandomRot::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'BP_FuncLib_C_RandomRot::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_BreakRotator_Roll_1) == 0x00005C, "Member 'BP_FuncLib_C_RandomRot::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_BreakRotator_Pitch_1) == 0x000060, "Member 'BP_FuncLib_C_RandomRot::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_BreakRotator_Yaw_1) == 0x000064, "Member 'BP_FuncLib_C_RandomRot::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_RandomFloatInRange_ReturnValue) == 0x000068, "Member 'BP_FuncLib_C_RandomRot::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000070, "Member 'BP_FuncLib_C_RandomRot::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000078, "Member 'BP_FuncLib_C_RandomRot::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_MakeRotator_ReturnValue) == 0x000080, "Member 'BP_FuncLib_C_RandomRot::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_RandomFloatInRange_Min_ImplicitCast) == 0x000098, "Member 'BP_FuncLib_C_RandomRot::CallFunc_RandomFloatInRange_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_RandomFloatInRange_Min_ImplicitCast_1) == 0x0000A0, "Member 'BP_FuncLib_C_RandomRot::CallFunc_RandomFloatInRange_Min_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_RandomFloatInRange_Min_ImplicitCast_2) == 0x0000A8, "Member 'BP_FuncLib_C_RandomRot::CallFunc_RandomFloatInRange_Min_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_RandomFloatInRange_Max_ImplicitCast) == 0x0000B0, "Member 'BP_FuncLib_C_RandomRot::CallFunc_RandomFloatInRange_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_RandomFloatInRange_Max_ImplicitCast_1) == 0x0000B8, "Member 'BP_FuncLib_C_RandomRot::CallFunc_RandomFloatInRange_Max_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_RandomFloatInRange_Max_ImplicitCast_2) == 0x0000C0, "Member 'BP_FuncLib_C_RandomRot::CallFunc_RandomFloatInRange_Max_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x0000C8, "Member 'BP_FuncLib_C_RandomRot::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0000CC, "Member 'BP_FuncLib_C_RandomRot::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRot, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0000D0, "Member 'BP_FuncLib_C_RandomRot::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.RandomRotSeeded
// 0x0098 (0x0098 - 0x0000)
struct BP_FuncLib_C_RandomRotSeeded final
{
public:
	struct FRotator                               Min;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Max;                                               // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRandomStream                          Seed;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Out;                                               // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue; // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_1; // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_2; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A6[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FuncLib_C_RandomRotSeeded) == 0x000008, "Wrong alignment on BP_FuncLib_C_RandomRotSeeded");
static_assert(sizeof(BP_FuncLib_C_RandomRotSeeded) == 0x000098, "Wrong size on BP_FuncLib_C_RandomRotSeeded");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, Min) == 0x000000, "Member 'BP_FuncLib_C_RandomRotSeeded::Min' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, Max) == 0x000018, "Member 'BP_FuncLib_C_RandomRotSeeded::Max' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, Seed) == 0x000030, "Member 'BP_FuncLib_C_RandomRotSeeded::Seed' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, __WorldContext) == 0x000038, "Member 'BP_FuncLib_C_RandomRotSeeded::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, Out) == 0x000040, "Member 'BP_FuncLib_C_RandomRotSeeded::Out' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, CallFunc_BreakRotator_Roll) == 0x000058, "Member 'BP_FuncLib_C_RandomRotSeeded::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, CallFunc_BreakRotator_Pitch) == 0x00005C, "Member 'BP_FuncLib_C_RandomRotSeeded::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, CallFunc_BreakRotator_Yaw) == 0x000060, "Member 'BP_FuncLib_C_RandomRotSeeded::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, CallFunc_BreakRotator_Roll_1) == 0x000064, "Member 'BP_FuncLib_C_RandomRotSeeded::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, CallFunc_BreakRotator_Pitch_1) == 0x000068, "Member 'BP_FuncLib_C_RandomRotSeeded::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, CallFunc_BreakRotator_Yaw_1) == 0x00006C, "Member 'BP_FuncLib_C_RandomRotSeeded::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, CallFunc_RandomFloatInRangeFromStream_ReturnValue) == 0x000070, "Member 'BP_FuncLib_C_RandomRotSeeded::CallFunc_RandomFloatInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, CallFunc_RandomFloatInRangeFromStream_ReturnValue_1) == 0x000074, "Member 'BP_FuncLib_C_RandomRotSeeded::CallFunc_RandomFloatInRangeFromStream_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, CallFunc_RandomFloatInRangeFromStream_ReturnValue_2) == 0x000078, "Member 'BP_FuncLib_C_RandomRotSeeded::CallFunc_RandomFloatInRangeFromStream_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomRotSeeded, CallFunc_MakeRotator_ReturnValue) == 0x000080, "Member 'BP_FuncLib_C_RandomRotSeeded::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.RandomVector
// 0x00B0 (0x00B0 - 0x0000)
struct BP_FuncLib_C_RandomVector final
{
public:
	struct FVector                                Min;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Max;                                               // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Out;                                               // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_RandomVector) == 0x000008, "Wrong alignment on BP_FuncLib_C_RandomVector");
static_assert(sizeof(BP_FuncLib_C_RandomVector) == 0x0000B0, "Wrong size on BP_FuncLib_C_RandomVector");
static_assert(offsetof(BP_FuncLib_C_RandomVector, Min) == 0x000000, "Member 'BP_FuncLib_C_RandomVector::Min' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, Max) == 0x000018, "Member 'BP_FuncLib_C_RandomVector::Max' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, __WorldContext) == 0x000030, "Member 'BP_FuncLib_C_RandomVector::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, Out) == 0x000038, "Member 'BP_FuncLib_C_RandomVector::Out' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, CallFunc_BreakVector_X) == 0x000050, "Member 'BP_FuncLib_C_RandomVector::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, CallFunc_BreakVector_Y) == 0x000058, "Member 'BP_FuncLib_C_RandomVector::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, CallFunc_BreakVector_Z) == 0x000060, "Member 'BP_FuncLib_C_RandomVector::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, CallFunc_BreakVector_X_1) == 0x000068, "Member 'BP_FuncLib_C_RandomVector::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, CallFunc_BreakVector_Y_1) == 0x000070, "Member 'BP_FuncLib_C_RandomVector::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, CallFunc_BreakVector_Z_1) == 0x000078, "Member 'BP_FuncLib_C_RandomVector::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, CallFunc_RandomFloatInRange_ReturnValue) == 0x000080, "Member 'BP_FuncLib_C_RandomVector::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000088, "Member 'BP_FuncLib_C_RandomVector::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000090, "Member 'BP_FuncLib_C_RandomVector::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVector, CallFunc_MakeVector_ReturnValue) == 0x000098, "Member 'BP_FuncLib_C_RandomVector::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.RandomVectorSeeded
// 0x00E0 (0x00E0 - 0x0000)
struct BP_FuncLib_C_RandomVectorSeeded final
{
public:
	struct FVector                                Min;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Max;                                               // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Seed;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Out;                                               // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue; // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_1; // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_2; // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A7[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast; // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_1; // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_2; // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast; // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_1; // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_2; // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_X_ImplicitCast;                // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Z_ImplicitCast;                // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Y_ImplicitCast;                // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_RandomVectorSeeded) == 0x000008, "Wrong alignment on BP_FuncLib_C_RandomVectorSeeded");
static_assert(sizeof(BP_FuncLib_C_RandomVectorSeeded) == 0x0000E0, "Wrong size on BP_FuncLib_C_RandomVectorSeeded");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, Min) == 0x000000, "Member 'BP_FuncLib_C_RandomVectorSeeded::Min' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, Max) == 0x000018, "Member 'BP_FuncLib_C_RandomVectorSeeded::Max' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, Seed) == 0x000030, "Member 'BP_FuncLib_C_RandomVectorSeeded::Seed' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, __WorldContext) == 0x000038, "Member 'BP_FuncLib_C_RandomVectorSeeded::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, Out) == 0x000040, "Member 'BP_FuncLib_C_RandomVectorSeeded::Out' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_BreakVector_X) == 0x000058, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_BreakVector_Y) == 0x000060, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_BreakVector_Z) == 0x000068, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_BreakVector_X_1) == 0x000070, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_BreakVector_Y_1) == 0x000078, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_BreakVector_Z_1) == 0x000080, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_RandomFloatInRangeFromStream_ReturnValue) == 0x000088, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_RandomFloatInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_RandomFloatInRangeFromStream_ReturnValue_1) == 0x00008C, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_RandomFloatInRangeFromStream_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_RandomFloatInRangeFromStream_ReturnValue_2) == 0x000090, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_RandomFloatInRangeFromStream_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_MakeVector_ReturnValue) == 0x000098, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast) == 0x0000B0, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_1) == 0x0000B4, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_2) == 0x0000B8, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast) == 0x0000BC, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_1) == 0x0000C0, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_2) == 0x0000C4, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_MakeVector_X_ImplicitCast) == 0x0000C8, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_MakeVector_X_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_MakeVector_Z_ImplicitCast) == 0x0000D0, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_MakeVector_Z_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RandomVectorSeeded, CallFunc_MakeVector_Y_ImplicitCast) == 0x0000D8, "Member 'BP_FuncLib_C_RandomVectorSeeded::CallFunc_MakeVector_Y_ImplicitCast' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.RelativeLocToWorld
// 0x0130 (0x0130 - 0x0000)
struct BP_FuncLib_C_RelativeLocToWorld final
{
public:
	struct FVector                                Relative;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A8[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             World;                                             // 0x0020(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Return;                                            // 0x0088(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_RelativeLocToWorld) == 0x000010, "Wrong alignment on BP_FuncLib_C_RelativeLocToWorld");
static_assert(sizeof(BP_FuncLib_C_RelativeLocToWorld) == 0x000130, "Wrong size on BP_FuncLib_C_RelativeLocToWorld");
static_assert(offsetof(BP_FuncLib_C_RelativeLocToWorld, Relative) == 0x000000, "Member 'BP_FuncLib_C_RelativeLocToWorld::Relative' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RelativeLocToWorld, World) == 0x000020, "Member 'BP_FuncLib_C_RelativeLocToWorld::World' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RelativeLocToWorld, __WorldContext) == 0x000080, "Member 'BP_FuncLib_C_RelativeLocToWorld::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RelativeLocToWorld, Return) == 0x000088, "Member 'BP_FuncLib_C_RelativeLocToWorld::Return' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RelativeLocToWorld, CallFunc_BreakTransform_Location) == 0x0000A0, "Member 'BP_FuncLib_C_RelativeLocToWorld::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RelativeLocToWorld, CallFunc_BreakTransform_Rotation) == 0x0000B8, "Member 'BP_FuncLib_C_RelativeLocToWorld::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RelativeLocToWorld, CallFunc_BreakTransform_Scale) == 0x0000D0, "Member 'BP_FuncLib_C_RelativeLocToWorld::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RelativeLocToWorld, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000E8, "Member 'BP_FuncLib_C_RelativeLocToWorld::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RelativeLocToWorld, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000100, "Member 'BP_FuncLib_C_RelativeLocToWorld::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RelativeLocToWorld, CallFunc_Add_VectorVector_ReturnValue) == 0x000118, "Member 'BP_FuncLib_C_RelativeLocToWorld::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.RotatorMirror
// 0x00D0 (0x00D0 - 0x0000)
struct BP_FuncLib_C_RotatorMirror final
{
public:
	struct FRotator                               Rotator;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Mirror;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Return;                                            // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A9[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2;   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_RotatorMirror) == 0x000008, "Wrong alignment on BP_FuncLib_C_RotatorMirror");
static_assert(sizeof(BP_FuncLib_C_RotatorMirror) == 0x0000D0, "Wrong size on BP_FuncLib_C_RotatorMirror");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, Rotator) == 0x000000, "Member 'BP_FuncLib_C_RotatorMirror::Rotator' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, Mirror) == 0x000018, "Member 'BP_FuncLib_C_RotatorMirror::Mirror' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, __WorldContext) == 0x000030, "Member 'BP_FuncLib_C_RotatorMirror::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, Return) == 0x000038, "Member 'BP_FuncLib_C_RotatorMirror::Return' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_BreakVector_X) == 0x000060, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_BreakVector_Y) == 0x000068, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_BreakVector_Z) == 0x000070, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000088, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_MakeRotator_ReturnValue) == 0x000090, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0000A8, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x0000B0, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2) == 0x0000B8, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x0000C0, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0000C4, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_RotatorMirror, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0000C8, "Member 'BP_FuncLib_C_RotatorMirror::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.SetTransformLoc
// 0x0130 (0x0130 - 0x0000)
struct BP_FuncLib_C_SetTransformLoc final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loc;                                               // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35AA[0x8];                                     // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_SetTransformLoc) == 0x000010, "Wrong alignment on BP_FuncLib_C_SetTransformLoc");
static_assert(sizeof(BP_FuncLib_C_SetTransformLoc) == 0x000130, "Wrong size on BP_FuncLib_C_SetTransformLoc");
static_assert(offsetof(BP_FuncLib_C_SetTransformLoc, Transform) == 0x000000, "Member 'BP_FuncLib_C_SetTransformLoc::Transform' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformLoc, Loc) == 0x000060, "Member 'BP_FuncLib_C_SetTransformLoc::Loc' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformLoc, __WorldContext) == 0x000078, "Member 'BP_FuncLib_C_SetTransformLoc::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformLoc, CallFunc_BreakTransform_Location) == 0x000080, "Member 'BP_FuncLib_C_SetTransformLoc::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformLoc, CallFunc_BreakTransform_Rotation) == 0x000098, "Member 'BP_FuncLib_C_SetTransformLoc::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformLoc, CallFunc_BreakTransform_Scale) == 0x0000B0, "Member 'BP_FuncLib_C_SetTransformLoc::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformLoc, CallFunc_MakeTransform_ReturnValue) == 0x0000D0, "Member 'BP_FuncLib_C_SetTransformLoc::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.SetTransformRot
// 0x0130 (0x0130 - 0x0000)
struct BP_FuncLib_C_SetTransformRot final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rot;                                               // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35AB[0x8];                                     // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_SetTransformRot) == 0x000010, "Wrong alignment on BP_FuncLib_C_SetTransformRot");
static_assert(sizeof(BP_FuncLib_C_SetTransformRot) == 0x000130, "Wrong size on BP_FuncLib_C_SetTransformRot");
static_assert(offsetof(BP_FuncLib_C_SetTransformRot, Transform) == 0x000000, "Member 'BP_FuncLib_C_SetTransformRot::Transform' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformRot, Rot) == 0x000060, "Member 'BP_FuncLib_C_SetTransformRot::Rot' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformRot, __WorldContext) == 0x000078, "Member 'BP_FuncLib_C_SetTransformRot::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformRot, CallFunc_BreakTransform_Location) == 0x000080, "Member 'BP_FuncLib_C_SetTransformRot::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformRot, CallFunc_BreakTransform_Rotation) == 0x000098, "Member 'BP_FuncLib_C_SetTransformRot::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformRot, CallFunc_BreakTransform_Scale) == 0x0000B0, "Member 'BP_FuncLib_C_SetTransformRot::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformRot, CallFunc_MakeTransform_ReturnValue) == 0x0000D0, "Member 'BP_FuncLib_C_SetTransformRot::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.SetTransformScale
// 0x0130 (0x0130 - 0x0000)
struct BP_FuncLib_C_SetTransformScale final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Scale;                                             // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35AC[0x8];                                     // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_SetTransformScale) == 0x000010, "Wrong alignment on BP_FuncLib_C_SetTransformScale");
static_assert(sizeof(BP_FuncLib_C_SetTransformScale) == 0x000130, "Wrong size on BP_FuncLib_C_SetTransformScale");
static_assert(offsetof(BP_FuncLib_C_SetTransformScale, Transform) == 0x000000, "Member 'BP_FuncLib_C_SetTransformScale::Transform' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformScale, Scale) == 0x000060, "Member 'BP_FuncLib_C_SetTransformScale::Scale' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformScale, __WorldContext) == 0x000078, "Member 'BP_FuncLib_C_SetTransformScale::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformScale, CallFunc_BreakTransform_Location) == 0x000080, "Member 'BP_FuncLib_C_SetTransformScale::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformScale, CallFunc_BreakTransform_Rotation) == 0x000098, "Member 'BP_FuncLib_C_SetTransformScale::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformScale, CallFunc_BreakTransform_Scale) == 0x0000B0, "Member 'BP_FuncLib_C_SetTransformScale::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_SetTransformScale, CallFunc_MakeTransform_ReturnValue) == 0x0000D0, "Member 'BP_FuncLib_C_SetTransformScale::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.TraceDown
// 0x0248 (0x0248 - 0x0000)
struct BP_FuncLib_C_TraceDown final
{
public:
	struct FVector                                Original;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35AD[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x0030(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0118(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0158(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_TraceDown) == 0x000008, "Wrong alignment on BP_FuncLib_C_TraceDown");
static_assert(sizeof(BP_FuncLib_C_TraceDown) == 0x000248, "Wrong size on BP_FuncLib_C_TraceDown");
static_assert(offsetof(BP_FuncLib_C_TraceDown, Original) == 0x000000, "Member 'BP_FuncLib_C_TraceDown::Original' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_TraceDown, Distance) == 0x000018, "Member 'BP_FuncLib_C_TraceDown::Distance' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_TraceDown, __WorldContext) == 0x000020, "Member 'BP_FuncLib_C_TraceDown::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_TraceDown, ReturnValue) == 0x000028, "Member 'BP_FuncLib_C_TraceDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_TraceDown, OutHit) == 0x000030, "Member 'BP_FuncLib_C_TraceDown::OutHit' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_TraceDown, Temp_object_Variable) == 0x000118, "Member 'BP_FuncLib_C_TraceDown::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_TraceDown, CallFunc_MakeVector_ReturnValue) == 0x000128, "Member 'BP_FuncLib_C_TraceDown::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_TraceDown, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000140, "Member 'BP_FuncLib_C_TraceDown::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_TraceDown, CallFunc_LineTraceSingle_OutHit) == 0x000158, "Member 'BP_FuncLib_C_TraceDown::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_TraceDown, CallFunc_LineTraceSingle_ReturnValue) == 0x000240, "Member 'BP_FuncLib_C_TraceDown::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function BP_FuncLib.BP_FuncLib_C.WorldLocToRelative
// 0x0130 (0x0130 - 0x0000)
struct BP_FuncLib_C_WorldLocToRelative final
{
public:
	struct FVector                                World;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35AE[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Relative;                                          // 0x0020(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Return;                                            // 0x0088(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FuncLib_C_WorldLocToRelative) == 0x000010, "Wrong alignment on BP_FuncLib_C_WorldLocToRelative");
static_assert(sizeof(BP_FuncLib_C_WorldLocToRelative) == 0x000130, "Wrong size on BP_FuncLib_C_WorldLocToRelative");
static_assert(offsetof(BP_FuncLib_C_WorldLocToRelative, World) == 0x000000, "Member 'BP_FuncLib_C_WorldLocToRelative::World' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_WorldLocToRelative, Relative) == 0x000020, "Member 'BP_FuncLib_C_WorldLocToRelative::Relative' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_WorldLocToRelative, __WorldContext) == 0x000080, "Member 'BP_FuncLib_C_WorldLocToRelative::__WorldContext' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_WorldLocToRelative, Return) == 0x000088, "Member 'BP_FuncLib_C_WorldLocToRelative::Return' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_WorldLocToRelative, CallFunc_BreakTransform_Location) == 0x0000A0, "Member 'BP_FuncLib_C_WorldLocToRelative::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_WorldLocToRelative, CallFunc_BreakTransform_Rotation) == 0x0000B8, "Member 'BP_FuncLib_C_WorldLocToRelative::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_WorldLocToRelative, CallFunc_BreakTransform_Scale) == 0x0000D0, "Member 'BP_FuncLib_C_WorldLocToRelative::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_WorldLocToRelative, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000E8, "Member 'BP_FuncLib_C_WorldLocToRelative::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_WorldLocToRelative, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000100, "Member 'BP_FuncLib_C_WorldLocToRelative::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FuncLib_C_WorldLocToRelative, CallFunc_Divide_VectorVector_ReturnValue) == 0x000118, "Member 'BP_FuncLib_C_WorldLocToRelative::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");

}

